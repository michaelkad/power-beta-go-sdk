/**
 * (C) Copyright IBM Corp. 2024.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package powervsv1_test

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/http/httptest"
	"os"
	"time"

	"github.com/IBM/go-sdk-core/v5/core"
	"github.com/go-openapi/strfmt"
	"github.com/michaelkad/power-beta-go-sdk/powervsv1"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

var _ = Describe(`PowervsV1`, func() {
	var testServer *httptest.Server
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(powervsService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(powervsService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
				URL: "https://powervsv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(powervsService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"POWERVS_URL": "https://powervsv1/api",
				"POWERVS_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				powervsService, serviceErr := powervsv1.NewPowervsV1UsingExternalConfig(&powervsv1.PowervsV1Options{
				})
				Expect(powervsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := powervsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != powervsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(powervsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(powervsService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				powervsService, serviceErr := powervsv1.NewPowervsV1UsingExternalConfig(&powervsv1.PowervsV1Options{
					URL: "https://testService/api",
				})
				Expect(powervsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(powervsService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := powervsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != powervsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(powervsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(powervsService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				powervsService, serviceErr := powervsv1.NewPowervsV1UsingExternalConfig(&powervsv1.PowervsV1Options{
				})
				err := powervsService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(powervsService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := powervsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != powervsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(powervsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(powervsService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"POWERVS_URL": "https://powervsv1/api",
				"POWERVS_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			powervsService, serviceErr := powervsv1.NewPowervsV1UsingExternalConfig(&powervsv1.PowervsV1Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(powervsService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"POWERVS_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			powervsService, serviceErr := powervsv1.NewPowervsV1UsingExternalConfig(&powervsv1.PowervsV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(powervsService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = powervsv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`ServiceBrokerAuthCallback(serviceBrokerAuthCallbackOptions *ServiceBrokerAuthCallbackOptions) - Operation response error`, func() {
		serviceBrokerAuthCallbackPath := "/auth/v1/callback"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthCallbackPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceBrokerAuthCallback with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthCallbackOptions model
				serviceBrokerAuthCallbackOptionsModel := new(powervsv1.ServiceBrokerAuthCallbackOptions)
				serviceBrokerAuthCallbackOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceBrokerAuthCallback(serviceBrokerAuthCallbackOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceBrokerAuthCallback(serviceBrokerAuthCallbackOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerAuthCallback(serviceBrokerAuthCallbackOptions *ServiceBrokerAuthCallbackOptions)`, func() {
		serviceBrokerAuthCallbackPath := "/auth/v1/callback"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthCallbackPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"accessToken": "AccessToken"}`)
				}))
			})
			It(`Invoke ServiceBrokerAuthCallback successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceBrokerAuthCallbackOptions model
				serviceBrokerAuthCallbackOptionsModel := new(powervsv1.ServiceBrokerAuthCallbackOptions)
				serviceBrokerAuthCallbackOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceBrokerAuthCallbackWithContext(ctx, serviceBrokerAuthCallbackOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceBrokerAuthCallback(serviceBrokerAuthCallbackOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceBrokerAuthCallbackWithContext(ctx, serviceBrokerAuthCallbackOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthCallbackPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"accessToken": "AccessToken"}`)
				}))
			})
			It(`Invoke ServiceBrokerAuthCallback successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceBrokerAuthCallback(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceBrokerAuthCallbackOptions model
				serviceBrokerAuthCallbackOptionsModel := new(powervsv1.ServiceBrokerAuthCallbackOptions)
				serviceBrokerAuthCallbackOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceBrokerAuthCallback(serviceBrokerAuthCallbackOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceBrokerAuthCallback with error: Operation request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthCallbackOptions model
				serviceBrokerAuthCallbackOptionsModel := new(powervsv1.ServiceBrokerAuthCallbackOptions)
				serviceBrokerAuthCallbackOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceBrokerAuthCallback(serviceBrokerAuthCallbackOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceBrokerAuthCallback successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthCallbackOptions model
				serviceBrokerAuthCallbackOptionsModel := new(powervsv1.ServiceBrokerAuthCallbackOptions)
				serviceBrokerAuthCallbackOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceBrokerAuthCallback(serviceBrokerAuthCallbackOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerAuthRegistrationCallback(serviceBrokerAuthRegistrationCallbackOptions *ServiceBrokerAuthRegistrationCallbackOptions) - Operation response error`, func() {
		serviceBrokerAuthRegistrationCallbackPath := "/auth/v1/callback-registration"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthRegistrationCallbackPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceBrokerAuthRegistrationCallback with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthRegistrationCallbackOptions model
				serviceBrokerAuthRegistrationCallbackOptionsModel := new(powervsv1.ServiceBrokerAuthRegistrationCallbackOptions)
				serviceBrokerAuthRegistrationCallbackOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceBrokerAuthRegistrationCallback(serviceBrokerAuthRegistrationCallbackOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceBrokerAuthRegistrationCallback(serviceBrokerAuthRegistrationCallbackOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerAuthRegistrationCallback(serviceBrokerAuthRegistrationCallbackOptions *ServiceBrokerAuthRegistrationCallbackOptions)`, func() {
		serviceBrokerAuthRegistrationCallbackPath := "/auth/v1/callback-registration"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthRegistrationCallbackPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"accessToken": "AccessToken"}`)
				}))
			})
			It(`Invoke ServiceBrokerAuthRegistrationCallback successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceBrokerAuthRegistrationCallbackOptions model
				serviceBrokerAuthRegistrationCallbackOptionsModel := new(powervsv1.ServiceBrokerAuthRegistrationCallbackOptions)
				serviceBrokerAuthRegistrationCallbackOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceBrokerAuthRegistrationCallbackWithContext(ctx, serviceBrokerAuthRegistrationCallbackOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceBrokerAuthRegistrationCallback(serviceBrokerAuthRegistrationCallbackOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceBrokerAuthRegistrationCallbackWithContext(ctx, serviceBrokerAuthRegistrationCallbackOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthRegistrationCallbackPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"accessToken": "AccessToken"}`)
				}))
			})
			It(`Invoke ServiceBrokerAuthRegistrationCallback successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceBrokerAuthRegistrationCallback(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceBrokerAuthRegistrationCallbackOptions model
				serviceBrokerAuthRegistrationCallbackOptionsModel := new(powervsv1.ServiceBrokerAuthRegistrationCallbackOptions)
				serviceBrokerAuthRegistrationCallbackOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceBrokerAuthRegistrationCallback(serviceBrokerAuthRegistrationCallbackOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceBrokerAuthRegistrationCallback with error: Operation request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthRegistrationCallbackOptions model
				serviceBrokerAuthRegistrationCallbackOptionsModel := new(powervsv1.ServiceBrokerAuthRegistrationCallbackOptions)
				serviceBrokerAuthRegistrationCallbackOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceBrokerAuthRegistrationCallback(serviceBrokerAuthRegistrationCallbackOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceBrokerAuthRegistrationCallback successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthRegistrationCallbackOptions model
				serviceBrokerAuthRegistrationCallbackOptionsModel := new(powervsv1.ServiceBrokerAuthRegistrationCallbackOptions)
				serviceBrokerAuthRegistrationCallbackOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceBrokerAuthRegistrationCallback(serviceBrokerAuthRegistrationCallbackOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerAuthDeviceCodePost(serviceBrokerAuthDeviceCodePostOptions *ServiceBrokerAuthDeviceCodePostOptions) - Operation response error`, func() {
		serviceBrokerAuthDeviceCodePostPath := "/auth/v1/device/code"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthDeviceCodePostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceBrokerAuthDeviceCodePost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthDeviceCodePostOptions model
				serviceBrokerAuthDeviceCodePostOptionsModel := new(powervsv1.ServiceBrokerAuthDeviceCodePostOptions)
				serviceBrokerAuthDeviceCodePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceBrokerAuthDeviceCodePost(serviceBrokerAuthDeviceCodePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceBrokerAuthDeviceCodePost(serviceBrokerAuthDeviceCodePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerAuthDeviceCodePost(serviceBrokerAuthDeviceCodePostOptions *ServiceBrokerAuthDeviceCodePostOptions)`, func() {
		serviceBrokerAuthDeviceCodePostPath := "/auth/v1/device/code"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthDeviceCodePostPath))
					Expect(req.Method).To(Equal("POST"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"deviceCode": "DeviceCode", "expiresIn": 9, "interval": 8, "userCode": "UserCode", "verificationURL": "VerificationURL"}`)
				}))
			})
			It(`Invoke ServiceBrokerAuthDeviceCodePost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceBrokerAuthDeviceCodePostOptions model
				serviceBrokerAuthDeviceCodePostOptionsModel := new(powervsv1.ServiceBrokerAuthDeviceCodePostOptions)
				serviceBrokerAuthDeviceCodePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceBrokerAuthDeviceCodePostWithContext(ctx, serviceBrokerAuthDeviceCodePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceBrokerAuthDeviceCodePost(serviceBrokerAuthDeviceCodePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceBrokerAuthDeviceCodePostWithContext(ctx, serviceBrokerAuthDeviceCodePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthDeviceCodePostPath))
					Expect(req.Method).To(Equal("POST"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"deviceCode": "DeviceCode", "expiresIn": 9, "interval": 8, "userCode": "UserCode", "verificationURL": "VerificationURL"}`)
				}))
			})
			It(`Invoke ServiceBrokerAuthDeviceCodePost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceBrokerAuthDeviceCodePost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceBrokerAuthDeviceCodePostOptions model
				serviceBrokerAuthDeviceCodePostOptionsModel := new(powervsv1.ServiceBrokerAuthDeviceCodePostOptions)
				serviceBrokerAuthDeviceCodePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceBrokerAuthDeviceCodePost(serviceBrokerAuthDeviceCodePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceBrokerAuthDeviceCodePost with error: Operation request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthDeviceCodePostOptions model
				serviceBrokerAuthDeviceCodePostOptionsModel := new(powervsv1.ServiceBrokerAuthDeviceCodePostOptions)
				serviceBrokerAuthDeviceCodePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceBrokerAuthDeviceCodePost(serviceBrokerAuthDeviceCodePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceBrokerAuthDeviceCodePost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthDeviceCodePostOptions model
				serviceBrokerAuthDeviceCodePostOptionsModel := new(powervsv1.ServiceBrokerAuthDeviceCodePostOptions)
				serviceBrokerAuthDeviceCodePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceBrokerAuthDeviceCodePost(serviceBrokerAuthDeviceCodePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerAuthDeviceTokenPost(serviceBrokerAuthDeviceTokenPostOptions *ServiceBrokerAuthDeviceTokenPostOptions) - Operation response error`, func() {
		serviceBrokerAuthDeviceTokenPostPath := "/auth/v1/device/token"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthDeviceTokenPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceBrokerAuthDeviceTokenPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthDeviceTokenPostOptions model
				serviceBrokerAuthDeviceTokenPostOptionsModel := new(powervsv1.ServiceBrokerAuthDeviceTokenPostOptions)
				serviceBrokerAuthDeviceTokenPostOptionsModel.DeviceCode = core.StringPtr("testString")
				serviceBrokerAuthDeviceTokenPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceBrokerAuthDeviceTokenPost(serviceBrokerAuthDeviceTokenPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceBrokerAuthDeviceTokenPost(serviceBrokerAuthDeviceTokenPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerAuthDeviceTokenPost(serviceBrokerAuthDeviceTokenPostOptions *ServiceBrokerAuthDeviceTokenPostOptions)`, func() {
		serviceBrokerAuthDeviceTokenPostPath := "/auth/v1/device/token"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthDeviceTokenPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"accessToken": "AccessToken", "expires": "2019-01-01T12:00:00.000Z", "refreshToken": "RefreshToken", "type": "Type"}`)
				}))
			})
			It(`Invoke ServiceBrokerAuthDeviceTokenPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceBrokerAuthDeviceTokenPostOptions model
				serviceBrokerAuthDeviceTokenPostOptionsModel := new(powervsv1.ServiceBrokerAuthDeviceTokenPostOptions)
				serviceBrokerAuthDeviceTokenPostOptionsModel.DeviceCode = core.StringPtr("testString")
				serviceBrokerAuthDeviceTokenPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceBrokerAuthDeviceTokenPostWithContext(ctx, serviceBrokerAuthDeviceTokenPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceBrokerAuthDeviceTokenPost(serviceBrokerAuthDeviceTokenPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceBrokerAuthDeviceTokenPostWithContext(ctx, serviceBrokerAuthDeviceTokenPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthDeviceTokenPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"accessToken": "AccessToken", "expires": "2019-01-01T12:00:00.000Z", "refreshToken": "RefreshToken", "type": "Type"}`)
				}))
			})
			It(`Invoke ServiceBrokerAuthDeviceTokenPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceBrokerAuthDeviceTokenPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceBrokerAuthDeviceTokenPostOptions model
				serviceBrokerAuthDeviceTokenPostOptionsModel := new(powervsv1.ServiceBrokerAuthDeviceTokenPostOptions)
				serviceBrokerAuthDeviceTokenPostOptionsModel.DeviceCode = core.StringPtr("testString")
				serviceBrokerAuthDeviceTokenPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceBrokerAuthDeviceTokenPost(serviceBrokerAuthDeviceTokenPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceBrokerAuthDeviceTokenPost with error: Operation request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthDeviceTokenPostOptions model
				serviceBrokerAuthDeviceTokenPostOptionsModel := new(powervsv1.ServiceBrokerAuthDeviceTokenPostOptions)
				serviceBrokerAuthDeviceTokenPostOptionsModel.DeviceCode = core.StringPtr("testString")
				serviceBrokerAuthDeviceTokenPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceBrokerAuthDeviceTokenPost(serviceBrokerAuthDeviceTokenPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceBrokerAuthDeviceTokenPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthDeviceTokenPostOptions model
				serviceBrokerAuthDeviceTokenPostOptionsModel := new(powervsv1.ServiceBrokerAuthDeviceTokenPostOptions)
				serviceBrokerAuthDeviceTokenPostOptionsModel.DeviceCode = core.StringPtr("testString")
				serviceBrokerAuthDeviceTokenPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceBrokerAuthDeviceTokenPost(serviceBrokerAuthDeviceTokenPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerAuthInfoToken(serviceBrokerAuthInfoTokenOptions *ServiceBrokerAuthInfoTokenOptions) - Operation response error`, func() {
		serviceBrokerAuthInfoTokenPath := "/auth/v1/info/token"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthInfoTokenPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceBrokerAuthInfoToken with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthInfoTokenOptions model
				serviceBrokerAuthInfoTokenOptionsModel := new(powervsv1.ServiceBrokerAuthInfoTokenOptions)
				serviceBrokerAuthInfoTokenOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceBrokerAuthInfoToken(serviceBrokerAuthInfoTokenOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceBrokerAuthInfoToken(serviceBrokerAuthInfoTokenOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerAuthInfoToken(serviceBrokerAuthInfoTokenOptions *ServiceBrokerAuthInfoTokenOptions)`, func() {
		serviceBrokerAuthInfoTokenPath := "/auth/v1/info/token"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthInfoTokenPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"expiresIn": 9, "serverTime": "2019-01-01T12:00:00.000Z", "token": {"accessToken": "AccessToken", "expires": "2019-01-01T12:00:00.000Z", "refreshToken": "RefreshToken", "type": "Type"}, "valid": false}`)
				}))
			})
			It(`Invoke ServiceBrokerAuthInfoToken successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceBrokerAuthInfoTokenOptions model
				serviceBrokerAuthInfoTokenOptionsModel := new(powervsv1.ServiceBrokerAuthInfoTokenOptions)
				serviceBrokerAuthInfoTokenOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceBrokerAuthInfoTokenWithContext(ctx, serviceBrokerAuthInfoTokenOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceBrokerAuthInfoToken(serviceBrokerAuthInfoTokenOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceBrokerAuthInfoTokenWithContext(ctx, serviceBrokerAuthInfoTokenOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthInfoTokenPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"expiresIn": 9, "serverTime": "2019-01-01T12:00:00.000Z", "token": {"accessToken": "AccessToken", "expires": "2019-01-01T12:00:00.000Z", "refreshToken": "RefreshToken", "type": "Type"}, "valid": false}`)
				}))
			})
			It(`Invoke ServiceBrokerAuthInfoToken successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceBrokerAuthInfoToken(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceBrokerAuthInfoTokenOptions model
				serviceBrokerAuthInfoTokenOptionsModel := new(powervsv1.ServiceBrokerAuthInfoTokenOptions)
				serviceBrokerAuthInfoTokenOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceBrokerAuthInfoToken(serviceBrokerAuthInfoTokenOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceBrokerAuthInfoToken with error: Operation request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthInfoTokenOptions model
				serviceBrokerAuthInfoTokenOptionsModel := new(powervsv1.ServiceBrokerAuthInfoTokenOptions)
				serviceBrokerAuthInfoTokenOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceBrokerAuthInfoToken(serviceBrokerAuthInfoTokenOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceBrokerAuthInfoToken successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthInfoTokenOptions model
				serviceBrokerAuthInfoTokenOptionsModel := new(powervsv1.ServiceBrokerAuthInfoTokenOptions)
				serviceBrokerAuthInfoTokenOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceBrokerAuthInfoToken(serviceBrokerAuthInfoTokenOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerAuthInfoUser(serviceBrokerAuthInfoUserOptions *ServiceBrokerAuthInfoUserOptions) - Operation response error`, func() {
		serviceBrokerAuthInfoUserPath := "/auth/v1/info/user"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthInfoUserPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceBrokerAuthInfoUser with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthInfoUserOptions model
				serviceBrokerAuthInfoUserOptionsModel := new(powervsv1.ServiceBrokerAuthInfoUserOptions)
				serviceBrokerAuthInfoUserOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceBrokerAuthInfoUser(serviceBrokerAuthInfoUserOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceBrokerAuthInfoUser(serviceBrokerAuthInfoUserOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerAuthInfoUser(serviceBrokerAuthInfoUserOptions *ServiceBrokerAuthInfoUserOptions)`, func() {
		serviceBrokerAuthInfoUserPath := "/auth/v1/info/user"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthInfoUserPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"email": "Email", "id": "ID", "imageURL": "ImageURL", "memberOf": ["MemberOf"], "name": "Name"}`)
				}))
			})
			It(`Invoke ServiceBrokerAuthInfoUser successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceBrokerAuthInfoUserOptions model
				serviceBrokerAuthInfoUserOptionsModel := new(powervsv1.ServiceBrokerAuthInfoUserOptions)
				serviceBrokerAuthInfoUserOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceBrokerAuthInfoUserWithContext(ctx, serviceBrokerAuthInfoUserOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceBrokerAuthInfoUser(serviceBrokerAuthInfoUserOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceBrokerAuthInfoUserWithContext(ctx, serviceBrokerAuthInfoUserOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthInfoUserPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"email": "Email", "id": "ID", "imageURL": "ImageURL", "memberOf": ["MemberOf"], "name": "Name"}`)
				}))
			})
			It(`Invoke ServiceBrokerAuthInfoUser successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceBrokerAuthInfoUser(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceBrokerAuthInfoUserOptions model
				serviceBrokerAuthInfoUserOptionsModel := new(powervsv1.ServiceBrokerAuthInfoUserOptions)
				serviceBrokerAuthInfoUserOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceBrokerAuthInfoUser(serviceBrokerAuthInfoUserOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceBrokerAuthInfoUser with error: Operation request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthInfoUserOptions model
				serviceBrokerAuthInfoUserOptionsModel := new(powervsv1.ServiceBrokerAuthInfoUserOptions)
				serviceBrokerAuthInfoUserOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceBrokerAuthInfoUser(serviceBrokerAuthInfoUserOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceBrokerAuthInfoUser successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthInfoUserOptions model
				serviceBrokerAuthInfoUserOptionsModel := new(powervsv1.ServiceBrokerAuthInfoUserOptions)
				serviceBrokerAuthInfoUserOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceBrokerAuthInfoUser(serviceBrokerAuthInfoUserOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerAuthLogin(serviceBrokerAuthLoginOptions *ServiceBrokerAuthLoginOptions) - Operation response error`, func() {
		serviceBrokerAuthLoginPath := "/auth/v1/login"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthLoginPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["user_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["redirect_url"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["access_type"]).To(Equal([]string{"online"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceBrokerAuthLogin with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthLoginOptions model
				serviceBrokerAuthLoginOptionsModel := new(powervsv1.ServiceBrokerAuthLoginOptions)
				serviceBrokerAuthLoginOptionsModel.UserID = core.StringPtr("testString")
				serviceBrokerAuthLoginOptionsModel.RedirectURL = core.StringPtr("testString")
				serviceBrokerAuthLoginOptionsModel.AccessType = core.StringPtr("online")
				serviceBrokerAuthLoginOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceBrokerAuthLogin(serviceBrokerAuthLoginOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceBrokerAuthLogin(serviceBrokerAuthLoginOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerAuthLogin(serviceBrokerAuthLoginOptions *ServiceBrokerAuthLoginOptions)`, func() {
		serviceBrokerAuthLoginPath := "/auth/v1/login"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthLoginPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["user_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["redirect_url"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["access_type"]).To(Equal([]string{"online"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"accessToken": "AccessToken"}`)
				}))
			})
			It(`Invoke ServiceBrokerAuthLogin successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceBrokerAuthLoginOptions model
				serviceBrokerAuthLoginOptionsModel := new(powervsv1.ServiceBrokerAuthLoginOptions)
				serviceBrokerAuthLoginOptionsModel.UserID = core.StringPtr("testString")
				serviceBrokerAuthLoginOptionsModel.RedirectURL = core.StringPtr("testString")
				serviceBrokerAuthLoginOptionsModel.AccessType = core.StringPtr("online")
				serviceBrokerAuthLoginOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceBrokerAuthLoginWithContext(ctx, serviceBrokerAuthLoginOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceBrokerAuthLogin(serviceBrokerAuthLoginOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceBrokerAuthLoginWithContext(ctx, serviceBrokerAuthLoginOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthLoginPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["user_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["redirect_url"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["access_type"]).To(Equal([]string{"online"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"accessToken": "AccessToken"}`)
				}))
			})
			It(`Invoke ServiceBrokerAuthLogin successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceBrokerAuthLogin(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceBrokerAuthLoginOptions model
				serviceBrokerAuthLoginOptionsModel := new(powervsv1.ServiceBrokerAuthLoginOptions)
				serviceBrokerAuthLoginOptionsModel.UserID = core.StringPtr("testString")
				serviceBrokerAuthLoginOptionsModel.RedirectURL = core.StringPtr("testString")
				serviceBrokerAuthLoginOptionsModel.AccessType = core.StringPtr("online")
				serviceBrokerAuthLoginOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceBrokerAuthLogin(serviceBrokerAuthLoginOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceBrokerAuthLogin with error: Operation request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthLoginOptions model
				serviceBrokerAuthLoginOptionsModel := new(powervsv1.ServiceBrokerAuthLoginOptions)
				serviceBrokerAuthLoginOptionsModel.UserID = core.StringPtr("testString")
				serviceBrokerAuthLoginOptionsModel.RedirectURL = core.StringPtr("testString")
				serviceBrokerAuthLoginOptionsModel.AccessType = core.StringPtr("online")
				serviceBrokerAuthLoginOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceBrokerAuthLogin(serviceBrokerAuthLoginOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceBrokerAuthLogin successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthLoginOptions model
				serviceBrokerAuthLoginOptionsModel := new(powervsv1.ServiceBrokerAuthLoginOptions)
				serviceBrokerAuthLoginOptionsModel.UserID = core.StringPtr("testString")
				serviceBrokerAuthLoginOptionsModel.RedirectURL = core.StringPtr("testString")
				serviceBrokerAuthLoginOptionsModel.AccessType = core.StringPtr("online")
				serviceBrokerAuthLoginOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceBrokerAuthLogin(serviceBrokerAuthLoginOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerAuthLogout(serviceBrokerAuthLogoutOptions *ServiceBrokerAuthLogoutOptions) - Operation response error`, func() {
		serviceBrokerAuthLogoutPath := "/auth/v1/logout"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthLogoutPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceBrokerAuthLogout with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthLogoutOptions model
				serviceBrokerAuthLogoutOptionsModel := new(powervsv1.ServiceBrokerAuthLogoutOptions)
				serviceBrokerAuthLogoutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceBrokerAuthLogout(serviceBrokerAuthLogoutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceBrokerAuthLogout(serviceBrokerAuthLogoutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerAuthLogout(serviceBrokerAuthLogoutOptions *ServiceBrokerAuthLogoutOptions)`, func() {
		serviceBrokerAuthLogoutPath := "/auth/v1/logout"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthLogoutPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke ServiceBrokerAuthLogout successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceBrokerAuthLogoutOptions model
				serviceBrokerAuthLogoutOptionsModel := new(powervsv1.ServiceBrokerAuthLogoutOptions)
				serviceBrokerAuthLogoutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceBrokerAuthLogoutWithContext(ctx, serviceBrokerAuthLogoutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceBrokerAuthLogout(serviceBrokerAuthLogoutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceBrokerAuthLogoutWithContext(ctx, serviceBrokerAuthLogoutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthLogoutPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke ServiceBrokerAuthLogout successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceBrokerAuthLogout(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceBrokerAuthLogoutOptions model
				serviceBrokerAuthLogoutOptionsModel := new(powervsv1.ServiceBrokerAuthLogoutOptions)
				serviceBrokerAuthLogoutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceBrokerAuthLogout(serviceBrokerAuthLogoutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceBrokerAuthLogout with error: Operation request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthLogoutOptions model
				serviceBrokerAuthLogoutOptionsModel := new(powervsv1.ServiceBrokerAuthLogoutOptions)
				serviceBrokerAuthLogoutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceBrokerAuthLogout(serviceBrokerAuthLogoutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceBrokerAuthLogout successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthLogoutOptions model
				serviceBrokerAuthLogoutOptionsModel := new(powervsv1.ServiceBrokerAuthLogoutOptions)
				serviceBrokerAuthLogoutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceBrokerAuthLogout(serviceBrokerAuthLogoutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerAuthRegistration(serviceBrokerAuthRegistrationOptions *ServiceBrokerAuthRegistrationOptions) - Operation response error`, func() {
		serviceBrokerAuthRegistrationPath := "/auth/v1/registration"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthRegistrationPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["tenant_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["entitlement_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["plan"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["icn"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["redirect_url"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceBrokerAuthRegistration with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthRegistrationOptions model
				serviceBrokerAuthRegistrationOptionsModel := new(powervsv1.ServiceBrokerAuthRegistrationOptions)
				serviceBrokerAuthRegistrationOptionsModel.TenantID = core.StringPtr("testString")
				serviceBrokerAuthRegistrationOptionsModel.EntitlementID = core.StringPtr("testString")
				serviceBrokerAuthRegistrationOptionsModel.Plan = core.StringPtr("testString")
				serviceBrokerAuthRegistrationOptionsModel.Icn = core.StringPtr("testString")
				serviceBrokerAuthRegistrationOptionsModel.Regions = []string{"testString"}
				serviceBrokerAuthRegistrationOptionsModel.RedirectURL = core.StringPtr("testString")
				serviceBrokerAuthRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceBrokerAuthRegistration(serviceBrokerAuthRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceBrokerAuthRegistration(serviceBrokerAuthRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerAuthRegistration(serviceBrokerAuthRegistrationOptions *ServiceBrokerAuthRegistrationOptions)`, func() {
		serviceBrokerAuthRegistrationPath := "/auth/v1/registration"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthRegistrationPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["tenant_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["entitlement_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["plan"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["icn"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["redirect_url"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"accessToken": "AccessToken"}`)
				}))
			})
			It(`Invoke ServiceBrokerAuthRegistration successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceBrokerAuthRegistrationOptions model
				serviceBrokerAuthRegistrationOptionsModel := new(powervsv1.ServiceBrokerAuthRegistrationOptions)
				serviceBrokerAuthRegistrationOptionsModel.TenantID = core.StringPtr("testString")
				serviceBrokerAuthRegistrationOptionsModel.EntitlementID = core.StringPtr("testString")
				serviceBrokerAuthRegistrationOptionsModel.Plan = core.StringPtr("testString")
				serviceBrokerAuthRegistrationOptionsModel.Icn = core.StringPtr("testString")
				serviceBrokerAuthRegistrationOptionsModel.Regions = []string{"testString"}
				serviceBrokerAuthRegistrationOptionsModel.RedirectURL = core.StringPtr("testString")
				serviceBrokerAuthRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceBrokerAuthRegistrationWithContext(ctx, serviceBrokerAuthRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceBrokerAuthRegistration(serviceBrokerAuthRegistrationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceBrokerAuthRegistrationWithContext(ctx, serviceBrokerAuthRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthRegistrationPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["tenant_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["entitlement_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["plan"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["icn"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["redirect_url"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"accessToken": "AccessToken"}`)
				}))
			})
			It(`Invoke ServiceBrokerAuthRegistration successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceBrokerAuthRegistration(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceBrokerAuthRegistrationOptions model
				serviceBrokerAuthRegistrationOptionsModel := new(powervsv1.ServiceBrokerAuthRegistrationOptions)
				serviceBrokerAuthRegistrationOptionsModel.TenantID = core.StringPtr("testString")
				serviceBrokerAuthRegistrationOptionsModel.EntitlementID = core.StringPtr("testString")
				serviceBrokerAuthRegistrationOptionsModel.Plan = core.StringPtr("testString")
				serviceBrokerAuthRegistrationOptionsModel.Icn = core.StringPtr("testString")
				serviceBrokerAuthRegistrationOptionsModel.Regions = []string{"testString"}
				serviceBrokerAuthRegistrationOptionsModel.RedirectURL = core.StringPtr("testString")
				serviceBrokerAuthRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceBrokerAuthRegistration(serviceBrokerAuthRegistrationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceBrokerAuthRegistration with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthRegistrationOptions model
				serviceBrokerAuthRegistrationOptionsModel := new(powervsv1.ServiceBrokerAuthRegistrationOptions)
				serviceBrokerAuthRegistrationOptionsModel.TenantID = core.StringPtr("testString")
				serviceBrokerAuthRegistrationOptionsModel.EntitlementID = core.StringPtr("testString")
				serviceBrokerAuthRegistrationOptionsModel.Plan = core.StringPtr("testString")
				serviceBrokerAuthRegistrationOptionsModel.Icn = core.StringPtr("testString")
				serviceBrokerAuthRegistrationOptionsModel.Regions = []string{"testString"}
				serviceBrokerAuthRegistrationOptionsModel.RedirectURL = core.StringPtr("testString")
				serviceBrokerAuthRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceBrokerAuthRegistration(serviceBrokerAuthRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ServiceBrokerAuthRegistrationOptions model with no property values
				serviceBrokerAuthRegistrationOptionsModelNew := new(powervsv1.ServiceBrokerAuthRegistrationOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.ServiceBrokerAuthRegistration(serviceBrokerAuthRegistrationOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceBrokerAuthRegistration successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthRegistrationOptions model
				serviceBrokerAuthRegistrationOptionsModel := new(powervsv1.ServiceBrokerAuthRegistrationOptions)
				serviceBrokerAuthRegistrationOptionsModel.TenantID = core.StringPtr("testString")
				serviceBrokerAuthRegistrationOptionsModel.EntitlementID = core.StringPtr("testString")
				serviceBrokerAuthRegistrationOptionsModel.Plan = core.StringPtr("testString")
				serviceBrokerAuthRegistrationOptionsModel.Icn = core.StringPtr("testString")
				serviceBrokerAuthRegistrationOptionsModel.Regions = []string{"testString"}
				serviceBrokerAuthRegistrationOptionsModel.RedirectURL = core.StringPtr("testString")
				serviceBrokerAuthRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceBrokerAuthRegistration(serviceBrokerAuthRegistrationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerAuthTokenPost(serviceBrokerAuthTokenPostOptions *ServiceBrokerAuthTokenPostOptions) - Operation response error`, func() {
		serviceBrokerAuthTokenPostPath := "/auth/v1/token"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthTokenPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceBrokerAuthTokenPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthTokenPostOptions model
				serviceBrokerAuthTokenPostOptionsModel := new(powervsv1.ServiceBrokerAuthTokenPostOptions)
				serviceBrokerAuthTokenPostOptionsModel.RefreshToken = core.StringPtr("testString")
				serviceBrokerAuthTokenPostOptionsModel.Source = core.StringPtr("cli")
				serviceBrokerAuthTokenPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceBrokerAuthTokenPost(serviceBrokerAuthTokenPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceBrokerAuthTokenPost(serviceBrokerAuthTokenPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerAuthTokenPost(serviceBrokerAuthTokenPostOptions *ServiceBrokerAuthTokenPostOptions)`, func() {
		serviceBrokerAuthTokenPostPath := "/auth/v1/token"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthTokenPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"accessToken": "AccessToken", "expires": "2019-01-01T12:00:00.000Z", "refreshToken": "RefreshToken", "type": "Type"}`)
				}))
			})
			It(`Invoke ServiceBrokerAuthTokenPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceBrokerAuthTokenPostOptions model
				serviceBrokerAuthTokenPostOptionsModel := new(powervsv1.ServiceBrokerAuthTokenPostOptions)
				serviceBrokerAuthTokenPostOptionsModel.RefreshToken = core.StringPtr("testString")
				serviceBrokerAuthTokenPostOptionsModel.Source = core.StringPtr("cli")
				serviceBrokerAuthTokenPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceBrokerAuthTokenPostWithContext(ctx, serviceBrokerAuthTokenPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceBrokerAuthTokenPost(serviceBrokerAuthTokenPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceBrokerAuthTokenPostWithContext(ctx, serviceBrokerAuthTokenPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerAuthTokenPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"accessToken": "AccessToken", "expires": "2019-01-01T12:00:00.000Z", "refreshToken": "RefreshToken", "type": "Type"}`)
				}))
			})
			It(`Invoke ServiceBrokerAuthTokenPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceBrokerAuthTokenPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceBrokerAuthTokenPostOptions model
				serviceBrokerAuthTokenPostOptionsModel := new(powervsv1.ServiceBrokerAuthTokenPostOptions)
				serviceBrokerAuthTokenPostOptionsModel.RefreshToken = core.StringPtr("testString")
				serviceBrokerAuthTokenPostOptionsModel.Source = core.StringPtr("cli")
				serviceBrokerAuthTokenPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceBrokerAuthTokenPost(serviceBrokerAuthTokenPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceBrokerAuthTokenPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthTokenPostOptions model
				serviceBrokerAuthTokenPostOptionsModel := new(powervsv1.ServiceBrokerAuthTokenPostOptions)
				serviceBrokerAuthTokenPostOptionsModel.RefreshToken = core.StringPtr("testString")
				serviceBrokerAuthTokenPostOptionsModel.Source = core.StringPtr("cli")
				serviceBrokerAuthTokenPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceBrokerAuthTokenPost(serviceBrokerAuthTokenPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ServiceBrokerAuthTokenPostOptions model with no property values
				serviceBrokerAuthTokenPostOptionsModelNew := new(powervsv1.ServiceBrokerAuthTokenPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.ServiceBrokerAuthTokenPost(serviceBrokerAuthTokenPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceBrokerAuthTokenPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerAuthTokenPostOptions model
				serviceBrokerAuthTokenPostOptionsModel := new(powervsv1.ServiceBrokerAuthTokenPostOptions)
				serviceBrokerAuthTokenPostOptionsModel.RefreshToken = core.StringPtr("testString")
				serviceBrokerAuthTokenPostOptionsModel.Source = core.StringPtr("cli")
				serviceBrokerAuthTokenPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceBrokerAuthTokenPost(serviceBrokerAuthTokenPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`BluemixServiceInstanceGet(bluemixServiceInstanceGetOptions *BluemixServiceInstanceGetOptions) - Operation response error`, func() {
		bluemixServiceInstanceGetPath := "/bluemix_v1/service_instances/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(bluemixServiceInstanceGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke BluemixServiceInstanceGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the BluemixServiceInstanceGetOptions model
				bluemixServiceInstanceGetOptionsModel := new(powervsv1.BluemixServiceInstanceGetOptions)
				bluemixServiceInstanceGetOptionsModel.InstanceID = core.StringPtr("testString")
				bluemixServiceInstanceGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.BluemixServiceInstanceGet(bluemixServiceInstanceGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.BluemixServiceInstanceGet(bluemixServiceInstanceGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`BluemixServiceInstanceGet(bluemixServiceInstanceGetOptions *BluemixServiceInstanceGetOptions)`, func() {
		bluemixServiceInstanceGetPath := "/bluemix_v1/service_instances/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(bluemixServiceInstanceGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"active": true, "enable": true, "last_active": 10}`)
				}))
			})
			It(`Invoke BluemixServiceInstanceGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the BluemixServiceInstanceGetOptions model
				bluemixServiceInstanceGetOptionsModel := new(powervsv1.BluemixServiceInstanceGetOptions)
				bluemixServiceInstanceGetOptionsModel.InstanceID = core.StringPtr("testString")
				bluemixServiceInstanceGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.BluemixServiceInstanceGetWithContext(ctx, bluemixServiceInstanceGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.BluemixServiceInstanceGet(bluemixServiceInstanceGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.BluemixServiceInstanceGetWithContext(ctx, bluemixServiceInstanceGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(bluemixServiceInstanceGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"active": true, "enable": true, "last_active": 10}`)
				}))
			})
			It(`Invoke BluemixServiceInstanceGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.BluemixServiceInstanceGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the BluemixServiceInstanceGetOptions model
				bluemixServiceInstanceGetOptionsModel := new(powervsv1.BluemixServiceInstanceGetOptions)
				bluemixServiceInstanceGetOptionsModel.InstanceID = core.StringPtr("testString")
				bluemixServiceInstanceGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.BluemixServiceInstanceGet(bluemixServiceInstanceGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke BluemixServiceInstanceGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the BluemixServiceInstanceGetOptions model
				bluemixServiceInstanceGetOptionsModel := new(powervsv1.BluemixServiceInstanceGetOptions)
				bluemixServiceInstanceGetOptionsModel.InstanceID = core.StringPtr("testString")
				bluemixServiceInstanceGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.BluemixServiceInstanceGet(bluemixServiceInstanceGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the BluemixServiceInstanceGetOptions model with no property values
				bluemixServiceInstanceGetOptionsModelNew := new(powervsv1.BluemixServiceInstanceGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.BluemixServiceInstanceGet(bluemixServiceInstanceGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke BluemixServiceInstanceGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the BluemixServiceInstanceGetOptions model
				bluemixServiceInstanceGetOptionsModel := new(powervsv1.BluemixServiceInstanceGetOptions)
				bluemixServiceInstanceGetOptionsModel.InstanceID = core.StringPtr("testString")
				bluemixServiceInstanceGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.BluemixServiceInstanceGet(bluemixServiceInstanceGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`BluemixServiceInstancePut(bluemixServiceInstancePutOptions *BluemixServiceInstancePutOptions) - Operation response error`, func() {
		bluemixServiceInstancePutPath := "/bluemix_v1/service_instances/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(bluemixServiceInstancePutPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke BluemixServiceInstancePut with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the BluemixServiceInstancePutOptions model
				bluemixServiceInstancePutOptionsModel := new(powervsv1.BluemixServiceInstancePutOptions)
				bluemixServiceInstancePutOptionsModel.InstanceID = core.StringPtr("testString")
				bluemixServiceInstancePutOptionsModel.Enabled = core.BoolPtr(true)
				bluemixServiceInstancePutOptionsModel.InitiatorID = core.StringPtr("testString")
				bluemixServiceInstancePutOptionsModel.ReasonCode = core.StringPtr("testString")
				bluemixServiceInstancePutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.BluemixServiceInstancePut(bluemixServiceInstancePutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.BluemixServiceInstancePut(bluemixServiceInstancePutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`BluemixServiceInstancePut(bluemixServiceInstancePutOptions *BluemixServiceInstancePutOptions)`, func() {
		bluemixServiceInstancePutPath := "/bluemix_v1/service_instances/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(bluemixServiceInstancePutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"active": true, "enable": true, "last_active": 10}`)
				}))
			})
			It(`Invoke BluemixServiceInstancePut successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the BluemixServiceInstancePutOptions model
				bluemixServiceInstancePutOptionsModel := new(powervsv1.BluemixServiceInstancePutOptions)
				bluemixServiceInstancePutOptionsModel.InstanceID = core.StringPtr("testString")
				bluemixServiceInstancePutOptionsModel.Enabled = core.BoolPtr(true)
				bluemixServiceInstancePutOptionsModel.InitiatorID = core.StringPtr("testString")
				bluemixServiceInstancePutOptionsModel.ReasonCode = core.StringPtr("testString")
				bluemixServiceInstancePutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.BluemixServiceInstancePutWithContext(ctx, bluemixServiceInstancePutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.BluemixServiceInstancePut(bluemixServiceInstancePutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.BluemixServiceInstancePutWithContext(ctx, bluemixServiceInstancePutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(bluemixServiceInstancePutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"active": true, "enable": true, "last_active": 10}`)
				}))
			})
			It(`Invoke BluemixServiceInstancePut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.BluemixServiceInstancePut(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the BluemixServiceInstancePutOptions model
				bluemixServiceInstancePutOptionsModel := new(powervsv1.BluemixServiceInstancePutOptions)
				bluemixServiceInstancePutOptionsModel.InstanceID = core.StringPtr("testString")
				bluemixServiceInstancePutOptionsModel.Enabled = core.BoolPtr(true)
				bluemixServiceInstancePutOptionsModel.InitiatorID = core.StringPtr("testString")
				bluemixServiceInstancePutOptionsModel.ReasonCode = core.StringPtr("testString")
				bluemixServiceInstancePutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.BluemixServiceInstancePut(bluemixServiceInstancePutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke BluemixServiceInstancePut with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the BluemixServiceInstancePutOptions model
				bluemixServiceInstancePutOptionsModel := new(powervsv1.BluemixServiceInstancePutOptions)
				bluemixServiceInstancePutOptionsModel.InstanceID = core.StringPtr("testString")
				bluemixServiceInstancePutOptionsModel.Enabled = core.BoolPtr(true)
				bluemixServiceInstancePutOptionsModel.InitiatorID = core.StringPtr("testString")
				bluemixServiceInstancePutOptionsModel.ReasonCode = core.StringPtr("testString")
				bluemixServiceInstancePutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.BluemixServiceInstancePut(bluemixServiceInstancePutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the BluemixServiceInstancePutOptions model with no property values
				bluemixServiceInstancePutOptionsModelNew := new(powervsv1.BluemixServiceInstancePutOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.BluemixServiceInstancePut(bluemixServiceInstancePutOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke BluemixServiceInstancePut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the BluemixServiceInstancePutOptions model
				bluemixServiceInstancePutOptionsModel := new(powervsv1.BluemixServiceInstancePutOptions)
				bluemixServiceInstancePutOptionsModel.InstanceID = core.StringPtr("testString")
				bluemixServiceInstancePutOptionsModel.Enabled = core.BoolPtr(true)
				bluemixServiceInstancePutOptionsModel.InitiatorID = core.StringPtr("testString")
				bluemixServiceInstancePutOptionsModel.ReasonCode = core.StringPtr("testString")
				bluemixServiceInstancePutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.BluemixServiceInstancePut(bluemixServiceInstancePutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CatalogGet(catalogGetOptions *CatalogGetOptions) - Operation response error`, func() {
		catalogGetPath := "/v2/catalog"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(catalogGetPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CatalogGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the CatalogGetOptions model
				catalogGetOptionsModel := new(powervsv1.CatalogGetOptions)
				catalogGetOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				catalogGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.CatalogGet(catalogGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.CatalogGet(catalogGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CatalogGet(catalogGetOptions *CatalogGetOptions)`, func() {
		catalogGetPath := "/v2/catalog"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(catalogGetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"services": [{"bindable": true, "dashboard_client": {"id": "ID", "redirect_uri": "RedirectURI", "secret": "Secret"}, "description": "Description", "iam_compatible": false, "id": "ID", "metadata": {}, "name": "Name", "plan_updateable": true, "plans": [{"bindable": true, "description": "Description", "free": true, "id": "ID", "metadata": {}, "name": "Name", "schemas": {"service_binding": {"create": {"parameters": {}}}, "service_instance": {"create": {"parameters": {}}, "update": {"parameters": {}}}}}], "provisionable": false, "rc_compatible": true, "requires": ["syslog_drain"], "tags": ["Tags"], "unique_api_key": true}]}`)
				}))
			})
			It(`Invoke CatalogGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the CatalogGetOptions model
				catalogGetOptionsModel := new(powervsv1.CatalogGetOptions)
				catalogGetOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				catalogGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.CatalogGetWithContext(ctx, catalogGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.CatalogGet(catalogGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.CatalogGetWithContext(ctx, catalogGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(catalogGetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"services": [{"bindable": true, "dashboard_client": {"id": "ID", "redirect_uri": "RedirectURI", "secret": "Secret"}, "description": "Description", "iam_compatible": false, "id": "ID", "metadata": {}, "name": "Name", "plan_updateable": true, "plans": [{"bindable": true, "description": "Description", "free": true, "id": "ID", "metadata": {}, "name": "Name", "schemas": {"service_binding": {"create": {"parameters": {}}}, "service_instance": {"create": {"parameters": {}}, "update": {"parameters": {}}}}}], "provisionable": false, "rc_compatible": true, "requires": ["syslog_drain"], "tags": ["Tags"], "unique_api_key": true}]}`)
				}))
			})
			It(`Invoke CatalogGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.CatalogGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CatalogGetOptions model
				catalogGetOptionsModel := new(powervsv1.CatalogGetOptions)
				catalogGetOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				catalogGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.CatalogGet(catalogGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CatalogGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the CatalogGetOptions model
				catalogGetOptionsModel := new(powervsv1.CatalogGetOptions)
				catalogGetOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				catalogGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.CatalogGet(catalogGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CatalogGetOptions model with no property values
				catalogGetOptionsModelNew := new(powervsv1.CatalogGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.CatalogGet(catalogGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke CatalogGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the CatalogGetOptions model
				catalogGetOptionsModel := new(powervsv1.CatalogGetOptions)
				catalogGetOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				catalogGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.CatalogGet(catalogGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DatacentersGetall(v1DatacentersGetallOptions *V1DatacentersGetallOptions) - Operation response error`, func() {
		v1DatacentersGetallPath := "/v1/datacenters"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1DatacentersGetallPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["Accept"]).ToNot(BeNil())
					Expect(req.Header["Accept"][0]).To(Equal(fmt.Sprintf("%v", "application/json")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke DatacentersGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1DatacentersGetallOptions model
				v1DatacentersGetallOptionsModel := new(powervsv1.V1DatacentersGetallOptions)
				v1DatacentersGetallOptionsModel.Accept = core.StringPtr("application/json")
				v1DatacentersGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.DatacentersGetall(v1DatacentersGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.DatacentersGetall(v1DatacentersGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DatacentersGetall(v1DatacentersGetallOptions *V1DatacentersGetallOptions)`, func() {
		v1DatacentersGetallPath := "/v1/datacenters"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1DatacentersGetallPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["Accept"]).ToNot(BeNil())
					Expect(req.Header["Accept"][0]).To(Equal(fmt.Sprintf("%v", "application/json")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"datacenters": [{"capabilities": {"mapKey": false}, "href": "Href", "location": {"region": "Region", "type": "Type", "url": "URL"}, "status": "active", "type": "off-premises"}]}`)
				}))
			})
			It(`Invoke DatacentersGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the V1DatacentersGetallOptions model
				v1DatacentersGetallOptionsModel := new(powervsv1.V1DatacentersGetallOptions)
				v1DatacentersGetallOptionsModel.Accept = core.StringPtr("application/json")
				v1DatacentersGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.DatacentersGetallWithContext(ctx, v1DatacentersGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.DatacentersGetall(v1DatacentersGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.DatacentersGetallWithContext(ctx, v1DatacentersGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1DatacentersGetallPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["Accept"]).ToNot(BeNil())
					Expect(req.Header["Accept"][0]).To(Equal(fmt.Sprintf("%v", "application/json")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"datacenters": [{"capabilities": {"mapKey": false}, "href": "Href", "location": {"region": "Region", "type": "Type", "url": "URL"}, "status": "active", "type": "off-premises"}]}`)
				}))
			})
			It(`Invoke DatacentersGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.DatacentersGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the V1DatacentersGetallOptions model
				v1DatacentersGetallOptionsModel := new(powervsv1.V1DatacentersGetallOptions)
				v1DatacentersGetallOptionsModel.Accept = core.StringPtr("application/json")
				v1DatacentersGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.DatacentersGetall(v1DatacentersGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke DatacentersGetall with error: Operation request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1DatacentersGetallOptions model
				v1DatacentersGetallOptionsModel := new(powervsv1.V1DatacentersGetallOptions)
				v1DatacentersGetallOptionsModel.Accept = core.StringPtr("application/json")
				v1DatacentersGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.DatacentersGetall(v1DatacentersGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke DatacentersGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1DatacentersGetallOptions model
				v1DatacentersGetallOptionsModel := new(powervsv1.V1DatacentersGetallOptions)
				v1DatacentersGetallOptionsModel.Accept = core.StringPtr("application/json")
				v1DatacentersGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.DatacentersGetall(v1DatacentersGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DatacentersGet(v1DatacentersGetOptions *V1DatacentersGetOptions) - Operation response error`, func() {
		v1DatacentersGetPath := "/v1/datacenters/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1DatacentersGetPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["Accept"]).ToNot(BeNil())
					Expect(req.Header["Accept"][0]).To(Equal(fmt.Sprintf("%v", "application/json")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke DatacentersGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1DatacentersGetOptions model
				v1DatacentersGetOptionsModel := new(powervsv1.V1DatacentersGetOptions)
				v1DatacentersGetOptionsModel.DatacenterRegion = core.StringPtr("testString")
				v1DatacentersGetOptionsModel.Accept = core.StringPtr("application/json")
				v1DatacentersGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.DatacentersGet(v1DatacentersGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.DatacentersGet(v1DatacentersGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DatacentersGet(v1DatacentersGetOptions *V1DatacentersGetOptions)`, func() {
		v1DatacentersGetPath := "/v1/datacenters/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1DatacentersGetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["Accept"]).ToNot(BeNil())
					Expect(req.Header["Accept"][0]).To(Equal(fmt.Sprintf("%v", "application/json")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"capabilities": {"mapKey": false}, "href": "Href", "location": {"region": "Region", "type": "Type", "url": "URL"}, "status": "active", "type": "off-premises"}`)
				}))
			})
			It(`Invoke DatacentersGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the V1DatacentersGetOptions model
				v1DatacentersGetOptionsModel := new(powervsv1.V1DatacentersGetOptions)
				v1DatacentersGetOptionsModel.DatacenterRegion = core.StringPtr("testString")
				v1DatacentersGetOptionsModel.Accept = core.StringPtr("application/json")
				v1DatacentersGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.DatacentersGetWithContext(ctx, v1DatacentersGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.DatacentersGet(v1DatacentersGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.DatacentersGetWithContext(ctx, v1DatacentersGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1DatacentersGetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["Accept"]).ToNot(BeNil())
					Expect(req.Header["Accept"][0]).To(Equal(fmt.Sprintf("%v", "application/json")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"capabilities": {"mapKey": false}, "href": "Href", "location": {"region": "Region", "type": "Type", "url": "URL"}, "status": "active", "type": "off-premises"}`)
				}))
			})
			It(`Invoke DatacentersGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.DatacentersGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the V1DatacentersGetOptions model
				v1DatacentersGetOptionsModel := new(powervsv1.V1DatacentersGetOptions)
				v1DatacentersGetOptionsModel.DatacenterRegion = core.StringPtr("testString")
				v1DatacentersGetOptionsModel.Accept = core.StringPtr("application/json")
				v1DatacentersGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.DatacentersGet(v1DatacentersGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke DatacentersGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1DatacentersGetOptions model
				v1DatacentersGetOptionsModel := new(powervsv1.V1DatacentersGetOptions)
				v1DatacentersGetOptionsModel.DatacenterRegion = core.StringPtr("testString")
				v1DatacentersGetOptionsModel.Accept = core.StringPtr("application/json")
				v1DatacentersGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.DatacentersGet(v1DatacentersGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the V1DatacentersGetOptions model with no property values
				v1DatacentersGetOptionsModelNew := new(powervsv1.V1DatacentersGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.DatacentersGet(v1DatacentersGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke DatacentersGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1DatacentersGetOptions model
				v1DatacentersGetOptionsModel := new(powervsv1.V1DatacentersGetOptions)
				v1DatacentersGetOptionsModel.DatacenterRegion = core.StringPtr("testString")
				v1DatacentersGetOptionsModel.Accept = core.StringPtr("application/json")
				v1DatacentersGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.DatacentersGet(v1DatacentersGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerHardwareplatformsGet(serviceBrokerHardwareplatformsGetOptions *ServiceBrokerHardwareplatformsGetOptions) - Operation response error`, func() {
		serviceBrokerHardwareplatformsGetPath := "/broker/v1/hardware-platforms"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerHardwareplatformsGetPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["regionZone"]).To(Equal([]string{"us-south"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceBrokerHardwareplatformsGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerHardwareplatformsGetOptions model
				serviceBrokerHardwareplatformsGetOptionsModel := new(powervsv1.ServiceBrokerHardwareplatformsGetOptions)
				serviceBrokerHardwareplatformsGetOptionsModel.RegionZone = core.StringPtr("us-south")
				serviceBrokerHardwareplatformsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceBrokerHardwareplatformsGet(serviceBrokerHardwareplatformsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceBrokerHardwareplatformsGet(serviceBrokerHardwareplatformsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerHardwareplatformsGet(serviceBrokerHardwareplatformsGetOptions *ServiceBrokerHardwareplatformsGetOptions)`, func() {
		serviceBrokerHardwareplatformsGetPath := "/broker/v1/hardware-platforms"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerHardwareplatformsGetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["regionZone"]).To(Equal([]string{"us-south"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"mapKey": {"description": "Description", "hostsResources": [{"cores": 5, "id": 2, "memory": 6}], "memory": 6, "processorMemoryRatio": 20, "processors": 10, "sharedProcessorStep": 19, "type": "Type"}}`)
				}))
			})
			It(`Invoke ServiceBrokerHardwareplatformsGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceBrokerHardwareplatformsGetOptions model
				serviceBrokerHardwareplatformsGetOptionsModel := new(powervsv1.ServiceBrokerHardwareplatformsGetOptions)
				serviceBrokerHardwareplatformsGetOptionsModel.RegionZone = core.StringPtr("us-south")
				serviceBrokerHardwareplatformsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceBrokerHardwareplatformsGetWithContext(ctx, serviceBrokerHardwareplatformsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceBrokerHardwareplatformsGet(serviceBrokerHardwareplatformsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceBrokerHardwareplatformsGetWithContext(ctx, serviceBrokerHardwareplatformsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerHardwareplatformsGetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["regionZone"]).To(Equal([]string{"us-south"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"mapKey": {"description": "Description", "hostsResources": [{"cores": 5, "id": 2, "memory": 6}], "memory": 6, "processorMemoryRatio": 20, "processors": 10, "sharedProcessorStep": 19, "type": "Type"}}`)
				}))
			})
			It(`Invoke ServiceBrokerHardwareplatformsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceBrokerHardwareplatformsGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceBrokerHardwareplatformsGetOptions model
				serviceBrokerHardwareplatformsGetOptionsModel := new(powervsv1.ServiceBrokerHardwareplatformsGetOptions)
				serviceBrokerHardwareplatformsGetOptionsModel.RegionZone = core.StringPtr("us-south")
				serviceBrokerHardwareplatformsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceBrokerHardwareplatformsGet(serviceBrokerHardwareplatformsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceBrokerHardwareplatformsGet with error: Operation request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerHardwareplatformsGetOptions model
				serviceBrokerHardwareplatformsGetOptionsModel := new(powervsv1.ServiceBrokerHardwareplatformsGetOptions)
				serviceBrokerHardwareplatformsGetOptionsModel.RegionZone = core.StringPtr("us-south")
				serviceBrokerHardwareplatformsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceBrokerHardwareplatformsGet(serviceBrokerHardwareplatformsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceBrokerHardwareplatformsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerHardwareplatformsGetOptions model
				serviceBrokerHardwareplatformsGetOptionsModel := new(powervsv1.ServiceBrokerHardwareplatformsGetOptions)
				serviceBrokerHardwareplatformsGetOptionsModel.RegionZone = core.StringPtr("us-south")
				serviceBrokerHardwareplatformsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceBrokerHardwareplatformsGet(serviceBrokerHardwareplatformsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`AvailableHosts(v1AvailableHostsOptions *V1AvailableHostsOptions) - Operation response error`, func() {
		v1AvailableHostsPath := "/v1/available-hosts"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1AvailableHostsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke AvailableHosts with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1AvailableHostsOptions model
				v1AvailableHostsOptionsModel := new(powervsv1.V1AvailableHostsOptions)
				v1AvailableHostsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.AvailableHosts(v1AvailableHostsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.AvailableHosts(v1AvailableHostsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`AvailableHosts(v1AvailableHostsOptions *V1AvailableHostsOptions)`, func() {
		v1AvailableHostsPath := "/v1/available-hosts"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1AvailableHostsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"mapKey": {"capacity": {"availableCore": 13, "availableMemory": 15}, "count": 5, "sysType": "SysType"}}`)
				}))
			})
			It(`Invoke AvailableHosts successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the V1AvailableHostsOptions model
				v1AvailableHostsOptionsModel := new(powervsv1.V1AvailableHostsOptions)
				v1AvailableHostsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.AvailableHostsWithContext(ctx, v1AvailableHostsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.AvailableHosts(v1AvailableHostsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.AvailableHostsWithContext(ctx, v1AvailableHostsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1AvailableHostsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"mapKey": {"capacity": {"availableCore": 13, "availableMemory": 15}, "count": 5, "sysType": "SysType"}}`)
				}))
			})
			It(`Invoke AvailableHosts successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.AvailableHosts(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the V1AvailableHostsOptions model
				v1AvailableHostsOptionsModel := new(powervsv1.V1AvailableHostsOptions)
				v1AvailableHostsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.AvailableHosts(v1AvailableHostsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke AvailableHosts with error: Operation request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1AvailableHostsOptions model
				v1AvailableHostsOptionsModel := new(powervsv1.V1AvailableHostsOptions)
				v1AvailableHostsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.AvailableHosts(v1AvailableHostsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke AvailableHosts successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1AvailableHostsOptions model
				v1AvailableHostsOptionsModel := new(powervsv1.V1AvailableHostsOptions)
				v1AvailableHostsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.AvailableHosts(v1AvailableHostsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`HostgroupsGet(v1HostgroupsGetOptions *V1HostgroupsGetOptions) - Operation response error`, func() {
		v1HostgroupsGetPath := "/v1/hostgroups"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1HostgroupsGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke HostgroupsGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1HostgroupsGetOptions model
				v1HostgroupsGetOptionsModel := new(powervsv1.V1HostgroupsGetOptions)
				v1HostgroupsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.HostgroupsGet(v1HostgroupsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.HostgroupsGet(v1HostgroupsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`HostgroupsGet(v1HostgroupsGetOptions *V1HostgroupsGetOptions)`, func() {
		v1HostgroupsGetPath := "/v1/hostgroups"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1HostgroupsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"creationDate": "2019-01-01T12:00:00.000Z", "hosts": ["Hosts"], "id": "ID", "name": "Name", "primary": "Primary", "secondaries": ["Secondaries"]}]`)
				}))
			})
			It(`Invoke HostgroupsGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the V1HostgroupsGetOptions model
				v1HostgroupsGetOptionsModel := new(powervsv1.V1HostgroupsGetOptions)
				v1HostgroupsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.HostgroupsGetWithContext(ctx, v1HostgroupsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.HostgroupsGet(v1HostgroupsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.HostgroupsGetWithContext(ctx, v1HostgroupsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1HostgroupsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"creationDate": "2019-01-01T12:00:00.000Z", "hosts": ["Hosts"], "id": "ID", "name": "Name", "primary": "Primary", "secondaries": ["Secondaries"]}]`)
				}))
			})
			It(`Invoke HostgroupsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.HostgroupsGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the V1HostgroupsGetOptions model
				v1HostgroupsGetOptionsModel := new(powervsv1.V1HostgroupsGetOptions)
				v1HostgroupsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.HostgroupsGet(v1HostgroupsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke HostgroupsGet with error: Operation request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1HostgroupsGetOptions model
				v1HostgroupsGetOptionsModel := new(powervsv1.V1HostgroupsGetOptions)
				v1HostgroupsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.HostgroupsGet(v1HostgroupsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke HostgroupsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1HostgroupsGetOptions model
				v1HostgroupsGetOptionsModel := new(powervsv1.V1HostgroupsGetOptions)
				v1HostgroupsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.HostgroupsGet(v1HostgroupsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`HostgroupsPost(v1HostgroupsPostOptions *V1HostgroupsPostOptions) - Operation response error`, func() {
		v1HostgroupsPostPath := "/v1/hostgroups"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1HostgroupsPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke HostgroupsPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the AddHost model
				addHostModel := new(powervsv1.AddHost)
				addHostModel.DisplayName = core.StringPtr("testString")
				addHostModel.SysType = core.StringPtr("testString")

				// Construct an instance of the Secondary model
				secondaryModel := new(powervsv1.Secondary)
				secondaryModel.Name = core.StringPtr("testString")
				secondaryModel.Workspace = core.StringPtr("testString")

				// Construct an instance of the V1HostgroupsPostOptions model
				v1HostgroupsPostOptionsModel := new(powervsv1.V1HostgroupsPostOptions)
				v1HostgroupsPostOptionsModel.Hosts = []powervsv1.AddHost{*addHostModel}
				v1HostgroupsPostOptionsModel.Name = core.StringPtr("testString")
				v1HostgroupsPostOptionsModel.Secondaries = []powervsv1.Secondary{*secondaryModel}
				v1HostgroupsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.HostgroupsPost(v1HostgroupsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.HostgroupsPost(v1HostgroupsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`HostgroupsPost(v1HostgroupsPostOptions *V1HostgroupsPostOptions)`, func() {
		v1HostgroupsPostPath := "/v1/hostgroups"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1HostgroupsPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"creationDate": "2019-01-01T12:00:00.000Z", "hosts": ["Hosts"], "id": "ID", "name": "Name", "primary": "Primary", "secondaries": ["Secondaries"]}`)
				}))
			})
			It(`Invoke HostgroupsPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the AddHost model
				addHostModel := new(powervsv1.AddHost)
				addHostModel.DisplayName = core.StringPtr("testString")
				addHostModel.SysType = core.StringPtr("testString")

				// Construct an instance of the Secondary model
				secondaryModel := new(powervsv1.Secondary)
				secondaryModel.Name = core.StringPtr("testString")
				secondaryModel.Workspace = core.StringPtr("testString")

				// Construct an instance of the V1HostgroupsPostOptions model
				v1HostgroupsPostOptionsModel := new(powervsv1.V1HostgroupsPostOptions)
				v1HostgroupsPostOptionsModel.Hosts = []powervsv1.AddHost{*addHostModel}
				v1HostgroupsPostOptionsModel.Name = core.StringPtr("testString")
				v1HostgroupsPostOptionsModel.Secondaries = []powervsv1.Secondary{*secondaryModel}
				v1HostgroupsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.HostgroupsPostWithContext(ctx, v1HostgroupsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.HostgroupsPost(v1HostgroupsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.HostgroupsPostWithContext(ctx, v1HostgroupsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1HostgroupsPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"creationDate": "2019-01-01T12:00:00.000Z", "hosts": ["Hosts"], "id": "ID", "name": "Name", "primary": "Primary", "secondaries": ["Secondaries"]}`)
				}))
			})
			It(`Invoke HostgroupsPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.HostgroupsPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the AddHost model
				addHostModel := new(powervsv1.AddHost)
				addHostModel.DisplayName = core.StringPtr("testString")
				addHostModel.SysType = core.StringPtr("testString")

				// Construct an instance of the Secondary model
				secondaryModel := new(powervsv1.Secondary)
				secondaryModel.Name = core.StringPtr("testString")
				secondaryModel.Workspace = core.StringPtr("testString")

				// Construct an instance of the V1HostgroupsPostOptions model
				v1HostgroupsPostOptionsModel := new(powervsv1.V1HostgroupsPostOptions)
				v1HostgroupsPostOptionsModel.Hosts = []powervsv1.AddHost{*addHostModel}
				v1HostgroupsPostOptionsModel.Name = core.StringPtr("testString")
				v1HostgroupsPostOptionsModel.Secondaries = []powervsv1.Secondary{*secondaryModel}
				v1HostgroupsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.HostgroupsPost(v1HostgroupsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke HostgroupsPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the AddHost model
				addHostModel := new(powervsv1.AddHost)
				addHostModel.DisplayName = core.StringPtr("testString")
				addHostModel.SysType = core.StringPtr("testString")

				// Construct an instance of the Secondary model
				secondaryModel := new(powervsv1.Secondary)
				secondaryModel.Name = core.StringPtr("testString")
				secondaryModel.Workspace = core.StringPtr("testString")

				// Construct an instance of the V1HostgroupsPostOptions model
				v1HostgroupsPostOptionsModel := new(powervsv1.V1HostgroupsPostOptions)
				v1HostgroupsPostOptionsModel.Hosts = []powervsv1.AddHost{*addHostModel}
				v1HostgroupsPostOptionsModel.Name = core.StringPtr("testString")
				v1HostgroupsPostOptionsModel.Secondaries = []powervsv1.Secondary{*secondaryModel}
				v1HostgroupsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.HostgroupsPost(v1HostgroupsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the V1HostgroupsPostOptions model with no property values
				v1HostgroupsPostOptionsModelNew := new(powervsv1.V1HostgroupsPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.HostgroupsPost(v1HostgroupsPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke HostgroupsPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the AddHost model
				addHostModel := new(powervsv1.AddHost)
				addHostModel.DisplayName = core.StringPtr("testString")
				addHostModel.SysType = core.StringPtr("testString")

				// Construct an instance of the Secondary model
				secondaryModel := new(powervsv1.Secondary)
				secondaryModel.Name = core.StringPtr("testString")
				secondaryModel.Workspace = core.StringPtr("testString")

				// Construct an instance of the V1HostgroupsPostOptions model
				v1HostgroupsPostOptionsModel := new(powervsv1.V1HostgroupsPostOptions)
				v1HostgroupsPostOptionsModel.Hosts = []powervsv1.AddHost{*addHostModel}
				v1HostgroupsPostOptionsModel.Name = core.StringPtr("testString")
				v1HostgroupsPostOptionsModel.Secondaries = []powervsv1.Secondary{*secondaryModel}
				v1HostgroupsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.HostgroupsPost(v1HostgroupsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`HostgroupsIDGet(v1HostgroupsIDGetOptions *V1HostgroupsIDGetOptions) - Operation response error`, func() {
		v1HostgroupsIDGetPath := "/v1/hostgroups/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1HostgroupsIDGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke HostgroupsIDGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1HostgroupsIDGetOptions model
				v1HostgroupsIDGetOptionsModel := new(powervsv1.V1HostgroupsIDGetOptions)
				v1HostgroupsIDGetOptionsModel.HostgroupID = core.StringPtr("testString")
				v1HostgroupsIDGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.HostgroupsIDGet(v1HostgroupsIDGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.HostgroupsIDGet(v1HostgroupsIDGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`HostgroupsIDGet(v1HostgroupsIDGetOptions *V1HostgroupsIDGetOptions)`, func() {
		v1HostgroupsIDGetPath := "/v1/hostgroups/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1HostgroupsIDGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"creationDate": "2019-01-01T12:00:00.000Z", "hosts": ["Hosts"], "id": "ID", "name": "Name", "primary": "Primary", "secondaries": ["Secondaries"]}`)
				}))
			})
			It(`Invoke HostgroupsIDGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the V1HostgroupsIDGetOptions model
				v1HostgroupsIDGetOptionsModel := new(powervsv1.V1HostgroupsIDGetOptions)
				v1HostgroupsIDGetOptionsModel.HostgroupID = core.StringPtr("testString")
				v1HostgroupsIDGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.HostgroupsIDGetWithContext(ctx, v1HostgroupsIDGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.HostgroupsIDGet(v1HostgroupsIDGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.HostgroupsIDGetWithContext(ctx, v1HostgroupsIDGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1HostgroupsIDGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"creationDate": "2019-01-01T12:00:00.000Z", "hosts": ["Hosts"], "id": "ID", "name": "Name", "primary": "Primary", "secondaries": ["Secondaries"]}`)
				}))
			})
			It(`Invoke HostgroupsIDGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.HostgroupsIDGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the V1HostgroupsIDGetOptions model
				v1HostgroupsIDGetOptionsModel := new(powervsv1.V1HostgroupsIDGetOptions)
				v1HostgroupsIDGetOptionsModel.HostgroupID = core.StringPtr("testString")
				v1HostgroupsIDGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.HostgroupsIDGet(v1HostgroupsIDGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke HostgroupsIDGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1HostgroupsIDGetOptions model
				v1HostgroupsIDGetOptionsModel := new(powervsv1.V1HostgroupsIDGetOptions)
				v1HostgroupsIDGetOptionsModel.HostgroupID = core.StringPtr("testString")
				v1HostgroupsIDGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.HostgroupsIDGet(v1HostgroupsIDGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the V1HostgroupsIDGetOptions model with no property values
				v1HostgroupsIDGetOptionsModelNew := new(powervsv1.V1HostgroupsIDGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.HostgroupsIDGet(v1HostgroupsIDGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke HostgroupsIDGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1HostgroupsIDGetOptions model
				v1HostgroupsIDGetOptionsModel := new(powervsv1.V1HostgroupsIDGetOptions)
				v1HostgroupsIDGetOptionsModel.HostgroupID = core.StringPtr("testString")
				v1HostgroupsIDGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.HostgroupsIDGet(v1HostgroupsIDGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`HostgroupsIDPut(v1HostgroupsIDPutOptions *V1HostgroupsIDPutOptions) - Operation response error`, func() {
		v1HostgroupsIDPutPath := "/v1/hostgroups/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1HostgroupsIDPutPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke HostgroupsIDPut with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the Secondary model
				secondaryModel := new(powervsv1.Secondary)
				secondaryModel.Name = core.StringPtr("testString")
				secondaryModel.Workspace = core.StringPtr("testString")

				// Construct an instance of the V1HostgroupsIDPutOptions model
				v1HostgroupsIDPutOptionsModel := new(powervsv1.V1HostgroupsIDPutOptions)
				v1HostgroupsIDPutOptionsModel.HostgroupID = core.StringPtr("testString")
				v1HostgroupsIDPutOptionsModel.Add = []powervsv1.Secondary{*secondaryModel}
				v1HostgroupsIDPutOptionsModel.Remove = core.StringPtr("testString")
				v1HostgroupsIDPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.HostgroupsIDPut(v1HostgroupsIDPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.HostgroupsIDPut(v1HostgroupsIDPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`HostgroupsIDPut(v1HostgroupsIDPutOptions *V1HostgroupsIDPutOptions)`, func() {
		v1HostgroupsIDPutPath := "/v1/hostgroups/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1HostgroupsIDPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"creationDate": "2019-01-01T12:00:00.000Z", "hosts": ["Hosts"], "id": "ID", "name": "Name", "primary": "Primary", "secondaries": ["Secondaries"]}`)
				}))
			})
			It(`Invoke HostgroupsIDPut successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the Secondary model
				secondaryModel := new(powervsv1.Secondary)
				secondaryModel.Name = core.StringPtr("testString")
				secondaryModel.Workspace = core.StringPtr("testString")

				// Construct an instance of the V1HostgroupsIDPutOptions model
				v1HostgroupsIDPutOptionsModel := new(powervsv1.V1HostgroupsIDPutOptions)
				v1HostgroupsIDPutOptionsModel.HostgroupID = core.StringPtr("testString")
				v1HostgroupsIDPutOptionsModel.Add = []powervsv1.Secondary{*secondaryModel}
				v1HostgroupsIDPutOptionsModel.Remove = core.StringPtr("testString")
				v1HostgroupsIDPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.HostgroupsIDPutWithContext(ctx, v1HostgroupsIDPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.HostgroupsIDPut(v1HostgroupsIDPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.HostgroupsIDPutWithContext(ctx, v1HostgroupsIDPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1HostgroupsIDPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"creationDate": "2019-01-01T12:00:00.000Z", "hosts": ["Hosts"], "id": "ID", "name": "Name", "primary": "Primary", "secondaries": ["Secondaries"]}`)
				}))
			})
			It(`Invoke HostgroupsIDPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.HostgroupsIDPut(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the Secondary model
				secondaryModel := new(powervsv1.Secondary)
				secondaryModel.Name = core.StringPtr("testString")
				secondaryModel.Workspace = core.StringPtr("testString")

				// Construct an instance of the V1HostgroupsIDPutOptions model
				v1HostgroupsIDPutOptionsModel := new(powervsv1.V1HostgroupsIDPutOptions)
				v1HostgroupsIDPutOptionsModel.HostgroupID = core.StringPtr("testString")
				v1HostgroupsIDPutOptionsModel.Add = []powervsv1.Secondary{*secondaryModel}
				v1HostgroupsIDPutOptionsModel.Remove = core.StringPtr("testString")
				v1HostgroupsIDPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.HostgroupsIDPut(v1HostgroupsIDPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke HostgroupsIDPut with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the Secondary model
				secondaryModel := new(powervsv1.Secondary)
				secondaryModel.Name = core.StringPtr("testString")
				secondaryModel.Workspace = core.StringPtr("testString")

				// Construct an instance of the V1HostgroupsIDPutOptions model
				v1HostgroupsIDPutOptionsModel := new(powervsv1.V1HostgroupsIDPutOptions)
				v1HostgroupsIDPutOptionsModel.HostgroupID = core.StringPtr("testString")
				v1HostgroupsIDPutOptionsModel.Add = []powervsv1.Secondary{*secondaryModel}
				v1HostgroupsIDPutOptionsModel.Remove = core.StringPtr("testString")
				v1HostgroupsIDPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.HostgroupsIDPut(v1HostgroupsIDPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the V1HostgroupsIDPutOptions model with no property values
				v1HostgroupsIDPutOptionsModelNew := new(powervsv1.V1HostgroupsIDPutOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.HostgroupsIDPut(v1HostgroupsIDPutOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke HostgroupsIDPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the Secondary model
				secondaryModel := new(powervsv1.Secondary)
				secondaryModel.Name = core.StringPtr("testString")
				secondaryModel.Workspace = core.StringPtr("testString")

				// Construct an instance of the V1HostgroupsIDPutOptions model
				v1HostgroupsIDPutOptionsModel := new(powervsv1.V1HostgroupsIDPutOptions)
				v1HostgroupsIDPutOptionsModel.HostgroupID = core.StringPtr("testString")
				v1HostgroupsIDPutOptionsModel.Add = []powervsv1.Secondary{*secondaryModel}
				v1HostgroupsIDPutOptionsModel.Remove = core.StringPtr("testString")
				v1HostgroupsIDPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.HostgroupsIDPut(v1HostgroupsIDPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`HostsGet(v1HostsGetOptions *V1HostsGetOptions) - Operation response error`, func() {
		v1HostsGetPath := "/v1/hosts"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1HostsGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke HostsGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1HostsGetOptions model
				v1HostsGetOptionsModel := new(powervsv1.V1HostsGetOptions)
				v1HostsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.HostsGet(v1HostsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.HostsGet(v1HostsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`HostsGet(v1HostsGetOptions *V1HostsGetOptions)`, func() {
		v1HostsGetPath := "/v1/hosts"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1HostsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"capacity": {"availableCore": 13, "availableMemory": 15, "reservedCore": 12, "reservedMemory": 14, "totalCore": 9, "totalMemory": 11, "usedCore": 8, "usedMemory": 10}, "displayName": "DisplayName", "hostgroup": "Hostgroup", "id": "ID", "state": "State", "status": "Status", "sysType": "SysType"}]`)
				}))
			})
			It(`Invoke HostsGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the V1HostsGetOptions model
				v1HostsGetOptionsModel := new(powervsv1.V1HostsGetOptions)
				v1HostsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.HostsGetWithContext(ctx, v1HostsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.HostsGet(v1HostsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.HostsGetWithContext(ctx, v1HostsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1HostsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"capacity": {"availableCore": 13, "availableMemory": 15, "reservedCore": 12, "reservedMemory": 14, "totalCore": 9, "totalMemory": 11, "usedCore": 8, "usedMemory": 10}, "displayName": "DisplayName", "hostgroup": "Hostgroup", "id": "ID", "state": "State", "status": "Status", "sysType": "SysType"}]`)
				}))
			})
			It(`Invoke HostsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.HostsGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the V1HostsGetOptions model
				v1HostsGetOptionsModel := new(powervsv1.V1HostsGetOptions)
				v1HostsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.HostsGet(v1HostsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke HostsGet with error: Operation request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1HostsGetOptions model
				v1HostsGetOptionsModel := new(powervsv1.V1HostsGetOptions)
				v1HostsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.HostsGet(v1HostsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke HostsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1HostsGetOptions model
				v1HostsGetOptionsModel := new(powervsv1.V1HostsGetOptions)
				v1HostsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.HostsGet(v1HostsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`HostsPost(v1HostsPostOptions *V1HostsPostOptions) - Operation response error`, func() {
		v1HostsPostPath := "/v1/hosts"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1HostsPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke HostsPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the AddHost model
				addHostModel := new(powervsv1.AddHost)
				addHostModel.DisplayName = core.StringPtr("testString")
				addHostModel.SysType = core.StringPtr("testString")

				// Construct an instance of the V1HostsPostOptions model
				v1HostsPostOptionsModel := new(powervsv1.V1HostsPostOptions)
				v1HostsPostOptionsModel.Host = addHostModel
				v1HostsPostOptionsModel.HostgroupID = core.StringPtr("testString")
				v1HostsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.HostsPost(v1HostsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.HostsPost(v1HostsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`HostsPost(v1HostsPostOptions *V1HostsPostOptions)`, func() {
		v1HostsPostPath := "/v1/hosts"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1HostsPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"capacity": {"availableCore": 13, "availableMemory": 15, "reservedCore": 12, "reservedMemory": 14, "totalCore": 9, "totalMemory": 11, "usedCore": 8, "usedMemory": 10}, "displayName": "DisplayName", "hostgroup": "Hostgroup", "id": "ID", "state": "State", "status": "Status", "sysType": "SysType"}`)
				}))
			})
			It(`Invoke HostsPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the AddHost model
				addHostModel := new(powervsv1.AddHost)
				addHostModel.DisplayName = core.StringPtr("testString")
				addHostModel.SysType = core.StringPtr("testString")

				// Construct an instance of the V1HostsPostOptions model
				v1HostsPostOptionsModel := new(powervsv1.V1HostsPostOptions)
				v1HostsPostOptionsModel.Host = addHostModel
				v1HostsPostOptionsModel.HostgroupID = core.StringPtr("testString")
				v1HostsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.HostsPostWithContext(ctx, v1HostsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.HostsPost(v1HostsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.HostsPostWithContext(ctx, v1HostsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1HostsPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"capacity": {"availableCore": 13, "availableMemory": 15, "reservedCore": 12, "reservedMemory": 14, "totalCore": 9, "totalMemory": 11, "usedCore": 8, "usedMemory": 10}, "displayName": "DisplayName", "hostgroup": "Hostgroup", "id": "ID", "state": "State", "status": "Status", "sysType": "SysType"}`)
				}))
			})
			It(`Invoke HostsPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.HostsPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the AddHost model
				addHostModel := new(powervsv1.AddHost)
				addHostModel.DisplayName = core.StringPtr("testString")
				addHostModel.SysType = core.StringPtr("testString")

				// Construct an instance of the V1HostsPostOptions model
				v1HostsPostOptionsModel := new(powervsv1.V1HostsPostOptions)
				v1HostsPostOptionsModel.Host = addHostModel
				v1HostsPostOptionsModel.HostgroupID = core.StringPtr("testString")
				v1HostsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.HostsPost(v1HostsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke HostsPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the AddHost model
				addHostModel := new(powervsv1.AddHost)
				addHostModel.DisplayName = core.StringPtr("testString")
				addHostModel.SysType = core.StringPtr("testString")

				// Construct an instance of the V1HostsPostOptions model
				v1HostsPostOptionsModel := new(powervsv1.V1HostsPostOptions)
				v1HostsPostOptionsModel.Host = addHostModel
				v1HostsPostOptionsModel.HostgroupID = core.StringPtr("testString")
				v1HostsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.HostsPost(v1HostsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the V1HostsPostOptions model with no property values
				v1HostsPostOptionsModelNew := new(powervsv1.V1HostsPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.HostsPost(v1HostsPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke HostsPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the AddHost model
				addHostModel := new(powervsv1.AddHost)
				addHostModel.DisplayName = core.StringPtr("testString")
				addHostModel.SysType = core.StringPtr("testString")

				// Construct an instance of the V1HostsPostOptions model
				v1HostsPostOptionsModel := new(powervsv1.V1HostsPostOptions)
				v1HostsPostOptionsModel.Host = addHostModel
				v1HostsPostOptionsModel.HostgroupID = core.StringPtr("testString")
				v1HostsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.HostsPost(v1HostsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`HostsIDDelete(v1HostsIDDeleteOptions *V1HostsIDDeleteOptions) - Operation response error`, func() {
		v1HostsIDDeletePath := "/v1/hosts/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1HostsIDDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke HostsIDDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1HostsIDDeleteOptions model
				v1HostsIDDeleteOptionsModel := new(powervsv1.V1HostsIDDeleteOptions)
				v1HostsIDDeleteOptionsModel.HostID = core.StringPtr("testString")
				v1HostsIDDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.HostsIDDelete(v1HostsIDDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.HostsIDDelete(v1HostsIDDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`HostsIDDelete(v1HostsIDDeleteOptions *V1HostsIDDeleteOptions)`, func() {
		v1HostsIDDeletePath := "/v1/hosts/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1HostsIDDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke HostsIDDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the V1HostsIDDeleteOptions model
				v1HostsIDDeleteOptionsModel := new(powervsv1.V1HostsIDDeleteOptions)
				v1HostsIDDeleteOptionsModel.HostID = core.StringPtr("testString")
				v1HostsIDDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.HostsIDDeleteWithContext(ctx, v1HostsIDDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.HostsIDDelete(v1HostsIDDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.HostsIDDeleteWithContext(ctx, v1HostsIDDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1HostsIDDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke HostsIDDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.HostsIDDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the V1HostsIDDeleteOptions model
				v1HostsIDDeleteOptionsModel := new(powervsv1.V1HostsIDDeleteOptions)
				v1HostsIDDeleteOptionsModel.HostID = core.StringPtr("testString")
				v1HostsIDDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.HostsIDDelete(v1HostsIDDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke HostsIDDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1HostsIDDeleteOptions model
				v1HostsIDDeleteOptionsModel := new(powervsv1.V1HostsIDDeleteOptions)
				v1HostsIDDeleteOptionsModel.HostID = core.StringPtr("testString")
				v1HostsIDDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.HostsIDDelete(v1HostsIDDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the V1HostsIDDeleteOptions model with no property values
				v1HostsIDDeleteOptionsModelNew := new(powervsv1.V1HostsIDDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.HostsIDDelete(v1HostsIDDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke HostsIDDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1HostsIDDeleteOptions model
				v1HostsIDDeleteOptionsModel := new(powervsv1.V1HostsIDDeleteOptions)
				v1HostsIDDeleteOptionsModel.HostID = core.StringPtr("testString")
				v1HostsIDDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.HostsIDDelete(v1HostsIDDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`HostsIDGet(v1HostsIDGetOptions *V1HostsIDGetOptions) - Operation response error`, func() {
		v1HostsIDGetPath := "/v1/hosts/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1HostsIDGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke HostsIDGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1HostsIDGetOptions model
				v1HostsIDGetOptionsModel := new(powervsv1.V1HostsIDGetOptions)
				v1HostsIDGetOptionsModel.HostID = core.StringPtr("testString")
				v1HostsIDGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.HostsIDGet(v1HostsIDGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.HostsIDGet(v1HostsIDGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`HostsIDGet(v1HostsIDGetOptions *V1HostsIDGetOptions)`, func() {
		v1HostsIDGetPath := "/v1/hosts/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1HostsIDGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"capacity": {"availableCore": 13, "availableMemory": 15, "reservedCore": 12, "reservedMemory": 14, "totalCore": 9, "totalMemory": 11, "usedCore": 8, "usedMemory": 10}, "displayName": "DisplayName", "hostgroup": "Hostgroup", "id": "ID", "state": "State", "status": "Status", "sysType": "SysType"}`)
				}))
			})
			It(`Invoke HostsIDGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the V1HostsIDGetOptions model
				v1HostsIDGetOptionsModel := new(powervsv1.V1HostsIDGetOptions)
				v1HostsIDGetOptionsModel.HostID = core.StringPtr("testString")
				v1HostsIDGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.HostsIDGetWithContext(ctx, v1HostsIDGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.HostsIDGet(v1HostsIDGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.HostsIDGetWithContext(ctx, v1HostsIDGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1HostsIDGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"capacity": {"availableCore": 13, "availableMemory": 15, "reservedCore": 12, "reservedMemory": 14, "totalCore": 9, "totalMemory": 11, "usedCore": 8, "usedMemory": 10}, "displayName": "DisplayName", "hostgroup": "Hostgroup", "id": "ID", "state": "State", "status": "Status", "sysType": "SysType"}`)
				}))
			})
			It(`Invoke HostsIDGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.HostsIDGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the V1HostsIDGetOptions model
				v1HostsIDGetOptionsModel := new(powervsv1.V1HostsIDGetOptions)
				v1HostsIDGetOptionsModel.HostID = core.StringPtr("testString")
				v1HostsIDGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.HostsIDGet(v1HostsIDGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke HostsIDGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1HostsIDGetOptions model
				v1HostsIDGetOptionsModel := new(powervsv1.V1HostsIDGetOptions)
				v1HostsIDGetOptionsModel.HostID = core.StringPtr("testString")
				v1HostsIDGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.HostsIDGet(v1HostsIDGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the V1HostsIDGetOptions model with no property values
				v1HostsIDGetOptionsModelNew := new(powervsv1.V1HostsIDGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.HostsIDGet(v1HostsIDGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke HostsIDGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1HostsIDGetOptions model
				v1HostsIDGetOptionsModel := new(powervsv1.V1HostsIDGetOptions)
				v1HostsIDGetOptionsModel.HostID = core.StringPtr("testString")
				v1HostsIDGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.HostsIDGet(v1HostsIDGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`HostsIDPut(v1HostsIDPutOptions *V1HostsIDPutOptions) - Operation response error`, func() {
		v1HostsIDPutPath := "/v1/hosts/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1HostsIDPutPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke HostsIDPut with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1HostsIDPutOptions model
				v1HostsIDPutOptionsModel := new(powervsv1.V1HostsIDPutOptions)
				v1HostsIDPutOptionsModel.HostID = core.StringPtr("testString")
				v1HostsIDPutOptionsModel.DisplayName = core.StringPtr("testString")
				v1HostsIDPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.HostsIDPut(v1HostsIDPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.HostsIDPut(v1HostsIDPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`HostsIDPut(v1HostsIDPutOptions *V1HostsIDPutOptions)`, func() {
		v1HostsIDPutPath := "/v1/hosts/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1HostsIDPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"capacity": {"availableCore": 13, "availableMemory": 15, "reservedCore": 12, "reservedMemory": 14, "totalCore": 9, "totalMemory": 11, "usedCore": 8, "usedMemory": 10}, "displayName": "DisplayName", "hostgroup": "Hostgroup", "id": "ID", "state": "State", "status": "Status", "sysType": "SysType"}`)
				}))
			})
			It(`Invoke HostsIDPut successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the V1HostsIDPutOptions model
				v1HostsIDPutOptionsModel := new(powervsv1.V1HostsIDPutOptions)
				v1HostsIDPutOptionsModel.HostID = core.StringPtr("testString")
				v1HostsIDPutOptionsModel.DisplayName = core.StringPtr("testString")
				v1HostsIDPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.HostsIDPutWithContext(ctx, v1HostsIDPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.HostsIDPut(v1HostsIDPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.HostsIDPutWithContext(ctx, v1HostsIDPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1HostsIDPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"capacity": {"availableCore": 13, "availableMemory": 15, "reservedCore": 12, "reservedMemory": 14, "totalCore": 9, "totalMemory": 11, "usedCore": 8, "usedMemory": 10}, "displayName": "DisplayName", "hostgroup": "Hostgroup", "id": "ID", "state": "State", "status": "Status", "sysType": "SysType"}`)
				}))
			})
			It(`Invoke HostsIDPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.HostsIDPut(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the V1HostsIDPutOptions model
				v1HostsIDPutOptionsModel := new(powervsv1.V1HostsIDPutOptions)
				v1HostsIDPutOptionsModel.HostID = core.StringPtr("testString")
				v1HostsIDPutOptionsModel.DisplayName = core.StringPtr("testString")
				v1HostsIDPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.HostsIDPut(v1HostsIDPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke HostsIDPut with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1HostsIDPutOptions model
				v1HostsIDPutOptionsModel := new(powervsv1.V1HostsIDPutOptions)
				v1HostsIDPutOptionsModel.HostID = core.StringPtr("testString")
				v1HostsIDPutOptionsModel.DisplayName = core.StringPtr("testString")
				v1HostsIDPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.HostsIDPut(v1HostsIDPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the V1HostsIDPutOptions model with no property values
				v1HostsIDPutOptionsModelNew := new(powervsv1.V1HostsIDPutOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.HostsIDPut(v1HostsIDPutOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke HostsIDPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1HostsIDPutOptions model
				v1HostsIDPutOptionsModel := new(powervsv1.V1HostsIDPutOptions)
				v1HostsIDPutOptionsModel.HostID = core.StringPtr("testString")
				v1HostsIDPutOptionsModel.DisplayName = core.StringPtr("testString")
				v1HostsIDPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.HostsIDPut(v1HostsIDPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerHealthHead(serviceBrokerHealthHeadOptions *ServiceBrokerHealthHeadOptions)`, func() {
		serviceBrokerHealthHeadPath := "/broker/v1/health"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerHealthHeadPath))
					Expect(req.Method).To(Equal("HEAD"))

					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceBrokerHealthHead successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := powervsService.ServiceBrokerHealthHead(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the ServiceBrokerHealthHeadOptions model
				serviceBrokerHealthHeadOptionsModel := new(powervsv1.ServiceBrokerHealthHeadOptions)
				serviceBrokerHealthHeadOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = powervsService.ServiceBrokerHealthHead(serviceBrokerHealthHeadOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke ServiceBrokerHealthHead with error: Operation request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerHealthHeadOptions model
				serviceBrokerHealthHeadOptionsModel := new(powervsv1.ServiceBrokerHealthHeadOptions)
				serviceBrokerHealthHeadOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := powervsService.ServiceBrokerHealthHead(serviceBrokerHealthHeadOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerHealth(serviceBrokerHealthOptions *ServiceBrokerHealthOptions) - Operation response error`, func() {
		serviceBrokerHealthPath := "/broker/v1/health"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerHealthPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceBrokerHealth with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerHealthOptions model
				serviceBrokerHealthOptionsModel := new(powervsv1.ServiceBrokerHealthOptions)
				serviceBrokerHealthOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceBrokerHealth(serviceBrokerHealthOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceBrokerHealth(serviceBrokerHealthOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerHealth(serviceBrokerHealthOptions *ServiceBrokerHealthOptions)`, func() {
		serviceBrokerHealthPath := "/broker/v1/health"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerHealthPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"status": "Status"}`)
				}))
			})
			It(`Invoke ServiceBrokerHealth successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceBrokerHealthOptions model
				serviceBrokerHealthOptionsModel := new(powervsv1.ServiceBrokerHealthOptions)
				serviceBrokerHealthOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceBrokerHealthWithContext(ctx, serviceBrokerHealthOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceBrokerHealth(serviceBrokerHealthOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceBrokerHealthWithContext(ctx, serviceBrokerHealthOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerHealthPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"status": "Status"}`)
				}))
			})
			It(`Invoke ServiceBrokerHealth successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceBrokerHealth(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceBrokerHealthOptions model
				serviceBrokerHealthOptionsModel := new(powervsv1.ServiceBrokerHealthOptions)
				serviceBrokerHealthOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceBrokerHealth(serviceBrokerHealthOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceBrokerHealth with error: Operation request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerHealthOptions model
				serviceBrokerHealthOptionsModel := new(powervsv1.ServiceBrokerHealthOptions)
				serviceBrokerHealthOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceBrokerHealth(serviceBrokerHealthOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceBrokerHealth successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerHealthOptions model
				serviceBrokerHealthOptionsModel := new(powervsv1.ServiceBrokerHealthOptions)
				serviceBrokerHealthOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceBrokerHealth(serviceBrokerHealthOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerTestTimeout(serviceBrokerTestTimeoutOptions *ServiceBrokerTestTimeoutOptions) - Operation response error`, func() {
		serviceBrokerTestTimeoutPath := "/broker/v1/test/timeout"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerTestTimeoutPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["t"]).To(Equal([]string{fmt.Sprint(int64(38))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceBrokerTestTimeout with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerTestTimeoutOptions model
				serviceBrokerTestTimeoutOptionsModel := new(powervsv1.ServiceBrokerTestTimeoutOptions)
				serviceBrokerTestTimeoutOptionsModel.T = core.Int64Ptr(int64(38))
				serviceBrokerTestTimeoutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceBrokerTestTimeout(serviceBrokerTestTimeoutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceBrokerTestTimeout(serviceBrokerTestTimeoutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerTestTimeout(serviceBrokerTestTimeoutOptions *ServiceBrokerTestTimeoutOptions)`, func() {
		serviceBrokerTestTimeoutPath := "/broker/v1/test/timeout"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerTestTimeoutPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["t"]).To(Equal([]string{fmt.Sprint(int64(38))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke ServiceBrokerTestTimeout successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceBrokerTestTimeoutOptions model
				serviceBrokerTestTimeoutOptionsModel := new(powervsv1.ServiceBrokerTestTimeoutOptions)
				serviceBrokerTestTimeoutOptionsModel.T = core.Int64Ptr(int64(38))
				serviceBrokerTestTimeoutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceBrokerTestTimeoutWithContext(ctx, serviceBrokerTestTimeoutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceBrokerTestTimeout(serviceBrokerTestTimeoutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceBrokerTestTimeoutWithContext(ctx, serviceBrokerTestTimeoutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerTestTimeoutPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["t"]).To(Equal([]string{fmt.Sprint(int64(38))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke ServiceBrokerTestTimeout successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceBrokerTestTimeout(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceBrokerTestTimeoutOptions model
				serviceBrokerTestTimeoutOptionsModel := new(powervsv1.ServiceBrokerTestTimeoutOptions)
				serviceBrokerTestTimeoutOptionsModel.T = core.Int64Ptr(int64(38))
				serviceBrokerTestTimeoutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceBrokerTestTimeout(serviceBrokerTestTimeoutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceBrokerTestTimeout with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerTestTimeoutOptions model
				serviceBrokerTestTimeoutOptionsModel := new(powervsv1.ServiceBrokerTestTimeoutOptions)
				serviceBrokerTestTimeoutOptionsModel.T = core.Int64Ptr(int64(38))
				serviceBrokerTestTimeoutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceBrokerTestTimeout(serviceBrokerTestTimeoutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ServiceBrokerTestTimeoutOptions model with no property values
				serviceBrokerTestTimeoutOptionsModelNew := new(powervsv1.ServiceBrokerTestTimeoutOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.ServiceBrokerTestTimeout(serviceBrokerTestTimeoutOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceBrokerTestTimeout successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerTestTimeoutOptions model
				serviceBrokerTestTimeoutOptionsModel := new(powervsv1.ServiceBrokerTestTimeoutOptions)
				serviceBrokerTestTimeoutOptionsModel.T = core.Int64Ptr(int64(38))
				serviceBrokerTestTimeoutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceBrokerTestTimeout(serviceBrokerTestTimeoutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerVersion(serviceBrokerVersionOptions *ServiceBrokerVersionOptions) - Operation response error`, func() {
		serviceBrokerVersionPath := "/broker/v1/version"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerVersionPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceBrokerVersion with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerVersionOptions model
				serviceBrokerVersionOptionsModel := new(powervsv1.ServiceBrokerVersionOptions)
				serviceBrokerVersionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceBrokerVersion(serviceBrokerVersionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceBrokerVersion(serviceBrokerVersionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerVersion(serviceBrokerVersionOptions *ServiceBrokerVersionOptions)`, func() {
		serviceBrokerVersionPath := "/broker/v1/version"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerVersionPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"buildDate": "BuildDate", "goVersion": "GoVersion", "hostname": "Hostname", "version": "Version"}`)
				}))
			})
			It(`Invoke ServiceBrokerVersion successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceBrokerVersionOptions model
				serviceBrokerVersionOptionsModel := new(powervsv1.ServiceBrokerVersionOptions)
				serviceBrokerVersionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceBrokerVersionWithContext(ctx, serviceBrokerVersionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceBrokerVersion(serviceBrokerVersionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceBrokerVersionWithContext(ctx, serviceBrokerVersionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerVersionPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"buildDate": "BuildDate", "goVersion": "GoVersion", "hostname": "Hostname", "version": "Version"}`)
				}))
			})
			It(`Invoke ServiceBrokerVersion successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceBrokerVersion(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceBrokerVersionOptions model
				serviceBrokerVersionOptionsModel := new(powervsv1.ServiceBrokerVersionOptions)
				serviceBrokerVersionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceBrokerVersion(serviceBrokerVersionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceBrokerVersion with error: Operation request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerVersionOptions model
				serviceBrokerVersionOptionsModel := new(powervsv1.ServiceBrokerVersionOptions)
				serviceBrokerVersionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceBrokerVersion(serviceBrokerVersionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceBrokerVersion successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerVersionOptions model
				serviceBrokerVersionOptionsModel := new(powervsv1.ServiceBrokerVersionOptions)
				serviceBrokerVersionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceBrokerVersion(serviceBrokerVersionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`InternalV1PowervsInstancesGet(internalV1PowervsInstancesGetOptions *InternalV1PowervsInstancesGetOptions) - Operation response error`, func() {
		internalV1PowervsInstancesGetPath := "/internal/v1/powervs/instances"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(internalV1PowervsInstancesGetPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["powervs_location"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke InternalV1PowervsInstancesGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the InternalV1PowervsInstancesGetOptions model
				internalV1PowervsInstancesGetOptionsModel := new(powervsv1.InternalV1PowervsInstancesGetOptions)
				internalV1PowervsInstancesGetOptionsModel.PowervsLocation = core.StringPtr("testString")
				internalV1PowervsInstancesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.InternalV1PowervsInstancesGet(internalV1PowervsInstancesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.InternalV1PowervsInstancesGet(internalV1PowervsInstancesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`InternalV1PowervsInstancesGet(internalV1PowervsInstancesGetOptions *InternalV1PowervsInstancesGetOptions)`, func() {
		internalV1PowervsInstancesGetPath := "/internal/v1/powervs/instances"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(internalV1PowervsInstancesGetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["powervs_location"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"powerVsInstances": [{"capabilities": {"mapKey": false}, "creationDate": "2022-04-04T16:20:15.581636275Z", "crn": "crn:v1:bluemix:public:power-iaas:dal12:a/2bc3df23c0d14ebe921397bd8aa2573a:3a5798f1-4d2b-4e0a-9311-9b0fd6b94698::", "href": "https://cloud.ibm.com/services/power-iaas/crn%3Av1%3Abluemix%3Apublic%3Apower-iaas%3Adal12%3Aa%2F2bc3df23c0d14ebe921397bd8aa2573a%3A5de8348d-bc6a-466e-854f-661d1e86b230%3A%3A", "id": "3a5798f1-4d2b-4e0a-9311-9b0fd6b94698", "location": "dal12", "locationUrl": "https://us-south.power-iaas.cloud.ibm.com", "name": "Test Name", "privilegedUser": true, "resourceGroupId": "2bf1887bf5c947b1966de2bd88220489", "status": "Active"}]}`)
				}))
			})
			It(`Invoke InternalV1PowervsInstancesGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the InternalV1PowervsInstancesGetOptions model
				internalV1PowervsInstancesGetOptionsModel := new(powervsv1.InternalV1PowervsInstancesGetOptions)
				internalV1PowervsInstancesGetOptionsModel.PowervsLocation = core.StringPtr("testString")
				internalV1PowervsInstancesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.InternalV1PowervsInstancesGetWithContext(ctx, internalV1PowervsInstancesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.InternalV1PowervsInstancesGet(internalV1PowervsInstancesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.InternalV1PowervsInstancesGetWithContext(ctx, internalV1PowervsInstancesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(internalV1PowervsInstancesGetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["powervs_location"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"powerVsInstances": [{"capabilities": {"mapKey": false}, "creationDate": "2022-04-04T16:20:15.581636275Z", "crn": "crn:v1:bluemix:public:power-iaas:dal12:a/2bc3df23c0d14ebe921397bd8aa2573a:3a5798f1-4d2b-4e0a-9311-9b0fd6b94698::", "href": "https://cloud.ibm.com/services/power-iaas/crn%3Av1%3Abluemix%3Apublic%3Apower-iaas%3Adal12%3Aa%2F2bc3df23c0d14ebe921397bd8aa2573a%3A5de8348d-bc6a-466e-854f-661d1e86b230%3A%3A", "id": "3a5798f1-4d2b-4e0a-9311-9b0fd6b94698", "location": "dal12", "locationUrl": "https://us-south.power-iaas.cloud.ibm.com", "name": "Test Name", "privilegedUser": true, "resourceGroupId": "2bf1887bf5c947b1966de2bd88220489", "status": "Active"}]}`)
				}))
			})
			It(`Invoke InternalV1PowervsInstancesGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.InternalV1PowervsInstancesGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the InternalV1PowervsInstancesGetOptions model
				internalV1PowervsInstancesGetOptionsModel := new(powervsv1.InternalV1PowervsInstancesGetOptions)
				internalV1PowervsInstancesGetOptionsModel.PowervsLocation = core.StringPtr("testString")
				internalV1PowervsInstancesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.InternalV1PowervsInstancesGet(internalV1PowervsInstancesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke InternalV1PowervsInstancesGet with error: Operation request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the InternalV1PowervsInstancesGetOptions model
				internalV1PowervsInstancesGetOptionsModel := new(powervsv1.InternalV1PowervsInstancesGetOptions)
				internalV1PowervsInstancesGetOptionsModel.PowervsLocation = core.StringPtr("testString")
				internalV1PowervsInstancesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.InternalV1PowervsInstancesGet(internalV1PowervsInstancesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke InternalV1PowervsInstancesGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the InternalV1PowervsInstancesGetOptions model
				internalV1PowervsInstancesGetOptionsModel := new(powervsv1.InternalV1PowervsInstancesGetOptions)
				internalV1PowervsInstancesGetOptionsModel.PowervsLocation = core.StringPtr("testString")
				internalV1PowervsInstancesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.InternalV1PowervsInstancesGet(internalV1PowervsInstancesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`InternalV1PowervsLocationsActivatePut(internalV1PowervsLocationsActivatePutOptions *InternalV1PowervsLocationsActivatePutOptions) - Operation response error`, func() {
		internalV1PowervsLocationsActivatePutPath := "/internal/v1/powervs/locations/activate"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(internalV1PowervsLocationsActivatePutPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke InternalV1PowervsLocationsActivatePut with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the InternalV1PowervsLocationsActivatePutOptions model
				internalV1PowervsLocationsActivatePutOptionsModel := new(powervsv1.InternalV1PowervsLocationsActivatePutOptions)
				internalV1PowervsLocationsActivatePutOptionsModel.OrderID = core.StringPtr("testString")
				internalV1PowervsLocationsActivatePutOptionsModel.SatelliteID = core.StringPtr("testString")
				internalV1PowervsLocationsActivatePutOptionsModel.DaysToDelay = core.Int64Ptr(int64(38))
				internalV1PowervsLocationsActivatePutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.InternalV1PowervsLocationsActivatePut(internalV1PowervsLocationsActivatePutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.InternalV1PowervsLocationsActivatePut(internalV1PowervsLocationsActivatePutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`InternalV1PowervsLocationsActivatePut(internalV1PowervsLocationsActivatePutOptions *InternalV1PowervsLocationsActivatePutOptions)`, func() {
		internalV1PowervsLocationsActivatePutPath := "/internal/v1/powervs/locations/activate"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(internalV1PowervsLocationsActivatePutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"activationTime": "ActivationTime"}`)
				}))
			})
			It(`Invoke InternalV1PowervsLocationsActivatePut successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the InternalV1PowervsLocationsActivatePutOptions model
				internalV1PowervsLocationsActivatePutOptionsModel := new(powervsv1.InternalV1PowervsLocationsActivatePutOptions)
				internalV1PowervsLocationsActivatePutOptionsModel.OrderID = core.StringPtr("testString")
				internalV1PowervsLocationsActivatePutOptionsModel.SatelliteID = core.StringPtr("testString")
				internalV1PowervsLocationsActivatePutOptionsModel.DaysToDelay = core.Int64Ptr(int64(38))
				internalV1PowervsLocationsActivatePutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.InternalV1PowervsLocationsActivatePutWithContext(ctx, internalV1PowervsLocationsActivatePutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.InternalV1PowervsLocationsActivatePut(internalV1PowervsLocationsActivatePutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.InternalV1PowervsLocationsActivatePutWithContext(ctx, internalV1PowervsLocationsActivatePutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(internalV1PowervsLocationsActivatePutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"activationTime": "ActivationTime"}`)
				}))
			})
			It(`Invoke InternalV1PowervsLocationsActivatePut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.InternalV1PowervsLocationsActivatePut(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the InternalV1PowervsLocationsActivatePutOptions model
				internalV1PowervsLocationsActivatePutOptionsModel := new(powervsv1.InternalV1PowervsLocationsActivatePutOptions)
				internalV1PowervsLocationsActivatePutOptionsModel.OrderID = core.StringPtr("testString")
				internalV1PowervsLocationsActivatePutOptionsModel.SatelliteID = core.StringPtr("testString")
				internalV1PowervsLocationsActivatePutOptionsModel.DaysToDelay = core.Int64Ptr(int64(38))
				internalV1PowervsLocationsActivatePutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.InternalV1PowervsLocationsActivatePut(internalV1PowervsLocationsActivatePutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke InternalV1PowervsLocationsActivatePut with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the InternalV1PowervsLocationsActivatePutOptions model
				internalV1PowervsLocationsActivatePutOptionsModel := new(powervsv1.InternalV1PowervsLocationsActivatePutOptions)
				internalV1PowervsLocationsActivatePutOptionsModel.OrderID = core.StringPtr("testString")
				internalV1PowervsLocationsActivatePutOptionsModel.SatelliteID = core.StringPtr("testString")
				internalV1PowervsLocationsActivatePutOptionsModel.DaysToDelay = core.Int64Ptr(int64(38))
				internalV1PowervsLocationsActivatePutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.InternalV1PowervsLocationsActivatePut(internalV1PowervsLocationsActivatePutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the InternalV1PowervsLocationsActivatePutOptions model with no property values
				internalV1PowervsLocationsActivatePutOptionsModelNew := new(powervsv1.InternalV1PowervsLocationsActivatePutOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.InternalV1PowervsLocationsActivatePut(internalV1PowervsLocationsActivatePutOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke InternalV1PowervsLocationsActivatePut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the InternalV1PowervsLocationsActivatePutOptions model
				internalV1PowervsLocationsActivatePutOptionsModel := new(powervsv1.InternalV1PowervsLocationsActivatePutOptions)
				internalV1PowervsLocationsActivatePutOptionsModel.OrderID = core.StringPtr("testString")
				internalV1PowervsLocationsActivatePutOptionsModel.SatelliteID = core.StringPtr("testString")
				internalV1PowervsLocationsActivatePutOptionsModel.DaysToDelay = core.Int64Ptr(int64(38))
				internalV1PowervsLocationsActivatePutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.InternalV1PowervsLocationsActivatePut(internalV1PowervsLocationsActivatePutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`InternalV1PowervsLocationsTagDelete(internalV1PowervsLocationsTagDeleteOptions *InternalV1PowervsLocationsTagDeleteOptions)`, func() {
		internalV1PowervsLocationsTagDeletePath := "/internal/v1/powervs/locations/tag"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(internalV1PowervsLocationsTagDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(200)
				}))
			})
			It(`Invoke InternalV1PowervsLocationsTagDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := powervsService.InternalV1PowervsLocationsTagDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the InternalV1PowervsLocationsTagDeleteOptions model
				internalV1PowervsLocationsTagDeleteOptionsModel := new(powervsv1.InternalV1PowervsLocationsTagDeleteOptions)
				internalV1PowervsLocationsTagDeleteOptionsModel.SatelliteID = core.StringPtr("testString")
				internalV1PowervsLocationsTagDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = powervsService.InternalV1PowervsLocationsTagDelete(internalV1PowervsLocationsTagDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke InternalV1PowervsLocationsTagDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the InternalV1PowervsLocationsTagDeleteOptions model
				internalV1PowervsLocationsTagDeleteOptionsModel := new(powervsv1.InternalV1PowervsLocationsTagDeleteOptions)
				internalV1PowervsLocationsTagDeleteOptionsModel.SatelliteID = core.StringPtr("testString")
				internalV1PowervsLocationsTagDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := powervsService.InternalV1PowervsLocationsTagDelete(internalV1PowervsLocationsTagDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the InternalV1PowervsLocationsTagDeleteOptions model with no property values
				internalV1PowervsLocationsTagDeleteOptionsModelNew := new(powervsv1.InternalV1PowervsLocationsTagDeleteOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = powervsService.InternalV1PowervsLocationsTagDelete(internalV1PowervsLocationsTagDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`InternalV1PowervsLocationsTagPost(internalV1PowervsLocationsTagPostOptions *InternalV1PowervsLocationsTagPostOptions)`, func() {
		internalV1PowervsLocationsTagPostPath := "/internal/v1/powervs/locations/tag"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(internalV1PowervsLocationsTagPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(200)
				}))
			})
			It(`Invoke InternalV1PowervsLocationsTagPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := powervsService.InternalV1PowervsLocationsTagPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the InternalV1PowervsLocationsTagPostOptions model
				internalV1PowervsLocationsTagPostOptionsModel := new(powervsv1.InternalV1PowervsLocationsTagPostOptions)
				internalV1PowervsLocationsTagPostOptionsModel.SatelliteID = core.StringPtr("testString")
				internalV1PowervsLocationsTagPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = powervsService.InternalV1PowervsLocationsTagPost(internalV1PowervsLocationsTagPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke InternalV1PowervsLocationsTagPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the InternalV1PowervsLocationsTagPostOptions model
				internalV1PowervsLocationsTagPostOptionsModel := new(powervsv1.InternalV1PowervsLocationsTagPostOptions)
				internalV1PowervsLocationsTagPostOptionsModel.SatelliteID = core.StringPtr("testString")
				internalV1PowervsLocationsTagPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := powervsService.InternalV1PowervsLocationsTagPost(internalV1PowervsLocationsTagPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the InternalV1PowervsLocationsTagPostOptions model with no property values
				internalV1PowervsLocationsTagPostOptionsModelNew := new(powervsv1.InternalV1PowervsLocationsTagPostOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = powervsService.InternalV1PowervsLocationsTagPost(internalV1PowervsLocationsTagPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`InternalV1PowervsLocationsTransitgatewayGet(internalV1PowervsLocationsTransitgatewayGetOptions *InternalV1PowervsLocationsTransitgatewayGetOptions) - Operation response error`, func() {
		internalV1PowervsLocationsTransitgatewayGetPath := "/internal/v1/powervs/locations/transit-gateway"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(internalV1PowervsLocationsTransitgatewayGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke InternalV1PowervsLocationsTransitgatewayGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the InternalV1PowervsLocationsTransitgatewayGetOptions model
				internalV1PowervsLocationsTransitgatewayGetOptionsModel := new(powervsv1.InternalV1PowervsLocationsTransitgatewayGetOptions)
				internalV1PowervsLocationsTransitgatewayGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.InternalV1PowervsLocationsTransitgatewayGet(internalV1PowervsLocationsTransitgatewayGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.InternalV1PowervsLocationsTransitgatewayGet(internalV1PowervsLocationsTransitgatewayGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`InternalV1PowervsLocationsTransitgatewayGet(internalV1PowervsLocationsTransitgatewayGetOptions *InternalV1PowervsLocationsTransitgatewayGetOptions)`, func() {
		internalV1PowervsLocationsTransitgatewayGetPath := "/internal/v1/powervs/locations/transit-gateway"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(internalV1PowervsLocationsTransitgatewayGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"transitGatewayLocations": [{"location": "dal12", "locationType": "data-center", "locationUrl": "https://us-south.power-iaas.cloud.ibm.com"}]}`)
				}))
			})
			It(`Invoke InternalV1PowervsLocationsTransitgatewayGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the InternalV1PowervsLocationsTransitgatewayGetOptions model
				internalV1PowervsLocationsTransitgatewayGetOptionsModel := new(powervsv1.InternalV1PowervsLocationsTransitgatewayGetOptions)
				internalV1PowervsLocationsTransitgatewayGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.InternalV1PowervsLocationsTransitgatewayGetWithContext(ctx, internalV1PowervsLocationsTransitgatewayGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.InternalV1PowervsLocationsTransitgatewayGet(internalV1PowervsLocationsTransitgatewayGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.InternalV1PowervsLocationsTransitgatewayGetWithContext(ctx, internalV1PowervsLocationsTransitgatewayGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(internalV1PowervsLocationsTransitgatewayGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"transitGatewayLocations": [{"location": "dal12", "locationType": "data-center", "locationUrl": "https://us-south.power-iaas.cloud.ibm.com"}]}`)
				}))
			})
			It(`Invoke InternalV1PowervsLocationsTransitgatewayGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.InternalV1PowervsLocationsTransitgatewayGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the InternalV1PowervsLocationsTransitgatewayGetOptions model
				internalV1PowervsLocationsTransitgatewayGetOptionsModel := new(powervsv1.InternalV1PowervsLocationsTransitgatewayGetOptions)
				internalV1PowervsLocationsTransitgatewayGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.InternalV1PowervsLocationsTransitgatewayGet(internalV1PowervsLocationsTransitgatewayGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke InternalV1PowervsLocationsTransitgatewayGet with error: Operation request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the InternalV1PowervsLocationsTransitgatewayGetOptions model
				internalV1PowervsLocationsTransitgatewayGetOptionsModel := new(powervsv1.InternalV1PowervsLocationsTransitgatewayGetOptions)
				internalV1PowervsLocationsTransitgatewayGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.InternalV1PowervsLocationsTransitgatewayGet(internalV1PowervsLocationsTransitgatewayGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke InternalV1PowervsLocationsTransitgatewayGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the InternalV1PowervsLocationsTransitgatewayGetOptions model
				internalV1PowervsLocationsTransitgatewayGetOptionsModel := new(powervsv1.InternalV1PowervsLocationsTransitgatewayGetOptions)
				internalV1PowervsLocationsTransitgatewayGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.InternalV1PowervsLocationsTransitgatewayGet(internalV1PowervsLocationsTransitgatewayGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`InternalV1StorageRegionsStoragePoolsGetall(internalV1StorageRegionsStoragePoolsGetallOptions *InternalV1StorageRegionsStoragePoolsGetallOptions) - Operation response error`, func() {
		internalV1StorageRegionsStoragePoolsGetallPath := "/internal/v1/storage/regions/testString/storage-pools"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(internalV1StorageRegionsStoragePoolsGetallPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke InternalV1StorageRegionsStoragePoolsGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the InternalV1StorageRegionsStoragePoolsGetallOptions model
				internalV1StorageRegionsStoragePoolsGetallOptionsModel := new(powervsv1.InternalV1StorageRegionsStoragePoolsGetallOptions)
				internalV1StorageRegionsStoragePoolsGetallOptionsModel.RegionZoneID = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.InternalV1StorageRegionsStoragePoolsGetall(internalV1StorageRegionsStoragePoolsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.InternalV1StorageRegionsStoragePoolsGetall(internalV1StorageRegionsStoragePoolsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`InternalV1StorageRegionsStoragePoolsGetall(internalV1StorageRegionsStoragePoolsGetallOptions *InternalV1StorageRegionsStoragePoolsGetallOptions)`, func() {
		internalV1StorageRegionsStoragePoolsGetallPath := "/internal/v1/storage/regions/testString/storage-pools"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(internalV1StorageRegionsStoragePoolsGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"displayName": "DisplayName", "drEnabled": false, "name": "Name", "overrideThresholds": {"capacity": {"existingEntity": 14, "newEntity": 9}, "overcommit": {"existingEntity": 14, "newEntity": 9}, "physicalCapacity": {"existingEntity": 14, "newEntity": 9}, "vdiskCapacity": {"existingEntity": 14, "newEntity": 9}, "vdiskLimit": {"existingEntity": 14, "newEntity": 9}}, "state": "closed", "type": "Type"}]`)
				}))
			})
			It(`Invoke InternalV1StorageRegionsStoragePoolsGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the InternalV1StorageRegionsStoragePoolsGetallOptions model
				internalV1StorageRegionsStoragePoolsGetallOptionsModel := new(powervsv1.InternalV1StorageRegionsStoragePoolsGetallOptions)
				internalV1StorageRegionsStoragePoolsGetallOptionsModel.RegionZoneID = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.InternalV1StorageRegionsStoragePoolsGetallWithContext(ctx, internalV1StorageRegionsStoragePoolsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.InternalV1StorageRegionsStoragePoolsGetall(internalV1StorageRegionsStoragePoolsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.InternalV1StorageRegionsStoragePoolsGetallWithContext(ctx, internalV1StorageRegionsStoragePoolsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(internalV1StorageRegionsStoragePoolsGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"displayName": "DisplayName", "drEnabled": false, "name": "Name", "overrideThresholds": {"capacity": {"existingEntity": 14, "newEntity": 9}, "overcommit": {"existingEntity": 14, "newEntity": 9}, "physicalCapacity": {"existingEntity": 14, "newEntity": 9}, "vdiskCapacity": {"existingEntity": 14, "newEntity": 9}, "vdiskLimit": {"existingEntity": 14, "newEntity": 9}}, "state": "closed", "type": "Type"}]`)
				}))
			})
			It(`Invoke InternalV1StorageRegionsStoragePoolsGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.InternalV1StorageRegionsStoragePoolsGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the InternalV1StorageRegionsStoragePoolsGetallOptions model
				internalV1StorageRegionsStoragePoolsGetallOptionsModel := new(powervsv1.InternalV1StorageRegionsStoragePoolsGetallOptions)
				internalV1StorageRegionsStoragePoolsGetallOptionsModel.RegionZoneID = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.InternalV1StorageRegionsStoragePoolsGetall(internalV1StorageRegionsStoragePoolsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke InternalV1StorageRegionsStoragePoolsGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the InternalV1StorageRegionsStoragePoolsGetallOptions model
				internalV1StorageRegionsStoragePoolsGetallOptionsModel := new(powervsv1.InternalV1StorageRegionsStoragePoolsGetallOptions)
				internalV1StorageRegionsStoragePoolsGetallOptionsModel.RegionZoneID = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.InternalV1StorageRegionsStoragePoolsGetall(internalV1StorageRegionsStoragePoolsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the InternalV1StorageRegionsStoragePoolsGetallOptions model with no property values
				internalV1StorageRegionsStoragePoolsGetallOptionsModelNew := new(powervsv1.InternalV1StorageRegionsStoragePoolsGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.InternalV1StorageRegionsStoragePoolsGetall(internalV1StorageRegionsStoragePoolsGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke InternalV1StorageRegionsStoragePoolsGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the InternalV1StorageRegionsStoragePoolsGetallOptions model
				internalV1StorageRegionsStoragePoolsGetallOptionsModel := new(powervsv1.InternalV1StorageRegionsStoragePoolsGetallOptions)
				internalV1StorageRegionsStoragePoolsGetallOptionsModel.RegionZoneID = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.InternalV1StorageRegionsStoragePoolsGetall(internalV1StorageRegionsStoragePoolsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`InternalV1StorageRegionsStoragePoolsGet(internalV1StorageRegionsStoragePoolsGetOptions *InternalV1StorageRegionsStoragePoolsGetOptions) - Operation response error`, func() {
		internalV1StorageRegionsStoragePoolsGetPath := "/internal/v1/storage/regions/testString/storage-pools/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(internalV1StorageRegionsStoragePoolsGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke InternalV1StorageRegionsStoragePoolsGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the InternalV1StorageRegionsStoragePoolsGetOptions model
				internalV1StorageRegionsStoragePoolsGetOptionsModel := new(powervsv1.InternalV1StorageRegionsStoragePoolsGetOptions)
				internalV1StorageRegionsStoragePoolsGetOptionsModel.RegionZoneID = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsGetOptionsModel.StoragePoolName = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.InternalV1StorageRegionsStoragePoolsGet(internalV1StorageRegionsStoragePoolsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.InternalV1StorageRegionsStoragePoolsGet(internalV1StorageRegionsStoragePoolsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`InternalV1StorageRegionsStoragePoolsGet(internalV1StorageRegionsStoragePoolsGetOptions *InternalV1StorageRegionsStoragePoolsGetOptions)`, func() {
		internalV1StorageRegionsStoragePoolsGetPath := "/internal/v1/storage/regions/testString/storage-pools/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(internalV1StorageRegionsStoragePoolsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"displayName": "DisplayName", "drEnabled": false, "name": "Name", "overrideThresholds": {"capacity": {"existingEntity": 14, "newEntity": 9}, "overcommit": {"existingEntity": 14, "newEntity": 9}, "physicalCapacity": {"existingEntity": 14, "newEntity": 9}, "vdiskCapacity": {"existingEntity": 14, "newEntity": 9}, "vdiskLimit": {"existingEntity": 14, "newEntity": 9}}, "state": "closed", "type": "Type"}]`)
				}))
			})
			It(`Invoke InternalV1StorageRegionsStoragePoolsGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the InternalV1StorageRegionsStoragePoolsGetOptions model
				internalV1StorageRegionsStoragePoolsGetOptionsModel := new(powervsv1.InternalV1StorageRegionsStoragePoolsGetOptions)
				internalV1StorageRegionsStoragePoolsGetOptionsModel.RegionZoneID = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsGetOptionsModel.StoragePoolName = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.InternalV1StorageRegionsStoragePoolsGetWithContext(ctx, internalV1StorageRegionsStoragePoolsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.InternalV1StorageRegionsStoragePoolsGet(internalV1StorageRegionsStoragePoolsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.InternalV1StorageRegionsStoragePoolsGetWithContext(ctx, internalV1StorageRegionsStoragePoolsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(internalV1StorageRegionsStoragePoolsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"displayName": "DisplayName", "drEnabled": false, "name": "Name", "overrideThresholds": {"capacity": {"existingEntity": 14, "newEntity": 9}, "overcommit": {"existingEntity": 14, "newEntity": 9}, "physicalCapacity": {"existingEntity": 14, "newEntity": 9}, "vdiskCapacity": {"existingEntity": 14, "newEntity": 9}, "vdiskLimit": {"existingEntity": 14, "newEntity": 9}}, "state": "closed", "type": "Type"}]`)
				}))
			})
			It(`Invoke InternalV1StorageRegionsStoragePoolsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.InternalV1StorageRegionsStoragePoolsGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the InternalV1StorageRegionsStoragePoolsGetOptions model
				internalV1StorageRegionsStoragePoolsGetOptionsModel := new(powervsv1.InternalV1StorageRegionsStoragePoolsGetOptions)
				internalV1StorageRegionsStoragePoolsGetOptionsModel.RegionZoneID = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsGetOptionsModel.StoragePoolName = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.InternalV1StorageRegionsStoragePoolsGet(internalV1StorageRegionsStoragePoolsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke InternalV1StorageRegionsStoragePoolsGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the InternalV1StorageRegionsStoragePoolsGetOptions model
				internalV1StorageRegionsStoragePoolsGetOptionsModel := new(powervsv1.InternalV1StorageRegionsStoragePoolsGetOptions)
				internalV1StorageRegionsStoragePoolsGetOptionsModel.RegionZoneID = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsGetOptionsModel.StoragePoolName = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.InternalV1StorageRegionsStoragePoolsGet(internalV1StorageRegionsStoragePoolsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the InternalV1StorageRegionsStoragePoolsGetOptions model with no property values
				internalV1StorageRegionsStoragePoolsGetOptionsModelNew := new(powervsv1.InternalV1StorageRegionsStoragePoolsGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.InternalV1StorageRegionsStoragePoolsGet(internalV1StorageRegionsStoragePoolsGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke InternalV1StorageRegionsStoragePoolsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the InternalV1StorageRegionsStoragePoolsGetOptions model
				internalV1StorageRegionsStoragePoolsGetOptionsModel := new(powervsv1.InternalV1StorageRegionsStoragePoolsGetOptions)
				internalV1StorageRegionsStoragePoolsGetOptionsModel.RegionZoneID = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsGetOptionsModel.StoragePoolName = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.InternalV1StorageRegionsStoragePoolsGet(internalV1StorageRegionsStoragePoolsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`InternalV1StorageRegionsStoragePoolsPut(internalV1StorageRegionsStoragePoolsPutOptions *InternalV1StorageRegionsStoragePoolsPutOptions) - Operation response error`, func() {
		internalV1StorageRegionsStoragePoolsPutPath := "/internal/v1/storage/regions/testString/storage-pools/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(internalV1StorageRegionsStoragePoolsPutPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke InternalV1StorageRegionsStoragePoolsPut with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the StorageEntities model
				storageEntitiesModel := new(powervsv1.StorageEntities)
				storageEntitiesModel.ExistingEntity = core.Int64Ptr(int64(38))
				storageEntitiesModel.NewEntity = core.Int64Ptr(int64(38))

				// Construct an instance of the Thresholds model
				thresholdsModel := new(powervsv1.Thresholds)
				thresholdsModel.Capacity = storageEntitiesModel
				thresholdsModel.Overcommit = storageEntitiesModel
				thresholdsModel.PhysicalCapacity = storageEntitiesModel
				thresholdsModel.VdiskCapacity = storageEntitiesModel
				thresholdsModel.VdiskLimit = storageEntitiesModel

				// Construct an instance of the InternalV1StorageRegionsStoragePoolsPutOptions model
				internalV1StorageRegionsStoragePoolsPutOptionsModel := new(powervsv1.InternalV1StorageRegionsStoragePoolsPutOptions)
				internalV1StorageRegionsStoragePoolsPutOptionsModel.RegionZoneID = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsPutOptionsModel.StoragePoolName = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsPutOptionsModel.DisplayName = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsPutOptionsModel.DrEnabled = core.BoolPtr(true)
				internalV1StorageRegionsStoragePoolsPutOptionsModel.OverrideThresholds = thresholdsModel
				internalV1StorageRegionsStoragePoolsPutOptionsModel.State = core.StringPtr("closed")
				internalV1StorageRegionsStoragePoolsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.InternalV1StorageRegionsStoragePoolsPut(internalV1StorageRegionsStoragePoolsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.InternalV1StorageRegionsStoragePoolsPut(internalV1StorageRegionsStoragePoolsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`InternalV1StorageRegionsStoragePoolsPut(internalV1StorageRegionsStoragePoolsPutOptions *InternalV1StorageRegionsStoragePoolsPutOptions)`, func() {
		internalV1StorageRegionsStoragePoolsPutPath := "/internal/v1/storage/regions/testString/storage-pools/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(internalV1StorageRegionsStoragePoolsPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"displayName": "DisplayName", "drEnabled": false, "name": "Name", "overrideThresholds": {"capacity": {"existingEntity": 14, "newEntity": 9}, "overcommit": {"existingEntity": 14, "newEntity": 9}, "physicalCapacity": {"existingEntity": 14, "newEntity": 9}, "vdiskCapacity": {"existingEntity": 14, "newEntity": 9}, "vdiskLimit": {"existingEntity": 14, "newEntity": 9}}, "state": "closed", "type": "Type"}`)
				}))
			})
			It(`Invoke InternalV1StorageRegionsStoragePoolsPut successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the StorageEntities model
				storageEntitiesModel := new(powervsv1.StorageEntities)
				storageEntitiesModel.ExistingEntity = core.Int64Ptr(int64(38))
				storageEntitiesModel.NewEntity = core.Int64Ptr(int64(38))

				// Construct an instance of the Thresholds model
				thresholdsModel := new(powervsv1.Thresholds)
				thresholdsModel.Capacity = storageEntitiesModel
				thresholdsModel.Overcommit = storageEntitiesModel
				thresholdsModel.PhysicalCapacity = storageEntitiesModel
				thresholdsModel.VdiskCapacity = storageEntitiesModel
				thresholdsModel.VdiskLimit = storageEntitiesModel

				// Construct an instance of the InternalV1StorageRegionsStoragePoolsPutOptions model
				internalV1StorageRegionsStoragePoolsPutOptionsModel := new(powervsv1.InternalV1StorageRegionsStoragePoolsPutOptions)
				internalV1StorageRegionsStoragePoolsPutOptionsModel.RegionZoneID = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsPutOptionsModel.StoragePoolName = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsPutOptionsModel.DisplayName = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsPutOptionsModel.DrEnabled = core.BoolPtr(true)
				internalV1StorageRegionsStoragePoolsPutOptionsModel.OverrideThresholds = thresholdsModel
				internalV1StorageRegionsStoragePoolsPutOptionsModel.State = core.StringPtr("closed")
				internalV1StorageRegionsStoragePoolsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.InternalV1StorageRegionsStoragePoolsPutWithContext(ctx, internalV1StorageRegionsStoragePoolsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.InternalV1StorageRegionsStoragePoolsPut(internalV1StorageRegionsStoragePoolsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.InternalV1StorageRegionsStoragePoolsPutWithContext(ctx, internalV1StorageRegionsStoragePoolsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(internalV1StorageRegionsStoragePoolsPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"displayName": "DisplayName", "drEnabled": false, "name": "Name", "overrideThresholds": {"capacity": {"existingEntity": 14, "newEntity": 9}, "overcommit": {"existingEntity": 14, "newEntity": 9}, "physicalCapacity": {"existingEntity": 14, "newEntity": 9}, "vdiskCapacity": {"existingEntity": 14, "newEntity": 9}, "vdiskLimit": {"existingEntity": 14, "newEntity": 9}}, "state": "closed", "type": "Type"}`)
				}))
			})
			It(`Invoke InternalV1StorageRegionsStoragePoolsPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.InternalV1StorageRegionsStoragePoolsPut(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the StorageEntities model
				storageEntitiesModel := new(powervsv1.StorageEntities)
				storageEntitiesModel.ExistingEntity = core.Int64Ptr(int64(38))
				storageEntitiesModel.NewEntity = core.Int64Ptr(int64(38))

				// Construct an instance of the Thresholds model
				thresholdsModel := new(powervsv1.Thresholds)
				thresholdsModel.Capacity = storageEntitiesModel
				thresholdsModel.Overcommit = storageEntitiesModel
				thresholdsModel.PhysicalCapacity = storageEntitiesModel
				thresholdsModel.VdiskCapacity = storageEntitiesModel
				thresholdsModel.VdiskLimit = storageEntitiesModel

				// Construct an instance of the InternalV1StorageRegionsStoragePoolsPutOptions model
				internalV1StorageRegionsStoragePoolsPutOptionsModel := new(powervsv1.InternalV1StorageRegionsStoragePoolsPutOptions)
				internalV1StorageRegionsStoragePoolsPutOptionsModel.RegionZoneID = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsPutOptionsModel.StoragePoolName = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsPutOptionsModel.DisplayName = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsPutOptionsModel.DrEnabled = core.BoolPtr(true)
				internalV1StorageRegionsStoragePoolsPutOptionsModel.OverrideThresholds = thresholdsModel
				internalV1StorageRegionsStoragePoolsPutOptionsModel.State = core.StringPtr("closed")
				internalV1StorageRegionsStoragePoolsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.InternalV1StorageRegionsStoragePoolsPut(internalV1StorageRegionsStoragePoolsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke InternalV1StorageRegionsStoragePoolsPut with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the StorageEntities model
				storageEntitiesModel := new(powervsv1.StorageEntities)
				storageEntitiesModel.ExistingEntity = core.Int64Ptr(int64(38))
				storageEntitiesModel.NewEntity = core.Int64Ptr(int64(38))

				// Construct an instance of the Thresholds model
				thresholdsModel := new(powervsv1.Thresholds)
				thresholdsModel.Capacity = storageEntitiesModel
				thresholdsModel.Overcommit = storageEntitiesModel
				thresholdsModel.PhysicalCapacity = storageEntitiesModel
				thresholdsModel.VdiskCapacity = storageEntitiesModel
				thresholdsModel.VdiskLimit = storageEntitiesModel

				// Construct an instance of the InternalV1StorageRegionsStoragePoolsPutOptions model
				internalV1StorageRegionsStoragePoolsPutOptionsModel := new(powervsv1.InternalV1StorageRegionsStoragePoolsPutOptions)
				internalV1StorageRegionsStoragePoolsPutOptionsModel.RegionZoneID = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsPutOptionsModel.StoragePoolName = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsPutOptionsModel.DisplayName = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsPutOptionsModel.DrEnabled = core.BoolPtr(true)
				internalV1StorageRegionsStoragePoolsPutOptionsModel.OverrideThresholds = thresholdsModel
				internalV1StorageRegionsStoragePoolsPutOptionsModel.State = core.StringPtr("closed")
				internalV1StorageRegionsStoragePoolsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.InternalV1StorageRegionsStoragePoolsPut(internalV1StorageRegionsStoragePoolsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the InternalV1StorageRegionsStoragePoolsPutOptions model with no property values
				internalV1StorageRegionsStoragePoolsPutOptionsModelNew := new(powervsv1.InternalV1StorageRegionsStoragePoolsPutOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.InternalV1StorageRegionsStoragePoolsPut(internalV1StorageRegionsStoragePoolsPutOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke InternalV1StorageRegionsStoragePoolsPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the StorageEntities model
				storageEntitiesModel := new(powervsv1.StorageEntities)
				storageEntitiesModel.ExistingEntity = core.Int64Ptr(int64(38))
				storageEntitiesModel.NewEntity = core.Int64Ptr(int64(38))

				// Construct an instance of the Thresholds model
				thresholdsModel := new(powervsv1.Thresholds)
				thresholdsModel.Capacity = storageEntitiesModel
				thresholdsModel.Overcommit = storageEntitiesModel
				thresholdsModel.PhysicalCapacity = storageEntitiesModel
				thresholdsModel.VdiskCapacity = storageEntitiesModel
				thresholdsModel.VdiskLimit = storageEntitiesModel

				// Construct an instance of the InternalV1StorageRegionsStoragePoolsPutOptions model
				internalV1StorageRegionsStoragePoolsPutOptionsModel := new(powervsv1.InternalV1StorageRegionsStoragePoolsPutOptions)
				internalV1StorageRegionsStoragePoolsPutOptionsModel.RegionZoneID = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsPutOptionsModel.StoragePoolName = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsPutOptionsModel.DisplayName = core.StringPtr("testString")
				internalV1StorageRegionsStoragePoolsPutOptionsModel.DrEnabled = core.BoolPtr(true)
				internalV1StorageRegionsStoragePoolsPutOptionsModel.OverrideThresholds = thresholdsModel
				internalV1StorageRegionsStoragePoolsPutOptionsModel.State = core.StringPtr("closed")
				internalV1StorageRegionsStoragePoolsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.InternalV1StorageRegionsStoragePoolsPut(internalV1StorageRegionsStoragePoolsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`InternalV1StorageRegionsThresholdsGet(internalV1StorageRegionsThresholdsGetOptions *InternalV1StorageRegionsThresholdsGetOptions) - Operation response error`, func() {
		internalV1StorageRegionsThresholdsGetPath := "/internal/v1/storage/regions/testString/thresholds"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(internalV1StorageRegionsThresholdsGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke InternalV1StorageRegionsThresholdsGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the InternalV1StorageRegionsThresholdsGetOptions model
				internalV1StorageRegionsThresholdsGetOptionsModel := new(powervsv1.InternalV1StorageRegionsThresholdsGetOptions)
				internalV1StorageRegionsThresholdsGetOptionsModel.RegionZoneID = core.StringPtr("testString")
				internalV1StorageRegionsThresholdsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.InternalV1StorageRegionsThresholdsGet(internalV1StorageRegionsThresholdsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.InternalV1StorageRegionsThresholdsGet(internalV1StorageRegionsThresholdsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`InternalV1StorageRegionsThresholdsGet(internalV1StorageRegionsThresholdsGetOptions *InternalV1StorageRegionsThresholdsGetOptions)`, func() {
		internalV1StorageRegionsThresholdsGetPath := "/internal/v1/storage/regions/testString/thresholds"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(internalV1StorageRegionsThresholdsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"capacity": {"existingEntity": 14, "newEntity": 9}, "overcommit": {"existingEntity": 14, "newEntity": 9}, "physicalCapacity": {"existingEntity": 14, "newEntity": 9}, "vdiskCapacity": {"existingEntity": 14, "newEntity": 9}, "vdiskLimit": {"existingEntity": 14, "newEntity": 9}}`)
				}))
			})
			It(`Invoke InternalV1StorageRegionsThresholdsGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the InternalV1StorageRegionsThresholdsGetOptions model
				internalV1StorageRegionsThresholdsGetOptionsModel := new(powervsv1.InternalV1StorageRegionsThresholdsGetOptions)
				internalV1StorageRegionsThresholdsGetOptionsModel.RegionZoneID = core.StringPtr("testString")
				internalV1StorageRegionsThresholdsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.InternalV1StorageRegionsThresholdsGetWithContext(ctx, internalV1StorageRegionsThresholdsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.InternalV1StorageRegionsThresholdsGet(internalV1StorageRegionsThresholdsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.InternalV1StorageRegionsThresholdsGetWithContext(ctx, internalV1StorageRegionsThresholdsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(internalV1StorageRegionsThresholdsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"capacity": {"existingEntity": 14, "newEntity": 9}, "overcommit": {"existingEntity": 14, "newEntity": 9}, "physicalCapacity": {"existingEntity": 14, "newEntity": 9}, "vdiskCapacity": {"existingEntity": 14, "newEntity": 9}, "vdiskLimit": {"existingEntity": 14, "newEntity": 9}}`)
				}))
			})
			It(`Invoke InternalV1StorageRegionsThresholdsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.InternalV1StorageRegionsThresholdsGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the InternalV1StorageRegionsThresholdsGetOptions model
				internalV1StorageRegionsThresholdsGetOptionsModel := new(powervsv1.InternalV1StorageRegionsThresholdsGetOptions)
				internalV1StorageRegionsThresholdsGetOptionsModel.RegionZoneID = core.StringPtr("testString")
				internalV1StorageRegionsThresholdsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.InternalV1StorageRegionsThresholdsGet(internalV1StorageRegionsThresholdsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke InternalV1StorageRegionsThresholdsGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the InternalV1StorageRegionsThresholdsGetOptions model
				internalV1StorageRegionsThresholdsGetOptionsModel := new(powervsv1.InternalV1StorageRegionsThresholdsGetOptions)
				internalV1StorageRegionsThresholdsGetOptionsModel.RegionZoneID = core.StringPtr("testString")
				internalV1StorageRegionsThresholdsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.InternalV1StorageRegionsThresholdsGet(internalV1StorageRegionsThresholdsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the InternalV1StorageRegionsThresholdsGetOptions model with no property values
				internalV1StorageRegionsThresholdsGetOptionsModelNew := new(powervsv1.InternalV1StorageRegionsThresholdsGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.InternalV1StorageRegionsThresholdsGet(internalV1StorageRegionsThresholdsGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke InternalV1StorageRegionsThresholdsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the InternalV1StorageRegionsThresholdsGetOptions model
				internalV1StorageRegionsThresholdsGetOptionsModel := new(powervsv1.InternalV1StorageRegionsThresholdsGetOptions)
				internalV1StorageRegionsThresholdsGetOptionsModel.RegionZoneID = core.StringPtr("testString")
				internalV1StorageRegionsThresholdsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.InternalV1StorageRegionsThresholdsGet(internalV1StorageRegionsThresholdsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`InternalV1StorageRegionsThresholdsPut(internalV1StorageRegionsThresholdsPutOptions *InternalV1StorageRegionsThresholdsPutOptions) - Operation response error`, func() {
		internalV1StorageRegionsThresholdsPutPath := "/internal/v1/storage/regions/testString/thresholds"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(internalV1StorageRegionsThresholdsPutPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke InternalV1StorageRegionsThresholdsPut with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the StorageEntities model
				storageEntitiesModel := new(powervsv1.StorageEntities)
				storageEntitiesModel.ExistingEntity = core.Int64Ptr(int64(38))
				storageEntitiesModel.NewEntity = core.Int64Ptr(int64(38))

				// Construct an instance of the InternalV1StorageRegionsThresholdsPutOptions model
				internalV1StorageRegionsThresholdsPutOptionsModel := new(powervsv1.InternalV1StorageRegionsThresholdsPutOptions)
				internalV1StorageRegionsThresholdsPutOptionsModel.RegionZoneID = core.StringPtr("testString")
				internalV1StorageRegionsThresholdsPutOptionsModel.Capacity = storageEntitiesModel
				internalV1StorageRegionsThresholdsPutOptionsModel.Overcommit = storageEntitiesModel
				internalV1StorageRegionsThresholdsPutOptionsModel.PhysicalCapacity = storageEntitiesModel
				internalV1StorageRegionsThresholdsPutOptionsModel.VdiskCapacity = storageEntitiesModel
				internalV1StorageRegionsThresholdsPutOptionsModel.VdiskLimit = storageEntitiesModel
				internalV1StorageRegionsThresholdsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.InternalV1StorageRegionsThresholdsPut(internalV1StorageRegionsThresholdsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.InternalV1StorageRegionsThresholdsPut(internalV1StorageRegionsThresholdsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`InternalV1StorageRegionsThresholdsPut(internalV1StorageRegionsThresholdsPutOptions *InternalV1StorageRegionsThresholdsPutOptions)`, func() {
		internalV1StorageRegionsThresholdsPutPath := "/internal/v1/storage/regions/testString/thresholds"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(internalV1StorageRegionsThresholdsPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"capacity": {"existingEntity": 14, "newEntity": 9}, "overcommit": {"existingEntity": 14, "newEntity": 9}, "physicalCapacity": {"existingEntity": 14, "newEntity": 9}, "vdiskCapacity": {"existingEntity": 14, "newEntity": 9}, "vdiskLimit": {"existingEntity": 14, "newEntity": 9}}`)
				}))
			})
			It(`Invoke InternalV1StorageRegionsThresholdsPut successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the StorageEntities model
				storageEntitiesModel := new(powervsv1.StorageEntities)
				storageEntitiesModel.ExistingEntity = core.Int64Ptr(int64(38))
				storageEntitiesModel.NewEntity = core.Int64Ptr(int64(38))

				// Construct an instance of the InternalV1StorageRegionsThresholdsPutOptions model
				internalV1StorageRegionsThresholdsPutOptionsModel := new(powervsv1.InternalV1StorageRegionsThresholdsPutOptions)
				internalV1StorageRegionsThresholdsPutOptionsModel.RegionZoneID = core.StringPtr("testString")
				internalV1StorageRegionsThresholdsPutOptionsModel.Capacity = storageEntitiesModel
				internalV1StorageRegionsThresholdsPutOptionsModel.Overcommit = storageEntitiesModel
				internalV1StorageRegionsThresholdsPutOptionsModel.PhysicalCapacity = storageEntitiesModel
				internalV1StorageRegionsThresholdsPutOptionsModel.VdiskCapacity = storageEntitiesModel
				internalV1StorageRegionsThresholdsPutOptionsModel.VdiskLimit = storageEntitiesModel
				internalV1StorageRegionsThresholdsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.InternalV1StorageRegionsThresholdsPutWithContext(ctx, internalV1StorageRegionsThresholdsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.InternalV1StorageRegionsThresholdsPut(internalV1StorageRegionsThresholdsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.InternalV1StorageRegionsThresholdsPutWithContext(ctx, internalV1StorageRegionsThresholdsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(internalV1StorageRegionsThresholdsPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"capacity": {"existingEntity": 14, "newEntity": 9}, "overcommit": {"existingEntity": 14, "newEntity": 9}, "physicalCapacity": {"existingEntity": 14, "newEntity": 9}, "vdiskCapacity": {"existingEntity": 14, "newEntity": 9}, "vdiskLimit": {"existingEntity": 14, "newEntity": 9}}`)
				}))
			})
			It(`Invoke InternalV1StorageRegionsThresholdsPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.InternalV1StorageRegionsThresholdsPut(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the StorageEntities model
				storageEntitiesModel := new(powervsv1.StorageEntities)
				storageEntitiesModel.ExistingEntity = core.Int64Ptr(int64(38))
				storageEntitiesModel.NewEntity = core.Int64Ptr(int64(38))

				// Construct an instance of the InternalV1StorageRegionsThresholdsPutOptions model
				internalV1StorageRegionsThresholdsPutOptionsModel := new(powervsv1.InternalV1StorageRegionsThresholdsPutOptions)
				internalV1StorageRegionsThresholdsPutOptionsModel.RegionZoneID = core.StringPtr("testString")
				internalV1StorageRegionsThresholdsPutOptionsModel.Capacity = storageEntitiesModel
				internalV1StorageRegionsThresholdsPutOptionsModel.Overcommit = storageEntitiesModel
				internalV1StorageRegionsThresholdsPutOptionsModel.PhysicalCapacity = storageEntitiesModel
				internalV1StorageRegionsThresholdsPutOptionsModel.VdiskCapacity = storageEntitiesModel
				internalV1StorageRegionsThresholdsPutOptionsModel.VdiskLimit = storageEntitiesModel
				internalV1StorageRegionsThresholdsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.InternalV1StorageRegionsThresholdsPut(internalV1StorageRegionsThresholdsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke InternalV1StorageRegionsThresholdsPut with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the StorageEntities model
				storageEntitiesModel := new(powervsv1.StorageEntities)
				storageEntitiesModel.ExistingEntity = core.Int64Ptr(int64(38))
				storageEntitiesModel.NewEntity = core.Int64Ptr(int64(38))

				// Construct an instance of the InternalV1StorageRegionsThresholdsPutOptions model
				internalV1StorageRegionsThresholdsPutOptionsModel := new(powervsv1.InternalV1StorageRegionsThresholdsPutOptions)
				internalV1StorageRegionsThresholdsPutOptionsModel.RegionZoneID = core.StringPtr("testString")
				internalV1StorageRegionsThresholdsPutOptionsModel.Capacity = storageEntitiesModel
				internalV1StorageRegionsThresholdsPutOptionsModel.Overcommit = storageEntitiesModel
				internalV1StorageRegionsThresholdsPutOptionsModel.PhysicalCapacity = storageEntitiesModel
				internalV1StorageRegionsThresholdsPutOptionsModel.VdiskCapacity = storageEntitiesModel
				internalV1StorageRegionsThresholdsPutOptionsModel.VdiskLimit = storageEntitiesModel
				internalV1StorageRegionsThresholdsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.InternalV1StorageRegionsThresholdsPut(internalV1StorageRegionsThresholdsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the InternalV1StorageRegionsThresholdsPutOptions model with no property values
				internalV1StorageRegionsThresholdsPutOptionsModelNew := new(powervsv1.InternalV1StorageRegionsThresholdsPutOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.InternalV1StorageRegionsThresholdsPut(internalV1StorageRegionsThresholdsPutOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke InternalV1StorageRegionsThresholdsPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the StorageEntities model
				storageEntitiesModel := new(powervsv1.StorageEntities)
				storageEntitiesModel.ExistingEntity = core.Int64Ptr(int64(38))
				storageEntitiesModel.NewEntity = core.Int64Ptr(int64(38))

				// Construct an instance of the InternalV1StorageRegionsThresholdsPutOptions model
				internalV1StorageRegionsThresholdsPutOptionsModel := new(powervsv1.InternalV1StorageRegionsThresholdsPutOptions)
				internalV1StorageRegionsThresholdsPutOptionsModel.RegionZoneID = core.StringPtr("testString")
				internalV1StorageRegionsThresholdsPutOptionsModel.Capacity = storageEntitiesModel
				internalV1StorageRegionsThresholdsPutOptionsModel.Overcommit = storageEntitiesModel
				internalV1StorageRegionsThresholdsPutOptionsModel.PhysicalCapacity = storageEntitiesModel
				internalV1StorageRegionsThresholdsPutOptionsModel.VdiskCapacity = storageEntitiesModel
				internalV1StorageRegionsThresholdsPutOptionsModel.VdiskLimit = storageEntitiesModel
				internalV1StorageRegionsThresholdsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.InternalV1StorageRegionsThresholdsPut(internalV1StorageRegionsThresholdsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`InternalV1TransitgatewayGet(internalV1TransitgatewayGetOptions *InternalV1TransitgatewayGetOptions) - Operation response error`, func() {
		internalV1TransitgatewayGetPath := "/internal/v1/transit-gateway/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(internalV1TransitgatewayGetPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["Ibm-Userauthorization"]).ToNot(BeNil())
					Expect(req.Header["Ibm-Userauthorization"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke InternalV1TransitgatewayGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the InternalV1TransitgatewayGetOptions model
				internalV1TransitgatewayGetOptionsModel := new(powervsv1.InternalV1TransitgatewayGetOptions)
				internalV1TransitgatewayGetOptionsModel.PowervsServiceCRN = core.StringPtr("testString")
				internalV1TransitgatewayGetOptionsModel.IBMUserAuthorization = core.StringPtr("testString")
				internalV1TransitgatewayGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.InternalV1TransitgatewayGet(internalV1TransitgatewayGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.InternalV1TransitgatewayGet(internalV1TransitgatewayGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`InternalV1TransitgatewayGet(internalV1TransitgatewayGetOptions *InternalV1TransitgatewayGetOptions)`, func() {
		internalV1TransitgatewayGetPath := "/internal/v1/transit-gateway/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(internalV1TransitgatewayGetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["Ibm-Userauthorization"]).ToNot(BeNil())
					Expect(req.Header["Ibm-Userauthorization"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"errors": [{"code": "Code", "message": "Message", "target": {"name": "Name", "type": "Type"}}], "resourceGroupId": "2bf1887bf5c947b1966de2bd88220489", "routeDistinguisher": "47902:3255120092", "routeTarget": "47902:3255120092", "serviceCrn": "crn:v1:bluemix:public:power-iaas:dal12:a/2bc3df23c0d14ebe921397bd8aa2573a:3a5798f1-4d2b-4e0a-9311-9b0fd6b94698::", "serviceId": "3a5798f1-4d2b-4e0a-9311-9b0fd6b94698", "trace": "Trace"}`)
				}))
			})
			It(`Invoke InternalV1TransitgatewayGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the InternalV1TransitgatewayGetOptions model
				internalV1TransitgatewayGetOptionsModel := new(powervsv1.InternalV1TransitgatewayGetOptions)
				internalV1TransitgatewayGetOptionsModel.PowervsServiceCRN = core.StringPtr("testString")
				internalV1TransitgatewayGetOptionsModel.IBMUserAuthorization = core.StringPtr("testString")
				internalV1TransitgatewayGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.InternalV1TransitgatewayGetWithContext(ctx, internalV1TransitgatewayGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.InternalV1TransitgatewayGet(internalV1TransitgatewayGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.InternalV1TransitgatewayGetWithContext(ctx, internalV1TransitgatewayGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(internalV1TransitgatewayGetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["Ibm-Userauthorization"]).ToNot(BeNil())
					Expect(req.Header["Ibm-Userauthorization"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"errors": [{"code": "Code", "message": "Message", "target": {"name": "Name", "type": "Type"}}], "resourceGroupId": "2bf1887bf5c947b1966de2bd88220489", "routeDistinguisher": "47902:3255120092", "routeTarget": "47902:3255120092", "serviceCrn": "crn:v1:bluemix:public:power-iaas:dal12:a/2bc3df23c0d14ebe921397bd8aa2573a:3a5798f1-4d2b-4e0a-9311-9b0fd6b94698::", "serviceId": "3a5798f1-4d2b-4e0a-9311-9b0fd6b94698", "trace": "Trace"}`)
				}))
			})
			It(`Invoke InternalV1TransitgatewayGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.InternalV1TransitgatewayGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the InternalV1TransitgatewayGetOptions model
				internalV1TransitgatewayGetOptionsModel := new(powervsv1.InternalV1TransitgatewayGetOptions)
				internalV1TransitgatewayGetOptionsModel.PowervsServiceCRN = core.StringPtr("testString")
				internalV1TransitgatewayGetOptionsModel.IBMUserAuthorization = core.StringPtr("testString")
				internalV1TransitgatewayGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.InternalV1TransitgatewayGet(internalV1TransitgatewayGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke InternalV1TransitgatewayGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the InternalV1TransitgatewayGetOptions model
				internalV1TransitgatewayGetOptionsModel := new(powervsv1.InternalV1TransitgatewayGetOptions)
				internalV1TransitgatewayGetOptionsModel.PowervsServiceCRN = core.StringPtr("testString")
				internalV1TransitgatewayGetOptionsModel.IBMUserAuthorization = core.StringPtr("testString")
				internalV1TransitgatewayGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.InternalV1TransitgatewayGet(internalV1TransitgatewayGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the InternalV1TransitgatewayGetOptions model with no property values
				internalV1TransitgatewayGetOptionsModelNew := new(powervsv1.InternalV1TransitgatewayGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.InternalV1TransitgatewayGet(internalV1TransitgatewayGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke InternalV1TransitgatewayGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the InternalV1TransitgatewayGetOptions model
				internalV1TransitgatewayGetOptionsModel := new(powervsv1.InternalV1TransitgatewayGetOptions)
				internalV1TransitgatewayGetOptionsModel.PowervsServiceCRN = core.StringPtr("testString")
				internalV1TransitgatewayGetOptionsModel.IBMUserAuthorization = core.StringPtr("testString")
				internalV1TransitgatewayGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.InternalV1TransitgatewayGet(internalV1TransitgatewayGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerOpenstacksGet(serviceBrokerOpenstacksGetOptions *ServiceBrokerOpenstacksGetOptions) - Operation response error`, func() {
		serviceBrokerOpenstacksGetPath := "/broker/v1/openstacks"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerOpenstacksGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceBrokerOpenstacksGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerOpenstacksGetOptions model
				serviceBrokerOpenstacksGetOptionsModel := new(powervsv1.ServiceBrokerOpenstacksGetOptions)
				serviceBrokerOpenstacksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceBrokerOpenstacksGet(serviceBrokerOpenstacksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceBrokerOpenstacksGet(serviceBrokerOpenstacksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerOpenstacksGet(serviceBrokerOpenstacksGetOptions *ServiceBrokerOpenstacksGetOptions)`, func() {
		serviceBrokerOpenstacksGetPath := "/broker/v1/openstacks"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerOpenstacksGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"openStacks": [{"id": "ID", "ipAddress": "IPAddress", "name": "Name", "nextVLANID": 10, "region": "Region"}]}`)
				}))
			})
			It(`Invoke ServiceBrokerOpenstacksGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceBrokerOpenstacksGetOptions model
				serviceBrokerOpenstacksGetOptionsModel := new(powervsv1.ServiceBrokerOpenstacksGetOptions)
				serviceBrokerOpenstacksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceBrokerOpenstacksGetWithContext(ctx, serviceBrokerOpenstacksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceBrokerOpenstacksGet(serviceBrokerOpenstacksGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceBrokerOpenstacksGetWithContext(ctx, serviceBrokerOpenstacksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerOpenstacksGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"openStacks": [{"id": "ID", "ipAddress": "IPAddress", "name": "Name", "nextVLANID": 10, "region": "Region"}]}`)
				}))
			})
			It(`Invoke ServiceBrokerOpenstacksGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceBrokerOpenstacksGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceBrokerOpenstacksGetOptions model
				serviceBrokerOpenstacksGetOptionsModel := new(powervsv1.ServiceBrokerOpenstacksGetOptions)
				serviceBrokerOpenstacksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceBrokerOpenstacksGet(serviceBrokerOpenstacksGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceBrokerOpenstacksGet with error: Operation request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerOpenstacksGetOptions model
				serviceBrokerOpenstacksGetOptionsModel := new(powervsv1.ServiceBrokerOpenstacksGetOptions)
				serviceBrokerOpenstacksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceBrokerOpenstacksGet(serviceBrokerOpenstacksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceBrokerOpenstacksGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerOpenstacksGetOptions model
				serviceBrokerOpenstacksGetOptionsModel := new(powervsv1.ServiceBrokerOpenstacksGetOptions)
				serviceBrokerOpenstacksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceBrokerOpenstacksGet(serviceBrokerOpenstacksGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerOpenstacksPost(serviceBrokerOpenstacksPostOptions *ServiceBrokerOpenstacksPostOptions) - Operation response error`, func() {
		serviceBrokerOpenstacksPostPath := "/broker/v1/openstacks"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerOpenstacksPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceBrokerOpenstacksPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerOpenstacksPostOptions model
				serviceBrokerOpenstacksPostOptionsModel := new(powervsv1.ServiceBrokerOpenstacksPostOptions)
				serviceBrokerOpenstacksPostOptionsModel.IPAddress = core.StringPtr("testString")
				serviceBrokerOpenstacksPostOptionsModel.Name = core.StringPtr("testString")
				serviceBrokerOpenstacksPostOptionsModel.Region = core.StringPtr("testString")
				serviceBrokerOpenstacksPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceBrokerOpenstacksPost(serviceBrokerOpenstacksPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceBrokerOpenstacksPost(serviceBrokerOpenstacksPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerOpenstacksPost(serviceBrokerOpenstacksPostOptions *ServiceBrokerOpenstacksPostOptions)`, func() {
		serviceBrokerOpenstacksPostPath := "/broker/v1/openstacks"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerOpenstacksPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "ipAddress": "IPAddress", "name": "Name", "nextVLANID": 10, "region": "Region"}`)
				}))
			})
			It(`Invoke ServiceBrokerOpenstacksPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceBrokerOpenstacksPostOptions model
				serviceBrokerOpenstacksPostOptionsModel := new(powervsv1.ServiceBrokerOpenstacksPostOptions)
				serviceBrokerOpenstacksPostOptionsModel.IPAddress = core.StringPtr("testString")
				serviceBrokerOpenstacksPostOptionsModel.Name = core.StringPtr("testString")
				serviceBrokerOpenstacksPostOptionsModel.Region = core.StringPtr("testString")
				serviceBrokerOpenstacksPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceBrokerOpenstacksPostWithContext(ctx, serviceBrokerOpenstacksPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceBrokerOpenstacksPost(serviceBrokerOpenstacksPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceBrokerOpenstacksPostWithContext(ctx, serviceBrokerOpenstacksPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerOpenstacksPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "ipAddress": "IPAddress", "name": "Name", "nextVLANID": 10, "region": "Region"}`)
				}))
			})
			It(`Invoke ServiceBrokerOpenstacksPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceBrokerOpenstacksPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceBrokerOpenstacksPostOptions model
				serviceBrokerOpenstacksPostOptionsModel := new(powervsv1.ServiceBrokerOpenstacksPostOptions)
				serviceBrokerOpenstacksPostOptionsModel.IPAddress = core.StringPtr("testString")
				serviceBrokerOpenstacksPostOptionsModel.Name = core.StringPtr("testString")
				serviceBrokerOpenstacksPostOptionsModel.Region = core.StringPtr("testString")
				serviceBrokerOpenstacksPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceBrokerOpenstacksPost(serviceBrokerOpenstacksPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceBrokerOpenstacksPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerOpenstacksPostOptions model
				serviceBrokerOpenstacksPostOptionsModel := new(powervsv1.ServiceBrokerOpenstacksPostOptions)
				serviceBrokerOpenstacksPostOptionsModel.IPAddress = core.StringPtr("testString")
				serviceBrokerOpenstacksPostOptionsModel.Name = core.StringPtr("testString")
				serviceBrokerOpenstacksPostOptionsModel.Region = core.StringPtr("testString")
				serviceBrokerOpenstacksPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceBrokerOpenstacksPost(serviceBrokerOpenstacksPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ServiceBrokerOpenstacksPostOptions model with no property values
				serviceBrokerOpenstacksPostOptionsModelNew := new(powervsv1.ServiceBrokerOpenstacksPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.ServiceBrokerOpenstacksPost(serviceBrokerOpenstacksPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceBrokerOpenstacksPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerOpenstacksPostOptions model
				serviceBrokerOpenstacksPostOptionsModel := new(powervsv1.ServiceBrokerOpenstacksPostOptions)
				serviceBrokerOpenstacksPostOptionsModel.IPAddress = core.StringPtr("testString")
				serviceBrokerOpenstacksPostOptionsModel.Name = core.StringPtr("testString")
				serviceBrokerOpenstacksPostOptionsModel.Region = core.StringPtr("testString")
				serviceBrokerOpenstacksPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceBrokerOpenstacksPost(serviceBrokerOpenstacksPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerOpenstacksOpenstackGet(serviceBrokerOpenstacksOpenstackGetOptions *ServiceBrokerOpenstacksOpenstackGetOptions) - Operation response error`, func() {
		serviceBrokerOpenstacksOpenstackGetPath := "/broker/v1/openstacks/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerOpenstacksOpenstackGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceBrokerOpenstacksOpenstackGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerOpenstacksOpenstackGetOptions model
				serviceBrokerOpenstacksOpenstackGetOptionsModel := new(powervsv1.ServiceBrokerOpenstacksOpenstackGetOptions)
				serviceBrokerOpenstacksOpenstackGetOptionsModel.OpenstackID = core.StringPtr("testString")
				serviceBrokerOpenstacksOpenstackGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceBrokerOpenstacksOpenstackGet(serviceBrokerOpenstacksOpenstackGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceBrokerOpenstacksOpenstackGet(serviceBrokerOpenstacksOpenstackGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerOpenstacksOpenstackGet(serviceBrokerOpenstacksOpenstackGetOptions *ServiceBrokerOpenstacksOpenstackGetOptions)`, func() {
		serviceBrokerOpenstacksOpenstackGetPath := "/broker/v1/openstacks/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerOpenstacksOpenstackGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"hosts": [{"cores": {"free": 4, "total": 5, "used": 4}, "hostname": "Hostname", "ipAddress": "IPAddress", "memory": {"free": 4, "total": 5, "used": 4}, "pvmInstances": [{"cloudInstanceID": "CloudInstanceID", "owner": {"countryCode": "CountryCode", "currencyCode": "CurrencyCode", "email": "Email", "iamID": "IamID", "isIBMer": false, "name": "Name", "softlayerIDs": ["SoftlayerIDs"], "softlayerSubscriptions": [{"id": "ID", "state": "State"}], "userID": "UserID"}, "pvmInstanceID": "PvmInstanceID", "pvmName": "PvmName", "state": "State", "tenantID": "TenantID"}]}], "region": "Region"}`)
				}))
			})
			It(`Invoke ServiceBrokerOpenstacksOpenstackGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceBrokerOpenstacksOpenstackGetOptions model
				serviceBrokerOpenstacksOpenstackGetOptionsModel := new(powervsv1.ServiceBrokerOpenstacksOpenstackGetOptions)
				serviceBrokerOpenstacksOpenstackGetOptionsModel.OpenstackID = core.StringPtr("testString")
				serviceBrokerOpenstacksOpenstackGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceBrokerOpenstacksOpenstackGetWithContext(ctx, serviceBrokerOpenstacksOpenstackGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceBrokerOpenstacksOpenstackGet(serviceBrokerOpenstacksOpenstackGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceBrokerOpenstacksOpenstackGetWithContext(ctx, serviceBrokerOpenstacksOpenstackGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerOpenstacksOpenstackGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"hosts": [{"cores": {"free": 4, "total": 5, "used": 4}, "hostname": "Hostname", "ipAddress": "IPAddress", "memory": {"free": 4, "total": 5, "used": 4}, "pvmInstances": [{"cloudInstanceID": "CloudInstanceID", "owner": {"countryCode": "CountryCode", "currencyCode": "CurrencyCode", "email": "Email", "iamID": "IamID", "isIBMer": false, "name": "Name", "softlayerIDs": ["SoftlayerIDs"], "softlayerSubscriptions": [{"id": "ID", "state": "State"}], "userID": "UserID"}, "pvmInstanceID": "PvmInstanceID", "pvmName": "PvmName", "state": "State", "tenantID": "TenantID"}]}], "region": "Region"}`)
				}))
			})
			It(`Invoke ServiceBrokerOpenstacksOpenstackGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceBrokerOpenstacksOpenstackGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceBrokerOpenstacksOpenstackGetOptions model
				serviceBrokerOpenstacksOpenstackGetOptionsModel := new(powervsv1.ServiceBrokerOpenstacksOpenstackGetOptions)
				serviceBrokerOpenstacksOpenstackGetOptionsModel.OpenstackID = core.StringPtr("testString")
				serviceBrokerOpenstacksOpenstackGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceBrokerOpenstacksOpenstackGet(serviceBrokerOpenstacksOpenstackGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceBrokerOpenstacksOpenstackGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerOpenstacksOpenstackGetOptions model
				serviceBrokerOpenstacksOpenstackGetOptionsModel := new(powervsv1.ServiceBrokerOpenstacksOpenstackGetOptions)
				serviceBrokerOpenstacksOpenstackGetOptionsModel.OpenstackID = core.StringPtr("testString")
				serviceBrokerOpenstacksOpenstackGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceBrokerOpenstacksOpenstackGet(serviceBrokerOpenstacksOpenstackGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ServiceBrokerOpenstacksOpenstackGetOptions model with no property values
				serviceBrokerOpenstacksOpenstackGetOptionsModelNew := new(powervsv1.ServiceBrokerOpenstacksOpenstackGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.ServiceBrokerOpenstacksOpenstackGet(serviceBrokerOpenstacksOpenstackGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceBrokerOpenstacksOpenstackGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerOpenstacksOpenstackGetOptions model
				serviceBrokerOpenstacksOpenstackGetOptionsModel := new(powervsv1.ServiceBrokerOpenstacksOpenstackGetOptions)
				serviceBrokerOpenstacksOpenstackGetOptionsModel.OpenstackID = core.StringPtr("testString")
				serviceBrokerOpenstacksOpenstackGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceBrokerOpenstacksOpenstackGet(serviceBrokerOpenstacksOpenstackGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerOpenstacksHostsGet(serviceBrokerOpenstacksHostsGetOptions *ServiceBrokerOpenstacksHostsGetOptions) - Operation response error`, func() {
		serviceBrokerOpenstacksHostsGetPath := "/broker/v1/openstacks/testString/hosts/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerOpenstacksHostsGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceBrokerOpenstacksHostsGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerOpenstacksHostsGetOptions model
				serviceBrokerOpenstacksHostsGetOptionsModel := new(powervsv1.ServiceBrokerOpenstacksHostsGetOptions)
				serviceBrokerOpenstacksHostsGetOptionsModel.Hostname = core.StringPtr("testString")
				serviceBrokerOpenstacksHostsGetOptionsModel.OpenstackID = core.StringPtr("testString")
				serviceBrokerOpenstacksHostsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceBrokerOpenstacksHostsGet(serviceBrokerOpenstacksHostsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceBrokerOpenstacksHostsGet(serviceBrokerOpenstacksHostsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerOpenstacksHostsGet(serviceBrokerOpenstacksHostsGetOptions *ServiceBrokerOpenstacksHostsGetOptions)`, func() {
		serviceBrokerOpenstacksHostsGetPath := "/broker/v1/openstacks/testString/hosts/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerOpenstacksHostsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"cores": {"free": 4, "total": 5, "used": 4}, "hostname": "Hostname", "ipAddress": "IPAddress", "memory": {"free": 4, "total": 5, "used": 4}, "pvmInstances": [{"cloudInstanceID": "CloudInstanceID", "owner": {"countryCode": "CountryCode", "currencyCode": "CurrencyCode", "email": "Email", "iamID": "IamID", "isIBMer": false, "name": "Name", "softlayerIDs": ["SoftlayerIDs"], "softlayerSubscriptions": [{"id": "ID", "state": "State"}], "userID": "UserID"}, "pvmInstanceID": "PvmInstanceID", "pvmName": "PvmName", "state": "State", "tenantID": "TenantID"}]}`)
				}))
			})
			It(`Invoke ServiceBrokerOpenstacksHostsGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceBrokerOpenstacksHostsGetOptions model
				serviceBrokerOpenstacksHostsGetOptionsModel := new(powervsv1.ServiceBrokerOpenstacksHostsGetOptions)
				serviceBrokerOpenstacksHostsGetOptionsModel.Hostname = core.StringPtr("testString")
				serviceBrokerOpenstacksHostsGetOptionsModel.OpenstackID = core.StringPtr("testString")
				serviceBrokerOpenstacksHostsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceBrokerOpenstacksHostsGetWithContext(ctx, serviceBrokerOpenstacksHostsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceBrokerOpenstacksHostsGet(serviceBrokerOpenstacksHostsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceBrokerOpenstacksHostsGetWithContext(ctx, serviceBrokerOpenstacksHostsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerOpenstacksHostsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"cores": {"free": 4, "total": 5, "used": 4}, "hostname": "Hostname", "ipAddress": "IPAddress", "memory": {"free": 4, "total": 5, "used": 4}, "pvmInstances": [{"cloudInstanceID": "CloudInstanceID", "owner": {"countryCode": "CountryCode", "currencyCode": "CurrencyCode", "email": "Email", "iamID": "IamID", "isIBMer": false, "name": "Name", "softlayerIDs": ["SoftlayerIDs"], "softlayerSubscriptions": [{"id": "ID", "state": "State"}], "userID": "UserID"}, "pvmInstanceID": "PvmInstanceID", "pvmName": "PvmName", "state": "State", "tenantID": "TenantID"}]}`)
				}))
			})
			It(`Invoke ServiceBrokerOpenstacksHostsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceBrokerOpenstacksHostsGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceBrokerOpenstacksHostsGetOptions model
				serviceBrokerOpenstacksHostsGetOptionsModel := new(powervsv1.ServiceBrokerOpenstacksHostsGetOptions)
				serviceBrokerOpenstacksHostsGetOptionsModel.Hostname = core.StringPtr("testString")
				serviceBrokerOpenstacksHostsGetOptionsModel.OpenstackID = core.StringPtr("testString")
				serviceBrokerOpenstacksHostsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceBrokerOpenstacksHostsGet(serviceBrokerOpenstacksHostsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceBrokerOpenstacksHostsGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerOpenstacksHostsGetOptions model
				serviceBrokerOpenstacksHostsGetOptionsModel := new(powervsv1.ServiceBrokerOpenstacksHostsGetOptions)
				serviceBrokerOpenstacksHostsGetOptionsModel.Hostname = core.StringPtr("testString")
				serviceBrokerOpenstacksHostsGetOptionsModel.OpenstackID = core.StringPtr("testString")
				serviceBrokerOpenstacksHostsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceBrokerOpenstacksHostsGet(serviceBrokerOpenstacksHostsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ServiceBrokerOpenstacksHostsGetOptions model with no property values
				serviceBrokerOpenstacksHostsGetOptionsModelNew := new(powervsv1.ServiceBrokerOpenstacksHostsGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.ServiceBrokerOpenstacksHostsGet(serviceBrokerOpenstacksHostsGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceBrokerOpenstacksHostsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerOpenstacksHostsGetOptions model
				serviceBrokerOpenstacksHostsGetOptionsModel := new(powervsv1.ServiceBrokerOpenstacksHostsGetOptions)
				serviceBrokerOpenstacksHostsGetOptionsModel.Hostname = core.StringPtr("testString")
				serviceBrokerOpenstacksHostsGetOptionsModel.OpenstackID = core.StringPtr("testString")
				serviceBrokerOpenstacksHostsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceBrokerOpenstacksHostsGet(serviceBrokerOpenstacksHostsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerOpenstacksServersGet(serviceBrokerOpenstacksServersGetOptions *ServiceBrokerOpenstacksServersGetOptions) - Operation response error`, func() {
		serviceBrokerOpenstacksServersGetPath := "/broker/v1/openstacks/testString/servers/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerOpenstacksServersGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceBrokerOpenstacksServersGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerOpenstacksServersGetOptions model
				serviceBrokerOpenstacksServersGetOptionsModel := new(powervsv1.ServiceBrokerOpenstacksServersGetOptions)
				serviceBrokerOpenstacksServersGetOptionsModel.OpenstackID = core.StringPtr("testString")
				serviceBrokerOpenstacksServersGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				serviceBrokerOpenstacksServersGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceBrokerOpenstacksServersGet(serviceBrokerOpenstacksServersGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceBrokerOpenstacksServersGet(serviceBrokerOpenstacksServersGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerOpenstacksServersGet(serviceBrokerOpenstacksServersGetOptions *ServiceBrokerOpenstacksServersGetOptions)`, func() {
		serviceBrokerOpenstacksServersGetPath := "/broker/v1/openstacks/testString/servers/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerOpenstacksServersGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"cloudInstanceID": "CloudInstanceID", "owner": {"countryCode": "CountryCode", "currencyCode": "CurrencyCode", "email": "Email", "iamID": "IamID", "isIBMer": false, "name": "Name", "softlayerIDs": ["SoftlayerIDs"], "softlayerSubscriptions": [{"id": "ID", "state": "State"}], "userID": "UserID"}, "pvmInstanceID": "PvmInstanceID", "pvmName": "PvmName", "state": "State", "tenantID": "TenantID"}`)
				}))
			})
			It(`Invoke ServiceBrokerOpenstacksServersGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceBrokerOpenstacksServersGetOptions model
				serviceBrokerOpenstacksServersGetOptionsModel := new(powervsv1.ServiceBrokerOpenstacksServersGetOptions)
				serviceBrokerOpenstacksServersGetOptionsModel.OpenstackID = core.StringPtr("testString")
				serviceBrokerOpenstacksServersGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				serviceBrokerOpenstacksServersGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceBrokerOpenstacksServersGetWithContext(ctx, serviceBrokerOpenstacksServersGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceBrokerOpenstacksServersGet(serviceBrokerOpenstacksServersGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceBrokerOpenstacksServersGetWithContext(ctx, serviceBrokerOpenstacksServersGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerOpenstacksServersGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"cloudInstanceID": "CloudInstanceID", "owner": {"countryCode": "CountryCode", "currencyCode": "CurrencyCode", "email": "Email", "iamID": "IamID", "isIBMer": false, "name": "Name", "softlayerIDs": ["SoftlayerIDs"], "softlayerSubscriptions": [{"id": "ID", "state": "State"}], "userID": "UserID"}, "pvmInstanceID": "PvmInstanceID", "pvmName": "PvmName", "state": "State", "tenantID": "TenantID"}`)
				}))
			})
			It(`Invoke ServiceBrokerOpenstacksServersGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceBrokerOpenstacksServersGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceBrokerOpenstacksServersGetOptions model
				serviceBrokerOpenstacksServersGetOptionsModel := new(powervsv1.ServiceBrokerOpenstacksServersGetOptions)
				serviceBrokerOpenstacksServersGetOptionsModel.OpenstackID = core.StringPtr("testString")
				serviceBrokerOpenstacksServersGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				serviceBrokerOpenstacksServersGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceBrokerOpenstacksServersGet(serviceBrokerOpenstacksServersGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceBrokerOpenstacksServersGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerOpenstacksServersGetOptions model
				serviceBrokerOpenstacksServersGetOptionsModel := new(powervsv1.ServiceBrokerOpenstacksServersGetOptions)
				serviceBrokerOpenstacksServersGetOptionsModel.OpenstackID = core.StringPtr("testString")
				serviceBrokerOpenstacksServersGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				serviceBrokerOpenstacksServersGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceBrokerOpenstacksServersGet(serviceBrokerOpenstacksServersGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ServiceBrokerOpenstacksServersGetOptions model with no property values
				serviceBrokerOpenstacksServersGetOptionsModelNew := new(powervsv1.ServiceBrokerOpenstacksServersGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.ServiceBrokerOpenstacksServersGet(serviceBrokerOpenstacksServersGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceBrokerOpenstacksServersGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerOpenstacksServersGetOptions model
				serviceBrokerOpenstacksServersGetOptionsModel := new(powervsv1.ServiceBrokerOpenstacksServersGetOptions)
				serviceBrokerOpenstacksServersGetOptionsModel.OpenstackID = core.StringPtr("testString")
				serviceBrokerOpenstacksServersGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				serviceBrokerOpenstacksServersGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceBrokerOpenstacksServersGet(serviceBrokerOpenstacksServersGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudconnectionsGetall(pcloudCloudconnectionsGetallOptions *PcloudCloudconnectionsGetallOptions) - Operation response error`, func() {
		pcloudCloudconnectionsGetallPath := "/pcloud/v1/cloud-instances/testString/cloud-connections"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudconnectionsGetallPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudconnectionsGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudconnectionsGetallOptions model
				pcloudCloudconnectionsGetallOptionsModel := new(powervsv1.PcloudCloudconnectionsGetallOptions)
				pcloudCloudconnectionsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudconnectionsGetall(pcloudCloudconnectionsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudconnectionsGetall(pcloudCloudconnectionsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudconnectionsGetall(pcloudCloudconnectionsGetallOptions *PcloudCloudconnectionsGetallOptions)`, func() {
		pcloudCloudconnectionsGetallPath := "/pcloud/v1/cloud-instances/testString/cloud-connections"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudconnectionsGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"cloudConnections": [{"classic": {"enabled": false, "gre": {"destIPAddress": "DestIPAddress", "sourceIPAddress": "SourceIPAddress"}}, "cloudConnectionID": "CloudConnectionID", "connectionMode": "ConnectionMode", "creationDate": "2019-01-01T12:00:00.000Z", "globalRouting": false, "ibmIPAddress": "IBMIPAddress", "linkStatus": "LinkStatus", "metered": false, "name": "Name", "networks": [{"accessConfig": "internal-only", "dhcpManaged": false, "href": "Href", "jumbo": false, "mtu": 3, "name": "Name", "networkID": "NetworkID", "type": "vlan", "vlanID": 6}], "port": "Port", "speed": 5, "userIPAddress": "UserIPAddress", "vpc": {"enabled": false, "vpcs": [{"name": "Name", "vpcID": "VPCID"}]}}]}`)
				}))
			})
			It(`Invoke PcloudCloudconnectionsGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudconnectionsGetallOptions model
				pcloudCloudconnectionsGetallOptionsModel := new(powervsv1.PcloudCloudconnectionsGetallOptions)
				pcloudCloudconnectionsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudconnectionsGetallWithContext(ctx, pcloudCloudconnectionsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudconnectionsGetall(pcloudCloudconnectionsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudconnectionsGetallWithContext(ctx, pcloudCloudconnectionsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudconnectionsGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"cloudConnections": [{"classic": {"enabled": false, "gre": {"destIPAddress": "DestIPAddress", "sourceIPAddress": "SourceIPAddress"}}, "cloudConnectionID": "CloudConnectionID", "connectionMode": "ConnectionMode", "creationDate": "2019-01-01T12:00:00.000Z", "globalRouting": false, "ibmIPAddress": "IBMIPAddress", "linkStatus": "LinkStatus", "metered": false, "name": "Name", "networks": [{"accessConfig": "internal-only", "dhcpManaged": false, "href": "Href", "jumbo": false, "mtu": 3, "name": "Name", "networkID": "NetworkID", "type": "vlan", "vlanID": 6}], "port": "Port", "speed": 5, "userIPAddress": "UserIPAddress", "vpc": {"enabled": false, "vpcs": [{"name": "Name", "vpcID": "VPCID"}]}}]}`)
				}))
			})
			It(`Invoke PcloudCloudconnectionsGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudconnectionsGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudconnectionsGetallOptions model
				pcloudCloudconnectionsGetallOptionsModel := new(powervsv1.PcloudCloudconnectionsGetallOptions)
				pcloudCloudconnectionsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudconnectionsGetall(pcloudCloudconnectionsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudconnectionsGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudconnectionsGetallOptions model
				pcloudCloudconnectionsGetallOptionsModel := new(powervsv1.PcloudCloudconnectionsGetallOptions)
				pcloudCloudconnectionsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudconnectionsGetall(pcloudCloudconnectionsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudconnectionsGetallOptions model with no property values
				pcloudCloudconnectionsGetallOptionsModelNew := new(powervsv1.PcloudCloudconnectionsGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudconnectionsGetall(pcloudCloudconnectionsGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudconnectionsGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudconnectionsGetallOptions model
				pcloudCloudconnectionsGetallOptionsModel := new(powervsv1.PcloudCloudconnectionsGetallOptions)
				pcloudCloudconnectionsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudconnectionsGetall(pcloudCloudconnectionsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudconnectionsPost(pcloudCloudconnectionsPostOptions *PcloudCloudconnectionsPostOptions) - Operation response error`, func() {
		pcloudCloudconnectionsPostPath := "/pcloud/v1/cloud-instances/testString/cloud-connections"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudconnectionsPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudconnectionsPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the CloudConnectionGreTunnelCreate model
				cloudConnectionGreTunnelCreateModel := new(powervsv1.CloudConnectionGreTunnelCreate)
				cloudConnectionGreTunnelCreateModel.CIDR = core.StringPtr("testString")
				cloudConnectionGreTunnelCreateModel.DestIPAddress = core.StringPtr("testString")

				// Construct an instance of the CloudConnectionEndpointClassicUpdate model
				cloudConnectionEndpointClassicUpdateModel := new(powervsv1.CloudConnectionEndpointClassicUpdate)
				cloudConnectionEndpointClassicUpdateModel.Enabled = core.BoolPtr(true)
				cloudConnectionEndpointClassicUpdateModel.Gre = cloudConnectionGreTunnelCreateModel

				// Construct an instance of the CloudConnectionVPC model
				cloudConnectionVPCModel := new(powervsv1.CloudConnectionVPC)
				cloudConnectionVPCModel.Name = core.StringPtr("testString")
				cloudConnectionVPCModel.VPCID = core.StringPtr("testString")

				// Construct an instance of the CloudConnectionEndpointVPC model
				cloudConnectionEndpointVPCModel := new(powervsv1.CloudConnectionEndpointVPC)
				cloudConnectionEndpointVPCModel.Enabled = core.BoolPtr(true)
				cloudConnectionEndpointVPCModel.Vpcs = []powervsv1.CloudConnectionVPC{*cloudConnectionVPCModel}

				// Construct an instance of the PcloudCloudconnectionsPostOptions model
				pcloudCloudconnectionsPostOptionsModel := new(powervsv1.PcloudCloudconnectionsPostOptions)
				pcloudCloudconnectionsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudCloudconnectionsPostOptionsModel.Speed = core.Int64Ptr(int64(50))
				pcloudCloudconnectionsPostOptionsModel.Classic = cloudConnectionEndpointClassicUpdateModel
				pcloudCloudconnectionsPostOptionsModel.GlobalRouting = core.BoolPtr(true)
				pcloudCloudconnectionsPostOptionsModel.Metered = core.BoolPtr(true)
				pcloudCloudconnectionsPostOptionsModel.Subnets = []string{"testString"}
				pcloudCloudconnectionsPostOptionsModel.TransitEnabled = core.BoolPtr(true)
				pcloudCloudconnectionsPostOptionsModel.VPC = cloudConnectionEndpointVPCModel
				pcloudCloudconnectionsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudconnectionsPost(pcloudCloudconnectionsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudconnectionsPost(pcloudCloudconnectionsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudconnectionsPost(pcloudCloudconnectionsPostOptions *PcloudCloudconnectionsPostOptions)`, func() {
		pcloudCloudconnectionsPostPath := "/pcloud/v1/cloud-instances/testString/cloud-connections"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudconnectionsPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"classic": {"enabled": false, "gre": {"destIPAddress": "DestIPAddress", "sourceIPAddress": "SourceIPAddress"}}, "cloudConnectionID": "CloudConnectionID", "connectionMode": "ConnectionMode", "creationDate": "2019-01-01T12:00:00.000Z", "globalRouting": false, "ibmIPAddress": "IBMIPAddress", "linkStatus": "LinkStatus", "metered": false, "name": "Name", "networks": [{"accessConfig": "internal-only", "dhcpManaged": false, "href": "Href", "jumbo": false, "mtu": 3, "name": "Name", "networkID": "NetworkID", "type": "vlan", "vlanID": 6}], "port": "Port", "speed": 5, "userIPAddress": "UserIPAddress", "vpc": {"enabled": false, "vpcs": [{"name": "Name", "vpcID": "VPCID"}]}}`)
				}))
			})
			It(`Invoke PcloudCloudconnectionsPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the CloudConnectionGreTunnelCreate model
				cloudConnectionGreTunnelCreateModel := new(powervsv1.CloudConnectionGreTunnelCreate)
				cloudConnectionGreTunnelCreateModel.CIDR = core.StringPtr("testString")
				cloudConnectionGreTunnelCreateModel.DestIPAddress = core.StringPtr("testString")

				// Construct an instance of the CloudConnectionEndpointClassicUpdate model
				cloudConnectionEndpointClassicUpdateModel := new(powervsv1.CloudConnectionEndpointClassicUpdate)
				cloudConnectionEndpointClassicUpdateModel.Enabled = core.BoolPtr(true)
				cloudConnectionEndpointClassicUpdateModel.Gre = cloudConnectionGreTunnelCreateModel

				// Construct an instance of the CloudConnectionVPC model
				cloudConnectionVPCModel := new(powervsv1.CloudConnectionVPC)
				cloudConnectionVPCModel.Name = core.StringPtr("testString")
				cloudConnectionVPCModel.VPCID = core.StringPtr("testString")

				// Construct an instance of the CloudConnectionEndpointVPC model
				cloudConnectionEndpointVPCModel := new(powervsv1.CloudConnectionEndpointVPC)
				cloudConnectionEndpointVPCModel.Enabled = core.BoolPtr(true)
				cloudConnectionEndpointVPCModel.Vpcs = []powervsv1.CloudConnectionVPC{*cloudConnectionVPCModel}

				// Construct an instance of the PcloudCloudconnectionsPostOptions model
				pcloudCloudconnectionsPostOptionsModel := new(powervsv1.PcloudCloudconnectionsPostOptions)
				pcloudCloudconnectionsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudCloudconnectionsPostOptionsModel.Speed = core.Int64Ptr(int64(50))
				pcloudCloudconnectionsPostOptionsModel.Classic = cloudConnectionEndpointClassicUpdateModel
				pcloudCloudconnectionsPostOptionsModel.GlobalRouting = core.BoolPtr(true)
				pcloudCloudconnectionsPostOptionsModel.Metered = core.BoolPtr(true)
				pcloudCloudconnectionsPostOptionsModel.Subnets = []string{"testString"}
				pcloudCloudconnectionsPostOptionsModel.TransitEnabled = core.BoolPtr(true)
				pcloudCloudconnectionsPostOptionsModel.VPC = cloudConnectionEndpointVPCModel
				pcloudCloudconnectionsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudconnectionsPostWithContext(ctx, pcloudCloudconnectionsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudconnectionsPost(pcloudCloudconnectionsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudconnectionsPostWithContext(ctx, pcloudCloudconnectionsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudconnectionsPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"classic": {"enabled": false, "gre": {"destIPAddress": "DestIPAddress", "sourceIPAddress": "SourceIPAddress"}}, "cloudConnectionID": "CloudConnectionID", "connectionMode": "ConnectionMode", "creationDate": "2019-01-01T12:00:00.000Z", "globalRouting": false, "ibmIPAddress": "IBMIPAddress", "linkStatus": "LinkStatus", "metered": false, "name": "Name", "networks": [{"accessConfig": "internal-only", "dhcpManaged": false, "href": "Href", "jumbo": false, "mtu": 3, "name": "Name", "networkID": "NetworkID", "type": "vlan", "vlanID": 6}], "port": "Port", "speed": 5, "userIPAddress": "UserIPAddress", "vpc": {"enabled": false, "vpcs": [{"name": "Name", "vpcID": "VPCID"}]}}`)
				}))
			})
			It(`Invoke PcloudCloudconnectionsPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudconnectionsPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CloudConnectionGreTunnelCreate model
				cloudConnectionGreTunnelCreateModel := new(powervsv1.CloudConnectionGreTunnelCreate)
				cloudConnectionGreTunnelCreateModel.CIDR = core.StringPtr("testString")
				cloudConnectionGreTunnelCreateModel.DestIPAddress = core.StringPtr("testString")

				// Construct an instance of the CloudConnectionEndpointClassicUpdate model
				cloudConnectionEndpointClassicUpdateModel := new(powervsv1.CloudConnectionEndpointClassicUpdate)
				cloudConnectionEndpointClassicUpdateModel.Enabled = core.BoolPtr(true)
				cloudConnectionEndpointClassicUpdateModel.Gre = cloudConnectionGreTunnelCreateModel

				// Construct an instance of the CloudConnectionVPC model
				cloudConnectionVPCModel := new(powervsv1.CloudConnectionVPC)
				cloudConnectionVPCModel.Name = core.StringPtr("testString")
				cloudConnectionVPCModel.VPCID = core.StringPtr("testString")

				// Construct an instance of the CloudConnectionEndpointVPC model
				cloudConnectionEndpointVPCModel := new(powervsv1.CloudConnectionEndpointVPC)
				cloudConnectionEndpointVPCModel.Enabled = core.BoolPtr(true)
				cloudConnectionEndpointVPCModel.Vpcs = []powervsv1.CloudConnectionVPC{*cloudConnectionVPCModel}

				// Construct an instance of the PcloudCloudconnectionsPostOptions model
				pcloudCloudconnectionsPostOptionsModel := new(powervsv1.PcloudCloudconnectionsPostOptions)
				pcloudCloudconnectionsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudCloudconnectionsPostOptionsModel.Speed = core.Int64Ptr(int64(50))
				pcloudCloudconnectionsPostOptionsModel.Classic = cloudConnectionEndpointClassicUpdateModel
				pcloudCloudconnectionsPostOptionsModel.GlobalRouting = core.BoolPtr(true)
				pcloudCloudconnectionsPostOptionsModel.Metered = core.BoolPtr(true)
				pcloudCloudconnectionsPostOptionsModel.Subnets = []string{"testString"}
				pcloudCloudconnectionsPostOptionsModel.TransitEnabled = core.BoolPtr(true)
				pcloudCloudconnectionsPostOptionsModel.VPC = cloudConnectionEndpointVPCModel
				pcloudCloudconnectionsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudconnectionsPost(pcloudCloudconnectionsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudconnectionsPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the CloudConnectionGreTunnelCreate model
				cloudConnectionGreTunnelCreateModel := new(powervsv1.CloudConnectionGreTunnelCreate)
				cloudConnectionGreTunnelCreateModel.CIDR = core.StringPtr("testString")
				cloudConnectionGreTunnelCreateModel.DestIPAddress = core.StringPtr("testString")

				// Construct an instance of the CloudConnectionEndpointClassicUpdate model
				cloudConnectionEndpointClassicUpdateModel := new(powervsv1.CloudConnectionEndpointClassicUpdate)
				cloudConnectionEndpointClassicUpdateModel.Enabled = core.BoolPtr(true)
				cloudConnectionEndpointClassicUpdateModel.Gre = cloudConnectionGreTunnelCreateModel

				// Construct an instance of the CloudConnectionVPC model
				cloudConnectionVPCModel := new(powervsv1.CloudConnectionVPC)
				cloudConnectionVPCModel.Name = core.StringPtr("testString")
				cloudConnectionVPCModel.VPCID = core.StringPtr("testString")

				// Construct an instance of the CloudConnectionEndpointVPC model
				cloudConnectionEndpointVPCModel := new(powervsv1.CloudConnectionEndpointVPC)
				cloudConnectionEndpointVPCModel.Enabled = core.BoolPtr(true)
				cloudConnectionEndpointVPCModel.Vpcs = []powervsv1.CloudConnectionVPC{*cloudConnectionVPCModel}

				// Construct an instance of the PcloudCloudconnectionsPostOptions model
				pcloudCloudconnectionsPostOptionsModel := new(powervsv1.PcloudCloudconnectionsPostOptions)
				pcloudCloudconnectionsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudCloudconnectionsPostOptionsModel.Speed = core.Int64Ptr(int64(50))
				pcloudCloudconnectionsPostOptionsModel.Classic = cloudConnectionEndpointClassicUpdateModel
				pcloudCloudconnectionsPostOptionsModel.GlobalRouting = core.BoolPtr(true)
				pcloudCloudconnectionsPostOptionsModel.Metered = core.BoolPtr(true)
				pcloudCloudconnectionsPostOptionsModel.Subnets = []string{"testString"}
				pcloudCloudconnectionsPostOptionsModel.TransitEnabled = core.BoolPtr(true)
				pcloudCloudconnectionsPostOptionsModel.VPC = cloudConnectionEndpointVPCModel
				pcloudCloudconnectionsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudconnectionsPost(pcloudCloudconnectionsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudconnectionsPostOptions model with no property values
				pcloudCloudconnectionsPostOptionsModelNew := new(powervsv1.PcloudCloudconnectionsPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudconnectionsPost(pcloudCloudconnectionsPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudconnectionsPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the CloudConnectionGreTunnelCreate model
				cloudConnectionGreTunnelCreateModel := new(powervsv1.CloudConnectionGreTunnelCreate)
				cloudConnectionGreTunnelCreateModel.CIDR = core.StringPtr("testString")
				cloudConnectionGreTunnelCreateModel.DestIPAddress = core.StringPtr("testString")

				// Construct an instance of the CloudConnectionEndpointClassicUpdate model
				cloudConnectionEndpointClassicUpdateModel := new(powervsv1.CloudConnectionEndpointClassicUpdate)
				cloudConnectionEndpointClassicUpdateModel.Enabled = core.BoolPtr(true)
				cloudConnectionEndpointClassicUpdateModel.Gre = cloudConnectionGreTunnelCreateModel

				// Construct an instance of the CloudConnectionVPC model
				cloudConnectionVPCModel := new(powervsv1.CloudConnectionVPC)
				cloudConnectionVPCModel.Name = core.StringPtr("testString")
				cloudConnectionVPCModel.VPCID = core.StringPtr("testString")

				// Construct an instance of the CloudConnectionEndpointVPC model
				cloudConnectionEndpointVPCModel := new(powervsv1.CloudConnectionEndpointVPC)
				cloudConnectionEndpointVPCModel.Enabled = core.BoolPtr(true)
				cloudConnectionEndpointVPCModel.Vpcs = []powervsv1.CloudConnectionVPC{*cloudConnectionVPCModel}

				// Construct an instance of the PcloudCloudconnectionsPostOptions model
				pcloudCloudconnectionsPostOptionsModel := new(powervsv1.PcloudCloudconnectionsPostOptions)
				pcloudCloudconnectionsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudCloudconnectionsPostOptionsModel.Speed = core.Int64Ptr(int64(50))
				pcloudCloudconnectionsPostOptionsModel.Classic = cloudConnectionEndpointClassicUpdateModel
				pcloudCloudconnectionsPostOptionsModel.GlobalRouting = core.BoolPtr(true)
				pcloudCloudconnectionsPostOptionsModel.Metered = core.BoolPtr(true)
				pcloudCloudconnectionsPostOptionsModel.Subnets = []string{"testString"}
				pcloudCloudconnectionsPostOptionsModel.TransitEnabled = core.BoolPtr(true)
				pcloudCloudconnectionsPostOptionsModel.VPC = cloudConnectionEndpointVPCModel
				pcloudCloudconnectionsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudconnectionsPost(pcloudCloudconnectionsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudconnectionsVirtualprivatecloudsGetall(pcloudCloudconnectionsVirtualprivatecloudsGetallOptions *PcloudCloudconnectionsVirtualprivatecloudsGetallOptions) - Operation response error`, func() {
		pcloudCloudconnectionsVirtualprivatecloudsGetallPath := "/pcloud/v1/cloud-instances/testString/cloud-connections-virtual-private-clouds"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudconnectionsVirtualprivatecloudsGetallPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudconnectionsVirtualprivatecloudsGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudconnectionsVirtualprivatecloudsGetallOptions model
				pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModel := new(powervsv1.PcloudCloudconnectionsVirtualprivatecloudsGetallOptions)
				pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudconnectionsVirtualprivatecloudsGetall(pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudconnectionsVirtualprivatecloudsGetall(pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudconnectionsVirtualprivatecloudsGetall(pcloudCloudconnectionsVirtualprivatecloudsGetallOptions *PcloudCloudconnectionsVirtualprivatecloudsGetallOptions)`, func() {
		pcloudCloudconnectionsVirtualprivatecloudsGetallPath := "/pcloud/v1/cloud-instances/testString/cloud-connections-virtual-private-clouds"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudconnectionsVirtualprivatecloudsGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"virtualPrivateClouds": [{"classicAccess": false, "name": "Name", "status": "Status", "vpcID": "VPCID"}]}`)
				}))
			})
			It(`Invoke PcloudCloudconnectionsVirtualprivatecloudsGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudconnectionsVirtualprivatecloudsGetallOptions model
				pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModel := new(powervsv1.PcloudCloudconnectionsVirtualprivatecloudsGetallOptions)
				pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudconnectionsVirtualprivatecloudsGetallWithContext(ctx, pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudconnectionsVirtualprivatecloudsGetall(pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudconnectionsVirtualprivatecloudsGetallWithContext(ctx, pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudconnectionsVirtualprivatecloudsGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"virtualPrivateClouds": [{"classicAccess": false, "name": "Name", "status": "Status", "vpcID": "VPCID"}]}`)
				}))
			})
			It(`Invoke PcloudCloudconnectionsVirtualprivatecloudsGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudconnectionsVirtualprivatecloudsGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudconnectionsVirtualprivatecloudsGetallOptions model
				pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModel := new(powervsv1.PcloudCloudconnectionsVirtualprivatecloudsGetallOptions)
				pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudconnectionsVirtualprivatecloudsGetall(pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudconnectionsVirtualprivatecloudsGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudconnectionsVirtualprivatecloudsGetallOptions model
				pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModel := new(powervsv1.PcloudCloudconnectionsVirtualprivatecloudsGetallOptions)
				pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudconnectionsVirtualprivatecloudsGetall(pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudconnectionsVirtualprivatecloudsGetallOptions model with no property values
				pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModelNew := new(powervsv1.PcloudCloudconnectionsVirtualprivatecloudsGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudconnectionsVirtualprivatecloudsGetall(pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudconnectionsVirtualprivatecloudsGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudconnectionsVirtualprivatecloudsGetallOptions model
				pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModel := new(powervsv1.PcloudCloudconnectionsVirtualprivatecloudsGetallOptions)
				pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudconnectionsVirtualprivatecloudsGetall(pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudconnectionsDelete(pcloudCloudconnectionsDeleteOptions *PcloudCloudconnectionsDeleteOptions) - Operation response error`, func() {
		pcloudCloudconnectionsDeletePath := "/pcloud/v1/cloud-instances/testString/cloud-connections/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudconnectionsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudconnectionsDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudconnectionsDeleteOptions model
				pcloudCloudconnectionsDeleteOptionsModel := new(powervsv1.PcloudCloudconnectionsDeleteOptions)
				pcloudCloudconnectionsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsDeleteOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudCloudconnectionsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudconnectionsDelete(pcloudCloudconnectionsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudconnectionsDelete(pcloudCloudconnectionsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudconnectionsDelete(pcloudCloudconnectionsDeleteOptions *PcloudCloudconnectionsDeleteOptions)`, func() {
		pcloudCloudconnectionsDeletePath := "/pcloud/v1/cloud-instances/testString/cloud-connections/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudconnectionsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudCloudconnectionsDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudconnectionsDeleteOptions model
				pcloudCloudconnectionsDeleteOptionsModel := new(powervsv1.PcloudCloudconnectionsDeleteOptions)
				pcloudCloudconnectionsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsDeleteOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudCloudconnectionsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudconnectionsDeleteWithContext(ctx, pcloudCloudconnectionsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudconnectionsDelete(pcloudCloudconnectionsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudconnectionsDeleteWithContext(ctx, pcloudCloudconnectionsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudconnectionsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudCloudconnectionsDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudconnectionsDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudconnectionsDeleteOptions model
				pcloudCloudconnectionsDeleteOptionsModel := new(powervsv1.PcloudCloudconnectionsDeleteOptions)
				pcloudCloudconnectionsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsDeleteOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudCloudconnectionsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudconnectionsDelete(pcloudCloudconnectionsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudconnectionsDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudconnectionsDeleteOptions model
				pcloudCloudconnectionsDeleteOptionsModel := new(powervsv1.PcloudCloudconnectionsDeleteOptions)
				pcloudCloudconnectionsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsDeleteOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudCloudconnectionsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudconnectionsDelete(pcloudCloudconnectionsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudconnectionsDeleteOptions model with no property values
				pcloudCloudconnectionsDeleteOptionsModelNew := new(powervsv1.PcloudCloudconnectionsDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudconnectionsDelete(pcloudCloudconnectionsDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudconnectionsDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudconnectionsDeleteOptions model
				pcloudCloudconnectionsDeleteOptionsModel := new(powervsv1.PcloudCloudconnectionsDeleteOptions)
				pcloudCloudconnectionsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsDeleteOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudCloudconnectionsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudconnectionsDelete(pcloudCloudconnectionsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudconnectionsGet(pcloudCloudconnectionsGetOptions *PcloudCloudconnectionsGetOptions) - Operation response error`, func() {
		pcloudCloudconnectionsGetPath := "/pcloud/v1/cloud-instances/testString/cloud-connections/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudconnectionsGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudconnectionsGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudconnectionsGetOptions model
				pcloudCloudconnectionsGetOptionsModel := new(powervsv1.PcloudCloudconnectionsGetOptions)
				pcloudCloudconnectionsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsGetOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudCloudconnectionsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudconnectionsGet(pcloudCloudconnectionsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudconnectionsGet(pcloudCloudconnectionsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudconnectionsGet(pcloudCloudconnectionsGetOptions *PcloudCloudconnectionsGetOptions)`, func() {
		pcloudCloudconnectionsGetPath := "/pcloud/v1/cloud-instances/testString/cloud-connections/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudconnectionsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"classic": {"enabled": false, "gre": {"destIPAddress": "DestIPAddress", "sourceIPAddress": "SourceIPAddress"}}, "cloudConnectionID": "CloudConnectionID", "connectionMode": "ConnectionMode", "creationDate": "2019-01-01T12:00:00.000Z", "globalRouting": false, "ibmIPAddress": "IBMIPAddress", "linkStatus": "LinkStatus", "metered": false, "name": "Name", "networks": [{"accessConfig": "internal-only", "dhcpManaged": false, "href": "Href", "jumbo": false, "mtu": 3, "name": "Name", "networkID": "NetworkID", "type": "vlan", "vlanID": 6}], "port": "Port", "speed": 5, "userIPAddress": "UserIPAddress", "vpc": {"enabled": false, "vpcs": [{"name": "Name", "vpcID": "VPCID"}]}}`)
				}))
			})
			It(`Invoke PcloudCloudconnectionsGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudconnectionsGetOptions model
				pcloudCloudconnectionsGetOptionsModel := new(powervsv1.PcloudCloudconnectionsGetOptions)
				pcloudCloudconnectionsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsGetOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudCloudconnectionsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudconnectionsGetWithContext(ctx, pcloudCloudconnectionsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudconnectionsGet(pcloudCloudconnectionsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudconnectionsGetWithContext(ctx, pcloudCloudconnectionsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudconnectionsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"classic": {"enabled": false, "gre": {"destIPAddress": "DestIPAddress", "sourceIPAddress": "SourceIPAddress"}}, "cloudConnectionID": "CloudConnectionID", "connectionMode": "ConnectionMode", "creationDate": "2019-01-01T12:00:00.000Z", "globalRouting": false, "ibmIPAddress": "IBMIPAddress", "linkStatus": "LinkStatus", "metered": false, "name": "Name", "networks": [{"accessConfig": "internal-only", "dhcpManaged": false, "href": "Href", "jumbo": false, "mtu": 3, "name": "Name", "networkID": "NetworkID", "type": "vlan", "vlanID": 6}], "port": "Port", "speed": 5, "userIPAddress": "UserIPAddress", "vpc": {"enabled": false, "vpcs": [{"name": "Name", "vpcID": "VPCID"}]}}`)
				}))
			})
			It(`Invoke PcloudCloudconnectionsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudconnectionsGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudconnectionsGetOptions model
				pcloudCloudconnectionsGetOptionsModel := new(powervsv1.PcloudCloudconnectionsGetOptions)
				pcloudCloudconnectionsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsGetOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudCloudconnectionsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudconnectionsGet(pcloudCloudconnectionsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudconnectionsGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudconnectionsGetOptions model
				pcloudCloudconnectionsGetOptionsModel := new(powervsv1.PcloudCloudconnectionsGetOptions)
				pcloudCloudconnectionsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsGetOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudCloudconnectionsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudconnectionsGet(pcloudCloudconnectionsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudconnectionsGetOptions model with no property values
				pcloudCloudconnectionsGetOptionsModelNew := new(powervsv1.PcloudCloudconnectionsGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudconnectionsGet(pcloudCloudconnectionsGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudconnectionsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudconnectionsGetOptions model
				pcloudCloudconnectionsGetOptionsModel := new(powervsv1.PcloudCloudconnectionsGetOptions)
				pcloudCloudconnectionsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsGetOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudCloudconnectionsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudconnectionsGet(pcloudCloudconnectionsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudconnectionsPut(pcloudCloudconnectionsPutOptions *PcloudCloudconnectionsPutOptions) - Operation response error`, func() {
		pcloudCloudconnectionsPutPath := "/pcloud/v1/cloud-instances/testString/cloud-connections/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudconnectionsPutPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudconnectionsPut with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the CloudConnectionGreTunnelCreate model
				cloudConnectionGreTunnelCreateModel := new(powervsv1.CloudConnectionGreTunnelCreate)
				cloudConnectionGreTunnelCreateModel.CIDR = core.StringPtr("testString")
				cloudConnectionGreTunnelCreateModel.DestIPAddress = core.StringPtr("testString")

				// Construct an instance of the CloudConnectionEndpointClassicUpdate model
				cloudConnectionEndpointClassicUpdateModel := new(powervsv1.CloudConnectionEndpointClassicUpdate)
				cloudConnectionEndpointClassicUpdateModel.Enabled = core.BoolPtr(true)
				cloudConnectionEndpointClassicUpdateModel.Gre = cloudConnectionGreTunnelCreateModel

				// Construct an instance of the CloudConnectionVPC model
				cloudConnectionVPCModel := new(powervsv1.CloudConnectionVPC)
				cloudConnectionVPCModel.Name = core.StringPtr("testString")
				cloudConnectionVPCModel.VPCID = core.StringPtr("testString")

				// Construct an instance of the CloudConnectionEndpointVPC model
				cloudConnectionEndpointVPCModel := new(powervsv1.CloudConnectionEndpointVPC)
				cloudConnectionEndpointVPCModel.Enabled = core.BoolPtr(true)
				cloudConnectionEndpointVPCModel.Vpcs = []powervsv1.CloudConnectionVPC{*cloudConnectionVPCModel}

				// Construct an instance of the PcloudCloudconnectionsPutOptions model
				pcloudCloudconnectionsPutOptionsModel := new(powervsv1.PcloudCloudconnectionsPutOptions)
				pcloudCloudconnectionsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsPutOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudCloudconnectionsPutOptionsModel.Classic = cloudConnectionEndpointClassicUpdateModel
				pcloudCloudconnectionsPutOptionsModel.GlobalRouting = core.BoolPtr(true)
				pcloudCloudconnectionsPutOptionsModel.Metered = core.BoolPtr(true)
				pcloudCloudconnectionsPutOptionsModel.Name = core.StringPtr("testString")
				pcloudCloudconnectionsPutOptionsModel.Speed = core.Int64Ptr(int64(50))
				pcloudCloudconnectionsPutOptionsModel.VPC = cloudConnectionEndpointVPCModel
				pcloudCloudconnectionsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudconnectionsPut(pcloudCloudconnectionsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudconnectionsPut(pcloudCloudconnectionsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudconnectionsPut(pcloudCloudconnectionsPutOptions *PcloudCloudconnectionsPutOptions)`, func() {
		pcloudCloudconnectionsPutPath := "/pcloud/v1/cloud-instances/testString/cloud-connections/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudconnectionsPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"classic": {"enabled": false, "gre": {"destIPAddress": "DestIPAddress", "sourceIPAddress": "SourceIPAddress"}}, "cloudConnectionID": "CloudConnectionID", "connectionMode": "ConnectionMode", "creationDate": "2019-01-01T12:00:00.000Z", "globalRouting": false, "ibmIPAddress": "IBMIPAddress", "linkStatus": "LinkStatus", "metered": false, "name": "Name", "networks": [{"accessConfig": "internal-only", "dhcpManaged": false, "href": "Href", "jumbo": false, "mtu": 3, "name": "Name", "networkID": "NetworkID", "type": "vlan", "vlanID": 6}], "port": "Port", "speed": 5, "userIPAddress": "UserIPAddress", "vpc": {"enabled": false, "vpcs": [{"name": "Name", "vpcID": "VPCID"}]}}`)
				}))
			})
			It(`Invoke PcloudCloudconnectionsPut successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the CloudConnectionGreTunnelCreate model
				cloudConnectionGreTunnelCreateModel := new(powervsv1.CloudConnectionGreTunnelCreate)
				cloudConnectionGreTunnelCreateModel.CIDR = core.StringPtr("testString")
				cloudConnectionGreTunnelCreateModel.DestIPAddress = core.StringPtr("testString")

				// Construct an instance of the CloudConnectionEndpointClassicUpdate model
				cloudConnectionEndpointClassicUpdateModel := new(powervsv1.CloudConnectionEndpointClassicUpdate)
				cloudConnectionEndpointClassicUpdateModel.Enabled = core.BoolPtr(true)
				cloudConnectionEndpointClassicUpdateModel.Gre = cloudConnectionGreTunnelCreateModel

				// Construct an instance of the CloudConnectionVPC model
				cloudConnectionVPCModel := new(powervsv1.CloudConnectionVPC)
				cloudConnectionVPCModel.Name = core.StringPtr("testString")
				cloudConnectionVPCModel.VPCID = core.StringPtr("testString")

				// Construct an instance of the CloudConnectionEndpointVPC model
				cloudConnectionEndpointVPCModel := new(powervsv1.CloudConnectionEndpointVPC)
				cloudConnectionEndpointVPCModel.Enabled = core.BoolPtr(true)
				cloudConnectionEndpointVPCModel.Vpcs = []powervsv1.CloudConnectionVPC{*cloudConnectionVPCModel}

				// Construct an instance of the PcloudCloudconnectionsPutOptions model
				pcloudCloudconnectionsPutOptionsModel := new(powervsv1.PcloudCloudconnectionsPutOptions)
				pcloudCloudconnectionsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsPutOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudCloudconnectionsPutOptionsModel.Classic = cloudConnectionEndpointClassicUpdateModel
				pcloudCloudconnectionsPutOptionsModel.GlobalRouting = core.BoolPtr(true)
				pcloudCloudconnectionsPutOptionsModel.Metered = core.BoolPtr(true)
				pcloudCloudconnectionsPutOptionsModel.Name = core.StringPtr("testString")
				pcloudCloudconnectionsPutOptionsModel.Speed = core.Int64Ptr(int64(50))
				pcloudCloudconnectionsPutOptionsModel.VPC = cloudConnectionEndpointVPCModel
				pcloudCloudconnectionsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudconnectionsPutWithContext(ctx, pcloudCloudconnectionsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudconnectionsPut(pcloudCloudconnectionsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudconnectionsPutWithContext(ctx, pcloudCloudconnectionsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudconnectionsPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"classic": {"enabled": false, "gre": {"destIPAddress": "DestIPAddress", "sourceIPAddress": "SourceIPAddress"}}, "cloudConnectionID": "CloudConnectionID", "connectionMode": "ConnectionMode", "creationDate": "2019-01-01T12:00:00.000Z", "globalRouting": false, "ibmIPAddress": "IBMIPAddress", "linkStatus": "LinkStatus", "metered": false, "name": "Name", "networks": [{"accessConfig": "internal-only", "dhcpManaged": false, "href": "Href", "jumbo": false, "mtu": 3, "name": "Name", "networkID": "NetworkID", "type": "vlan", "vlanID": 6}], "port": "Port", "speed": 5, "userIPAddress": "UserIPAddress", "vpc": {"enabled": false, "vpcs": [{"name": "Name", "vpcID": "VPCID"}]}}`)
				}))
			})
			It(`Invoke PcloudCloudconnectionsPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudconnectionsPut(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CloudConnectionGreTunnelCreate model
				cloudConnectionGreTunnelCreateModel := new(powervsv1.CloudConnectionGreTunnelCreate)
				cloudConnectionGreTunnelCreateModel.CIDR = core.StringPtr("testString")
				cloudConnectionGreTunnelCreateModel.DestIPAddress = core.StringPtr("testString")

				// Construct an instance of the CloudConnectionEndpointClassicUpdate model
				cloudConnectionEndpointClassicUpdateModel := new(powervsv1.CloudConnectionEndpointClassicUpdate)
				cloudConnectionEndpointClassicUpdateModel.Enabled = core.BoolPtr(true)
				cloudConnectionEndpointClassicUpdateModel.Gre = cloudConnectionGreTunnelCreateModel

				// Construct an instance of the CloudConnectionVPC model
				cloudConnectionVPCModel := new(powervsv1.CloudConnectionVPC)
				cloudConnectionVPCModel.Name = core.StringPtr("testString")
				cloudConnectionVPCModel.VPCID = core.StringPtr("testString")

				// Construct an instance of the CloudConnectionEndpointVPC model
				cloudConnectionEndpointVPCModel := new(powervsv1.CloudConnectionEndpointVPC)
				cloudConnectionEndpointVPCModel.Enabled = core.BoolPtr(true)
				cloudConnectionEndpointVPCModel.Vpcs = []powervsv1.CloudConnectionVPC{*cloudConnectionVPCModel}

				// Construct an instance of the PcloudCloudconnectionsPutOptions model
				pcloudCloudconnectionsPutOptionsModel := new(powervsv1.PcloudCloudconnectionsPutOptions)
				pcloudCloudconnectionsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsPutOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudCloudconnectionsPutOptionsModel.Classic = cloudConnectionEndpointClassicUpdateModel
				pcloudCloudconnectionsPutOptionsModel.GlobalRouting = core.BoolPtr(true)
				pcloudCloudconnectionsPutOptionsModel.Metered = core.BoolPtr(true)
				pcloudCloudconnectionsPutOptionsModel.Name = core.StringPtr("testString")
				pcloudCloudconnectionsPutOptionsModel.Speed = core.Int64Ptr(int64(50))
				pcloudCloudconnectionsPutOptionsModel.VPC = cloudConnectionEndpointVPCModel
				pcloudCloudconnectionsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudconnectionsPut(pcloudCloudconnectionsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudconnectionsPut with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the CloudConnectionGreTunnelCreate model
				cloudConnectionGreTunnelCreateModel := new(powervsv1.CloudConnectionGreTunnelCreate)
				cloudConnectionGreTunnelCreateModel.CIDR = core.StringPtr("testString")
				cloudConnectionGreTunnelCreateModel.DestIPAddress = core.StringPtr("testString")

				// Construct an instance of the CloudConnectionEndpointClassicUpdate model
				cloudConnectionEndpointClassicUpdateModel := new(powervsv1.CloudConnectionEndpointClassicUpdate)
				cloudConnectionEndpointClassicUpdateModel.Enabled = core.BoolPtr(true)
				cloudConnectionEndpointClassicUpdateModel.Gre = cloudConnectionGreTunnelCreateModel

				// Construct an instance of the CloudConnectionVPC model
				cloudConnectionVPCModel := new(powervsv1.CloudConnectionVPC)
				cloudConnectionVPCModel.Name = core.StringPtr("testString")
				cloudConnectionVPCModel.VPCID = core.StringPtr("testString")

				// Construct an instance of the CloudConnectionEndpointVPC model
				cloudConnectionEndpointVPCModel := new(powervsv1.CloudConnectionEndpointVPC)
				cloudConnectionEndpointVPCModel.Enabled = core.BoolPtr(true)
				cloudConnectionEndpointVPCModel.Vpcs = []powervsv1.CloudConnectionVPC{*cloudConnectionVPCModel}

				// Construct an instance of the PcloudCloudconnectionsPutOptions model
				pcloudCloudconnectionsPutOptionsModel := new(powervsv1.PcloudCloudconnectionsPutOptions)
				pcloudCloudconnectionsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsPutOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudCloudconnectionsPutOptionsModel.Classic = cloudConnectionEndpointClassicUpdateModel
				pcloudCloudconnectionsPutOptionsModel.GlobalRouting = core.BoolPtr(true)
				pcloudCloudconnectionsPutOptionsModel.Metered = core.BoolPtr(true)
				pcloudCloudconnectionsPutOptionsModel.Name = core.StringPtr("testString")
				pcloudCloudconnectionsPutOptionsModel.Speed = core.Int64Ptr(int64(50))
				pcloudCloudconnectionsPutOptionsModel.VPC = cloudConnectionEndpointVPCModel
				pcloudCloudconnectionsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudconnectionsPut(pcloudCloudconnectionsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudconnectionsPutOptions model with no property values
				pcloudCloudconnectionsPutOptionsModelNew := new(powervsv1.PcloudCloudconnectionsPutOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudconnectionsPut(pcloudCloudconnectionsPutOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudconnectionsPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the CloudConnectionGreTunnelCreate model
				cloudConnectionGreTunnelCreateModel := new(powervsv1.CloudConnectionGreTunnelCreate)
				cloudConnectionGreTunnelCreateModel.CIDR = core.StringPtr("testString")
				cloudConnectionGreTunnelCreateModel.DestIPAddress = core.StringPtr("testString")

				// Construct an instance of the CloudConnectionEndpointClassicUpdate model
				cloudConnectionEndpointClassicUpdateModel := new(powervsv1.CloudConnectionEndpointClassicUpdate)
				cloudConnectionEndpointClassicUpdateModel.Enabled = core.BoolPtr(true)
				cloudConnectionEndpointClassicUpdateModel.Gre = cloudConnectionGreTunnelCreateModel

				// Construct an instance of the CloudConnectionVPC model
				cloudConnectionVPCModel := new(powervsv1.CloudConnectionVPC)
				cloudConnectionVPCModel.Name = core.StringPtr("testString")
				cloudConnectionVPCModel.VPCID = core.StringPtr("testString")

				// Construct an instance of the CloudConnectionEndpointVPC model
				cloudConnectionEndpointVPCModel := new(powervsv1.CloudConnectionEndpointVPC)
				cloudConnectionEndpointVPCModel.Enabled = core.BoolPtr(true)
				cloudConnectionEndpointVPCModel.Vpcs = []powervsv1.CloudConnectionVPC{*cloudConnectionVPCModel}

				// Construct an instance of the PcloudCloudconnectionsPutOptions model
				pcloudCloudconnectionsPutOptionsModel := new(powervsv1.PcloudCloudconnectionsPutOptions)
				pcloudCloudconnectionsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsPutOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudCloudconnectionsPutOptionsModel.Classic = cloudConnectionEndpointClassicUpdateModel
				pcloudCloudconnectionsPutOptionsModel.GlobalRouting = core.BoolPtr(true)
				pcloudCloudconnectionsPutOptionsModel.Metered = core.BoolPtr(true)
				pcloudCloudconnectionsPutOptionsModel.Name = core.StringPtr("testString")
				pcloudCloudconnectionsPutOptionsModel.Speed = core.Int64Ptr(int64(50))
				pcloudCloudconnectionsPutOptionsModel.VPC = cloudConnectionEndpointVPCModel
				pcloudCloudconnectionsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudconnectionsPut(pcloudCloudconnectionsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudconnectionsNetworksDelete(pcloudCloudconnectionsNetworksDeleteOptions *PcloudCloudconnectionsNetworksDeleteOptions) - Operation response error`, func() {
		pcloudCloudconnectionsNetworksDeletePath := "/pcloud/v1/cloud-instances/testString/cloud-connections/testString/networks/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudconnectionsNetworksDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudconnectionsNetworksDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudconnectionsNetworksDeleteOptions model
				pcloudCloudconnectionsNetworksDeleteOptionsModel := new(powervsv1.PcloudCloudconnectionsNetworksDeleteOptions)
				pcloudCloudconnectionsNetworksDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksDeleteOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksDeleteOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudconnectionsNetworksDelete(pcloudCloudconnectionsNetworksDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudconnectionsNetworksDelete(pcloudCloudconnectionsNetworksDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudconnectionsNetworksDelete(pcloudCloudconnectionsNetworksDeleteOptions *PcloudCloudconnectionsNetworksDeleteOptions)`, func() {
		pcloudCloudconnectionsNetworksDeletePath := "/pcloud/v1/cloud-instances/testString/cloud-connections/testString/networks/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudconnectionsNetworksDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudCloudconnectionsNetworksDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudconnectionsNetworksDeleteOptions model
				pcloudCloudconnectionsNetworksDeleteOptionsModel := new(powervsv1.PcloudCloudconnectionsNetworksDeleteOptions)
				pcloudCloudconnectionsNetworksDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksDeleteOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksDeleteOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudconnectionsNetworksDeleteWithContext(ctx, pcloudCloudconnectionsNetworksDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudconnectionsNetworksDelete(pcloudCloudconnectionsNetworksDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudconnectionsNetworksDeleteWithContext(ctx, pcloudCloudconnectionsNetworksDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudconnectionsNetworksDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudCloudconnectionsNetworksDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudconnectionsNetworksDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudconnectionsNetworksDeleteOptions model
				pcloudCloudconnectionsNetworksDeleteOptionsModel := new(powervsv1.PcloudCloudconnectionsNetworksDeleteOptions)
				pcloudCloudconnectionsNetworksDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksDeleteOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksDeleteOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudconnectionsNetworksDelete(pcloudCloudconnectionsNetworksDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudconnectionsNetworksDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudconnectionsNetworksDeleteOptions model
				pcloudCloudconnectionsNetworksDeleteOptionsModel := new(powervsv1.PcloudCloudconnectionsNetworksDeleteOptions)
				pcloudCloudconnectionsNetworksDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksDeleteOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksDeleteOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudconnectionsNetworksDelete(pcloudCloudconnectionsNetworksDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudconnectionsNetworksDeleteOptions model with no property values
				pcloudCloudconnectionsNetworksDeleteOptionsModelNew := new(powervsv1.PcloudCloudconnectionsNetworksDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudconnectionsNetworksDelete(pcloudCloudconnectionsNetworksDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudconnectionsNetworksDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudconnectionsNetworksDeleteOptions model
				pcloudCloudconnectionsNetworksDeleteOptionsModel := new(powervsv1.PcloudCloudconnectionsNetworksDeleteOptions)
				pcloudCloudconnectionsNetworksDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksDeleteOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksDeleteOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudconnectionsNetworksDelete(pcloudCloudconnectionsNetworksDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudconnectionsNetworksPut(pcloudCloudconnectionsNetworksPutOptions *PcloudCloudconnectionsNetworksPutOptions) - Operation response error`, func() {
		pcloudCloudconnectionsNetworksPutPath := "/pcloud/v1/cloud-instances/testString/cloud-connections/testString/networks/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudconnectionsNetworksPutPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudconnectionsNetworksPut with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudconnectionsNetworksPutOptions model
				pcloudCloudconnectionsNetworksPutOptionsModel := new(powervsv1.PcloudCloudconnectionsNetworksPutOptions)
				pcloudCloudconnectionsNetworksPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksPutOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksPutOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudconnectionsNetworksPut(pcloudCloudconnectionsNetworksPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudconnectionsNetworksPut(pcloudCloudconnectionsNetworksPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudconnectionsNetworksPut(pcloudCloudconnectionsNetworksPutOptions *PcloudCloudconnectionsNetworksPutOptions)`, func() {
		pcloudCloudconnectionsNetworksPutPath := "/pcloud/v1/cloud-instances/testString/cloud-connections/testString/networks/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudconnectionsNetworksPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudCloudconnectionsNetworksPut successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudconnectionsNetworksPutOptions model
				pcloudCloudconnectionsNetworksPutOptionsModel := new(powervsv1.PcloudCloudconnectionsNetworksPutOptions)
				pcloudCloudconnectionsNetworksPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksPutOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksPutOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudconnectionsNetworksPutWithContext(ctx, pcloudCloudconnectionsNetworksPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudconnectionsNetworksPut(pcloudCloudconnectionsNetworksPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudconnectionsNetworksPutWithContext(ctx, pcloudCloudconnectionsNetworksPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudconnectionsNetworksPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudCloudconnectionsNetworksPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudconnectionsNetworksPut(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudconnectionsNetworksPutOptions model
				pcloudCloudconnectionsNetworksPutOptionsModel := new(powervsv1.PcloudCloudconnectionsNetworksPutOptions)
				pcloudCloudconnectionsNetworksPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksPutOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksPutOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudconnectionsNetworksPut(pcloudCloudconnectionsNetworksPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudconnectionsNetworksPut with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudconnectionsNetworksPutOptions model
				pcloudCloudconnectionsNetworksPutOptionsModel := new(powervsv1.PcloudCloudconnectionsNetworksPutOptions)
				pcloudCloudconnectionsNetworksPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksPutOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksPutOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudconnectionsNetworksPut(pcloudCloudconnectionsNetworksPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudconnectionsNetworksPutOptions model with no property values
				pcloudCloudconnectionsNetworksPutOptionsModelNew := new(powervsv1.PcloudCloudconnectionsNetworksPutOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudconnectionsNetworksPut(pcloudCloudconnectionsNetworksPutOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudconnectionsNetworksPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudconnectionsNetworksPutOptions model
				pcloudCloudconnectionsNetworksPutOptionsModel := new(powervsv1.PcloudCloudconnectionsNetworksPutOptions)
				pcloudCloudconnectionsNetworksPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksPutOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksPutOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudCloudconnectionsNetworksPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudconnectionsNetworksPut(pcloudCloudconnectionsNetworksPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudLocationsDisasterrecoveryGet(pcloudLocationsDisasterrecoveryGetOptions *PcloudLocationsDisasterrecoveryGetOptions) - Operation response error`, func() {
		pcloudLocationsDisasterrecoveryGetPath := "/pcloud/v1/cloud-instances/testString/locations/disaster-recovery"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudLocationsDisasterrecoveryGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudLocationsDisasterrecoveryGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudLocationsDisasterrecoveryGetOptions model
				pcloudLocationsDisasterrecoveryGetOptionsModel := new(powervsv1.PcloudLocationsDisasterrecoveryGetOptions)
				pcloudLocationsDisasterrecoveryGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudLocationsDisasterrecoveryGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudLocationsDisasterrecoveryGet(pcloudLocationsDisasterrecoveryGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudLocationsDisasterrecoveryGet(pcloudLocationsDisasterrecoveryGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudLocationsDisasterrecoveryGet(pcloudLocationsDisasterrecoveryGetOptions *PcloudLocationsDisasterrecoveryGetOptions)`, func() {
		pcloudLocationsDisasterrecoveryGetPath := "/pcloud/v1/cloud-instances/testString/locations/disaster-recovery"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudLocationsDisasterrecoveryGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"location": "Location", "replicationSites": [{"isActive": true, "location": "Location"}]}`)
				}))
			})
			It(`Invoke PcloudLocationsDisasterrecoveryGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudLocationsDisasterrecoveryGetOptions model
				pcloudLocationsDisasterrecoveryGetOptionsModel := new(powervsv1.PcloudLocationsDisasterrecoveryGetOptions)
				pcloudLocationsDisasterrecoveryGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudLocationsDisasterrecoveryGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudLocationsDisasterrecoveryGetWithContext(ctx, pcloudLocationsDisasterrecoveryGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudLocationsDisasterrecoveryGet(pcloudLocationsDisasterrecoveryGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudLocationsDisasterrecoveryGetWithContext(ctx, pcloudLocationsDisasterrecoveryGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudLocationsDisasterrecoveryGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"location": "Location", "replicationSites": [{"isActive": true, "location": "Location"}]}`)
				}))
			})
			It(`Invoke PcloudLocationsDisasterrecoveryGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudLocationsDisasterrecoveryGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudLocationsDisasterrecoveryGetOptions model
				pcloudLocationsDisasterrecoveryGetOptionsModel := new(powervsv1.PcloudLocationsDisasterrecoveryGetOptions)
				pcloudLocationsDisasterrecoveryGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudLocationsDisasterrecoveryGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudLocationsDisasterrecoveryGet(pcloudLocationsDisasterrecoveryGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudLocationsDisasterrecoveryGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudLocationsDisasterrecoveryGetOptions model
				pcloudLocationsDisasterrecoveryGetOptionsModel := new(powervsv1.PcloudLocationsDisasterrecoveryGetOptions)
				pcloudLocationsDisasterrecoveryGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudLocationsDisasterrecoveryGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudLocationsDisasterrecoveryGet(pcloudLocationsDisasterrecoveryGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudLocationsDisasterrecoveryGetOptions model with no property values
				pcloudLocationsDisasterrecoveryGetOptionsModelNew := new(powervsv1.PcloudLocationsDisasterrecoveryGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudLocationsDisasterrecoveryGet(pcloudLocationsDisasterrecoveryGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudLocationsDisasterrecoveryGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudLocationsDisasterrecoveryGetOptions model
				pcloudLocationsDisasterrecoveryGetOptionsModel := new(powervsv1.PcloudLocationsDisasterrecoveryGetOptions)
				pcloudLocationsDisasterrecoveryGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudLocationsDisasterrecoveryGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudLocationsDisasterrecoveryGet(pcloudLocationsDisasterrecoveryGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudLocationsDisasterrecoveryGetall(pcloudLocationsDisasterrecoveryGetallOptions *PcloudLocationsDisasterrecoveryGetallOptions) - Operation response error`, func() {
		pcloudLocationsDisasterrecoveryGetallPath := "/pcloud/v1/locations/disaster-recovery"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudLocationsDisasterrecoveryGetallPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudLocationsDisasterrecoveryGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudLocationsDisasterrecoveryGetallOptions model
				pcloudLocationsDisasterrecoveryGetallOptionsModel := new(powervsv1.PcloudLocationsDisasterrecoveryGetallOptions)
				pcloudLocationsDisasterrecoveryGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudLocationsDisasterrecoveryGetall(pcloudLocationsDisasterrecoveryGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudLocationsDisasterrecoveryGetall(pcloudLocationsDisasterrecoveryGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudLocationsDisasterrecoveryGetall(pcloudLocationsDisasterrecoveryGetallOptions *PcloudLocationsDisasterrecoveryGetallOptions)`, func() {
		pcloudLocationsDisasterrecoveryGetallPath := "/pcloud/v1/locations/disaster-recovery"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudLocationsDisasterrecoveryGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"disasterRecoveryLocations": [{"location": "Location", "replicationSites": [{"isActive": true, "location": "Location"}]}]}`)
				}))
			})
			It(`Invoke PcloudLocationsDisasterrecoveryGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudLocationsDisasterrecoveryGetallOptions model
				pcloudLocationsDisasterrecoveryGetallOptionsModel := new(powervsv1.PcloudLocationsDisasterrecoveryGetallOptions)
				pcloudLocationsDisasterrecoveryGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudLocationsDisasterrecoveryGetallWithContext(ctx, pcloudLocationsDisasterrecoveryGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudLocationsDisasterrecoveryGetall(pcloudLocationsDisasterrecoveryGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudLocationsDisasterrecoveryGetallWithContext(ctx, pcloudLocationsDisasterrecoveryGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudLocationsDisasterrecoveryGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"disasterRecoveryLocations": [{"location": "Location", "replicationSites": [{"isActive": true, "location": "Location"}]}]}`)
				}))
			})
			It(`Invoke PcloudLocationsDisasterrecoveryGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudLocationsDisasterrecoveryGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudLocationsDisasterrecoveryGetallOptions model
				pcloudLocationsDisasterrecoveryGetallOptionsModel := new(powervsv1.PcloudLocationsDisasterrecoveryGetallOptions)
				pcloudLocationsDisasterrecoveryGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudLocationsDisasterrecoveryGetall(pcloudLocationsDisasterrecoveryGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudLocationsDisasterrecoveryGetall with error: Operation request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudLocationsDisasterrecoveryGetallOptions model
				pcloudLocationsDisasterrecoveryGetallOptionsModel := new(powervsv1.PcloudLocationsDisasterrecoveryGetallOptions)
				pcloudLocationsDisasterrecoveryGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudLocationsDisasterrecoveryGetall(pcloudLocationsDisasterrecoveryGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudLocationsDisasterrecoveryGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudLocationsDisasterrecoveryGetallOptions model
				pcloudLocationsDisasterrecoveryGetallOptionsModel := new(powervsv1.PcloudLocationsDisasterrecoveryGetallOptions)
				pcloudLocationsDisasterrecoveryGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudLocationsDisasterrecoveryGetall(pcloudLocationsDisasterrecoveryGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudEventsGetquery(pcloudEventsGetqueryOptions *PcloudEventsGetqueryOptions) - Operation response error`, func() {
		pcloudEventsGetqueryPath := "/pcloud/v1/cloud-instances/testString/events"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudEventsGetqueryPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["Accept-Language"]).ToNot(BeNil())
					Expect(req.Header["Accept-Language"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["time"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["from_time"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["to_time"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudEventsGetquery with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudEventsGetqueryOptions model
				pcloudEventsGetqueryOptionsModel := new(powervsv1.PcloudEventsGetqueryOptions)
				pcloudEventsGetqueryOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudEventsGetqueryOptionsModel.Time = core.StringPtr("testString")
				pcloudEventsGetqueryOptionsModel.FromTime = core.StringPtr("testString")
				pcloudEventsGetqueryOptionsModel.ToTime = core.StringPtr("testString")
				pcloudEventsGetqueryOptionsModel.AcceptLanguage = core.StringPtr("testString")
				pcloudEventsGetqueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudEventsGetquery(pcloudEventsGetqueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudEventsGetquery(pcloudEventsGetqueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudEventsGetquery(pcloudEventsGetqueryOptions *PcloudEventsGetqueryOptions)`, func() {
		pcloudEventsGetqueryPath := "/pcloud/v1/cloud-instances/testString/events"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudEventsGetqueryPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["Accept-Language"]).ToNot(BeNil())
					Expect(req.Header["Accept-Language"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["time"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["from_time"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["to_time"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"events": [{"action": "Action", "eventID": "EventID", "level": "notice", "message": "Message", "metadata": {"anyKey": "anyValue"}, "resource": "Resource", "time": "2019-01-01T12:00:00.000Z", "timestamp": 9, "user": {"email": "Email", "name": "Name", "userID": "UserID"}}]}`)
				}))
			})
			It(`Invoke PcloudEventsGetquery successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudEventsGetqueryOptions model
				pcloudEventsGetqueryOptionsModel := new(powervsv1.PcloudEventsGetqueryOptions)
				pcloudEventsGetqueryOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudEventsGetqueryOptionsModel.Time = core.StringPtr("testString")
				pcloudEventsGetqueryOptionsModel.FromTime = core.StringPtr("testString")
				pcloudEventsGetqueryOptionsModel.ToTime = core.StringPtr("testString")
				pcloudEventsGetqueryOptionsModel.AcceptLanguage = core.StringPtr("testString")
				pcloudEventsGetqueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudEventsGetqueryWithContext(ctx, pcloudEventsGetqueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudEventsGetquery(pcloudEventsGetqueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudEventsGetqueryWithContext(ctx, pcloudEventsGetqueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudEventsGetqueryPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["Accept-Language"]).ToNot(BeNil())
					Expect(req.Header["Accept-Language"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["time"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["from_time"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["to_time"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"events": [{"action": "Action", "eventID": "EventID", "level": "notice", "message": "Message", "metadata": {"anyKey": "anyValue"}, "resource": "Resource", "time": "2019-01-01T12:00:00.000Z", "timestamp": 9, "user": {"email": "Email", "name": "Name", "userID": "UserID"}}]}`)
				}))
			})
			It(`Invoke PcloudEventsGetquery successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudEventsGetquery(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudEventsGetqueryOptions model
				pcloudEventsGetqueryOptionsModel := new(powervsv1.PcloudEventsGetqueryOptions)
				pcloudEventsGetqueryOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudEventsGetqueryOptionsModel.Time = core.StringPtr("testString")
				pcloudEventsGetqueryOptionsModel.FromTime = core.StringPtr("testString")
				pcloudEventsGetqueryOptionsModel.ToTime = core.StringPtr("testString")
				pcloudEventsGetqueryOptionsModel.AcceptLanguage = core.StringPtr("testString")
				pcloudEventsGetqueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudEventsGetquery(pcloudEventsGetqueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudEventsGetquery with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudEventsGetqueryOptions model
				pcloudEventsGetqueryOptionsModel := new(powervsv1.PcloudEventsGetqueryOptions)
				pcloudEventsGetqueryOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudEventsGetqueryOptionsModel.Time = core.StringPtr("testString")
				pcloudEventsGetqueryOptionsModel.FromTime = core.StringPtr("testString")
				pcloudEventsGetqueryOptionsModel.ToTime = core.StringPtr("testString")
				pcloudEventsGetqueryOptionsModel.AcceptLanguage = core.StringPtr("testString")
				pcloudEventsGetqueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudEventsGetquery(pcloudEventsGetqueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudEventsGetqueryOptions model with no property values
				pcloudEventsGetqueryOptionsModelNew := new(powervsv1.PcloudEventsGetqueryOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudEventsGetquery(pcloudEventsGetqueryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudEventsGetquery successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudEventsGetqueryOptions model
				pcloudEventsGetqueryOptionsModel := new(powervsv1.PcloudEventsGetqueryOptions)
				pcloudEventsGetqueryOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudEventsGetqueryOptionsModel.Time = core.StringPtr("testString")
				pcloudEventsGetqueryOptionsModel.FromTime = core.StringPtr("testString")
				pcloudEventsGetqueryOptionsModel.ToTime = core.StringPtr("testString")
				pcloudEventsGetqueryOptionsModel.AcceptLanguage = core.StringPtr("testString")
				pcloudEventsGetqueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudEventsGetquery(pcloudEventsGetqueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudEventsGet(pcloudEventsGetOptions *PcloudEventsGetOptions) - Operation response error`, func() {
		pcloudEventsGetPath := "/pcloud/v1/cloud-instances/testString/events/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudEventsGetPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["Accept-Language"]).ToNot(BeNil())
					Expect(req.Header["Accept-Language"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudEventsGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudEventsGetOptions model
				pcloudEventsGetOptionsModel := new(powervsv1.PcloudEventsGetOptions)
				pcloudEventsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudEventsGetOptionsModel.EventID = core.StringPtr("testString")
				pcloudEventsGetOptionsModel.AcceptLanguage = core.StringPtr("testString")
				pcloudEventsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudEventsGet(pcloudEventsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudEventsGet(pcloudEventsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudEventsGet(pcloudEventsGetOptions *PcloudEventsGetOptions)`, func() {
		pcloudEventsGetPath := "/pcloud/v1/cloud-instances/testString/events/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudEventsGetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["Accept-Language"]).ToNot(BeNil())
					Expect(req.Header["Accept-Language"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"action": "Action", "eventID": "EventID", "level": "notice", "message": "Message", "metadata": {"anyKey": "anyValue"}, "resource": "Resource", "time": "2019-01-01T12:00:00.000Z", "timestamp": 9, "user": {"email": "Email", "name": "Name", "userID": "UserID"}}`)
				}))
			})
			It(`Invoke PcloudEventsGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudEventsGetOptions model
				pcloudEventsGetOptionsModel := new(powervsv1.PcloudEventsGetOptions)
				pcloudEventsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudEventsGetOptionsModel.EventID = core.StringPtr("testString")
				pcloudEventsGetOptionsModel.AcceptLanguage = core.StringPtr("testString")
				pcloudEventsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudEventsGetWithContext(ctx, pcloudEventsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudEventsGet(pcloudEventsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudEventsGetWithContext(ctx, pcloudEventsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudEventsGetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["Accept-Language"]).ToNot(BeNil())
					Expect(req.Header["Accept-Language"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"action": "Action", "eventID": "EventID", "level": "notice", "message": "Message", "metadata": {"anyKey": "anyValue"}, "resource": "Resource", "time": "2019-01-01T12:00:00.000Z", "timestamp": 9, "user": {"email": "Email", "name": "Name", "userID": "UserID"}}`)
				}))
			})
			It(`Invoke PcloudEventsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudEventsGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudEventsGetOptions model
				pcloudEventsGetOptionsModel := new(powervsv1.PcloudEventsGetOptions)
				pcloudEventsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudEventsGetOptionsModel.EventID = core.StringPtr("testString")
				pcloudEventsGetOptionsModel.AcceptLanguage = core.StringPtr("testString")
				pcloudEventsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudEventsGet(pcloudEventsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudEventsGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudEventsGetOptions model
				pcloudEventsGetOptionsModel := new(powervsv1.PcloudEventsGetOptions)
				pcloudEventsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudEventsGetOptionsModel.EventID = core.StringPtr("testString")
				pcloudEventsGetOptionsModel.AcceptLanguage = core.StringPtr("testString")
				pcloudEventsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudEventsGet(pcloudEventsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudEventsGetOptions model with no property values
				pcloudEventsGetOptionsModelNew := new(powervsv1.PcloudEventsGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudEventsGet(pcloudEventsGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudEventsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudEventsGetOptions model
				pcloudEventsGetOptionsModel := new(powervsv1.PcloudEventsGetOptions)
				pcloudEventsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudEventsGetOptionsModel.EventID = core.StringPtr("testString")
				pcloudEventsGetOptionsModel.AcceptLanguage = core.StringPtr("testString")
				pcloudEventsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudEventsGet(pcloudEventsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV1CloudinstancesCosimagesGet(pcloudV1CloudinstancesCosimagesGetOptions *PcloudV1CloudinstancesCosimagesGetOptions) - Operation response error`, func() {
		pcloudV1CloudinstancesCosimagesGetPath := "/pcloud/v1/cloud-instances/testString/cos-images"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV1CloudinstancesCosimagesGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudV1CloudinstancesCosimagesGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV1CloudinstancesCosimagesGetOptions model
				pcloudV1CloudinstancesCosimagesGetOptionsModel := new(powervsv1.PcloudV1CloudinstancesCosimagesGetOptions)
				pcloudV1CloudinstancesCosimagesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudV1CloudinstancesCosimagesGet(pcloudV1CloudinstancesCosimagesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudV1CloudinstancesCosimagesGet(pcloudV1CloudinstancesCosimagesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV1CloudinstancesCosimagesGet(pcloudV1CloudinstancesCosimagesGetOptions *PcloudV1CloudinstancesCosimagesGetOptions)`, func() {
		pcloudV1CloudinstancesCosimagesGetPath := "/pcloud/v1/cloud-instances/testString/cos-images"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV1CloudinstancesCosimagesGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"createTimestamp": "2019-01-01T12:00:00.000Z", "id": "ID", "operation": {"action": "Action", "id": "ID", "target": "Target"}, "status": {"message": "Message", "progress": "Progress", "state": "State"}}`)
				}))
			})
			It(`Invoke PcloudV1CloudinstancesCosimagesGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudV1CloudinstancesCosimagesGetOptions model
				pcloudV1CloudinstancesCosimagesGetOptionsModel := new(powervsv1.PcloudV1CloudinstancesCosimagesGetOptions)
				pcloudV1CloudinstancesCosimagesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudV1CloudinstancesCosimagesGetWithContext(ctx, pcloudV1CloudinstancesCosimagesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudV1CloudinstancesCosimagesGet(pcloudV1CloudinstancesCosimagesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudV1CloudinstancesCosimagesGetWithContext(ctx, pcloudV1CloudinstancesCosimagesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV1CloudinstancesCosimagesGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"createTimestamp": "2019-01-01T12:00:00.000Z", "id": "ID", "operation": {"action": "Action", "id": "ID", "target": "Target"}, "status": {"message": "Message", "progress": "Progress", "state": "State"}}`)
				}))
			})
			It(`Invoke PcloudV1CloudinstancesCosimagesGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudV1CloudinstancesCosimagesGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudV1CloudinstancesCosimagesGetOptions model
				pcloudV1CloudinstancesCosimagesGetOptionsModel := new(powervsv1.PcloudV1CloudinstancesCosimagesGetOptions)
				pcloudV1CloudinstancesCosimagesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudV1CloudinstancesCosimagesGet(pcloudV1CloudinstancesCosimagesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudV1CloudinstancesCosimagesGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV1CloudinstancesCosimagesGetOptions model
				pcloudV1CloudinstancesCosimagesGetOptionsModel := new(powervsv1.PcloudV1CloudinstancesCosimagesGetOptions)
				pcloudV1CloudinstancesCosimagesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudV1CloudinstancesCosimagesGet(pcloudV1CloudinstancesCosimagesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudV1CloudinstancesCosimagesGetOptions model with no property values
				pcloudV1CloudinstancesCosimagesGetOptionsModelNew := new(powervsv1.PcloudV1CloudinstancesCosimagesGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudV1CloudinstancesCosimagesGet(pcloudV1CloudinstancesCosimagesGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudV1CloudinstancesCosimagesGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV1CloudinstancesCosimagesGetOptions model
				pcloudV1CloudinstancesCosimagesGetOptionsModel := new(powervsv1.PcloudV1CloudinstancesCosimagesGetOptions)
				pcloudV1CloudinstancesCosimagesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudV1CloudinstancesCosimagesGet(pcloudV1CloudinstancesCosimagesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV1CloudinstancesCosimagesPost(pcloudV1CloudinstancesCosimagesPostOptions *PcloudV1CloudinstancesCosimagesPostOptions) - Operation response error`, func() {
		pcloudV1CloudinstancesCosimagesPostPath := "/pcloud/v1/cloud-instances/testString/cos-images"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV1CloudinstancesCosimagesPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudV1CloudinstancesCosimagesPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the StorageAffinity model
				storageAffinityModel := new(powervsv1.StorageAffinity)
				storageAffinityModel.AffinityPvmInstance = core.StringPtr("testString")
				storageAffinityModel.AffinityPolicy = core.StringPtr("affinity")
				storageAffinityModel.AffinityVolume = core.StringPtr("testString")
				storageAffinityModel.AntiAffinityPvmInstances = []string{"testString"}
				storageAffinityModel.AntiAffinityVolumes = []string{"testString"}

				// Construct an instance of the PcloudV1CloudinstancesCosimagesPostOptions model
				pcloudV1CloudinstancesCosimagesPostOptionsModel := new(powervsv1.PcloudV1CloudinstancesCosimagesPostOptions)
				pcloudV1CloudinstancesCosimagesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.BucketName = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.ImageFilename = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.ImageName = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.Region = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.AccessKey = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.BucketAccess = core.StringPtr("private")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.OsType = core.StringPtr("aix")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.SecretKey = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.StorageAffinity = storageAffinityModel
				pcloudV1CloudinstancesCosimagesPostOptionsModel.StoragePool = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.StorageType = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudV1CloudinstancesCosimagesPost(pcloudV1CloudinstancesCosimagesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudV1CloudinstancesCosimagesPost(pcloudV1CloudinstancesCosimagesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV1CloudinstancesCosimagesPost(pcloudV1CloudinstancesCosimagesPostOptions *PcloudV1CloudinstancesCosimagesPostOptions)`, func() {
		pcloudV1CloudinstancesCosimagesPostPath := "/pcloud/v1/cloud-instances/testString/cos-images"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV1CloudinstancesCosimagesPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"href": "Href", "id": "ID"}`)
				}))
			})
			It(`Invoke PcloudV1CloudinstancesCosimagesPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the StorageAffinity model
				storageAffinityModel := new(powervsv1.StorageAffinity)
				storageAffinityModel.AffinityPvmInstance = core.StringPtr("testString")
				storageAffinityModel.AffinityPolicy = core.StringPtr("affinity")
				storageAffinityModel.AffinityVolume = core.StringPtr("testString")
				storageAffinityModel.AntiAffinityPvmInstances = []string{"testString"}
				storageAffinityModel.AntiAffinityVolumes = []string{"testString"}

				// Construct an instance of the PcloudV1CloudinstancesCosimagesPostOptions model
				pcloudV1CloudinstancesCosimagesPostOptionsModel := new(powervsv1.PcloudV1CloudinstancesCosimagesPostOptions)
				pcloudV1CloudinstancesCosimagesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.BucketName = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.ImageFilename = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.ImageName = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.Region = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.AccessKey = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.BucketAccess = core.StringPtr("private")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.OsType = core.StringPtr("aix")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.SecretKey = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.StorageAffinity = storageAffinityModel
				pcloudV1CloudinstancesCosimagesPostOptionsModel.StoragePool = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.StorageType = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudV1CloudinstancesCosimagesPostWithContext(ctx, pcloudV1CloudinstancesCosimagesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudV1CloudinstancesCosimagesPost(pcloudV1CloudinstancesCosimagesPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudV1CloudinstancesCosimagesPostWithContext(ctx, pcloudV1CloudinstancesCosimagesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV1CloudinstancesCosimagesPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"href": "Href", "id": "ID"}`)
				}))
			})
			It(`Invoke PcloudV1CloudinstancesCosimagesPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudV1CloudinstancesCosimagesPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the StorageAffinity model
				storageAffinityModel := new(powervsv1.StorageAffinity)
				storageAffinityModel.AffinityPvmInstance = core.StringPtr("testString")
				storageAffinityModel.AffinityPolicy = core.StringPtr("affinity")
				storageAffinityModel.AffinityVolume = core.StringPtr("testString")
				storageAffinityModel.AntiAffinityPvmInstances = []string{"testString"}
				storageAffinityModel.AntiAffinityVolumes = []string{"testString"}

				// Construct an instance of the PcloudV1CloudinstancesCosimagesPostOptions model
				pcloudV1CloudinstancesCosimagesPostOptionsModel := new(powervsv1.PcloudV1CloudinstancesCosimagesPostOptions)
				pcloudV1CloudinstancesCosimagesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.BucketName = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.ImageFilename = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.ImageName = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.Region = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.AccessKey = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.BucketAccess = core.StringPtr("private")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.OsType = core.StringPtr("aix")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.SecretKey = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.StorageAffinity = storageAffinityModel
				pcloudV1CloudinstancesCosimagesPostOptionsModel.StoragePool = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.StorageType = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudV1CloudinstancesCosimagesPost(pcloudV1CloudinstancesCosimagesPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudV1CloudinstancesCosimagesPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the StorageAffinity model
				storageAffinityModel := new(powervsv1.StorageAffinity)
				storageAffinityModel.AffinityPvmInstance = core.StringPtr("testString")
				storageAffinityModel.AffinityPolicy = core.StringPtr("affinity")
				storageAffinityModel.AffinityVolume = core.StringPtr("testString")
				storageAffinityModel.AntiAffinityPvmInstances = []string{"testString"}
				storageAffinityModel.AntiAffinityVolumes = []string{"testString"}

				// Construct an instance of the PcloudV1CloudinstancesCosimagesPostOptions model
				pcloudV1CloudinstancesCosimagesPostOptionsModel := new(powervsv1.PcloudV1CloudinstancesCosimagesPostOptions)
				pcloudV1CloudinstancesCosimagesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.BucketName = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.ImageFilename = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.ImageName = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.Region = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.AccessKey = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.BucketAccess = core.StringPtr("private")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.OsType = core.StringPtr("aix")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.SecretKey = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.StorageAffinity = storageAffinityModel
				pcloudV1CloudinstancesCosimagesPostOptionsModel.StoragePool = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.StorageType = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudV1CloudinstancesCosimagesPost(pcloudV1CloudinstancesCosimagesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudV1CloudinstancesCosimagesPostOptions model with no property values
				pcloudV1CloudinstancesCosimagesPostOptionsModelNew := new(powervsv1.PcloudV1CloudinstancesCosimagesPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudV1CloudinstancesCosimagesPost(pcloudV1CloudinstancesCosimagesPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudV1CloudinstancesCosimagesPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the StorageAffinity model
				storageAffinityModel := new(powervsv1.StorageAffinity)
				storageAffinityModel.AffinityPvmInstance = core.StringPtr("testString")
				storageAffinityModel.AffinityPolicy = core.StringPtr("affinity")
				storageAffinityModel.AffinityVolume = core.StringPtr("testString")
				storageAffinityModel.AntiAffinityPvmInstances = []string{"testString"}
				storageAffinityModel.AntiAffinityVolumes = []string{"testString"}

				// Construct an instance of the PcloudV1CloudinstancesCosimagesPostOptions model
				pcloudV1CloudinstancesCosimagesPostOptionsModel := new(powervsv1.PcloudV1CloudinstancesCosimagesPostOptions)
				pcloudV1CloudinstancesCosimagesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.BucketName = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.ImageFilename = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.ImageName = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.Region = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.AccessKey = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.BucketAccess = core.StringPtr("private")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.OsType = core.StringPtr("aix")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.SecretKey = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.StorageAffinity = storageAffinityModel
				pcloudV1CloudinstancesCosimagesPostOptionsModel.StoragePool = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.StorageType = core.StringPtr("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudV1CloudinstancesCosimagesPost(pcloudV1CloudinstancesCosimagesPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesImagesGetall(pcloudCloudinstancesImagesGetallOptions *PcloudCloudinstancesImagesGetallOptions) - Operation response error`, func() {
		pcloudCloudinstancesImagesGetallPath := "/pcloud/v1/cloud-instances/testString/images"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesImagesGetallPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudinstancesImagesGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesImagesGetallOptions model
				pcloudCloudinstancesImagesGetallOptionsModel := new(powervsv1.PcloudCloudinstancesImagesGetallOptions)
				pcloudCloudinstancesImagesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesImagesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudinstancesImagesGetall(pcloudCloudinstancesImagesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudinstancesImagesGetall(pcloudCloudinstancesImagesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesImagesGetall(pcloudCloudinstancesImagesGetallOptions *PcloudCloudinstancesImagesGetallOptions)`, func() {
		pcloudCloudinstancesImagesGetallPath := "/pcloud/v1/cloud-instances/testString/images"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesImagesGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"images": [{"creationDate": "2019-01-01T12:00:00.000Z", "description": "Description", "href": "Href", "imageID": "ImageID", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "name": "Name", "specifications": {"architecture": "Architecture", "containerFormat": "ContainerFormat", "diskFormat": "DiskFormat", "endianness": "Endianness", "hypervisorType": "HypervisorType", "imageType": "ImageType", "operatingSystem": "OperatingSystem"}, "state": "State", "storagePool": "StoragePool", "storageType": "StorageType"}]}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesImagesGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudinstancesImagesGetallOptions model
				pcloudCloudinstancesImagesGetallOptionsModel := new(powervsv1.PcloudCloudinstancesImagesGetallOptions)
				pcloudCloudinstancesImagesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesImagesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudinstancesImagesGetallWithContext(ctx, pcloudCloudinstancesImagesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudinstancesImagesGetall(pcloudCloudinstancesImagesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudinstancesImagesGetallWithContext(ctx, pcloudCloudinstancesImagesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesImagesGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"images": [{"creationDate": "2019-01-01T12:00:00.000Z", "description": "Description", "href": "Href", "imageID": "ImageID", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "name": "Name", "specifications": {"architecture": "Architecture", "containerFormat": "ContainerFormat", "diskFormat": "DiskFormat", "endianness": "Endianness", "hypervisorType": "HypervisorType", "imageType": "ImageType", "operatingSystem": "OperatingSystem"}, "state": "State", "storagePool": "StoragePool", "storageType": "StorageType"}]}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesImagesGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudinstancesImagesGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudinstancesImagesGetallOptions model
				pcloudCloudinstancesImagesGetallOptionsModel := new(powervsv1.PcloudCloudinstancesImagesGetallOptions)
				pcloudCloudinstancesImagesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesImagesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudinstancesImagesGetall(pcloudCloudinstancesImagesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudinstancesImagesGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesImagesGetallOptions model
				pcloudCloudinstancesImagesGetallOptionsModel := new(powervsv1.PcloudCloudinstancesImagesGetallOptions)
				pcloudCloudinstancesImagesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesImagesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudinstancesImagesGetall(pcloudCloudinstancesImagesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudinstancesImagesGetallOptions model with no property values
				pcloudCloudinstancesImagesGetallOptionsModelNew := new(powervsv1.PcloudCloudinstancesImagesGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudinstancesImagesGetall(pcloudCloudinstancesImagesGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudinstancesImagesGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesImagesGetallOptions model
				pcloudCloudinstancesImagesGetallOptionsModel := new(powervsv1.PcloudCloudinstancesImagesGetallOptions)
				pcloudCloudinstancesImagesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesImagesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudinstancesImagesGetall(pcloudCloudinstancesImagesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesImagesPost(pcloudCloudinstancesImagesPostOptions *PcloudCloudinstancesImagesPostOptions) - Operation response error`, func() {
		pcloudCloudinstancesImagesPostPath := "/pcloud/v1/cloud-instances/testString/images"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesImagesPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudinstancesImagesPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the StorageAffinity model
				storageAffinityModel := new(powervsv1.StorageAffinity)
				storageAffinityModel.AffinityPvmInstance = core.StringPtr("testString")
				storageAffinityModel.AffinityPolicy = core.StringPtr("affinity")
				storageAffinityModel.AffinityVolume = core.StringPtr("testString")
				storageAffinityModel.AntiAffinityPvmInstances = []string{"testString"}
				storageAffinityModel.AntiAffinityVolumes = []string{"testString"}

				// Construct an instance of the PcloudCloudinstancesImagesPostOptions model
				pcloudCloudinstancesImagesPostOptionsModel := new(powervsv1.PcloudCloudinstancesImagesPostOptions)
				pcloudCloudinstancesImagesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.Source = core.StringPtr("root-project")
				pcloudCloudinstancesImagesPostOptionsModel.AccessKey = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.BucketName = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.DiskType = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.ImageFilename = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.ImageID = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.ImageName = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.ImagePath = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.OsType = core.StringPtr("aix")
				pcloudCloudinstancesImagesPostOptionsModel.Region = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.SecretKey = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.StorageAffinity = storageAffinityModel
				pcloudCloudinstancesImagesPostOptionsModel.StoragePool = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudinstancesImagesPost(pcloudCloudinstancesImagesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudinstancesImagesPost(pcloudCloudinstancesImagesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesImagesPost(pcloudCloudinstancesImagesPostOptions *PcloudCloudinstancesImagesPostOptions)`, func() {
		pcloudCloudinstancesImagesPostPath := "/pcloud/v1/cloud-instances/testString/images"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesImagesPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"creationDate": "2019-01-01T12:00:00.000Z", "description": "Description", "imageID": "ImageID", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "maxImageVolumeSize": 18, "name": "Name", "servers": ["Servers"], "size": 4, "specifications": {"architecture": "Architecture", "containerFormat": "ContainerFormat", "diskFormat": "DiskFormat", "endianness": "Endianness", "hypervisorType": "HypervisorType", "imageType": "ImageType", "operatingSystem": "OperatingSystem"}, "state": "State", "storagePool": "StoragePool", "storageType": "StorageType", "taskref": {"href": "Href", "taskID": "TaskID"}, "volumes": [{"bootable": true, "name": "Name", "size": 4, "volumeID": "VolumeID"}]}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesImagesPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the StorageAffinity model
				storageAffinityModel := new(powervsv1.StorageAffinity)
				storageAffinityModel.AffinityPvmInstance = core.StringPtr("testString")
				storageAffinityModel.AffinityPolicy = core.StringPtr("affinity")
				storageAffinityModel.AffinityVolume = core.StringPtr("testString")
				storageAffinityModel.AntiAffinityPvmInstances = []string{"testString"}
				storageAffinityModel.AntiAffinityVolumes = []string{"testString"}

				// Construct an instance of the PcloudCloudinstancesImagesPostOptions model
				pcloudCloudinstancesImagesPostOptionsModel := new(powervsv1.PcloudCloudinstancesImagesPostOptions)
				pcloudCloudinstancesImagesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.Source = core.StringPtr("root-project")
				pcloudCloudinstancesImagesPostOptionsModel.AccessKey = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.BucketName = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.DiskType = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.ImageFilename = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.ImageID = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.ImageName = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.ImagePath = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.OsType = core.StringPtr("aix")
				pcloudCloudinstancesImagesPostOptionsModel.Region = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.SecretKey = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.StorageAffinity = storageAffinityModel
				pcloudCloudinstancesImagesPostOptionsModel.StoragePool = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudinstancesImagesPostWithContext(ctx, pcloudCloudinstancesImagesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudinstancesImagesPost(pcloudCloudinstancesImagesPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudinstancesImagesPostWithContext(ctx, pcloudCloudinstancesImagesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesImagesPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"creationDate": "2019-01-01T12:00:00.000Z", "description": "Description", "imageID": "ImageID", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "maxImageVolumeSize": 18, "name": "Name", "servers": ["Servers"], "size": 4, "specifications": {"architecture": "Architecture", "containerFormat": "ContainerFormat", "diskFormat": "DiskFormat", "endianness": "Endianness", "hypervisorType": "HypervisorType", "imageType": "ImageType", "operatingSystem": "OperatingSystem"}, "state": "State", "storagePool": "StoragePool", "storageType": "StorageType", "taskref": {"href": "Href", "taskID": "TaskID"}, "volumes": [{"bootable": true, "name": "Name", "size": 4, "volumeID": "VolumeID"}]}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesImagesPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudinstancesImagesPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the StorageAffinity model
				storageAffinityModel := new(powervsv1.StorageAffinity)
				storageAffinityModel.AffinityPvmInstance = core.StringPtr("testString")
				storageAffinityModel.AffinityPolicy = core.StringPtr("affinity")
				storageAffinityModel.AffinityVolume = core.StringPtr("testString")
				storageAffinityModel.AntiAffinityPvmInstances = []string{"testString"}
				storageAffinityModel.AntiAffinityVolumes = []string{"testString"}

				// Construct an instance of the PcloudCloudinstancesImagesPostOptions model
				pcloudCloudinstancesImagesPostOptionsModel := new(powervsv1.PcloudCloudinstancesImagesPostOptions)
				pcloudCloudinstancesImagesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.Source = core.StringPtr("root-project")
				pcloudCloudinstancesImagesPostOptionsModel.AccessKey = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.BucketName = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.DiskType = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.ImageFilename = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.ImageID = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.ImageName = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.ImagePath = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.OsType = core.StringPtr("aix")
				pcloudCloudinstancesImagesPostOptionsModel.Region = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.SecretKey = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.StorageAffinity = storageAffinityModel
				pcloudCloudinstancesImagesPostOptionsModel.StoragePool = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudinstancesImagesPost(pcloudCloudinstancesImagesPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudinstancesImagesPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the StorageAffinity model
				storageAffinityModel := new(powervsv1.StorageAffinity)
				storageAffinityModel.AffinityPvmInstance = core.StringPtr("testString")
				storageAffinityModel.AffinityPolicy = core.StringPtr("affinity")
				storageAffinityModel.AffinityVolume = core.StringPtr("testString")
				storageAffinityModel.AntiAffinityPvmInstances = []string{"testString"}
				storageAffinityModel.AntiAffinityVolumes = []string{"testString"}

				// Construct an instance of the PcloudCloudinstancesImagesPostOptions model
				pcloudCloudinstancesImagesPostOptionsModel := new(powervsv1.PcloudCloudinstancesImagesPostOptions)
				pcloudCloudinstancesImagesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.Source = core.StringPtr("root-project")
				pcloudCloudinstancesImagesPostOptionsModel.AccessKey = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.BucketName = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.DiskType = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.ImageFilename = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.ImageID = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.ImageName = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.ImagePath = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.OsType = core.StringPtr("aix")
				pcloudCloudinstancesImagesPostOptionsModel.Region = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.SecretKey = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.StorageAffinity = storageAffinityModel
				pcloudCloudinstancesImagesPostOptionsModel.StoragePool = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudinstancesImagesPost(pcloudCloudinstancesImagesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudinstancesImagesPostOptions model with no property values
				pcloudCloudinstancesImagesPostOptionsModelNew := new(powervsv1.PcloudCloudinstancesImagesPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudinstancesImagesPost(pcloudCloudinstancesImagesPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudinstancesImagesPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the StorageAffinity model
				storageAffinityModel := new(powervsv1.StorageAffinity)
				storageAffinityModel.AffinityPvmInstance = core.StringPtr("testString")
				storageAffinityModel.AffinityPolicy = core.StringPtr("affinity")
				storageAffinityModel.AffinityVolume = core.StringPtr("testString")
				storageAffinityModel.AntiAffinityPvmInstances = []string{"testString"}
				storageAffinityModel.AntiAffinityVolumes = []string{"testString"}

				// Construct an instance of the PcloudCloudinstancesImagesPostOptions model
				pcloudCloudinstancesImagesPostOptionsModel := new(powervsv1.PcloudCloudinstancesImagesPostOptions)
				pcloudCloudinstancesImagesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.Source = core.StringPtr("root-project")
				pcloudCloudinstancesImagesPostOptionsModel.AccessKey = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.BucketName = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.DiskType = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.ImageFilename = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.ImageID = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.ImageName = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.ImagePath = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.OsType = core.StringPtr("aix")
				pcloudCloudinstancesImagesPostOptionsModel.Region = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.SecretKey = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.StorageAffinity = storageAffinityModel
				pcloudCloudinstancesImagesPostOptionsModel.StoragePool = core.StringPtr("testString")
				pcloudCloudinstancesImagesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudinstancesImagesPost(pcloudCloudinstancesImagesPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesImagesDelete(pcloudCloudinstancesImagesDeleteOptions *PcloudCloudinstancesImagesDeleteOptions) - Operation response error`, func() {
		pcloudCloudinstancesImagesDeletePath := "/pcloud/v1/cloud-instances/testString/images/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesImagesDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudinstancesImagesDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesImagesDeleteOptions model
				pcloudCloudinstancesImagesDeleteOptionsModel := new(powervsv1.PcloudCloudinstancesImagesDeleteOptions)
				pcloudCloudinstancesImagesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesImagesDeleteOptionsModel.ImageID = core.StringPtr("testString")
				pcloudCloudinstancesImagesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudinstancesImagesDelete(pcloudCloudinstancesImagesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudinstancesImagesDelete(pcloudCloudinstancesImagesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesImagesDelete(pcloudCloudinstancesImagesDeleteOptions *PcloudCloudinstancesImagesDeleteOptions)`, func() {
		pcloudCloudinstancesImagesDeletePath := "/pcloud/v1/cloud-instances/testString/images/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesImagesDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesImagesDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudinstancesImagesDeleteOptions model
				pcloudCloudinstancesImagesDeleteOptionsModel := new(powervsv1.PcloudCloudinstancesImagesDeleteOptions)
				pcloudCloudinstancesImagesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesImagesDeleteOptionsModel.ImageID = core.StringPtr("testString")
				pcloudCloudinstancesImagesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudinstancesImagesDeleteWithContext(ctx, pcloudCloudinstancesImagesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudinstancesImagesDelete(pcloudCloudinstancesImagesDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudinstancesImagesDeleteWithContext(ctx, pcloudCloudinstancesImagesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesImagesDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesImagesDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudinstancesImagesDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudinstancesImagesDeleteOptions model
				pcloudCloudinstancesImagesDeleteOptionsModel := new(powervsv1.PcloudCloudinstancesImagesDeleteOptions)
				pcloudCloudinstancesImagesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesImagesDeleteOptionsModel.ImageID = core.StringPtr("testString")
				pcloudCloudinstancesImagesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudinstancesImagesDelete(pcloudCloudinstancesImagesDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudinstancesImagesDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesImagesDeleteOptions model
				pcloudCloudinstancesImagesDeleteOptionsModel := new(powervsv1.PcloudCloudinstancesImagesDeleteOptions)
				pcloudCloudinstancesImagesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesImagesDeleteOptionsModel.ImageID = core.StringPtr("testString")
				pcloudCloudinstancesImagesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudinstancesImagesDelete(pcloudCloudinstancesImagesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudinstancesImagesDeleteOptions model with no property values
				pcloudCloudinstancesImagesDeleteOptionsModelNew := new(powervsv1.PcloudCloudinstancesImagesDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudinstancesImagesDelete(pcloudCloudinstancesImagesDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudinstancesImagesDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesImagesDeleteOptions model
				pcloudCloudinstancesImagesDeleteOptionsModel := new(powervsv1.PcloudCloudinstancesImagesDeleteOptions)
				pcloudCloudinstancesImagesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesImagesDeleteOptionsModel.ImageID = core.StringPtr("testString")
				pcloudCloudinstancesImagesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudinstancesImagesDelete(pcloudCloudinstancesImagesDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesImagesGet(pcloudCloudinstancesImagesGetOptions *PcloudCloudinstancesImagesGetOptions) - Operation response error`, func() {
		pcloudCloudinstancesImagesGetPath := "/pcloud/v1/cloud-instances/testString/images/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesImagesGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudinstancesImagesGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesImagesGetOptions model
				pcloudCloudinstancesImagesGetOptionsModel := new(powervsv1.PcloudCloudinstancesImagesGetOptions)
				pcloudCloudinstancesImagesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesImagesGetOptionsModel.ImageID = core.StringPtr("testString")
				pcloudCloudinstancesImagesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudinstancesImagesGet(pcloudCloudinstancesImagesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudinstancesImagesGet(pcloudCloudinstancesImagesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesImagesGet(pcloudCloudinstancesImagesGetOptions *PcloudCloudinstancesImagesGetOptions)`, func() {
		pcloudCloudinstancesImagesGetPath := "/pcloud/v1/cloud-instances/testString/images/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesImagesGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"creationDate": "2019-01-01T12:00:00.000Z", "description": "Description", "imageID": "ImageID", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "maxImageVolumeSize": 18, "name": "Name", "servers": ["Servers"], "size": 4, "specifications": {"architecture": "Architecture", "containerFormat": "ContainerFormat", "diskFormat": "DiskFormat", "endianness": "Endianness", "hypervisorType": "HypervisorType", "imageType": "ImageType", "operatingSystem": "OperatingSystem"}, "state": "State", "storagePool": "StoragePool", "storageType": "StorageType", "taskref": {"href": "Href", "taskID": "TaskID"}, "volumes": [{"bootable": true, "name": "Name", "size": 4, "volumeID": "VolumeID"}]}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesImagesGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudinstancesImagesGetOptions model
				pcloudCloudinstancesImagesGetOptionsModel := new(powervsv1.PcloudCloudinstancesImagesGetOptions)
				pcloudCloudinstancesImagesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesImagesGetOptionsModel.ImageID = core.StringPtr("testString")
				pcloudCloudinstancesImagesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudinstancesImagesGetWithContext(ctx, pcloudCloudinstancesImagesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudinstancesImagesGet(pcloudCloudinstancesImagesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudinstancesImagesGetWithContext(ctx, pcloudCloudinstancesImagesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesImagesGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"creationDate": "2019-01-01T12:00:00.000Z", "description": "Description", "imageID": "ImageID", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "maxImageVolumeSize": 18, "name": "Name", "servers": ["Servers"], "size": 4, "specifications": {"architecture": "Architecture", "containerFormat": "ContainerFormat", "diskFormat": "DiskFormat", "endianness": "Endianness", "hypervisorType": "HypervisorType", "imageType": "ImageType", "operatingSystem": "OperatingSystem"}, "state": "State", "storagePool": "StoragePool", "storageType": "StorageType", "taskref": {"href": "Href", "taskID": "TaskID"}, "volumes": [{"bootable": true, "name": "Name", "size": 4, "volumeID": "VolumeID"}]}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesImagesGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudinstancesImagesGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudinstancesImagesGetOptions model
				pcloudCloudinstancesImagesGetOptionsModel := new(powervsv1.PcloudCloudinstancesImagesGetOptions)
				pcloudCloudinstancesImagesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesImagesGetOptionsModel.ImageID = core.StringPtr("testString")
				pcloudCloudinstancesImagesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudinstancesImagesGet(pcloudCloudinstancesImagesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudinstancesImagesGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesImagesGetOptions model
				pcloudCloudinstancesImagesGetOptionsModel := new(powervsv1.PcloudCloudinstancesImagesGetOptions)
				pcloudCloudinstancesImagesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesImagesGetOptionsModel.ImageID = core.StringPtr("testString")
				pcloudCloudinstancesImagesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudinstancesImagesGet(pcloudCloudinstancesImagesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudinstancesImagesGetOptions model with no property values
				pcloudCloudinstancesImagesGetOptionsModelNew := new(powervsv1.PcloudCloudinstancesImagesGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudinstancesImagesGet(pcloudCloudinstancesImagesGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudinstancesImagesGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesImagesGetOptions model
				pcloudCloudinstancesImagesGetOptionsModel := new(powervsv1.PcloudCloudinstancesImagesGetOptions)
				pcloudCloudinstancesImagesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesImagesGetOptionsModel.ImageID = core.StringPtr("testString")
				pcloudCloudinstancesImagesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudinstancesImagesGet(pcloudCloudinstancesImagesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesImagesExportPost(pcloudCloudinstancesImagesExportPostOptions *PcloudCloudinstancesImagesExportPostOptions) - Operation response error`, func() {
		pcloudCloudinstancesImagesExportPostPath := "/pcloud/v1/cloud-instances/testString/images/testString/export"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesImagesExportPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudinstancesImagesExportPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesImagesExportPostOptions model
				pcloudCloudinstancesImagesExportPostOptionsModel := new(powervsv1.PcloudCloudinstancesImagesExportPostOptions)
				pcloudCloudinstancesImagesExportPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.ImageID = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.AccessKey = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.BucketName = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.Region = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.SecretKey = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudinstancesImagesExportPost(pcloudCloudinstancesImagesExportPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudinstancesImagesExportPost(pcloudCloudinstancesImagesExportPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesImagesExportPost(pcloudCloudinstancesImagesExportPostOptions *PcloudCloudinstancesImagesExportPostOptions)`, func() {
		pcloudCloudinstancesImagesExportPostPath := "/pcloud/v1/cloud-instances/testString/images/testString/export"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesImagesExportPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesImagesExportPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudinstancesImagesExportPostOptions model
				pcloudCloudinstancesImagesExportPostOptionsModel := new(powervsv1.PcloudCloudinstancesImagesExportPostOptions)
				pcloudCloudinstancesImagesExportPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.ImageID = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.AccessKey = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.BucketName = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.Region = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.SecretKey = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudinstancesImagesExportPostWithContext(ctx, pcloudCloudinstancesImagesExportPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudinstancesImagesExportPost(pcloudCloudinstancesImagesExportPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudinstancesImagesExportPostWithContext(ctx, pcloudCloudinstancesImagesExportPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesImagesExportPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesImagesExportPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudinstancesImagesExportPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudinstancesImagesExportPostOptions model
				pcloudCloudinstancesImagesExportPostOptionsModel := new(powervsv1.PcloudCloudinstancesImagesExportPostOptions)
				pcloudCloudinstancesImagesExportPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.ImageID = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.AccessKey = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.BucketName = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.Region = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.SecretKey = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudinstancesImagesExportPost(pcloudCloudinstancesImagesExportPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudinstancesImagesExportPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesImagesExportPostOptions model
				pcloudCloudinstancesImagesExportPostOptionsModel := new(powervsv1.PcloudCloudinstancesImagesExportPostOptions)
				pcloudCloudinstancesImagesExportPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.ImageID = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.AccessKey = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.BucketName = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.Region = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.SecretKey = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudinstancesImagesExportPost(pcloudCloudinstancesImagesExportPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudinstancesImagesExportPostOptions model with no property values
				pcloudCloudinstancesImagesExportPostOptionsModelNew := new(powervsv1.PcloudCloudinstancesImagesExportPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudinstancesImagesExportPost(pcloudCloudinstancesImagesExportPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudCloudinstancesImagesExportPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesImagesExportPostOptions model
				pcloudCloudinstancesImagesExportPostOptionsModel := new(powervsv1.PcloudCloudinstancesImagesExportPostOptions)
				pcloudCloudinstancesImagesExportPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.ImageID = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.AccessKey = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.BucketName = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.Region = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.SecretKey = core.StringPtr("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudinstancesImagesExportPost(pcloudCloudinstancesImagesExportPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesStockimagesGetall(pcloudCloudinstancesStockimagesGetallOptions *PcloudCloudinstancesStockimagesGetallOptions) - Operation response error`, func() {
		pcloudCloudinstancesStockimagesGetallPath := "/pcloud/v1/cloud-instances/testString/stock-images"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesStockimagesGetallPath))
					Expect(req.Method).To(Equal("GET"))
					// TODO: Add check for sap query parameter
					// TODO: Add check for vtl query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudinstancesStockimagesGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesStockimagesGetallOptions model
				pcloudCloudinstancesStockimagesGetallOptionsModel := new(powervsv1.PcloudCloudinstancesStockimagesGetallOptions)
				pcloudCloudinstancesStockimagesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesStockimagesGetallOptionsModel.Sap = core.BoolPtr(true)
				pcloudCloudinstancesStockimagesGetallOptionsModel.Vtl = core.BoolPtr(true)
				pcloudCloudinstancesStockimagesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudinstancesStockimagesGetall(pcloudCloudinstancesStockimagesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudinstancesStockimagesGetall(pcloudCloudinstancesStockimagesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesStockimagesGetall(pcloudCloudinstancesStockimagesGetallOptions *PcloudCloudinstancesStockimagesGetallOptions)`, func() {
		pcloudCloudinstancesStockimagesGetallPath := "/pcloud/v1/cloud-instances/testString/stock-images"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesStockimagesGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// TODO: Add check for sap query parameter
					// TODO: Add check for vtl query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"images": [{"creationDate": "2019-01-01T12:00:00.000Z", "description": "Description", "href": "Href", "imageID": "ImageID", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "name": "Name", "specifications": {"architecture": "Architecture", "containerFormat": "ContainerFormat", "diskFormat": "DiskFormat", "endianness": "Endianness", "hypervisorType": "HypervisorType", "imageType": "ImageType", "operatingSystem": "OperatingSystem"}, "state": "State", "storagePool": "StoragePool", "storageType": "StorageType"}]}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesStockimagesGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudinstancesStockimagesGetallOptions model
				pcloudCloudinstancesStockimagesGetallOptionsModel := new(powervsv1.PcloudCloudinstancesStockimagesGetallOptions)
				pcloudCloudinstancesStockimagesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesStockimagesGetallOptionsModel.Sap = core.BoolPtr(true)
				pcloudCloudinstancesStockimagesGetallOptionsModel.Vtl = core.BoolPtr(true)
				pcloudCloudinstancesStockimagesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudinstancesStockimagesGetallWithContext(ctx, pcloudCloudinstancesStockimagesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudinstancesStockimagesGetall(pcloudCloudinstancesStockimagesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudinstancesStockimagesGetallWithContext(ctx, pcloudCloudinstancesStockimagesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesStockimagesGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// TODO: Add check for sap query parameter
					// TODO: Add check for vtl query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"images": [{"creationDate": "2019-01-01T12:00:00.000Z", "description": "Description", "href": "Href", "imageID": "ImageID", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "name": "Name", "specifications": {"architecture": "Architecture", "containerFormat": "ContainerFormat", "diskFormat": "DiskFormat", "endianness": "Endianness", "hypervisorType": "HypervisorType", "imageType": "ImageType", "operatingSystem": "OperatingSystem"}, "state": "State", "storagePool": "StoragePool", "storageType": "StorageType"}]}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesStockimagesGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudinstancesStockimagesGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudinstancesStockimagesGetallOptions model
				pcloudCloudinstancesStockimagesGetallOptionsModel := new(powervsv1.PcloudCloudinstancesStockimagesGetallOptions)
				pcloudCloudinstancesStockimagesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesStockimagesGetallOptionsModel.Sap = core.BoolPtr(true)
				pcloudCloudinstancesStockimagesGetallOptionsModel.Vtl = core.BoolPtr(true)
				pcloudCloudinstancesStockimagesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudinstancesStockimagesGetall(pcloudCloudinstancesStockimagesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudinstancesStockimagesGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesStockimagesGetallOptions model
				pcloudCloudinstancesStockimagesGetallOptionsModel := new(powervsv1.PcloudCloudinstancesStockimagesGetallOptions)
				pcloudCloudinstancesStockimagesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesStockimagesGetallOptionsModel.Sap = core.BoolPtr(true)
				pcloudCloudinstancesStockimagesGetallOptionsModel.Vtl = core.BoolPtr(true)
				pcloudCloudinstancesStockimagesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudinstancesStockimagesGetall(pcloudCloudinstancesStockimagesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudinstancesStockimagesGetallOptions model with no property values
				pcloudCloudinstancesStockimagesGetallOptionsModelNew := new(powervsv1.PcloudCloudinstancesStockimagesGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudinstancesStockimagesGetall(pcloudCloudinstancesStockimagesGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudinstancesStockimagesGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesStockimagesGetallOptions model
				pcloudCloudinstancesStockimagesGetallOptionsModel := new(powervsv1.PcloudCloudinstancesStockimagesGetallOptions)
				pcloudCloudinstancesStockimagesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesStockimagesGetallOptionsModel.Sap = core.BoolPtr(true)
				pcloudCloudinstancesStockimagesGetallOptionsModel.Vtl = core.BoolPtr(true)
				pcloudCloudinstancesStockimagesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudinstancesStockimagesGetall(pcloudCloudinstancesStockimagesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesStockimagesGet(pcloudCloudinstancesStockimagesGetOptions *PcloudCloudinstancesStockimagesGetOptions) - Operation response error`, func() {
		pcloudCloudinstancesStockimagesGetPath := "/pcloud/v1/cloud-instances/testString/stock-images/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesStockimagesGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudinstancesStockimagesGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesStockimagesGetOptions model
				pcloudCloudinstancesStockimagesGetOptionsModel := new(powervsv1.PcloudCloudinstancesStockimagesGetOptions)
				pcloudCloudinstancesStockimagesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesStockimagesGetOptionsModel.ImageID = core.StringPtr("testString")
				pcloudCloudinstancesStockimagesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudinstancesStockimagesGet(pcloudCloudinstancesStockimagesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudinstancesStockimagesGet(pcloudCloudinstancesStockimagesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesStockimagesGet(pcloudCloudinstancesStockimagesGetOptions *PcloudCloudinstancesStockimagesGetOptions)`, func() {
		pcloudCloudinstancesStockimagesGetPath := "/pcloud/v1/cloud-instances/testString/stock-images/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesStockimagesGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"creationDate": "2019-01-01T12:00:00.000Z", "description": "Description", "imageID": "ImageID", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "maxImageVolumeSize": 18, "name": "Name", "servers": ["Servers"], "size": 4, "specifications": {"architecture": "Architecture", "containerFormat": "ContainerFormat", "diskFormat": "DiskFormat", "endianness": "Endianness", "hypervisorType": "HypervisorType", "imageType": "ImageType", "operatingSystem": "OperatingSystem"}, "state": "State", "storagePool": "StoragePool", "storageType": "StorageType", "taskref": {"href": "Href", "taskID": "TaskID"}, "volumes": [{"bootable": true, "name": "Name", "size": 4, "volumeID": "VolumeID"}]}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesStockimagesGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudinstancesStockimagesGetOptions model
				pcloudCloudinstancesStockimagesGetOptionsModel := new(powervsv1.PcloudCloudinstancesStockimagesGetOptions)
				pcloudCloudinstancesStockimagesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesStockimagesGetOptionsModel.ImageID = core.StringPtr("testString")
				pcloudCloudinstancesStockimagesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudinstancesStockimagesGetWithContext(ctx, pcloudCloudinstancesStockimagesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudinstancesStockimagesGet(pcloudCloudinstancesStockimagesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudinstancesStockimagesGetWithContext(ctx, pcloudCloudinstancesStockimagesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesStockimagesGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"creationDate": "2019-01-01T12:00:00.000Z", "description": "Description", "imageID": "ImageID", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "maxImageVolumeSize": 18, "name": "Name", "servers": ["Servers"], "size": 4, "specifications": {"architecture": "Architecture", "containerFormat": "ContainerFormat", "diskFormat": "DiskFormat", "endianness": "Endianness", "hypervisorType": "HypervisorType", "imageType": "ImageType", "operatingSystem": "OperatingSystem"}, "state": "State", "storagePool": "StoragePool", "storageType": "StorageType", "taskref": {"href": "Href", "taskID": "TaskID"}, "volumes": [{"bootable": true, "name": "Name", "size": 4, "volumeID": "VolumeID"}]}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesStockimagesGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudinstancesStockimagesGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudinstancesStockimagesGetOptions model
				pcloudCloudinstancesStockimagesGetOptionsModel := new(powervsv1.PcloudCloudinstancesStockimagesGetOptions)
				pcloudCloudinstancesStockimagesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesStockimagesGetOptionsModel.ImageID = core.StringPtr("testString")
				pcloudCloudinstancesStockimagesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudinstancesStockimagesGet(pcloudCloudinstancesStockimagesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudinstancesStockimagesGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesStockimagesGetOptions model
				pcloudCloudinstancesStockimagesGetOptionsModel := new(powervsv1.PcloudCloudinstancesStockimagesGetOptions)
				pcloudCloudinstancesStockimagesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesStockimagesGetOptionsModel.ImageID = core.StringPtr("testString")
				pcloudCloudinstancesStockimagesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudinstancesStockimagesGet(pcloudCloudinstancesStockimagesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudinstancesStockimagesGetOptions model with no property values
				pcloudCloudinstancesStockimagesGetOptionsModelNew := new(powervsv1.PcloudCloudinstancesStockimagesGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudinstancesStockimagesGet(pcloudCloudinstancesStockimagesGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudinstancesStockimagesGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesStockimagesGetOptions model
				pcloudCloudinstancesStockimagesGetOptionsModel := new(powervsv1.PcloudCloudinstancesStockimagesGetOptions)
				pcloudCloudinstancesStockimagesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesStockimagesGetOptionsModel.ImageID = core.StringPtr("testString")
				pcloudCloudinstancesStockimagesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudinstancesStockimagesGet(pcloudCloudinstancesStockimagesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudImagesGetall(pcloudImagesGetallOptions *PcloudImagesGetallOptions) - Operation response error`, func() {
		pcloudImagesGetallPath := "/pcloud/v1/images"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudImagesGetallPath))
					Expect(req.Method).To(Equal("GET"))
					// TODO: Add check for sap query parameter
					// TODO: Add check for vtl query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudImagesGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudImagesGetallOptions model
				pcloudImagesGetallOptionsModel := new(powervsv1.PcloudImagesGetallOptions)
				pcloudImagesGetallOptionsModel.Sap = core.BoolPtr(true)
				pcloudImagesGetallOptionsModel.Vtl = core.BoolPtr(true)
				pcloudImagesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudImagesGetall(pcloudImagesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudImagesGetall(pcloudImagesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudImagesGetall(pcloudImagesGetallOptions *PcloudImagesGetallOptions)`, func() {
		pcloudImagesGetallPath := "/pcloud/v1/images"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudImagesGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// TODO: Add check for sap query parameter
					// TODO: Add check for vtl query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"images": [{"creationDate": "2019-01-01T12:00:00.000Z", "description": "Description", "href": "Href", "imageID": "ImageID", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "name": "Name", "specifications": {"architecture": "Architecture", "containerFormat": "ContainerFormat", "diskFormat": "DiskFormat", "endianness": "Endianness", "hypervisorType": "HypervisorType", "imageType": "ImageType", "operatingSystem": "OperatingSystem"}, "state": "State", "storagePool": "StoragePool", "storageType": "StorageType"}]}`)
				}))
			})
			It(`Invoke PcloudImagesGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudImagesGetallOptions model
				pcloudImagesGetallOptionsModel := new(powervsv1.PcloudImagesGetallOptions)
				pcloudImagesGetallOptionsModel.Sap = core.BoolPtr(true)
				pcloudImagesGetallOptionsModel.Vtl = core.BoolPtr(true)
				pcloudImagesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudImagesGetallWithContext(ctx, pcloudImagesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudImagesGetall(pcloudImagesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudImagesGetallWithContext(ctx, pcloudImagesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudImagesGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// TODO: Add check for sap query parameter
					// TODO: Add check for vtl query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"images": [{"creationDate": "2019-01-01T12:00:00.000Z", "description": "Description", "href": "Href", "imageID": "ImageID", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "name": "Name", "specifications": {"architecture": "Architecture", "containerFormat": "ContainerFormat", "diskFormat": "DiskFormat", "endianness": "Endianness", "hypervisorType": "HypervisorType", "imageType": "ImageType", "operatingSystem": "OperatingSystem"}, "state": "State", "storagePool": "StoragePool", "storageType": "StorageType"}]}`)
				}))
			})
			It(`Invoke PcloudImagesGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudImagesGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudImagesGetallOptions model
				pcloudImagesGetallOptionsModel := new(powervsv1.PcloudImagesGetallOptions)
				pcloudImagesGetallOptionsModel.Sap = core.BoolPtr(true)
				pcloudImagesGetallOptionsModel.Vtl = core.BoolPtr(true)
				pcloudImagesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudImagesGetall(pcloudImagesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudImagesGetall with error: Operation request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudImagesGetallOptions model
				pcloudImagesGetallOptionsModel := new(powervsv1.PcloudImagesGetallOptions)
				pcloudImagesGetallOptionsModel.Sap = core.BoolPtr(true)
				pcloudImagesGetallOptionsModel.Vtl = core.BoolPtr(true)
				pcloudImagesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudImagesGetall(pcloudImagesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudImagesGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudImagesGetallOptions model
				pcloudImagesGetallOptionsModel := new(powervsv1.PcloudImagesGetallOptions)
				pcloudImagesGetallOptionsModel.Sap = core.BoolPtr(true)
				pcloudImagesGetallOptionsModel.Vtl = core.BoolPtr(true)
				pcloudImagesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudImagesGetall(pcloudImagesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudImagesGet(pcloudImagesGetOptions *PcloudImagesGetOptions) - Operation response error`, func() {
		pcloudImagesGetPath := "/pcloud/v1/images/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudImagesGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudImagesGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudImagesGetOptions model
				pcloudImagesGetOptionsModel := new(powervsv1.PcloudImagesGetOptions)
				pcloudImagesGetOptionsModel.ImageID = core.StringPtr("testString")
				pcloudImagesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudImagesGet(pcloudImagesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudImagesGet(pcloudImagesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudImagesGet(pcloudImagesGetOptions *PcloudImagesGetOptions)`, func() {
		pcloudImagesGetPath := "/pcloud/v1/images/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudImagesGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"creationDate": "2019-01-01T12:00:00.000Z", "description": "Description", "imageID": "ImageID", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "maxImageVolumeSize": 18, "name": "Name", "servers": ["Servers"], "size": 4, "specifications": {"architecture": "Architecture", "containerFormat": "ContainerFormat", "diskFormat": "DiskFormat", "endianness": "Endianness", "hypervisorType": "HypervisorType", "imageType": "ImageType", "operatingSystem": "OperatingSystem"}, "state": "State", "storagePool": "StoragePool", "storageType": "StorageType", "taskref": {"href": "Href", "taskID": "TaskID"}, "volumes": [{"bootable": true, "name": "Name", "size": 4, "volumeID": "VolumeID"}]}`)
				}))
			})
			It(`Invoke PcloudImagesGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudImagesGetOptions model
				pcloudImagesGetOptionsModel := new(powervsv1.PcloudImagesGetOptions)
				pcloudImagesGetOptionsModel.ImageID = core.StringPtr("testString")
				pcloudImagesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudImagesGetWithContext(ctx, pcloudImagesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudImagesGet(pcloudImagesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudImagesGetWithContext(ctx, pcloudImagesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudImagesGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"creationDate": "2019-01-01T12:00:00.000Z", "description": "Description", "imageID": "ImageID", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "maxImageVolumeSize": 18, "name": "Name", "servers": ["Servers"], "size": 4, "specifications": {"architecture": "Architecture", "containerFormat": "ContainerFormat", "diskFormat": "DiskFormat", "endianness": "Endianness", "hypervisorType": "HypervisorType", "imageType": "ImageType", "operatingSystem": "OperatingSystem"}, "state": "State", "storagePool": "StoragePool", "storageType": "StorageType", "taskref": {"href": "Href", "taskID": "TaskID"}, "volumes": [{"bootable": true, "name": "Name", "size": 4, "volumeID": "VolumeID"}]}`)
				}))
			})
			It(`Invoke PcloudImagesGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudImagesGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudImagesGetOptions model
				pcloudImagesGetOptionsModel := new(powervsv1.PcloudImagesGetOptions)
				pcloudImagesGetOptionsModel.ImageID = core.StringPtr("testString")
				pcloudImagesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudImagesGet(pcloudImagesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudImagesGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudImagesGetOptions model
				pcloudImagesGetOptionsModel := new(powervsv1.PcloudImagesGetOptions)
				pcloudImagesGetOptionsModel.ImageID = core.StringPtr("testString")
				pcloudImagesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudImagesGet(pcloudImagesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudImagesGetOptions model with no property values
				pcloudImagesGetOptionsModelNew := new(powervsv1.PcloudImagesGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudImagesGet(pcloudImagesGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudImagesGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudImagesGetOptions model
				pcloudImagesGetOptionsModel := new(powervsv1.PcloudImagesGetOptions)
				pcloudImagesGetOptionsModel.ImageID = core.StringPtr("testString")
				pcloudImagesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudImagesGet(pcloudImagesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2ImagesExportGet(pcloudV2ImagesExportGetOptions *PcloudV2ImagesExportGetOptions) - Operation response error`, func() {
		pcloudV2ImagesExportGetPath := "/pcloud/v2/cloud-instances/testString/images/testString/export"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2ImagesExportGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudV2ImagesExportGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2ImagesExportGetOptions model
				pcloudV2ImagesExportGetOptionsModel := new(powervsv1.PcloudV2ImagesExportGetOptions)
				pcloudV2ImagesExportGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2ImagesExportGetOptionsModel.ImageID = core.StringPtr("testString")
				pcloudV2ImagesExportGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudV2ImagesExportGet(pcloudV2ImagesExportGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudV2ImagesExportGet(pcloudV2ImagesExportGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2ImagesExportGet(pcloudV2ImagesExportGetOptions *PcloudV2ImagesExportGetOptions)`, func() {
		pcloudV2ImagesExportGetPath := "/pcloud/v2/cloud-instances/testString/images/testString/export"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2ImagesExportGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"createTimestamp": "2019-01-01T12:00:00.000Z", "id": "ID", "operation": {"action": "Action", "id": "ID", "target": "Target"}, "status": {"message": "Message", "progress": "Progress", "state": "State"}}`)
				}))
			})
			It(`Invoke PcloudV2ImagesExportGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudV2ImagesExportGetOptions model
				pcloudV2ImagesExportGetOptionsModel := new(powervsv1.PcloudV2ImagesExportGetOptions)
				pcloudV2ImagesExportGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2ImagesExportGetOptionsModel.ImageID = core.StringPtr("testString")
				pcloudV2ImagesExportGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudV2ImagesExportGetWithContext(ctx, pcloudV2ImagesExportGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudV2ImagesExportGet(pcloudV2ImagesExportGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudV2ImagesExportGetWithContext(ctx, pcloudV2ImagesExportGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2ImagesExportGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"createTimestamp": "2019-01-01T12:00:00.000Z", "id": "ID", "operation": {"action": "Action", "id": "ID", "target": "Target"}, "status": {"message": "Message", "progress": "Progress", "state": "State"}}`)
				}))
			})
			It(`Invoke PcloudV2ImagesExportGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudV2ImagesExportGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudV2ImagesExportGetOptions model
				pcloudV2ImagesExportGetOptionsModel := new(powervsv1.PcloudV2ImagesExportGetOptions)
				pcloudV2ImagesExportGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2ImagesExportGetOptionsModel.ImageID = core.StringPtr("testString")
				pcloudV2ImagesExportGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudV2ImagesExportGet(pcloudV2ImagesExportGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudV2ImagesExportGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2ImagesExportGetOptions model
				pcloudV2ImagesExportGetOptionsModel := new(powervsv1.PcloudV2ImagesExportGetOptions)
				pcloudV2ImagesExportGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2ImagesExportGetOptionsModel.ImageID = core.StringPtr("testString")
				pcloudV2ImagesExportGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudV2ImagesExportGet(pcloudV2ImagesExportGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudV2ImagesExportGetOptions model with no property values
				pcloudV2ImagesExportGetOptionsModelNew := new(powervsv1.PcloudV2ImagesExportGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudV2ImagesExportGet(pcloudV2ImagesExportGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudV2ImagesExportGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2ImagesExportGetOptions model
				pcloudV2ImagesExportGetOptionsModel := new(powervsv1.PcloudV2ImagesExportGetOptions)
				pcloudV2ImagesExportGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2ImagesExportGetOptionsModel.ImageID = core.StringPtr("testString")
				pcloudV2ImagesExportGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudV2ImagesExportGet(pcloudV2ImagesExportGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2ImagesExportPost(pcloudV2ImagesExportPostOptions *PcloudV2ImagesExportPostOptions) - Operation response error`, func() {
		pcloudV2ImagesExportPostPath := "/pcloud/v2/cloud-instances/testString/images/testString/export"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2ImagesExportPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudV2ImagesExportPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2ImagesExportPostOptions model
				pcloudV2ImagesExportPostOptionsModel := new(powervsv1.PcloudV2ImagesExportPostOptions)
				pcloudV2ImagesExportPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.ImageID = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.AccessKey = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.BucketName = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.Region = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.SecretKey = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudV2ImagesExportPost(pcloudV2ImagesExportPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudV2ImagesExportPost(pcloudV2ImagesExportPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2ImagesExportPost(pcloudV2ImagesExportPostOptions *PcloudV2ImagesExportPostOptions)`, func() {
		pcloudV2ImagesExportPostPath := "/pcloud/v2/cloud-instances/testString/images/testString/export"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2ImagesExportPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"href": "Href", "id": "ID"}`)
				}))
			})
			It(`Invoke PcloudV2ImagesExportPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudV2ImagesExportPostOptions model
				pcloudV2ImagesExportPostOptionsModel := new(powervsv1.PcloudV2ImagesExportPostOptions)
				pcloudV2ImagesExportPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.ImageID = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.AccessKey = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.BucketName = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.Region = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.SecretKey = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudV2ImagesExportPostWithContext(ctx, pcloudV2ImagesExportPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudV2ImagesExportPost(pcloudV2ImagesExportPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudV2ImagesExportPostWithContext(ctx, pcloudV2ImagesExportPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2ImagesExportPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"href": "Href", "id": "ID"}`)
				}))
			})
			It(`Invoke PcloudV2ImagesExportPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudV2ImagesExportPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudV2ImagesExportPostOptions model
				pcloudV2ImagesExportPostOptionsModel := new(powervsv1.PcloudV2ImagesExportPostOptions)
				pcloudV2ImagesExportPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.ImageID = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.AccessKey = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.BucketName = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.Region = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.SecretKey = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudV2ImagesExportPost(pcloudV2ImagesExportPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudV2ImagesExportPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2ImagesExportPostOptions model
				pcloudV2ImagesExportPostOptionsModel := new(powervsv1.PcloudV2ImagesExportPostOptions)
				pcloudV2ImagesExportPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.ImageID = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.AccessKey = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.BucketName = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.Region = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.SecretKey = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudV2ImagesExportPost(pcloudV2ImagesExportPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudV2ImagesExportPostOptions model with no property values
				pcloudV2ImagesExportPostOptionsModelNew := new(powervsv1.PcloudV2ImagesExportPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudV2ImagesExportPost(pcloudV2ImagesExportPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudV2ImagesExportPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2ImagesExportPostOptions model
				pcloudV2ImagesExportPostOptionsModel := new(powervsv1.PcloudV2ImagesExportPostOptions)
				pcloudV2ImagesExportPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.ImageID = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.AccessKey = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.BucketName = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.Region = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.SecretKey = core.StringPtr("testString")
				pcloudV2ImagesExportPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudV2ImagesExportPost(pcloudV2ImagesExportPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesDelete(pcloudCloudinstancesDeleteOptions *PcloudCloudinstancesDeleteOptions) - Operation response error`, func() {
		pcloudCloudinstancesDeletePath := "/pcloud/v1/cloud-instances/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudinstancesDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesDeleteOptions model
				pcloudCloudinstancesDeleteOptionsModel := new(powervsv1.PcloudCloudinstancesDeleteOptions)
				pcloudCloudinstancesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudinstancesDelete(pcloudCloudinstancesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudinstancesDelete(pcloudCloudinstancesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesDelete(pcloudCloudinstancesDeleteOptions *PcloudCloudinstancesDeleteOptions)`, func() {
		pcloudCloudinstancesDeletePath := "/pcloud/v1/cloud-instances/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudinstancesDeleteOptions model
				pcloudCloudinstancesDeleteOptionsModel := new(powervsv1.PcloudCloudinstancesDeleteOptions)
				pcloudCloudinstancesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudinstancesDeleteWithContext(ctx, pcloudCloudinstancesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudinstancesDelete(pcloudCloudinstancesDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudinstancesDeleteWithContext(ctx, pcloudCloudinstancesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudinstancesDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudinstancesDeleteOptions model
				pcloudCloudinstancesDeleteOptionsModel := new(powervsv1.PcloudCloudinstancesDeleteOptions)
				pcloudCloudinstancesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudinstancesDelete(pcloudCloudinstancesDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudinstancesDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesDeleteOptions model
				pcloudCloudinstancesDeleteOptionsModel := new(powervsv1.PcloudCloudinstancesDeleteOptions)
				pcloudCloudinstancesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudinstancesDelete(pcloudCloudinstancesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudinstancesDeleteOptions model with no property values
				pcloudCloudinstancesDeleteOptionsModelNew := new(powervsv1.PcloudCloudinstancesDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudinstancesDelete(pcloudCloudinstancesDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudinstancesDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesDeleteOptions model
				pcloudCloudinstancesDeleteOptionsModel := new(powervsv1.PcloudCloudinstancesDeleteOptions)
				pcloudCloudinstancesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudinstancesDelete(pcloudCloudinstancesDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesGet(pcloudCloudinstancesGetOptions *PcloudCloudinstancesGetOptions) - Operation response error`, func() {
		pcloudCloudinstancesGetPath := "/pcloud/v1/cloud-instances/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudinstancesGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesGetOptions model
				pcloudCloudinstancesGetOptionsModel := new(powervsv1.PcloudCloudinstancesGetOptions)
				pcloudCloudinstancesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudinstancesGet(pcloudCloudinstancesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudinstancesGet(pcloudCloudinstancesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesGet(pcloudCloudinstancesGetOptions *PcloudCloudinstancesGetOptions)`, func() {
		pcloudCloudinstancesGetPath := "/pcloud/v1/cloud-instances/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"capabilities": ["Capabilities"], "cloudInstanceID": "CloudInstanceID", "enabled": false, "initialized": false, "limits": {"instanceMemory": 14, "instanceProcUnits": 17, "instances": 9, "memory": 6, "peeringBandwidth": 16, "peeringNetworks": 15, "procUnits": 9, "processors": 10, "storage": 7, "storageSSD": 10, "storageStandard": 15}, "name": "Name", "openstackID": "OpenstackID", "pvmInstances": [{"addresses": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}], "consoleLanguage": {"code": "Code", "language": "Language"}, "creationDate": "2019-01-01T12:00:00.000Z", "diskSize": 8, "fault": {"code": 4, "created": "2019-01-01T12:00:00.000Z", "details": "Details", "message": "Message"}, "health": {"lastUpdate": "LastUpdate", "reason": "Reason", "status": "Status"}, "hostID": 6, "href": "Href", "imageID": "ImageID", "licenseRepositoryCapacity": 25, "maxmem": 6, "maxproc": 7, "memory": 6, "minmem": 6, "minproc": 7, "networks": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}], "operatingSystem": "OperatingSystem", "osType": "OsType", "pinPolicy": "PinPolicy", "placementGroup": "none", "procType": "dedicated", "processors": 10, "progress": 8, "pvmInstanceID": "PvmInstanceID", "sapProfile": {"href": "Href", "profileID": "ProfileID"}, "serverName": "ServerName", "sharedProcessorPool": "SharedProcessorPool", "sharedProcessorPoolID": "SharedProcessorPoolID", "softwareLicenses": {"ibmiCSS": false, "ibmiDBQ": false, "ibmiPHA": false, "ibmiRDS": false, "ibmiRDSUsers": 12}, "srcs": [[{"src": "Src", "timestamp": "Timestamp"}]], "status": "Status", "storageConnection": "StorageConnection", "storagePool": "StoragePool", "storagePoolAffinity": true, "storageType": "StorageType", "sysType": "SysType", "updatedDate": "2019-01-01T12:00:00.000Z", "virtualCores": {"assigned": 8, "max": 3, "min": 3}}], "region": "Region", "tenantID": "TenantID", "usage": {"instanceMemory": 14, "instanceProcUnits": 17, "instances": 9, "memory": 6, "peeringBandwidth": 16, "peeringNetworks": 15, "procUnits": 9, "processors": 10, "storage": 7, "storageSSD": 10, "storageStandard": 15}}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudinstancesGetOptions model
				pcloudCloudinstancesGetOptionsModel := new(powervsv1.PcloudCloudinstancesGetOptions)
				pcloudCloudinstancesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudinstancesGetWithContext(ctx, pcloudCloudinstancesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudinstancesGet(pcloudCloudinstancesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudinstancesGetWithContext(ctx, pcloudCloudinstancesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"capabilities": ["Capabilities"], "cloudInstanceID": "CloudInstanceID", "enabled": false, "initialized": false, "limits": {"instanceMemory": 14, "instanceProcUnits": 17, "instances": 9, "memory": 6, "peeringBandwidth": 16, "peeringNetworks": 15, "procUnits": 9, "processors": 10, "storage": 7, "storageSSD": 10, "storageStandard": 15}, "name": "Name", "openstackID": "OpenstackID", "pvmInstances": [{"addresses": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}], "consoleLanguage": {"code": "Code", "language": "Language"}, "creationDate": "2019-01-01T12:00:00.000Z", "diskSize": 8, "fault": {"code": 4, "created": "2019-01-01T12:00:00.000Z", "details": "Details", "message": "Message"}, "health": {"lastUpdate": "LastUpdate", "reason": "Reason", "status": "Status"}, "hostID": 6, "href": "Href", "imageID": "ImageID", "licenseRepositoryCapacity": 25, "maxmem": 6, "maxproc": 7, "memory": 6, "minmem": 6, "minproc": 7, "networks": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}], "operatingSystem": "OperatingSystem", "osType": "OsType", "pinPolicy": "PinPolicy", "placementGroup": "none", "procType": "dedicated", "processors": 10, "progress": 8, "pvmInstanceID": "PvmInstanceID", "sapProfile": {"href": "Href", "profileID": "ProfileID"}, "serverName": "ServerName", "sharedProcessorPool": "SharedProcessorPool", "sharedProcessorPoolID": "SharedProcessorPoolID", "softwareLicenses": {"ibmiCSS": false, "ibmiDBQ": false, "ibmiPHA": false, "ibmiRDS": false, "ibmiRDSUsers": 12}, "srcs": [[{"src": "Src", "timestamp": "Timestamp"}]], "status": "Status", "storageConnection": "StorageConnection", "storagePool": "StoragePool", "storagePoolAffinity": true, "storageType": "StorageType", "sysType": "SysType", "updatedDate": "2019-01-01T12:00:00.000Z", "virtualCores": {"assigned": 8, "max": 3, "min": 3}}], "region": "Region", "tenantID": "TenantID", "usage": {"instanceMemory": 14, "instanceProcUnits": 17, "instances": 9, "memory": 6, "peeringBandwidth": 16, "peeringNetworks": 15, "procUnits": 9, "processors": 10, "storage": 7, "storageSSD": 10, "storageStandard": 15}}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudinstancesGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudinstancesGetOptions model
				pcloudCloudinstancesGetOptionsModel := new(powervsv1.PcloudCloudinstancesGetOptions)
				pcloudCloudinstancesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudinstancesGet(pcloudCloudinstancesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudinstancesGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesGetOptions model
				pcloudCloudinstancesGetOptionsModel := new(powervsv1.PcloudCloudinstancesGetOptions)
				pcloudCloudinstancesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudinstancesGet(pcloudCloudinstancesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudinstancesGetOptions model with no property values
				pcloudCloudinstancesGetOptionsModelNew := new(powervsv1.PcloudCloudinstancesGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudinstancesGet(pcloudCloudinstancesGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudinstancesGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesGetOptions model
				pcloudCloudinstancesGetOptionsModel := new(powervsv1.PcloudCloudinstancesGetOptions)
				pcloudCloudinstancesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudinstancesGet(pcloudCloudinstancesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesPut(pcloudCloudinstancesPutOptions *PcloudCloudinstancesPutOptions) - Operation response error`, func() {
		pcloudCloudinstancesPutPath := "/pcloud/v1/cloud-instances/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesPutPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudinstancesPut with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesPutOptions model
				pcloudCloudinstancesPutOptionsModel := new(powervsv1.PcloudCloudinstancesPutOptions)
				pcloudCloudinstancesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesPutOptionsModel.Instances = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.Memory = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.ProcUnits = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.Processors = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.Storage = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudinstancesPut(pcloudCloudinstancesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudinstancesPut(pcloudCloudinstancesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesPut(pcloudCloudinstancesPutOptions *PcloudCloudinstancesPutOptions)`, func() {
		pcloudCloudinstancesPutPath := "/pcloud/v1/cloud-instances/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"capabilities": ["Capabilities"], "cloudInstanceID": "CloudInstanceID", "enabled": false, "initialized": false, "limits": {"instanceMemory": 14, "instanceProcUnits": 17, "instances": 9, "memory": 6, "peeringBandwidth": 16, "peeringNetworks": 15, "procUnits": 9, "processors": 10, "storage": 7, "storageSSD": 10, "storageStandard": 15}, "name": "Name", "openstackID": "OpenstackID", "pvmInstances": [{"addresses": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}], "consoleLanguage": {"code": "Code", "language": "Language"}, "creationDate": "2019-01-01T12:00:00.000Z", "diskSize": 8, "fault": {"code": 4, "created": "2019-01-01T12:00:00.000Z", "details": "Details", "message": "Message"}, "health": {"lastUpdate": "LastUpdate", "reason": "Reason", "status": "Status"}, "hostID": 6, "href": "Href", "imageID": "ImageID", "licenseRepositoryCapacity": 25, "maxmem": 6, "maxproc": 7, "memory": 6, "minmem": 6, "minproc": 7, "networks": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}], "operatingSystem": "OperatingSystem", "osType": "OsType", "pinPolicy": "PinPolicy", "placementGroup": "none", "procType": "dedicated", "processors": 10, "progress": 8, "pvmInstanceID": "PvmInstanceID", "sapProfile": {"href": "Href", "profileID": "ProfileID"}, "serverName": "ServerName", "sharedProcessorPool": "SharedProcessorPool", "sharedProcessorPoolID": "SharedProcessorPoolID", "softwareLicenses": {"ibmiCSS": false, "ibmiDBQ": false, "ibmiPHA": false, "ibmiRDS": false, "ibmiRDSUsers": 12}, "srcs": [[{"src": "Src", "timestamp": "Timestamp"}]], "status": "Status", "storageConnection": "StorageConnection", "storagePool": "StoragePool", "storagePoolAffinity": true, "storageType": "StorageType", "sysType": "SysType", "updatedDate": "2019-01-01T12:00:00.000Z", "virtualCores": {"assigned": 8, "max": 3, "min": 3}}], "region": "Region", "tenantID": "TenantID", "usage": {"instanceMemory": 14, "instanceProcUnits": 17, "instances": 9, "memory": 6, "peeringBandwidth": 16, "peeringNetworks": 15, "procUnits": 9, "processors": 10, "storage": 7, "storageSSD": 10, "storageStandard": 15}}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesPut successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudinstancesPutOptions model
				pcloudCloudinstancesPutOptionsModel := new(powervsv1.PcloudCloudinstancesPutOptions)
				pcloudCloudinstancesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesPutOptionsModel.Instances = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.Memory = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.ProcUnits = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.Processors = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.Storage = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudinstancesPutWithContext(ctx, pcloudCloudinstancesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudinstancesPut(pcloudCloudinstancesPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudinstancesPutWithContext(ctx, pcloudCloudinstancesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"capabilities": ["Capabilities"], "cloudInstanceID": "CloudInstanceID", "enabled": false, "initialized": false, "limits": {"instanceMemory": 14, "instanceProcUnits": 17, "instances": 9, "memory": 6, "peeringBandwidth": 16, "peeringNetworks": 15, "procUnits": 9, "processors": 10, "storage": 7, "storageSSD": 10, "storageStandard": 15}, "name": "Name", "openstackID": "OpenstackID", "pvmInstances": [{"addresses": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}], "consoleLanguage": {"code": "Code", "language": "Language"}, "creationDate": "2019-01-01T12:00:00.000Z", "diskSize": 8, "fault": {"code": 4, "created": "2019-01-01T12:00:00.000Z", "details": "Details", "message": "Message"}, "health": {"lastUpdate": "LastUpdate", "reason": "Reason", "status": "Status"}, "hostID": 6, "href": "Href", "imageID": "ImageID", "licenseRepositoryCapacity": 25, "maxmem": 6, "maxproc": 7, "memory": 6, "minmem": 6, "minproc": 7, "networks": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}], "operatingSystem": "OperatingSystem", "osType": "OsType", "pinPolicy": "PinPolicy", "placementGroup": "none", "procType": "dedicated", "processors": 10, "progress": 8, "pvmInstanceID": "PvmInstanceID", "sapProfile": {"href": "Href", "profileID": "ProfileID"}, "serverName": "ServerName", "sharedProcessorPool": "SharedProcessorPool", "sharedProcessorPoolID": "SharedProcessorPoolID", "softwareLicenses": {"ibmiCSS": false, "ibmiDBQ": false, "ibmiPHA": false, "ibmiRDS": false, "ibmiRDSUsers": 12}, "srcs": [[{"src": "Src", "timestamp": "Timestamp"}]], "status": "Status", "storageConnection": "StorageConnection", "storagePool": "StoragePool", "storagePoolAffinity": true, "storageType": "StorageType", "sysType": "SysType", "updatedDate": "2019-01-01T12:00:00.000Z", "virtualCores": {"assigned": 8, "max": 3, "min": 3}}], "region": "Region", "tenantID": "TenantID", "usage": {"instanceMemory": 14, "instanceProcUnits": 17, "instances": 9, "memory": 6, "peeringBandwidth": 16, "peeringNetworks": 15, "procUnits": 9, "processors": 10, "storage": 7, "storageSSD": 10, "storageStandard": 15}}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudinstancesPut(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudinstancesPutOptions model
				pcloudCloudinstancesPutOptionsModel := new(powervsv1.PcloudCloudinstancesPutOptions)
				pcloudCloudinstancesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesPutOptionsModel.Instances = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.Memory = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.ProcUnits = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.Processors = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.Storage = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudinstancesPut(pcloudCloudinstancesPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudinstancesPut with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesPutOptions model
				pcloudCloudinstancesPutOptionsModel := new(powervsv1.PcloudCloudinstancesPutOptions)
				pcloudCloudinstancesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesPutOptionsModel.Instances = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.Memory = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.ProcUnits = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.Processors = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.Storage = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudinstancesPut(pcloudCloudinstancesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudinstancesPutOptions model with no property values
				pcloudCloudinstancesPutOptionsModelNew := new(powervsv1.PcloudCloudinstancesPutOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudinstancesPut(pcloudCloudinstancesPutOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudinstancesPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesPutOptions model
				pcloudCloudinstancesPutOptionsModel := new(powervsv1.PcloudCloudinstancesPutOptions)
				pcloudCloudinstancesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesPutOptionsModel.Instances = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.Memory = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.ProcUnits = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.Processors = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.Storage = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudinstancesPut(pcloudCloudinstancesPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesJobsGetall(pcloudCloudinstancesJobsGetallOptions *PcloudCloudinstancesJobsGetallOptions) - Operation response error`, func() {
		pcloudCloudinstancesJobsGetallPath := "/pcloud/v1/cloud-instances/testString/jobs"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesJobsGetallPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["operation.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["operation.target"]).To(Equal([]string{"cloudConnection"}))
					Expect(req.URL.Query()["operation.action"]).To(Equal([]string{"vmCapture"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudinstancesJobsGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesJobsGetallOptions model
				pcloudCloudinstancesJobsGetallOptionsModel := new(powervsv1.PcloudCloudinstancesJobsGetallOptions)
				pcloudCloudinstancesJobsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesJobsGetallOptionsModel.OperationID = core.StringPtr("testString")
				pcloudCloudinstancesJobsGetallOptionsModel.OperationTarget = core.StringPtr("cloudConnection")
				pcloudCloudinstancesJobsGetallOptionsModel.OperationAction = core.StringPtr("vmCapture")
				pcloudCloudinstancesJobsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudinstancesJobsGetall(pcloudCloudinstancesJobsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudinstancesJobsGetall(pcloudCloudinstancesJobsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesJobsGetall(pcloudCloudinstancesJobsGetallOptions *PcloudCloudinstancesJobsGetallOptions)`, func() {
		pcloudCloudinstancesJobsGetallPath := "/pcloud/v1/cloud-instances/testString/jobs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesJobsGetallPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["operation.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["operation.target"]).To(Equal([]string{"cloudConnection"}))
					Expect(req.URL.Query()["operation.action"]).To(Equal([]string{"vmCapture"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"jobs": [{"createTimestamp": "2019-01-01T12:00:00.000Z", "id": "ID", "operation": {"action": "Action", "id": "ID", "target": "Target"}, "status": {"message": "Message", "progress": "Progress", "state": "State"}}]}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesJobsGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudinstancesJobsGetallOptions model
				pcloudCloudinstancesJobsGetallOptionsModel := new(powervsv1.PcloudCloudinstancesJobsGetallOptions)
				pcloudCloudinstancesJobsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesJobsGetallOptionsModel.OperationID = core.StringPtr("testString")
				pcloudCloudinstancesJobsGetallOptionsModel.OperationTarget = core.StringPtr("cloudConnection")
				pcloudCloudinstancesJobsGetallOptionsModel.OperationAction = core.StringPtr("vmCapture")
				pcloudCloudinstancesJobsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudinstancesJobsGetallWithContext(ctx, pcloudCloudinstancesJobsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudinstancesJobsGetall(pcloudCloudinstancesJobsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudinstancesJobsGetallWithContext(ctx, pcloudCloudinstancesJobsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesJobsGetallPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["operation.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["operation.target"]).To(Equal([]string{"cloudConnection"}))
					Expect(req.URL.Query()["operation.action"]).To(Equal([]string{"vmCapture"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"jobs": [{"createTimestamp": "2019-01-01T12:00:00.000Z", "id": "ID", "operation": {"action": "Action", "id": "ID", "target": "Target"}, "status": {"message": "Message", "progress": "Progress", "state": "State"}}]}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesJobsGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudinstancesJobsGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudinstancesJobsGetallOptions model
				pcloudCloudinstancesJobsGetallOptionsModel := new(powervsv1.PcloudCloudinstancesJobsGetallOptions)
				pcloudCloudinstancesJobsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesJobsGetallOptionsModel.OperationID = core.StringPtr("testString")
				pcloudCloudinstancesJobsGetallOptionsModel.OperationTarget = core.StringPtr("cloudConnection")
				pcloudCloudinstancesJobsGetallOptionsModel.OperationAction = core.StringPtr("vmCapture")
				pcloudCloudinstancesJobsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudinstancesJobsGetall(pcloudCloudinstancesJobsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudinstancesJobsGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesJobsGetallOptions model
				pcloudCloudinstancesJobsGetallOptionsModel := new(powervsv1.PcloudCloudinstancesJobsGetallOptions)
				pcloudCloudinstancesJobsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesJobsGetallOptionsModel.OperationID = core.StringPtr("testString")
				pcloudCloudinstancesJobsGetallOptionsModel.OperationTarget = core.StringPtr("cloudConnection")
				pcloudCloudinstancesJobsGetallOptionsModel.OperationAction = core.StringPtr("vmCapture")
				pcloudCloudinstancesJobsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudinstancesJobsGetall(pcloudCloudinstancesJobsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudinstancesJobsGetallOptions model with no property values
				pcloudCloudinstancesJobsGetallOptionsModelNew := new(powervsv1.PcloudCloudinstancesJobsGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudinstancesJobsGetall(pcloudCloudinstancesJobsGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudinstancesJobsGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesJobsGetallOptions model
				pcloudCloudinstancesJobsGetallOptionsModel := new(powervsv1.PcloudCloudinstancesJobsGetallOptions)
				pcloudCloudinstancesJobsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesJobsGetallOptionsModel.OperationID = core.StringPtr("testString")
				pcloudCloudinstancesJobsGetallOptionsModel.OperationTarget = core.StringPtr("cloudConnection")
				pcloudCloudinstancesJobsGetallOptionsModel.OperationAction = core.StringPtr("vmCapture")
				pcloudCloudinstancesJobsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudinstancesJobsGetall(pcloudCloudinstancesJobsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesJobsDelete(pcloudCloudinstancesJobsDeleteOptions *PcloudCloudinstancesJobsDeleteOptions) - Operation response error`, func() {
		pcloudCloudinstancesJobsDeletePath := "/pcloud/v1/cloud-instances/testString/jobs/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesJobsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudinstancesJobsDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesJobsDeleteOptions model
				pcloudCloudinstancesJobsDeleteOptionsModel := new(powervsv1.PcloudCloudinstancesJobsDeleteOptions)
				pcloudCloudinstancesJobsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesJobsDeleteOptionsModel.JobID = core.StringPtr("testString")
				pcloudCloudinstancesJobsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudinstancesJobsDelete(pcloudCloudinstancesJobsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudinstancesJobsDelete(pcloudCloudinstancesJobsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesJobsDelete(pcloudCloudinstancesJobsDeleteOptions *PcloudCloudinstancesJobsDeleteOptions)`, func() {
		pcloudCloudinstancesJobsDeletePath := "/pcloud/v1/cloud-instances/testString/jobs/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesJobsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesJobsDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudinstancesJobsDeleteOptions model
				pcloudCloudinstancesJobsDeleteOptionsModel := new(powervsv1.PcloudCloudinstancesJobsDeleteOptions)
				pcloudCloudinstancesJobsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesJobsDeleteOptionsModel.JobID = core.StringPtr("testString")
				pcloudCloudinstancesJobsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudinstancesJobsDeleteWithContext(ctx, pcloudCloudinstancesJobsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudinstancesJobsDelete(pcloudCloudinstancesJobsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudinstancesJobsDeleteWithContext(ctx, pcloudCloudinstancesJobsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesJobsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesJobsDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudinstancesJobsDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudinstancesJobsDeleteOptions model
				pcloudCloudinstancesJobsDeleteOptionsModel := new(powervsv1.PcloudCloudinstancesJobsDeleteOptions)
				pcloudCloudinstancesJobsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesJobsDeleteOptionsModel.JobID = core.StringPtr("testString")
				pcloudCloudinstancesJobsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudinstancesJobsDelete(pcloudCloudinstancesJobsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudinstancesJobsDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesJobsDeleteOptions model
				pcloudCloudinstancesJobsDeleteOptionsModel := new(powervsv1.PcloudCloudinstancesJobsDeleteOptions)
				pcloudCloudinstancesJobsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesJobsDeleteOptionsModel.JobID = core.StringPtr("testString")
				pcloudCloudinstancesJobsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudinstancesJobsDelete(pcloudCloudinstancesJobsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudinstancesJobsDeleteOptions model with no property values
				pcloudCloudinstancesJobsDeleteOptionsModelNew := new(powervsv1.PcloudCloudinstancesJobsDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudinstancesJobsDelete(pcloudCloudinstancesJobsDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudinstancesJobsDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesJobsDeleteOptions model
				pcloudCloudinstancesJobsDeleteOptionsModel := new(powervsv1.PcloudCloudinstancesJobsDeleteOptions)
				pcloudCloudinstancesJobsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesJobsDeleteOptionsModel.JobID = core.StringPtr("testString")
				pcloudCloudinstancesJobsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudinstancesJobsDelete(pcloudCloudinstancesJobsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesJobsGet(pcloudCloudinstancesJobsGetOptions *PcloudCloudinstancesJobsGetOptions) - Operation response error`, func() {
		pcloudCloudinstancesJobsGetPath := "/pcloud/v1/cloud-instances/testString/jobs/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesJobsGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudinstancesJobsGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesJobsGetOptions model
				pcloudCloudinstancesJobsGetOptionsModel := new(powervsv1.PcloudCloudinstancesJobsGetOptions)
				pcloudCloudinstancesJobsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesJobsGetOptionsModel.JobID = core.StringPtr("testString")
				pcloudCloudinstancesJobsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudinstancesJobsGet(pcloudCloudinstancesJobsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudinstancesJobsGet(pcloudCloudinstancesJobsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesJobsGet(pcloudCloudinstancesJobsGetOptions *PcloudCloudinstancesJobsGetOptions)`, func() {
		pcloudCloudinstancesJobsGetPath := "/pcloud/v1/cloud-instances/testString/jobs/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesJobsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"createTimestamp": "2019-01-01T12:00:00.000Z", "id": "ID", "operation": {"action": "Action", "id": "ID", "target": "Target"}, "status": {"message": "Message", "progress": "Progress", "state": "State"}}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesJobsGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudinstancesJobsGetOptions model
				pcloudCloudinstancesJobsGetOptionsModel := new(powervsv1.PcloudCloudinstancesJobsGetOptions)
				pcloudCloudinstancesJobsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesJobsGetOptionsModel.JobID = core.StringPtr("testString")
				pcloudCloudinstancesJobsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudinstancesJobsGetWithContext(ctx, pcloudCloudinstancesJobsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudinstancesJobsGet(pcloudCloudinstancesJobsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudinstancesJobsGetWithContext(ctx, pcloudCloudinstancesJobsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesJobsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"createTimestamp": "2019-01-01T12:00:00.000Z", "id": "ID", "operation": {"action": "Action", "id": "ID", "target": "Target"}, "status": {"message": "Message", "progress": "Progress", "state": "State"}}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesJobsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudinstancesJobsGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudinstancesJobsGetOptions model
				pcloudCloudinstancesJobsGetOptionsModel := new(powervsv1.PcloudCloudinstancesJobsGetOptions)
				pcloudCloudinstancesJobsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesJobsGetOptionsModel.JobID = core.StringPtr("testString")
				pcloudCloudinstancesJobsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudinstancesJobsGet(pcloudCloudinstancesJobsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudinstancesJobsGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesJobsGetOptions model
				pcloudCloudinstancesJobsGetOptionsModel := new(powervsv1.PcloudCloudinstancesJobsGetOptions)
				pcloudCloudinstancesJobsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesJobsGetOptionsModel.JobID = core.StringPtr("testString")
				pcloudCloudinstancesJobsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudinstancesJobsGet(pcloudCloudinstancesJobsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudinstancesJobsGetOptions model with no property values
				pcloudCloudinstancesJobsGetOptionsModelNew := new(powervsv1.PcloudCloudinstancesJobsGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudinstancesJobsGet(pcloudCloudinstancesJobsGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudinstancesJobsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesJobsGetOptions model
				pcloudCloudinstancesJobsGetOptionsModel := new(powervsv1.PcloudCloudinstancesJobsGetOptions)
				pcloudCloudinstancesJobsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesJobsGetOptionsModel.JobID = core.StringPtr("testString")
				pcloudCloudinstancesJobsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudinstancesJobsGet(pcloudCloudinstancesJobsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudNetworksGetall(pcloudNetworksGetallOptions *PcloudNetworksGetallOptions) - Operation response error`, func() {
		pcloudNetworksGetallPath := "/pcloud/v1/cloud-instances/testString/networks"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksGetallPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["filter"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudNetworksGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudNetworksGetallOptions model
				pcloudNetworksGetallOptionsModel := new(powervsv1.PcloudNetworksGetallOptions)
				pcloudNetworksGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksGetallOptionsModel.Filter = core.StringPtr("testString")
				pcloudNetworksGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudNetworksGetall(pcloudNetworksGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudNetworksGetall(pcloudNetworksGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudNetworksGetall(pcloudNetworksGetallOptions *PcloudNetworksGetallOptions)`, func() {
		pcloudNetworksGetallPath := "/pcloud/v1/cloud-instances/testString/networks"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksGetallPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["filter"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"networks": [{"accessConfig": "internal-only", "dhcpManaged": false, "href": "Href", "jumbo": false, "mtu": 3, "name": "Name", "networkID": "NetworkID", "type": "vlan", "vlanID": 6}]}`)
				}))
			})
			It(`Invoke PcloudNetworksGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudNetworksGetallOptions model
				pcloudNetworksGetallOptionsModel := new(powervsv1.PcloudNetworksGetallOptions)
				pcloudNetworksGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksGetallOptionsModel.Filter = core.StringPtr("testString")
				pcloudNetworksGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudNetworksGetallWithContext(ctx, pcloudNetworksGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudNetworksGetall(pcloudNetworksGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudNetworksGetallWithContext(ctx, pcloudNetworksGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksGetallPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["filter"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"networks": [{"accessConfig": "internal-only", "dhcpManaged": false, "href": "Href", "jumbo": false, "mtu": 3, "name": "Name", "networkID": "NetworkID", "type": "vlan", "vlanID": 6}]}`)
				}))
			})
			It(`Invoke PcloudNetworksGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudNetworksGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudNetworksGetallOptions model
				pcloudNetworksGetallOptionsModel := new(powervsv1.PcloudNetworksGetallOptions)
				pcloudNetworksGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksGetallOptionsModel.Filter = core.StringPtr("testString")
				pcloudNetworksGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudNetworksGetall(pcloudNetworksGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudNetworksGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudNetworksGetallOptions model
				pcloudNetworksGetallOptionsModel := new(powervsv1.PcloudNetworksGetallOptions)
				pcloudNetworksGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksGetallOptionsModel.Filter = core.StringPtr("testString")
				pcloudNetworksGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudNetworksGetall(pcloudNetworksGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudNetworksGetallOptions model with no property values
				pcloudNetworksGetallOptionsModelNew := new(powervsv1.PcloudNetworksGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudNetworksGetall(pcloudNetworksGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudNetworksGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudNetworksGetallOptions model
				pcloudNetworksGetallOptionsModel := new(powervsv1.PcloudNetworksGetallOptions)
				pcloudNetworksGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksGetallOptionsModel.Filter = core.StringPtr("testString")
				pcloudNetworksGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudNetworksGetall(pcloudNetworksGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudNetworksPost(pcloudNetworksPostOptions *PcloudNetworksPostOptions) - Operation response error`, func() {
		pcloudNetworksPostPath := "/pcloud/v1/cloud-instances/testString/networks"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudNetworksPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the IPAddressRange model
				ipAddressRangeModel := new(powervsv1.IPAddressRange)
				ipAddressRangeModel.EndingIPAddress = core.StringPtr("testString")
				ipAddressRangeModel.StartingIPAddress = core.StringPtr("testString")

				// Construct an instance of the PcloudNetworksPostOptions model
				pcloudNetworksPostOptionsModel := new(powervsv1.PcloudNetworksPostOptions)
				pcloudNetworksPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPostOptionsModel.Type = core.StringPtr("vlan")
				pcloudNetworksPostOptionsModel.AccessConfig = core.StringPtr("internal-only")
				pcloudNetworksPostOptionsModel.CIDR = core.StringPtr("testString")
				pcloudNetworksPostOptionsModel.DnsServers = []string{"testString"}
				pcloudNetworksPostOptionsModel.Gateway = core.StringPtr("testString")
				pcloudNetworksPostOptionsModel.IPAddressRanges = []powervsv1.IPAddressRange{*ipAddressRangeModel}
				pcloudNetworksPostOptionsModel.Jumbo = core.BoolPtr(true)
				pcloudNetworksPostOptionsModel.Mtu = core.Int64Ptr(int64(38))
				pcloudNetworksPostOptionsModel.Name = core.StringPtr("testString")
				pcloudNetworksPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudNetworksPost(pcloudNetworksPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudNetworksPost(pcloudNetworksPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudNetworksPost(pcloudNetworksPostOptions *PcloudNetworksPostOptions)`, func() {
		pcloudNetworksPostPath := "/pcloud/v1/cloud-instances/testString/networks"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"accessConfig": "internal-only", "cidr": "CIDR", "cloudConnections": [{"cloudConnectionID": "CloudConnectionID", "href": "Href"}], "dhcpManaged": false, "dnsServers": ["DnsServers"], "gateway": "Gateway", "ipAddressMetrics": {"available": 9, "total": 5, "used": 4, "utilization": 11}, "ipAddressRanges": [{"endingIPAddress": "EndingIPAddress", "startingIPAddress": "StartingIPAddress"}], "jumbo": false, "mtu": 3, "name": "Name", "networkID": "NetworkID", "publicIPAddressRanges": [{"endingIPAddress": "EndingIPAddress", "startingIPAddress": "StartingIPAddress"}], "type": "vlan", "vlanID": 6}`)
				}))
			})
			It(`Invoke PcloudNetworksPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the IPAddressRange model
				ipAddressRangeModel := new(powervsv1.IPAddressRange)
				ipAddressRangeModel.EndingIPAddress = core.StringPtr("testString")
				ipAddressRangeModel.StartingIPAddress = core.StringPtr("testString")

				// Construct an instance of the PcloudNetworksPostOptions model
				pcloudNetworksPostOptionsModel := new(powervsv1.PcloudNetworksPostOptions)
				pcloudNetworksPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPostOptionsModel.Type = core.StringPtr("vlan")
				pcloudNetworksPostOptionsModel.AccessConfig = core.StringPtr("internal-only")
				pcloudNetworksPostOptionsModel.CIDR = core.StringPtr("testString")
				pcloudNetworksPostOptionsModel.DnsServers = []string{"testString"}
				pcloudNetworksPostOptionsModel.Gateway = core.StringPtr("testString")
				pcloudNetworksPostOptionsModel.IPAddressRanges = []powervsv1.IPAddressRange{*ipAddressRangeModel}
				pcloudNetworksPostOptionsModel.Jumbo = core.BoolPtr(true)
				pcloudNetworksPostOptionsModel.Mtu = core.Int64Ptr(int64(38))
				pcloudNetworksPostOptionsModel.Name = core.StringPtr("testString")
				pcloudNetworksPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudNetworksPostWithContext(ctx, pcloudNetworksPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudNetworksPost(pcloudNetworksPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudNetworksPostWithContext(ctx, pcloudNetworksPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"accessConfig": "internal-only", "cidr": "CIDR", "cloudConnections": [{"cloudConnectionID": "CloudConnectionID", "href": "Href"}], "dhcpManaged": false, "dnsServers": ["DnsServers"], "gateway": "Gateway", "ipAddressMetrics": {"available": 9, "total": 5, "used": 4, "utilization": 11}, "ipAddressRanges": [{"endingIPAddress": "EndingIPAddress", "startingIPAddress": "StartingIPAddress"}], "jumbo": false, "mtu": 3, "name": "Name", "networkID": "NetworkID", "publicIPAddressRanges": [{"endingIPAddress": "EndingIPAddress", "startingIPAddress": "StartingIPAddress"}], "type": "vlan", "vlanID": 6}`)
				}))
			})
			It(`Invoke PcloudNetworksPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudNetworksPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the IPAddressRange model
				ipAddressRangeModel := new(powervsv1.IPAddressRange)
				ipAddressRangeModel.EndingIPAddress = core.StringPtr("testString")
				ipAddressRangeModel.StartingIPAddress = core.StringPtr("testString")

				// Construct an instance of the PcloudNetworksPostOptions model
				pcloudNetworksPostOptionsModel := new(powervsv1.PcloudNetworksPostOptions)
				pcloudNetworksPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPostOptionsModel.Type = core.StringPtr("vlan")
				pcloudNetworksPostOptionsModel.AccessConfig = core.StringPtr("internal-only")
				pcloudNetworksPostOptionsModel.CIDR = core.StringPtr("testString")
				pcloudNetworksPostOptionsModel.DnsServers = []string{"testString"}
				pcloudNetworksPostOptionsModel.Gateway = core.StringPtr("testString")
				pcloudNetworksPostOptionsModel.IPAddressRanges = []powervsv1.IPAddressRange{*ipAddressRangeModel}
				pcloudNetworksPostOptionsModel.Jumbo = core.BoolPtr(true)
				pcloudNetworksPostOptionsModel.Mtu = core.Int64Ptr(int64(38))
				pcloudNetworksPostOptionsModel.Name = core.StringPtr("testString")
				pcloudNetworksPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudNetworksPost(pcloudNetworksPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudNetworksPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the IPAddressRange model
				ipAddressRangeModel := new(powervsv1.IPAddressRange)
				ipAddressRangeModel.EndingIPAddress = core.StringPtr("testString")
				ipAddressRangeModel.StartingIPAddress = core.StringPtr("testString")

				// Construct an instance of the PcloudNetworksPostOptions model
				pcloudNetworksPostOptionsModel := new(powervsv1.PcloudNetworksPostOptions)
				pcloudNetworksPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPostOptionsModel.Type = core.StringPtr("vlan")
				pcloudNetworksPostOptionsModel.AccessConfig = core.StringPtr("internal-only")
				pcloudNetworksPostOptionsModel.CIDR = core.StringPtr("testString")
				pcloudNetworksPostOptionsModel.DnsServers = []string{"testString"}
				pcloudNetworksPostOptionsModel.Gateway = core.StringPtr("testString")
				pcloudNetworksPostOptionsModel.IPAddressRanges = []powervsv1.IPAddressRange{*ipAddressRangeModel}
				pcloudNetworksPostOptionsModel.Jumbo = core.BoolPtr(true)
				pcloudNetworksPostOptionsModel.Mtu = core.Int64Ptr(int64(38))
				pcloudNetworksPostOptionsModel.Name = core.StringPtr("testString")
				pcloudNetworksPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudNetworksPost(pcloudNetworksPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudNetworksPostOptions model with no property values
				pcloudNetworksPostOptionsModelNew := new(powervsv1.PcloudNetworksPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudNetworksPost(pcloudNetworksPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudNetworksPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the IPAddressRange model
				ipAddressRangeModel := new(powervsv1.IPAddressRange)
				ipAddressRangeModel.EndingIPAddress = core.StringPtr("testString")
				ipAddressRangeModel.StartingIPAddress = core.StringPtr("testString")

				// Construct an instance of the PcloudNetworksPostOptions model
				pcloudNetworksPostOptionsModel := new(powervsv1.PcloudNetworksPostOptions)
				pcloudNetworksPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPostOptionsModel.Type = core.StringPtr("vlan")
				pcloudNetworksPostOptionsModel.AccessConfig = core.StringPtr("internal-only")
				pcloudNetworksPostOptionsModel.CIDR = core.StringPtr("testString")
				pcloudNetworksPostOptionsModel.DnsServers = []string{"testString"}
				pcloudNetworksPostOptionsModel.Gateway = core.StringPtr("testString")
				pcloudNetworksPostOptionsModel.IPAddressRanges = []powervsv1.IPAddressRange{*ipAddressRangeModel}
				pcloudNetworksPostOptionsModel.Jumbo = core.BoolPtr(true)
				pcloudNetworksPostOptionsModel.Mtu = core.Int64Ptr(int64(38))
				pcloudNetworksPostOptionsModel.Name = core.StringPtr("testString")
				pcloudNetworksPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudNetworksPost(pcloudNetworksPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudNetworksDelete(pcloudNetworksDeleteOptions *PcloudNetworksDeleteOptions) - Operation response error`, func() {
		pcloudNetworksDeletePath := "/pcloud/v1/cloud-instances/testString/networks/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudNetworksDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudNetworksDeleteOptions model
				pcloudNetworksDeleteOptionsModel := new(powervsv1.PcloudNetworksDeleteOptions)
				pcloudNetworksDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksDeleteOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudNetworksDelete(pcloudNetworksDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudNetworksDelete(pcloudNetworksDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudNetworksDelete(pcloudNetworksDeleteOptions *PcloudNetworksDeleteOptions)`, func() {
		pcloudNetworksDeletePath := "/pcloud/v1/cloud-instances/testString/networks/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudNetworksDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudNetworksDeleteOptions model
				pcloudNetworksDeleteOptionsModel := new(powervsv1.PcloudNetworksDeleteOptions)
				pcloudNetworksDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksDeleteOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudNetworksDeleteWithContext(ctx, pcloudNetworksDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudNetworksDelete(pcloudNetworksDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudNetworksDeleteWithContext(ctx, pcloudNetworksDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudNetworksDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudNetworksDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudNetworksDeleteOptions model
				pcloudNetworksDeleteOptionsModel := new(powervsv1.PcloudNetworksDeleteOptions)
				pcloudNetworksDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksDeleteOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudNetworksDelete(pcloudNetworksDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudNetworksDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudNetworksDeleteOptions model
				pcloudNetworksDeleteOptionsModel := new(powervsv1.PcloudNetworksDeleteOptions)
				pcloudNetworksDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksDeleteOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudNetworksDelete(pcloudNetworksDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudNetworksDeleteOptions model with no property values
				pcloudNetworksDeleteOptionsModelNew := new(powervsv1.PcloudNetworksDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudNetworksDelete(pcloudNetworksDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudNetworksDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudNetworksDeleteOptions model
				pcloudNetworksDeleteOptionsModel := new(powervsv1.PcloudNetworksDeleteOptions)
				pcloudNetworksDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksDeleteOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudNetworksDelete(pcloudNetworksDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudNetworksGet(pcloudNetworksGetOptions *PcloudNetworksGetOptions) - Operation response error`, func() {
		pcloudNetworksGetPath := "/pcloud/v1/cloud-instances/testString/networks/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudNetworksGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudNetworksGetOptions model
				pcloudNetworksGetOptionsModel := new(powervsv1.PcloudNetworksGetOptions)
				pcloudNetworksGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksGetOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudNetworksGet(pcloudNetworksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudNetworksGet(pcloudNetworksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudNetworksGet(pcloudNetworksGetOptions *PcloudNetworksGetOptions)`, func() {
		pcloudNetworksGetPath := "/pcloud/v1/cloud-instances/testString/networks/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"accessConfig": "internal-only", "cidr": "CIDR", "cloudConnections": [{"cloudConnectionID": "CloudConnectionID", "href": "Href"}], "dhcpManaged": false, "dnsServers": ["DnsServers"], "gateway": "Gateway", "ipAddressMetrics": {"available": 9, "total": 5, "used": 4, "utilization": 11}, "ipAddressRanges": [{"endingIPAddress": "EndingIPAddress", "startingIPAddress": "StartingIPAddress"}], "jumbo": false, "mtu": 3, "name": "Name", "networkID": "NetworkID", "publicIPAddressRanges": [{"endingIPAddress": "EndingIPAddress", "startingIPAddress": "StartingIPAddress"}], "type": "vlan", "vlanID": 6}`)
				}))
			})
			It(`Invoke PcloudNetworksGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudNetworksGetOptions model
				pcloudNetworksGetOptionsModel := new(powervsv1.PcloudNetworksGetOptions)
				pcloudNetworksGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksGetOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudNetworksGetWithContext(ctx, pcloudNetworksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudNetworksGet(pcloudNetworksGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudNetworksGetWithContext(ctx, pcloudNetworksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"accessConfig": "internal-only", "cidr": "CIDR", "cloudConnections": [{"cloudConnectionID": "CloudConnectionID", "href": "Href"}], "dhcpManaged": false, "dnsServers": ["DnsServers"], "gateway": "Gateway", "ipAddressMetrics": {"available": 9, "total": 5, "used": 4, "utilization": 11}, "ipAddressRanges": [{"endingIPAddress": "EndingIPAddress", "startingIPAddress": "StartingIPAddress"}], "jumbo": false, "mtu": 3, "name": "Name", "networkID": "NetworkID", "publicIPAddressRanges": [{"endingIPAddress": "EndingIPAddress", "startingIPAddress": "StartingIPAddress"}], "type": "vlan", "vlanID": 6}`)
				}))
			})
			It(`Invoke PcloudNetworksGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudNetworksGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudNetworksGetOptions model
				pcloudNetworksGetOptionsModel := new(powervsv1.PcloudNetworksGetOptions)
				pcloudNetworksGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksGetOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudNetworksGet(pcloudNetworksGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudNetworksGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudNetworksGetOptions model
				pcloudNetworksGetOptionsModel := new(powervsv1.PcloudNetworksGetOptions)
				pcloudNetworksGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksGetOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudNetworksGet(pcloudNetworksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudNetworksGetOptions model with no property values
				pcloudNetworksGetOptionsModelNew := new(powervsv1.PcloudNetworksGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudNetworksGet(pcloudNetworksGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudNetworksGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudNetworksGetOptions model
				pcloudNetworksGetOptionsModel := new(powervsv1.PcloudNetworksGetOptions)
				pcloudNetworksGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksGetOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudNetworksGet(pcloudNetworksGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudNetworksPut(pcloudNetworksPutOptions *PcloudNetworksPutOptions) - Operation response error`, func() {
		pcloudNetworksPutPath := "/pcloud/v1/cloud-instances/testString/networks/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksPutPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudNetworksPut with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the IPAddressRange model
				ipAddressRangeModel := new(powervsv1.IPAddressRange)
				ipAddressRangeModel.EndingIPAddress = core.StringPtr("testString")
				ipAddressRangeModel.StartingIPAddress = core.StringPtr("testString")

				// Construct an instance of the PcloudNetworksPutOptions model
				pcloudNetworksPutOptionsModel := new(powervsv1.PcloudNetworksPutOptions)
				pcloudNetworksPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPutOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPutOptionsModel.DnsServers = []string{"testString"}
				pcloudNetworksPutOptionsModel.Gateway = core.StringPtr("testString")
				pcloudNetworksPutOptionsModel.IPAddressRanges = []powervsv1.IPAddressRange{*ipAddressRangeModel}
				pcloudNetworksPutOptionsModel.Name = core.StringPtr("testString")
				pcloudNetworksPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudNetworksPut(pcloudNetworksPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudNetworksPut(pcloudNetworksPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudNetworksPut(pcloudNetworksPutOptions *PcloudNetworksPutOptions)`, func() {
		pcloudNetworksPutPath := "/pcloud/v1/cloud-instances/testString/networks/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"accessConfig": "internal-only", "cidr": "CIDR", "cloudConnections": [{"cloudConnectionID": "CloudConnectionID", "href": "Href"}], "dhcpManaged": false, "dnsServers": ["DnsServers"], "gateway": "Gateway", "ipAddressMetrics": {"available": 9, "total": 5, "used": 4, "utilization": 11}, "ipAddressRanges": [{"endingIPAddress": "EndingIPAddress", "startingIPAddress": "StartingIPAddress"}], "jumbo": false, "mtu": 3, "name": "Name", "networkID": "NetworkID", "publicIPAddressRanges": [{"endingIPAddress": "EndingIPAddress", "startingIPAddress": "StartingIPAddress"}], "type": "vlan", "vlanID": 6}`)
				}))
			})
			It(`Invoke PcloudNetworksPut successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the IPAddressRange model
				ipAddressRangeModel := new(powervsv1.IPAddressRange)
				ipAddressRangeModel.EndingIPAddress = core.StringPtr("testString")
				ipAddressRangeModel.StartingIPAddress = core.StringPtr("testString")

				// Construct an instance of the PcloudNetworksPutOptions model
				pcloudNetworksPutOptionsModel := new(powervsv1.PcloudNetworksPutOptions)
				pcloudNetworksPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPutOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPutOptionsModel.DnsServers = []string{"testString"}
				pcloudNetworksPutOptionsModel.Gateway = core.StringPtr("testString")
				pcloudNetworksPutOptionsModel.IPAddressRanges = []powervsv1.IPAddressRange{*ipAddressRangeModel}
				pcloudNetworksPutOptionsModel.Name = core.StringPtr("testString")
				pcloudNetworksPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudNetworksPutWithContext(ctx, pcloudNetworksPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudNetworksPut(pcloudNetworksPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudNetworksPutWithContext(ctx, pcloudNetworksPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"accessConfig": "internal-only", "cidr": "CIDR", "cloudConnections": [{"cloudConnectionID": "CloudConnectionID", "href": "Href"}], "dhcpManaged": false, "dnsServers": ["DnsServers"], "gateway": "Gateway", "ipAddressMetrics": {"available": 9, "total": 5, "used": 4, "utilization": 11}, "ipAddressRanges": [{"endingIPAddress": "EndingIPAddress", "startingIPAddress": "StartingIPAddress"}], "jumbo": false, "mtu": 3, "name": "Name", "networkID": "NetworkID", "publicIPAddressRanges": [{"endingIPAddress": "EndingIPAddress", "startingIPAddress": "StartingIPAddress"}], "type": "vlan", "vlanID": 6}`)
				}))
			})
			It(`Invoke PcloudNetworksPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudNetworksPut(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the IPAddressRange model
				ipAddressRangeModel := new(powervsv1.IPAddressRange)
				ipAddressRangeModel.EndingIPAddress = core.StringPtr("testString")
				ipAddressRangeModel.StartingIPAddress = core.StringPtr("testString")

				// Construct an instance of the PcloudNetworksPutOptions model
				pcloudNetworksPutOptionsModel := new(powervsv1.PcloudNetworksPutOptions)
				pcloudNetworksPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPutOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPutOptionsModel.DnsServers = []string{"testString"}
				pcloudNetworksPutOptionsModel.Gateway = core.StringPtr("testString")
				pcloudNetworksPutOptionsModel.IPAddressRanges = []powervsv1.IPAddressRange{*ipAddressRangeModel}
				pcloudNetworksPutOptionsModel.Name = core.StringPtr("testString")
				pcloudNetworksPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudNetworksPut(pcloudNetworksPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudNetworksPut with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the IPAddressRange model
				ipAddressRangeModel := new(powervsv1.IPAddressRange)
				ipAddressRangeModel.EndingIPAddress = core.StringPtr("testString")
				ipAddressRangeModel.StartingIPAddress = core.StringPtr("testString")

				// Construct an instance of the PcloudNetworksPutOptions model
				pcloudNetworksPutOptionsModel := new(powervsv1.PcloudNetworksPutOptions)
				pcloudNetworksPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPutOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPutOptionsModel.DnsServers = []string{"testString"}
				pcloudNetworksPutOptionsModel.Gateway = core.StringPtr("testString")
				pcloudNetworksPutOptionsModel.IPAddressRanges = []powervsv1.IPAddressRange{*ipAddressRangeModel}
				pcloudNetworksPutOptionsModel.Name = core.StringPtr("testString")
				pcloudNetworksPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudNetworksPut(pcloudNetworksPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudNetworksPutOptions model with no property values
				pcloudNetworksPutOptionsModelNew := new(powervsv1.PcloudNetworksPutOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudNetworksPut(pcloudNetworksPutOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudNetworksPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the IPAddressRange model
				ipAddressRangeModel := new(powervsv1.IPAddressRange)
				ipAddressRangeModel.EndingIPAddress = core.StringPtr("testString")
				ipAddressRangeModel.StartingIPAddress = core.StringPtr("testString")

				// Construct an instance of the PcloudNetworksPutOptions model
				pcloudNetworksPutOptionsModel := new(powervsv1.PcloudNetworksPutOptions)
				pcloudNetworksPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPutOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPutOptionsModel.DnsServers = []string{"testString"}
				pcloudNetworksPutOptionsModel.Gateway = core.StringPtr("testString")
				pcloudNetworksPutOptionsModel.IPAddressRanges = []powervsv1.IPAddressRange{*ipAddressRangeModel}
				pcloudNetworksPutOptionsModel.Name = core.StringPtr("testString")
				pcloudNetworksPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudNetworksPut(pcloudNetworksPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudNetworksPortsGetall(pcloudNetworksPortsGetallOptions *PcloudNetworksPortsGetallOptions) - Operation response error`, func() {
		pcloudNetworksPortsGetallPath := "/pcloud/v1/cloud-instances/testString/networks/testString/ports"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksPortsGetallPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudNetworksPortsGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudNetworksPortsGetallOptions model
				pcloudNetworksPortsGetallOptionsModel := new(powervsv1.PcloudNetworksPortsGetallOptions)
				pcloudNetworksPortsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsGetallOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPortsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudNetworksPortsGetall(pcloudNetworksPortsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudNetworksPortsGetall(pcloudNetworksPortsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudNetworksPortsGetall(pcloudNetworksPortsGetallOptions *PcloudNetworksPortsGetallOptions)`, func() {
		pcloudNetworksPortsGetallPath := "/pcloud/v1/cloud-instances/testString/networks/testString/ports"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksPortsGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"ports": [{"description": "Description", "externalIP": "ExternalIP", "href": "Href", "ipAddress": "IPAddress", "macAddress": "MacAddress", "portID": "PortID", "pvmInstance": {"href": "Href", "pvmInstanceID": "PvmInstanceID"}, "status": "Status"}]}`)
				}))
			})
			It(`Invoke PcloudNetworksPortsGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudNetworksPortsGetallOptions model
				pcloudNetworksPortsGetallOptionsModel := new(powervsv1.PcloudNetworksPortsGetallOptions)
				pcloudNetworksPortsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsGetallOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPortsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudNetworksPortsGetallWithContext(ctx, pcloudNetworksPortsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudNetworksPortsGetall(pcloudNetworksPortsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudNetworksPortsGetallWithContext(ctx, pcloudNetworksPortsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksPortsGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"ports": [{"description": "Description", "externalIP": "ExternalIP", "href": "Href", "ipAddress": "IPAddress", "macAddress": "MacAddress", "portID": "PortID", "pvmInstance": {"href": "Href", "pvmInstanceID": "PvmInstanceID"}, "status": "Status"}]}`)
				}))
			})
			It(`Invoke PcloudNetworksPortsGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudNetworksPortsGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudNetworksPortsGetallOptions model
				pcloudNetworksPortsGetallOptionsModel := new(powervsv1.PcloudNetworksPortsGetallOptions)
				pcloudNetworksPortsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsGetallOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPortsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudNetworksPortsGetall(pcloudNetworksPortsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudNetworksPortsGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudNetworksPortsGetallOptions model
				pcloudNetworksPortsGetallOptionsModel := new(powervsv1.PcloudNetworksPortsGetallOptions)
				pcloudNetworksPortsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsGetallOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPortsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudNetworksPortsGetall(pcloudNetworksPortsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudNetworksPortsGetallOptions model with no property values
				pcloudNetworksPortsGetallOptionsModelNew := new(powervsv1.PcloudNetworksPortsGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudNetworksPortsGetall(pcloudNetworksPortsGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudNetworksPortsGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudNetworksPortsGetallOptions model
				pcloudNetworksPortsGetallOptionsModel := new(powervsv1.PcloudNetworksPortsGetallOptions)
				pcloudNetworksPortsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsGetallOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPortsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudNetworksPortsGetall(pcloudNetworksPortsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudNetworksPortsPost(pcloudNetworksPortsPostOptions *PcloudNetworksPortsPostOptions) - Operation response error`, func() {
		pcloudNetworksPortsPostPath := "/pcloud/v1/cloud-instances/testString/networks/testString/ports"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksPortsPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudNetworksPortsPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudNetworksPortsPostOptions model
				pcloudNetworksPortsPostOptionsModel := new(powervsv1.PcloudNetworksPortsPostOptions)
				pcloudNetworksPortsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsPostOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPortsPostOptionsModel.Description = core.StringPtr("testString")
				pcloudNetworksPortsPostOptionsModel.IPAddress = core.StringPtr("testString")
				pcloudNetworksPortsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudNetworksPortsPost(pcloudNetworksPortsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudNetworksPortsPost(pcloudNetworksPortsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudNetworksPortsPost(pcloudNetworksPortsPostOptions *PcloudNetworksPortsPostOptions)`, func() {
		pcloudNetworksPortsPostPath := "/pcloud/v1/cloud-instances/testString/networks/testString/ports"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksPortsPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"description": "Description", "externalIP": "ExternalIP", "href": "Href", "ipAddress": "IPAddress", "macAddress": "MacAddress", "portID": "PortID", "pvmInstance": {"href": "Href", "pvmInstanceID": "PvmInstanceID"}, "status": "Status"}`)
				}))
			})
			It(`Invoke PcloudNetworksPortsPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudNetworksPortsPostOptions model
				pcloudNetworksPortsPostOptionsModel := new(powervsv1.PcloudNetworksPortsPostOptions)
				pcloudNetworksPortsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsPostOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPortsPostOptionsModel.Description = core.StringPtr("testString")
				pcloudNetworksPortsPostOptionsModel.IPAddress = core.StringPtr("testString")
				pcloudNetworksPortsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudNetworksPortsPostWithContext(ctx, pcloudNetworksPortsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudNetworksPortsPost(pcloudNetworksPortsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudNetworksPortsPostWithContext(ctx, pcloudNetworksPortsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksPortsPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"description": "Description", "externalIP": "ExternalIP", "href": "Href", "ipAddress": "IPAddress", "macAddress": "MacAddress", "portID": "PortID", "pvmInstance": {"href": "Href", "pvmInstanceID": "PvmInstanceID"}, "status": "Status"}`)
				}))
			})
			It(`Invoke PcloudNetworksPortsPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudNetworksPortsPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudNetworksPortsPostOptions model
				pcloudNetworksPortsPostOptionsModel := new(powervsv1.PcloudNetworksPortsPostOptions)
				pcloudNetworksPortsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsPostOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPortsPostOptionsModel.Description = core.StringPtr("testString")
				pcloudNetworksPortsPostOptionsModel.IPAddress = core.StringPtr("testString")
				pcloudNetworksPortsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudNetworksPortsPost(pcloudNetworksPortsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudNetworksPortsPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudNetworksPortsPostOptions model
				pcloudNetworksPortsPostOptionsModel := new(powervsv1.PcloudNetworksPortsPostOptions)
				pcloudNetworksPortsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsPostOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPortsPostOptionsModel.Description = core.StringPtr("testString")
				pcloudNetworksPortsPostOptionsModel.IPAddress = core.StringPtr("testString")
				pcloudNetworksPortsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudNetworksPortsPost(pcloudNetworksPortsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudNetworksPortsPostOptions model with no property values
				pcloudNetworksPortsPostOptionsModelNew := new(powervsv1.PcloudNetworksPortsPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudNetworksPortsPost(pcloudNetworksPortsPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke PcloudNetworksPortsPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudNetworksPortsPostOptions model
				pcloudNetworksPortsPostOptionsModel := new(powervsv1.PcloudNetworksPortsPostOptions)
				pcloudNetworksPortsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsPostOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPortsPostOptionsModel.Description = core.StringPtr("testString")
				pcloudNetworksPortsPostOptionsModel.IPAddress = core.StringPtr("testString")
				pcloudNetworksPortsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudNetworksPortsPost(pcloudNetworksPortsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudNetworksPortsDelete(pcloudNetworksPortsDeleteOptions *PcloudNetworksPortsDeleteOptions) - Operation response error`, func() {
		pcloudNetworksPortsDeletePath := "/pcloud/v1/cloud-instances/testString/networks/testString/ports/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksPortsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudNetworksPortsDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudNetworksPortsDeleteOptions model
				pcloudNetworksPortsDeleteOptionsModel := new(powervsv1.PcloudNetworksPortsDeleteOptions)
				pcloudNetworksPortsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsDeleteOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPortsDeleteOptionsModel.PortID = core.StringPtr("testString")
				pcloudNetworksPortsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudNetworksPortsDelete(pcloudNetworksPortsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudNetworksPortsDelete(pcloudNetworksPortsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudNetworksPortsDelete(pcloudNetworksPortsDeleteOptions *PcloudNetworksPortsDeleteOptions)`, func() {
		pcloudNetworksPortsDeletePath := "/pcloud/v1/cloud-instances/testString/networks/testString/ports/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksPortsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudNetworksPortsDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudNetworksPortsDeleteOptions model
				pcloudNetworksPortsDeleteOptionsModel := new(powervsv1.PcloudNetworksPortsDeleteOptions)
				pcloudNetworksPortsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsDeleteOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPortsDeleteOptionsModel.PortID = core.StringPtr("testString")
				pcloudNetworksPortsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudNetworksPortsDeleteWithContext(ctx, pcloudNetworksPortsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudNetworksPortsDelete(pcloudNetworksPortsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudNetworksPortsDeleteWithContext(ctx, pcloudNetworksPortsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksPortsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudNetworksPortsDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudNetworksPortsDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudNetworksPortsDeleteOptions model
				pcloudNetworksPortsDeleteOptionsModel := new(powervsv1.PcloudNetworksPortsDeleteOptions)
				pcloudNetworksPortsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsDeleteOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPortsDeleteOptionsModel.PortID = core.StringPtr("testString")
				pcloudNetworksPortsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudNetworksPortsDelete(pcloudNetworksPortsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudNetworksPortsDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudNetworksPortsDeleteOptions model
				pcloudNetworksPortsDeleteOptionsModel := new(powervsv1.PcloudNetworksPortsDeleteOptions)
				pcloudNetworksPortsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsDeleteOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPortsDeleteOptionsModel.PortID = core.StringPtr("testString")
				pcloudNetworksPortsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudNetworksPortsDelete(pcloudNetworksPortsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudNetworksPortsDeleteOptions model with no property values
				pcloudNetworksPortsDeleteOptionsModelNew := new(powervsv1.PcloudNetworksPortsDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudNetworksPortsDelete(pcloudNetworksPortsDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudNetworksPortsDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudNetworksPortsDeleteOptions model
				pcloudNetworksPortsDeleteOptionsModel := new(powervsv1.PcloudNetworksPortsDeleteOptions)
				pcloudNetworksPortsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsDeleteOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPortsDeleteOptionsModel.PortID = core.StringPtr("testString")
				pcloudNetworksPortsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudNetworksPortsDelete(pcloudNetworksPortsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudNetworksPortsGet(pcloudNetworksPortsGetOptions *PcloudNetworksPortsGetOptions) - Operation response error`, func() {
		pcloudNetworksPortsGetPath := "/pcloud/v1/cloud-instances/testString/networks/testString/ports/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksPortsGetPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["Accept"]).ToNot(BeNil())
					Expect(req.Header["Accept"][0]).To(Equal(fmt.Sprintf("%v", "application/json")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudNetworksPortsGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudNetworksPortsGetOptions model
				pcloudNetworksPortsGetOptionsModel := new(powervsv1.PcloudNetworksPortsGetOptions)
				pcloudNetworksPortsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsGetOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPortsGetOptionsModel.PortID = core.StringPtr("testString")
				pcloudNetworksPortsGetOptionsModel.Accept = core.StringPtr("application/json")
				pcloudNetworksPortsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudNetworksPortsGet(pcloudNetworksPortsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudNetworksPortsGet(pcloudNetworksPortsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudNetworksPortsGet(pcloudNetworksPortsGetOptions *PcloudNetworksPortsGetOptions)`, func() {
		pcloudNetworksPortsGetPath := "/pcloud/v1/cloud-instances/testString/networks/testString/ports/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksPortsGetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["Accept"]).ToNot(BeNil())
					Expect(req.Header["Accept"][0]).To(Equal(fmt.Sprintf("%v", "application/json")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"description": "Description", "externalIP": "ExternalIP", "href": "Href", "ipAddress": "IPAddress", "macAddress": "MacAddress", "portID": "PortID", "pvmInstance": {"href": "Href", "pvmInstanceID": "PvmInstanceID"}, "status": "Status"}`)
				}))
			})
			It(`Invoke PcloudNetworksPortsGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudNetworksPortsGetOptions model
				pcloudNetworksPortsGetOptionsModel := new(powervsv1.PcloudNetworksPortsGetOptions)
				pcloudNetworksPortsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsGetOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPortsGetOptionsModel.PortID = core.StringPtr("testString")
				pcloudNetworksPortsGetOptionsModel.Accept = core.StringPtr("application/json")
				pcloudNetworksPortsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudNetworksPortsGetWithContext(ctx, pcloudNetworksPortsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudNetworksPortsGet(pcloudNetworksPortsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudNetworksPortsGetWithContext(ctx, pcloudNetworksPortsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksPortsGetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["Accept"]).ToNot(BeNil())
					Expect(req.Header["Accept"][0]).To(Equal(fmt.Sprintf("%v", "application/json")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"description": "Description", "externalIP": "ExternalIP", "href": "Href", "ipAddress": "IPAddress", "macAddress": "MacAddress", "portID": "PortID", "pvmInstance": {"href": "Href", "pvmInstanceID": "PvmInstanceID"}, "status": "Status"}`)
				}))
			})
			It(`Invoke PcloudNetworksPortsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudNetworksPortsGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudNetworksPortsGetOptions model
				pcloudNetworksPortsGetOptionsModel := new(powervsv1.PcloudNetworksPortsGetOptions)
				pcloudNetworksPortsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsGetOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPortsGetOptionsModel.PortID = core.StringPtr("testString")
				pcloudNetworksPortsGetOptionsModel.Accept = core.StringPtr("application/json")
				pcloudNetworksPortsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudNetworksPortsGet(pcloudNetworksPortsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudNetworksPortsGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudNetworksPortsGetOptions model
				pcloudNetworksPortsGetOptionsModel := new(powervsv1.PcloudNetworksPortsGetOptions)
				pcloudNetworksPortsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsGetOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPortsGetOptionsModel.PortID = core.StringPtr("testString")
				pcloudNetworksPortsGetOptionsModel.Accept = core.StringPtr("application/json")
				pcloudNetworksPortsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudNetworksPortsGet(pcloudNetworksPortsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudNetworksPortsGetOptions model with no property values
				pcloudNetworksPortsGetOptionsModelNew := new(powervsv1.PcloudNetworksPortsGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudNetworksPortsGet(pcloudNetworksPortsGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudNetworksPortsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudNetworksPortsGetOptions model
				pcloudNetworksPortsGetOptionsModel := new(powervsv1.PcloudNetworksPortsGetOptions)
				pcloudNetworksPortsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsGetOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPortsGetOptionsModel.PortID = core.StringPtr("testString")
				pcloudNetworksPortsGetOptionsModel.Accept = core.StringPtr("application/json")
				pcloudNetworksPortsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudNetworksPortsGet(pcloudNetworksPortsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudNetworksPortsPut(pcloudNetworksPortsPutOptions *PcloudNetworksPortsPutOptions) - Operation response error`, func() {
		pcloudNetworksPortsPutPath := "/pcloud/v1/cloud-instances/testString/networks/testString/ports/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksPortsPutPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudNetworksPortsPut with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudNetworksPortsPutOptions model
				pcloudNetworksPortsPutOptionsModel := new(powervsv1.PcloudNetworksPortsPutOptions)
				pcloudNetworksPortsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsPutOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPortsPutOptionsModel.PortID = core.StringPtr("testString")
				pcloudNetworksPortsPutOptionsModel.Description = core.StringPtr("testString")
				pcloudNetworksPortsPutOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudNetworksPortsPut(pcloudNetworksPortsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudNetworksPortsPut(pcloudNetworksPortsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudNetworksPortsPut(pcloudNetworksPortsPutOptions *PcloudNetworksPortsPutOptions)`, func() {
		pcloudNetworksPortsPutPath := "/pcloud/v1/cloud-instances/testString/networks/testString/ports/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksPortsPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"description": "Description", "externalIP": "ExternalIP", "href": "Href", "ipAddress": "IPAddress", "macAddress": "MacAddress", "portID": "PortID", "pvmInstance": {"href": "Href", "pvmInstanceID": "PvmInstanceID"}, "status": "Status"}`)
				}))
			})
			It(`Invoke PcloudNetworksPortsPut successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudNetworksPortsPutOptions model
				pcloudNetworksPortsPutOptionsModel := new(powervsv1.PcloudNetworksPortsPutOptions)
				pcloudNetworksPortsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsPutOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPortsPutOptionsModel.PortID = core.StringPtr("testString")
				pcloudNetworksPortsPutOptionsModel.Description = core.StringPtr("testString")
				pcloudNetworksPortsPutOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudNetworksPortsPutWithContext(ctx, pcloudNetworksPortsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudNetworksPortsPut(pcloudNetworksPortsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudNetworksPortsPutWithContext(ctx, pcloudNetworksPortsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudNetworksPortsPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"description": "Description", "externalIP": "ExternalIP", "href": "Href", "ipAddress": "IPAddress", "macAddress": "MacAddress", "portID": "PortID", "pvmInstance": {"href": "Href", "pvmInstanceID": "PvmInstanceID"}, "status": "Status"}`)
				}))
			})
			It(`Invoke PcloudNetworksPortsPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudNetworksPortsPut(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudNetworksPortsPutOptions model
				pcloudNetworksPortsPutOptionsModel := new(powervsv1.PcloudNetworksPortsPutOptions)
				pcloudNetworksPortsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsPutOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPortsPutOptionsModel.PortID = core.StringPtr("testString")
				pcloudNetworksPortsPutOptionsModel.Description = core.StringPtr("testString")
				pcloudNetworksPortsPutOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudNetworksPortsPut(pcloudNetworksPortsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudNetworksPortsPut with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudNetworksPortsPutOptions model
				pcloudNetworksPortsPutOptionsModel := new(powervsv1.PcloudNetworksPortsPutOptions)
				pcloudNetworksPortsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsPutOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPortsPutOptionsModel.PortID = core.StringPtr("testString")
				pcloudNetworksPortsPutOptionsModel.Description = core.StringPtr("testString")
				pcloudNetworksPortsPutOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudNetworksPortsPut(pcloudNetworksPortsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudNetworksPortsPutOptions model with no property values
				pcloudNetworksPortsPutOptionsModelNew := new(powervsv1.PcloudNetworksPortsPutOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudNetworksPortsPut(pcloudNetworksPortsPutOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudNetworksPortsPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudNetworksPortsPutOptions model
				pcloudNetworksPortsPutOptionsModel := new(powervsv1.PcloudNetworksPortsPutOptions)
				pcloudNetworksPortsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsPutOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudNetworksPortsPutOptionsModel.PortID = core.StringPtr("testString")
				pcloudNetworksPortsPutOptionsModel.Description = core.StringPtr("testString")
				pcloudNetworksPortsPutOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudNetworksPortsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudNetworksPortsPut(pcloudNetworksPortsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesGetall(pcloudPvminstancesGetallOptions *PcloudPvminstancesGetallOptions) - Operation response error`, func() {
		pcloudPvminstancesGetallPath := "/pcloud/v1/cloud-instances/testString/pvm-instances"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesGetallPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPvminstancesGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesGetallOptions model
				pcloudPvminstancesGetallOptionsModel := new(powervsv1.PcloudPvminstancesGetallOptions)
				pcloudPvminstancesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPvminstancesGetall(pcloudPvminstancesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPvminstancesGetall(pcloudPvminstancesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesGetall(pcloudPvminstancesGetallOptions *PcloudPvminstancesGetallOptions)`, func() {
		pcloudPvminstancesGetallPath := "/pcloud/v1/cloud-instances/testString/pvm-instances"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"pvmInstances": [{"addresses": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}], "consoleLanguage": {"code": "Code", "language": "Language"}, "creationDate": "2019-01-01T12:00:00.000Z", "diskSize": 8, "fault": {"code": 4, "created": "2019-01-01T12:00:00.000Z", "details": "Details", "message": "Message"}, "health": {"lastUpdate": "LastUpdate", "reason": "Reason", "status": "Status"}, "hostID": 6, "href": "Href", "imageID": "ImageID", "licenseRepositoryCapacity": 25, "maxmem": 6, "maxproc": 7, "memory": 6, "minmem": 6, "minproc": 7, "networks": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}], "operatingSystem": "OperatingSystem", "osType": "OsType", "pinPolicy": "PinPolicy", "placementGroup": "none", "procType": "dedicated", "processors": 10, "progress": 8, "pvmInstanceID": "PvmInstanceID", "sapProfile": {"href": "Href", "profileID": "ProfileID"}, "serverName": "ServerName", "sharedProcessorPool": "SharedProcessorPool", "sharedProcessorPoolID": "SharedProcessorPoolID", "softwareLicenses": {"ibmiCSS": false, "ibmiDBQ": false, "ibmiPHA": false, "ibmiRDS": false, "ibmiRDSUsers": 12}, "srcs": [[{"src": "Src", "timestamp": "Timestamp"}]], "status": "Status", "storageConnection": "StorageConnection", "storagePool": "StoragePool", "storagePoolAffinity": true, "storageType": "StorageType", "sysType": "SysType", "updatedDate": "2019-01-01T12:00:00.000Z", "virtualCores": {"assigned": 8, "max": 3, "min": 3}}]}`)
				}))
			})
			It(`Invoke PcloudPvminstancesGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudPvminstancesGetallOptions model
				pcloudPvminstancesGetallOptionsModel := new(powervsv1.PcloudPvminstancesGetallOptions)
				pcloudPvminstancesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPvminstancesGetallWithContext(ctx, pcloudPvminstancesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPvminstancesGetall(pcloudPvminstancesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPvminstancesGetallWithContext(ctx, pcloudPvminstancesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"pvmInstances": [{"addresses": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}], "consoleLanguage": {"code": "Code", "language": "Language"}, "creationDate": "2019-01-01T12:00:00.000Z", "diskSize": 8, "fault": {"code": 4, "created": "2019-01-01T12:00:00.000Z", "details": "Details", "message": "Message"}, "health": {"lastUpdate": "LastUpdate", "reason": "Reason", "status": "Status"}, "hostID": 6, "href": "Href", "imageID": "ImageID", "licenseRepositoryCapacity": 25, "maxmem": 6, "maxproc": 7, "memory": 6, "minmem": 6, "minproc": 7, "networks": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}], "operatingSystem": "OperatingSystem", "osType": "OsType", "pinPolicy": "PinPolicy", "placementGroup": "none", "procType": "dedicated", "processors": 10, "progress": 8, "pvmInstanceID": "PvmInstanceID", "sapProfile": {"href": "Href", "profileID": "ProfileID"}, "serverName": "ServerName", "sharedProcessorPool": "SharedProcessorPool", "sharedProcessorPoolID": "SharedProcessorPoolID", "softwareLicenses": {"ibmiCSS": false, "ibmiDBQ": false, "ibmiPHA": false, "ibmiRDS": false, "ibmiRDSUsers": 12}, "srcs": [[{"src": "Src", "timestamp": "Timestamp"}]], "status": "Status", "storageConnection": "StorageConnection", "storagePool": "StoragePool", "storagePoolAffinity": true, "storageType": "StorageType", "sysType": "SysType", "updatedDate": "2019-01-01T12:00:00.000Z", "virtualCores": {"assigned": 8, "max": 3, "min": 3}}]}`)
				}))
			})
			It(`Invoke PcloudPvminstancesGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPvminstancesGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudPvminstancesGetallOptions model
				pcloudPvminstancesGetallOptionsModel := new(powervsv1.PcloudPvminstancesGetallOptions)
				pcloudPvminstancesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPvminstancesGetall(pcloudPvminstancesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPvminstancesGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesGetallOptions model
				pcloudPvminstancesGetallOptionsModel := new(powervsv1.PcloudPvminstancesGetallOptions)
				pcloudPvminstancesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPvminstancesGetall(pcloudPvminstancesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPvminstancesGetallOptions model with no property values
				pcloudPvminstancesGetallOptionsModelNew := new(powervsv1.PcloudPvminstancesGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPvminstancesGetall(pcloudPvminstancesGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudPvminstancesGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesGetallOptions model
				pcloudPvminstancesGetallOptionsModel := new(powervsv1.PcloudPvminstancesGetallOptions)
				pcloudPvminstancesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPvminstancesGetall(pcloudPvminstancesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesPost(pcloudPvminstancesPostOptions *PcloudPvminstancesPostOptions) - Operation response error`, func() {
		pcloudPvminstancesPostPath := "/pcloud/v1/cloud-instances/testString/pvm-instances"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesPostPath))
					Expect(req.Method).To(Equal("POST"))
					// TODO: Add check for skipHostValidation query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPvminstancesPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PvmInstanceAddNetwork model
				pvmInstanceAddNetworkModel := new(powervsv1.PvmInstanceAddNetwork)
				pvmInstanceAddNetworkModel.IPAddress = core.StringPtr("testString")
				pvmInstanceAddNetworkModel.NetworkID = core.StringPtr("testString")

				// Construct an instance of the SoftwareLicenses model
				softwareLicensesModel := new(powervsv1.SoftwareLicenses)
				softwareLicensesModel.IbmiCss = core.BoolPtr(false)
				softwareLicensesModel.IbmiDbq = core.BoolPtr(false)
				softwareLicensesModel.IbmiPha = core.BoolPtr(false)
				softwareLicensesModel.IbmiRds = core.BoolPtr(false)
				softwareLicensesModel.IbmiRdsUsers = core.Int64Ptr(int64(38))

				// Construct an instance of the StorageAffinity model
				storageAffinityModel := new(powervsv1.StorageAffinity)
				storageAffinityModel.AffinityPvmInstance = core.StringPtr("testString")
				storageAffinityModel.AffinityPolicy = core.StringPtr("affinity")
				storageAffinityModel.AffinityVolume = core.StringPtr("testString")
				storageAffinityModel.AntiAffinityPvmInstances = []string{"testString"}
				storageAffinityModel.AntiAffinityVolumes = []string{"testString"}

				// Construct an instance of the VirtualCores model
				virtualCoresModel := new(powervsv1.VirtualCores)
				virtualCoresModel.Assigned = core.Int64Ptr(int64(38))
				virtualCoresModel.Max = core.Int64Ptr(int64(38))
				virtualCoresModel.Min = core.Int64Ptr(int64(38))

				// Construct an instance of the PcloudPvminstancesPostOptions model
				pcloudPvminstancesPostOptionsModel := new(powervsv1.PcloudPvminstancesPostOptions)
				pcloudPvminstancesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.ImageID = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.Memory = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesPostOptionsModel.ProcType = core.StringPtr("dedicated")
				pcloudPvminstancesPostOptionsModel.Processors = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesPostOptionsModel.ServerName = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.DeployTarget = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.DeploymentType = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.KeyPairName = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.LicenseRepositoryCapacity = core.Int64Ptr(int64(38))
				pcloudPvminstancesPostOptionsModel.Migratable = core.BoolPtr(true)
				pcloudPvminstancesPostOptionsModel.NetworkIDs = []string{"testString"}
				pcloudPvminstancesPostOptionsModel.Networks = []powervsv1.PvmInstanceAddNetwork{*pvmInstanceAddNetworkModel}
				pcloudPvminstancesPostOptionsModel.PinPolicy = core.StringPtr("none")
				pcloudPvminstancesPostOptionsModel.PlacementGroup = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.ReplicantAffinityPolicy = core.StringPtr("none")
				pcloudPvminstancesPostOptionsModel.ReplicantNamingScheme = core.StringPtr("suffix")
				pcloudPvminstancesPostOptionsModel.Replicants = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesPostOptionsModel.SharedProcessorPool = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.SoftwareLicenses = softwareLicensesModel
				pcloudPvminstancesPostOptionsModel.StorageAffinity = storageAffinityModel
				pcloudPvminstancesPostOptionsModel.StorageConnection = core.StringPtr("vSCSI")
				pcloudPvminstancesPostOptionsModel.StorageConnectionV2 = core.StringPtr("vSCSI")
				pcloudPvminstancesPostOptionsModel.StoragePool = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.StorageType = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.SysType = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.UserData = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.VirtualCores = virtualCoresModel
				pcloudPvminstancesPostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudPvminstancesPostOptionsModel.SkipHostValidation = core.BoolPtr(true)
				pcloudPvminstancesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPvminstancesPost(pcloudPvminstancesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPvminstancesPost(pcloudPvminstancesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesPost(pcloudPvminstancesPostOptions *PcloudPvminstancesPostOptions)`, func() {
		pcloudPvminstancesPostPath := "/pcloud/v1/cloud-instances/testString/pvm-instances"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// TODO: Add check for skipHostValidation query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"addresses": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}], "consoleLanguage": {"code": "Code", "language": "Language"}, "creationDate": "2019-01-01T12:00:00.000Z", "deploymentType": "DeploymentType", "diskSize": 8, "fault": {"code": 4, "created": "2019-01-01T12:00:00.000Z", "details": "Details", "message": "Message"}, "health": {"lastUpdate": "LastUpdate", "reason": "Reason", "status": "Status"}, "hostID": 6, "imageID": "ImageID", "licenseRepositoryCapacity": 25, "maxmem": 6, "maxproc": 7, "memory": 6, "migratable": true, "minmem": 6, "minproc": 7, "networkIDs": ["NetworkIDs"], "networks": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}], "operatingSystem": "OperatingSystem", "osType": "OsType", "pinPolicy": "PinPolicy", "placementGroup": "none", "procType": "dedicated", "processors": 10, "progress": 8, "pvmInstanceID": "PvmInstanceID", "sapProfile": {"href": "Href", "profileID": "ProfileID"}, "serverName": "ServerName", "sharedProcessorPool": "SharedProcessorPool", "sharedProcessorPoolID": "SharedProcessorPoolID", "softwareLicenses": {"ibmiCSS": false, "ibmiDBQ": false, "ibmiPHA": false, "ibmiRDS": false, "ibmiRDSUsers": 12}, "srcs": [[{"src": "Src", "timestamp": "Timestamp"}]], "status": "Status", "storageConnection": "StorageConnection", "storagePool": "StoragePool", "storagePoolAffinity": true, "storageType": "StorageType", "sysType": "SysType", "updatedDate": "2019-01-01T12:00:00.000Z", "virtualCores": {"assigned": 8, "max": 3, "min": 3}, "volumeIDs": ["VolumeIDs"]}]`)
				}))
			})
			It(`Invoke PcloudPvminstancesPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PvmInstanceAddNetwork model
				pvmInstanceAddNetworkModel := new(powervsv1.PvmInstanceAddNetwork)
				pvmInstanceAddNetworkModel.IPAddress = core.StringPtr("testString")
				pvmInstanceAddNetworkModel.NetworkID = core.StringPtr("testString")

				// Construct an instance of the SoftwareLicenses model
				softwareLicensesModel := new(powervsv1.SoftwareLicenses)
				softwareLicensesModel.IbmiCss = core.BoolPtr(false)
				softwareLicensesModel.IbmiDbq = core.BoolPtr(false)
				softwareLicensesModel.IbmiPha = core.BoolPtr(false)
				softwareLicensesModel.IbmiRds = core.BoolPtr(false)
				softwareLicensesModel.IbmiRdsUsers = core.Int64Ptr(int64(38))

				// Construct an instance of the StorageAffinity model
				storageAffinityModel := new(powervsv1.StorageAffinity)
				storageAffinityModel.AffinityPvmInstance = core.StringPtr("testString")
				storageAffinityModel.AffinityPolicy = core.StringPtr("affinity")
				storageAffinityModel.AffinityVolume = core.StringPtr("testString")
				storageAffinityModel.AntiAffinityPvmInstances = []string{"testString"}
				storageAffinityModel.AntiAffinityVolumes = []string{"testString"}

				// Construct an instance of the VirtualCores model
				virtualCoresModel := new(powervsv1.VirtualCores)
				virtualCoresModel.Assigned = core.Int64Ptr(int64(38))
				virtualCoresModel.Max = core.Int64Ptr(int64(38))
				virtualCoresModel.Min = core.Int64Ptr(int64(38))

				// Construct an instance of the PcloudPvminstancesPostOptions model
				pcloudPvminstancesPostOptionsModel := new(powervsv1.PcloudPvminstancesPostOptions)
				pcloudPvminstancesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.ImageID = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.Memory = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesPostOptionsModel.ProcType = core.StringPtr("dedicated")
				pcloudPvminstancesPostOptionsModel.Processors = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesPostOptionsModel.ServerName = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.DeployTarget = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.DeploymentType = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.KeyPairName = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.LicenseRepositoryCapacity = core.Int64Ptr(int64(38))
				pcloudPvminstancesPostOptionsModel.Migratable = core.BoolPtr(true)
				pcloudPvminstancesPostOptionsModel.NetworkIDs = []string{"testString"}
				pcloudPvminstancesPostOptionsModel.Networks = []powervsv1.PvmInstanceAddNetwork{*pvmInstanceAddNetworkModel}
				pcloudPvminstancesPostOptionsModel.PinPolicy = core.StringPtr("none")
				pcloudPvminstancesPostOptionsModel.PlacementGroup = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.ReplicantAffinityPolicy = core.StringPtr("none")
				pcloudPvminstancesPostOptionsModel.ReplicantNamingScheme = core.StringPtr("suffix")
				pcloudPvminstancesPostOptionsModel.Replicants = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesPostOptionsModel.SharedProcessorPool = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.SoftwareLicenses = softwareLicensesModel
				pcloudPvminstancesPostOptionsModel.StorageAffinity = storageAffinityModel
				pcloudPvminstancesPostOptionsModel.StorageConnection = core.StringPtr("vSCSI")
				pcloudPvminstancesPostOptionsModel.StorageConnectionV2 = core.StringPtr("vSCSI")
				pcloudPvminstancesPostOptionsModel.StoragePool = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.StorageType = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.SysType = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.UserData = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.VirtualCores = virtualCoresModel
				pcloudPvminstancesPostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudPvminstancesPostOptionsModel.SkipHostValidation = core.BoolPtr(true)
				pcloudPvminstancesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPvminstancesPostWithContext(ctx, pcloudPvminstancesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPvminstancesPost(pcloudPvminstancesPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPvminstancesPostWithContext(ctx, pcloudPvminstancesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// TODO: Add check for skipHostValidation query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"addresses": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}], "consoleLanguage": {"code": "Code", "language": "Language"}, "creationDate": "2019-01-01T12:00:00.000Z", "deploymentType": "DeploymentType", "diskSize": 8, "fault": {"code": 4, "created": "2019-01-01T12:00:00.000Z", "details": "Details", "message": "Message"}, "health": {"lastUpdate": "LastUpdate", "reason": "Reason", "status": "Status"}, "hostID": 6, "imageID": "ImageID", "licenseRepositoryCapacity": 25, "maxmem": 6, "maxproc": 7, "memory": 6, "migratable": true, "minmem": 6, "minproc": 7, "networkIDs": ["NetworkIDs"], "networks": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}], "operatingSystem": "OperatingSystem", "osType": "OsType", "pinPolicy": "PinPolicy", "placementGroup": "none", "procType": "dedicated", "processors": 10, "progress": 8, "pvmInstanceID": "PvmInstanceID", "sapProfile": {"href": "Href", "profileID": "ProfileID"}, "serverName": "ServerName", "sharedProcessorPool": "SharedProcessorPool", "sharedProcessorPoolID": "SharedProcessorPoolID", "softwareLicenses": {"ibmiCSS": false, "ibmiDBQ": false, "ibmiPHA": false, "ibmiRDS": false, "ibmiRDSUsers": 12}, "srcs": [[{"src": "Src", "timestamp": "Timestamp"}]], "status": "Status", "storageConnection": "StorageConnection", "storagePool": "StoragePool", "storagePoolAffinity": true, "storageType": "StorageType", "sysType": "SysType", "updatedDate": "2019-01-01T12:00:00.000Z", "virtualCores": {"assigned": 8, "max": 3, "min": 3}, "volumeIDs": ["VolumeIDs"]}]`)
				}))
			})
			It(`Invoke PcloudPvminstancesPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPvminstancesPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PvmInstanceAddNetwork model
				pvmInstanceAddNetworkModel := new(powervsv1.PvmInstanceAddNetwork)
				pvmInstanceAddNetworkModel.IPAddress = core.StringPtr("testString")
				pvmInstanceAddNetworkModel.NetworkID = core.StringPtr("testString")

				// Construct an instance of the SoftwareLicenses model
				softwareLicensesModel := new(powervsv1.SoftwareLicenses)
				softwareLicensesModel.IbmiCss = core.BoolPtr(false)
				softwareLicensesModel.IbmiDbq = core.BoolPtr(false)
				softwareLicensesModel.IbmiPha = core.BoolPtr(false)
				softwareLicensesModel.IbmiRds = core.BoolPtr(false)
				softwareLicensesModel.IbmiRdsUsers = core.Int64Ptr(int64(38))

				// Construct an instance of the StorageAffinity model
				storageAffinityModel := new(powervsv1.StorageAffinity)
				storageAffinityModel.AffinityPvmInstance = core.StringPtr("testString")
				storageAffinityModel.AffinityPolicy = core.StringPtr("affinity")
				storageAffinityModel.AffinityVolume = core.StringPtr("testString")
				storageAffinityModel.AntiAffinityPvmInstances = []string{"testString"}
				storageAffinityModel.AntiAffinityVolumes = []string{"testString"}

				// Construct an instance of the VirtualCores model
				virtualCoresModel := new(powervsv1.VirtualCores)
				virtualCoresModel.Assigned = core.Int64Ptr(int64(38))
				virtualCoresModel.Max = core.Int64Ptr(int64(38))
				virtualCoresModel.Min = core.Int64Ptr(int64(38))

				// Construct an instance of the PcloudPvminstancesPostOptions model
				pcloudPvminstancesPostOptionsModel := new(powervsv1.PcloudPvminstancesPostOptions)
				pcloudPvminstancesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.ImageID = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.Memory = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesPostOptionsModel.ProcType = core.StringPtr("dedicated")
				pcloudPvminstancesPostOptionsModel.Processors = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesPostOptionsModel.ServerName = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.DeployTarget = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.DeploymentType = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.KeyPairName = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.LicenseRepositoryCapacity = core.Int64Ptr(int64(38))
				pcloudPvminstancesPostOptionsModel.Migratable = core.BoolPtr(true)
				pcloudPvminstancesPostOptionsModel.NetworkIDs = []string{"testString"}
				pcloudPvminstancesPostOptionsModel.Networks = []powervsv1.PvmInstanceAddNetwork{*pvmInstanceAddNetworkModel}
				pcloudPvminstancesPostOptionsModel.PinPolicy = core.StringPtr("none")
				pcloudPvminstancesPostOptionsModel.PlacementGroup = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.ReplicantAffinityPolicy = core.StringPtr("none")
				pcloudPvminstancesPostOptionsModel.ReplicantNamingScheme = core.StringPtr("suffix")
				pcloudPvminstancesPostOptionsModel.Replicants = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesPostOptionsModel.SharedProcessorPool = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.SoftwareLicenses = softwareLicensesModel
				pcloudPvminstancesPostOptionsModel.StorageAffinity = storageAffinityModel
				pcloudPvminstancesPostOptionsModel.StorageConnection = core.StringPtr("vSCSI")
				pcloudPvminstancesPostOptionsModel.StorageConnectionV2 = core.StringPtr("vSCSI")
				pcloudPvminstancesPostOptionsModel.StoragePool = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.StorageType = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.SysType = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.UserData = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.VirtualCores = virtualCoresModel
				pcloudPvminstancesPostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudPvminstancesPostOptionsModel.SkipHostValidation = core.BoolPtr(true)
				pcloudPvminstancesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPvminstancesPost(pcloudPvminstancesPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPvminstancesPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PvmInstanceAddNetwork model
				pvmInstanceAddNetworkModel := new(powervsv1.PvmInstanceAddNetwork)
				pvmInstanceAddNetworkModel.IPAddress = core.StringPtr("testString")
				pvmInstanceAddNetworkModel.NetworkID = core.StringPtr("testString")

				// Construct an instance of the SoftwareLicenses model
				softwareLicensesModel := new(powervsv1.SoftwareLicenses)
				softwareLicensesModel.IbmiCss = core.BoolPtr(false)
				softwareLicensesModel.IbmiDbq = core.BoolPtr(false)
				softwareLicensesModel.IbmiPha = core.BoolPtr(false)
				softwareLicensesModel.IbmiRds = core.BoolPtr(false)
				softwareLicensesModel.IbmiRdsUsers = core.Int64Ptr(int64(38))

				// Construct an instance of the StorageAffinity model
				storageAffinityModel := new(powervsv1.StorageAffinity)
				storageAffinityModel.AffinityPvmInstance = core.StringPtr("testString")
				storageAffinityModel.AffinityPolicy = core.StringPtr("affinity")
				storageAffinityModel.AffinityVolume = core.StringPtr("testString")
				storageAffinityModel.AntiAffinityPvmInstances = []string{"testString"}
				storageAffinityModel.AntiAffinityVolumes = []string{"testString"}

				// Construct an instance of the VirtualCores model
				virtualCoresModel := new(powervsv1.VirtualCores)
				virtualCoresModel.Assigned = core.Int64Ptr(int64(38))
				virtualCoresModel.Max = core.Int64Ptr(int64(38))
				virtualCoresModel.Min = core.Int64Ptr(int64(38))

				// Construct an instance of the PcloudPvminstancesPostOptions model
				pcloudPvminstancesPostOptionsModel := new(powervsv1.PcloudPvminstancesPostOptions)
				pcloudPvminstancesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.ImageID = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.Memory = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesPostOptionsModel.ProcType = core.StringPtr("dedicated")
				pcloudPvminstancesPostOptionsModel.Processors = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesPostOptionsModel.ServerName = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.DeployTarget = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.DeploymentType = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.KeyPairName = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.LicenseRepositoryCapacity = core.Int64Ptr(int64(38))
				pcloudPvminstancesPostOptionsModel.Migratable = core.BoolPtr(true)
				pcloudPvminstancesPostOptionsModel.NetworkIDs = []string{"testString"}
				pcloudPvminstancesPostOptionsModel.Networks = []powervsv1.PvmInstanceAddNetwork{*pvmInstanceAddNetworkModel}
				pcloudPvminstancesPostOptionsModel.PinPolicy = core.StringPtr("none")
				pcloudPvminstancesPostOptionsModel.PlacementGroup = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.ReplicantAffinityPolicy = core.StringPtr("none")
				pcloudPvminstancesPostOptionsModel.ReplicantNamingScheme = core.StringPtr("suffix")
				pcloudPvminstancesPostOptionsModel.Replicants = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesPostOptionsModel.SharedProcessorPool = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.SoftwareLicenses = softwareLicensesModel
				pcloudPvminstancesPostOptionsModel.StorageAffinity = storageAffinityModel
				pcloudPvminstancesPostOptionsModel.StorageConnection = core.StringPtr("vSCSI")
				pcloudPvminstancesPostOptionsModel.StorageConnectionV2 = core.StringPtr("vSCSI")
				pcloudPvminstancesPostOptionsModel.StoragePool = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.StorageType = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.SysType = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.UserData = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.VirtualCores = virtualCoresModel
				pcloudPvminstancesPostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudPvminstancesPostOptionsModel.SkipHostValidation = core.BoolPtr(true)
				pcloudPvminstancesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPvminstancesPost(pcloudPvminstancesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPvminstancesPostOptions model with no property values
				pcloudPvminstancesPostOptionsModelNew := new(powervsv1.PcloudPvminstancesPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPvminstancesPost(pcloudPvminstancesPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudPvminstancesPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PvmInstanceAddNetwork model
				pvmInstanceAddNetworkModel := new(powervsv1.PvmInstanceAddNetwork)
				pvmInstanceAddNetworkModel.IPAddress = core.StringPtr("testString")
				pvmInstanceAddNetworkModel.NetworkID = core.StringPtr("testString")

				// Construct an instance of the SoftwareLicenses model
				softwareLicensesModel := new(powervsv1.SoftwareLicenses)
				softwareLicensesModel.IbmiCss = core.BoolPtr(false)
				softwareLicensesModel.IbmiDbq = core.BoolPtr(false)
				softwareLicensesModel.IbmiPha = core.BoolPtr(false)
				softwareLicensesModel.IbmiRds = core.BoolPtr(false)
				softwareLicensesModel.IbmiRdsUsers = core.Int64Ptr(int64(38))

				// Construct an instance of the StorageAffinity model
				storageAffinityModel := new(powervsv1.StorageAffinity)
				storageAffinityModel.AffinityPvmInstance = core.StringPtr("testString")
				storageAffinityModel.AffinityPolicy = core.StringPtr("affinity")
				storageAffinityModel.AffinityVolume = core.StringPtr("testString")
				storageAffinityModel.AntiAffinityPvmInstances = []string{"testString"}
				storageAffinityModel.AntiAffinityVolumes = []string{"testString"}

				// Construct an instance of the VirtualCores model
				virtualCoresModel := new(powervsv1.VirtualCores)
				virtualCoresModel.Assigned = core.Int64Ptr(int64(38))
				virtualCoresModel.Max = core.Int64Ptr(int64(38))
				virtualCoresModel.Min = core.Int64Ptr(int64(38))

				// Construct an instance of the PcloudPvminstancesPostOptions model
				pcloudPvminstancesPostOptionsModel := new(powervsv1.PcloudPvminstancesPostOptions)
				pcloudPvminstancesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.ImageID = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.Memory = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesPostOptionsModel.ProcType = core.StringPtr("dedicated")
				pcloudPvminstancesPostOptionsModel.Processors = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesPostOptionsModel.ServerName = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.DeployTarget = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.DeploymentType = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.KeyPairName = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.LicenseRepositoryCapacity = core.Int64Ptr(int64(38))
				pcloudPvminstancesPostOptionsModel.Migratable = core.BoolPtr(true)
				pcloudPvminstancesPostOptionsModel.NetworkIDs = []string{"testString"}
				pcloudPvminstancesPostOptionsModel.Networks = []powervsv1.PvmInstanceAddNetwork{*pvmInstanceAddNetworkModel}
				pcloudPvminstancesPostOptionsModel.PinPolicy = core.StringPtr("none")
				pcloudPvminstancesPostOptionsModel.PlacementGroup = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.ReplicantAffinityPolicy = core.StringPtr("none")
				pcloudPvminstancesPostOptionsModel.ReplicantNamingScheme = core.StringPtr("suffix")
				pcloudPvminstancesPostOptionsModel.Replicants = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesPostOptionsModel.SharedProcessorPool = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.SoftwareLicenses = softwareLicensesModel
				pcloudPvminstancesPostOptionsModel.StorageAffinity = storageAffinityModel
				pcloudPvminstancesPostOptionsModel.StorageConnection = core.StringPtr("vSCSI")
				pcloudPvminstancesPostOptionsModel.StorageConnectionV2 = core.StringPtr("vSCSI")
				pcloudPvminstancesPostOptionsModel.StoragePool = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.StorageType = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.SysType = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.UserData = core.StringPtr("testString")
				pcloudPvminstancesPostOptionsModel.VirtualCores = virtualCoresModel
				pcloudPvminstancesPostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudPvminstancesPostOptionsModel.SkipHostValidation = core.BoolPtr(true)
				pcloudPvminstancesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPvminstancesPost(pcloudPvminstancesPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesDelete(pcloudPvminstancesDeleteOptions *PcloudPvminstancesDeleteOptions) - Operation response error`, func() {
		pcloudPvminstancesDeletePath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					// TODO: Add check for delete_data_volumes query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPvminstancesDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesDeleteOptions model
				pcloudPvminstancesDeleteOptionsModel := new(powervsv1.PcloudPvminstancesDeleteOptions)
				pcloudPvminstancesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesDeleteOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesDeleteOptionsModel.DeleteDataVolumes = core.BoolPtr(true)
				pcloudPvminstancesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPvminstancesDelete(pcloudPvminstancesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPvminstancesDelete(pcloudPvminstancesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesDelete(pcloudPvminstancesDeleteOptions *PcloudPvminstancesDeleteOptions)`, func() {
		pcloudPvminstancesDeletePath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// TODO: Add check for delete_data_volumes query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudPvminstancesDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudPvminstancesDeleteOptions model
				pcloudPvminstancesDeleteOptionsModel := new(powervsv1.PcloudPvminstancesDeleteOptions)
				pcloudPvminstancesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesDeleteOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesDeleteOptionsModel.DeleteDataVolumes = core.BoolPtr(true)
				pcloudPvminstancesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPvminstancesDeleteWithContext(ctx, pcloudPvminstancesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPvminstancesDelete(pcloudPvminstancesDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPvminstancesDeleteWithContext(ctx, pcloudPvminstancesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// TODO: Add check for delete_data_volumes query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudPvminstancesDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPvminstancesDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudPvminstancesDeleteOptions model
				pcloudPvminstancesDeleteOptionsModel := new(powervsv1.PcloudPvminstancesDeleteOptions)
				pcloudPvminstancesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesDeleteOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesDeleteOptionsModel.DeleteDataVolumes = core.BoolPtr(true)
				pcloudPvminstancesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPvminstancesDelete(pcloudPvminstancesDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPvminstancesDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesDeleteOptions model
				pcloudPvminstancesDeleteOptionsModel := new(powervsv1.PcloudPvminstancesDeleteOptions)
				pcloudPvminstancesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesDeleteOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesDeleteOptionsModel.DeleteDataVolumes = core.BoolPtr(true)
				pcloudPvminstancesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPvminstancesDelete(pcloudPvminstancesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPvminstancesDeleteOptions model with no property values
				pcloudPvminstancesDeleteOptionsModelNew := new(powervsv1.PcloudPvminstancesDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPvminstancesDelete(pcloudPvminstancesDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudPvminstancesDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesDeleteOptions model
				pcloudPvminstancesDeleteOptionsModel := new(powervsv1.PcloudPvminstancesDeleteOptions)
				pcloudPvminstancesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesDeleteOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesDeleteOptionsModel.DeleteDataVolumes = core.BoolPtr(true)
				pcloudPvminstancesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPvminstancesDelete(pcloudPvminstancesDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesGet(pcloudPvminstancesGetOptions *PcloudPvminstancesGetOptions) - Operation response error`, func() {
		pcloudPvminstancesGetPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPvminstancesGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesGetOptions model
				pcloudPvminstancesGetOptionsModel := new(powervsv1.PcloudPvminstancesGetOptions)
				pcloudPvminstancesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPvminstancesGet(pcloudPvminstancesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPvminstancesGet(pcloudPvminstancesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesGet(pcloudPvminstancesGetOptions *PcloudPvminstancesGetOptions)`, func() {
		pcloudPvminstancesGetPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"addresses": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}], "consoleLanguage": {"code": "Code", "language": "Language"}, "creationDate": "2019-01-01T12:00:00.000Z", "deploymentType": "DeploymentType", "diskSize": 8, "fault": {"code": 4, "created": "2019-01-01T12:00:00.000Z", "details": "Details", "message": "Message"}, "health": {"lastUpdate": "LastUpdate", "reason": "Reason", "status": "Status"}, "hostID": 6, "imageID": "ImageID", "licenseRepositoryCapacity": 25, "maxmem": 6, "maxproc": 7, "memory": 6, "migratable": true, "minmem": 6, "minproc": 7, "networkIDs": ["NetworkIDs"], "networks": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}], "operatingSystem": "OperatingSystem", "osType": "OsType", "pinPolicy": "PinPolicy", "placementGroup": "none", "procType": "dedicated", "processors": 10, "progress": 8, "pvmInstanceID": "PvmInstanceID", "sapProfile": {"href": "Href", "profileID": "ProfileID"}, "serverName": "ServerName", "sharedProcessorPool": "SharedProcessorPool", "sharedProcessorPoolID": "SharedProcessorPoolID", "softwareLicenses": {"ibmiCSS": false, "ibmiDBQ": false, "ibmiPHA": false, "ibmiRDS": false, "ibmiRDSUsers": 12}, "srcs": [[{"src": "Src", "timestamp": "Timestamp"}]], "status": "Status", "storageConnection": "StorageConnection", "storagePool": "StoragePool", "storagePoolAffinity": true, "storageType": "StorageType", "sysType": "SysType", "updatedDate": "2019-01-01T12:00:00.000Z", "virtualCores": {"assigned": 8, "max": 3, "min": 3}, "volumeIDs": ["VolumeIDs"]}`)
				}))
			})
			It(`Invoke PcloudPvminstancesGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudPvminstancesGetOptions model
				pcloudPvminstancesGetOptionsModel := new(powervsv1.PcloudPvminstancesGetOptions)
				pcloudPvminstancesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPvminstancesGetWithContext(ctx, pcloudPvminstancesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPvminstancesGet(pcloudPvminstancesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPvminstancesGetWithContext(ctx, pcloudPvminstancesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"addresses": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}], "consoleLanguage": {"code": "Code", "language": "Language"}, "creationDate": "2019-01-01T12:00:00.000Z", "deploymentType": "DeploymentType", "diskSize": 8, "fault": {"code": 4, "created": "2019-01-01T12:00:00.000Z", "details": "Details", "message": "Message"}, "health": {"lastUpdate": "LastUpdate", "reason": "Reason", "status": "Status"}, "hostID": 6, "imageID": "ImageID", "licenseRepositoryCapacity": 25, "maxmem": 6, "maxproc": 7, "memory": 6, "migratable": true, "minmem": 6, "minproc": 7, "networkIDs": ["NetworkIDs"], "networks": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}], "operatingSystem": "OperatingSystem", "osType": "OsType", "pinPolicy": "PinPolicy", "placementGroup": "none", "procType": "dedicated", "processors": 10, "progress": 8, "pvmInstanceID": "PvmInstanceID", "sapProfile": {"href": "Href", "profileID": "ProfileID"}, "serverName": "ServerName", "sharedProcessorPool": "SharedProcessorPool", "sharedProcessorPoolID": "SharedProcessorPoolID", "softwareLicenses": {"ibmiCSS": false, "ibmiDBQ": false, "ibmiPHA": false, "ibmiRDS": false, "ibmiRDSUsers": 12}, "srcs": [[{"src": "Src", "timestamp": "Timestamp"}]], "status": "Status", "storageConnection": "StorageConnection", "storagePool": "StoragePool", "storagePoolAffinity": true, "storageType": "StorageType", "sysType": "SysType", "updatedDate": "2019-01-01T12:00:00.000Z", "virtualCores": {"assigned": 8, "max": 3, "min": 3}, "volumeIDs": ["VolumeIDs"]}`)
				}))
			})
			It(`Invoke PcloudPvminstancesGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPvminstancesGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudPvminstancesGetOptions model
				pcloudPvminstancesGetOptionsModel := new(powervsv1.PcloudPvminstancesGetOptions)
				pcloudPvminstancesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPvminstancesGet(pcloudPvminstancesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPvminstancesGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesGetOptions model
				pcloudPvminstancesGetOptionsModel := new(powervsv1.PcloudPvminstancesGetOptions)
				pcloudPvminstancesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPvminstancesGet(pcloudPvminstancesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPvminstancesGetOptions model with no property values
				pcloudPvminstancesGetOptionsModelNew := new(powervsv1.PcloudPvminstancesGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPvminstancesGet(pcloudPvminstancesGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudPvminstancesGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesGetOptions model
				pcloudPvminstancesGetOptionsModel := new(powervsv1.PcloudPvminstancesGetOptions)
				pcloudPvminstancesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPvminstancesGet(pcloudPvminstancesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesPut(pcloudPvminstancesPutOptions *PcloudPvminstancesPutOptions) - Operation response error`, func() {
		pcloudPvminstancesPutPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesPutPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPvminstancesPut with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the CloudInitialization model
				cloudInitializationModel := new(powervsv1.CloudInitialization)
				cloudInitializationModel.VirtualOpticalDevice = core.StringPtr("attach")

				// Construct an instance of the SoftwareLicenses model
				softwareLicensesModel := new(powervsv1.SoftwareLicenses)
				softwareLicensesModel.IbmiCss = core.BoolPtr(false)
				softwareLicensesModel.IbmiDbq = core.BoolPtr(false)
				softwareLicensesModel.IbmiPha = core.BoolPtr(false)
				softwareLicensesModel.IbmiRds = core.BoolPtr(false)
				softwareLicensesModel.IbmiRdsUsers = core.Int64Ptr(int64(38))

				// Construct an instance of the VirtualCores model
				virtualCoresModel := new(powervsv1.VirtualCores)
				virtualCoresModel.Assigned = core.Int64Ptr(int64(38))
				virtualCoresModel.Max = core.Int64Ptr(int64(38))
				virtualCoresModel.Min = core.Int64Ptr(int64(38))

				// Construct an instance of the PcloudPvminstancesPutOptions model
				pcloudPvminstancesPutOptionsModel := new(powervsv1.PcloudPvminstancesPutOptions)
				pcloudPvminstancesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesPutOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesPutOptionsModel.CloudInitialization = cloudInitializationModel
				pcloudPvminstancesPutOptionsModel.LicenseRepositoryCapacity = core.Int64Ptr(int64(38))
				pcloudPvminstancesPutOptionsModel.Memory = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesPutOptionsModel.Migratable = core.BoolPtr(true)
				pcloudPvminstancesPutOptionsModel.PinPolicy = core.StringPtr("none")
				pcloudPvminstancesPutOptionsModel.ProcType = core.StringPtr("dedicated")
				pcloudPvminstancesPutOptionsModel.Processors = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesPutOptionsModel.SapProfileID = core.StringPtr("testString")
				pcloudPvminstancesPutOptionsModel.ServerName = core.StringPtr("testString")
				pcloudPvminstancesPutOptionsModel.SoftwareLicenses = softwareLicensesModel
				pcloudPvminstancesPutOptionsModel.StoragePoolAffinity = core.BoolPtr(true)
				pcloudPvminstancesPutOptionsModel.VirtualCores = virtualCoresModel
				pcloudPvminstancesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPvminstancesPut(pcloudPvminstancesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPvminstancesPut(pcloudPvminstancesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesPut(pcloudPvminstancesPutOptions *PcloudPvminstancesPutOptions)`, func() {
		pcloudPvminstancesPutPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"licenseRepositoryCapacity": 25, "memory": 6, "pinPolicy": "none", "procType": "dedicated", "processors": 10, "serverName": "ServerName", "statusUrl": "StatusURL"}`)
				}))
			})
			It(`Invoke PcloudPvminstancesPut successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the CloudInitialization model
				cloudInitializationModel := new(powervsv1.CloudInitialization)
				cloudInitializationModel.VirtualOpticalDevice = core.StringPtr("attach")

				// Construct an instance of the SoftwareLicenses model
				softwareLicensesModel := new(powervsv1.SoftwareLicenses)
				softwareLicensesModel.IbmiCss = core.BoolPtr(false)
				softwareLicensesModel.IbmiDbq = core.BoolPtr(false)
				softwareLicensesModel.IbmiPha = core.BoolPtr(false)
				softwareLicensesModel.IbmiRds = core.BoolPtr(false)
				softwareLicensesModel.IbmiRdsUsers = core.Int64Ptr(int64(38))

				// Construct an instance of the VirtualCores model
				virtualCoresModel := new(powervsv1.VirtualCores)
				virtualCoresModel.Assigned = core.Int64Ptr(int64(38))
				virtualCoresModel.Max = core.Int64Ptr(int64(38))
				virtualCoresModel.Min = core.Int64Ptr(int64(38))

				// Construct an instance of the PcloudPvminstancesPutOptions model
				pcloudPvminstancesPutOptionsModel := new(powervsv1.PcloudPvminstancesPutOptions)
				pcloudPvminstancesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesPutOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesPutOptionsModel.CloudInitialization = cloudInitializationModel
				pcloudPvminstancesPutOptionsModel.LicenseRepositoryCapacity = core.Int64Ptr(int64(38))
				pcloudPvminstancesPutOptionsModel.Memory = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesPutOptionsModel.Migratable = core.BoolPtr(true)
				pcloudPvminstancesPutOptionsModel.PinPolicy = core.StringPtr("none")
				pcloudPvminstancesPutOptionsModel.ProcType = core.StringPtr("dedicated")
				pcloudPvminstancesPutOptionsModel.Processors = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesPutOptionsModel.SapProfileID = core.StringPtr("testString")
				pcloudPvminstancesPutOptionsModel.ServerName = core.StringPtr("testString")
				pcloudPvminstancesPutOptionsModel.SoftwareLicenses = softwareLicensesModel
				pcloudPvminstancesPutOptionsModel.StoragePoolAffinity = core.BoolPtr(true)
				pcloudPvminstancesPutOptionsModel.VirtualCores = virtualCoresModel
				pcloudPvminstancesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPvminstancesPutWithContext(ctx, pcloudPvminstancesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPvminstancesPut(pcloudPvminstancesPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPvminstancesPutWithContext(ctx, pcloudPvminstancesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"licenseRepositoryCapacity": 25, "memory": 6, "pinPolicy": "none", "procType": "dedicated", "processors": 10, "serverName": "ServerName", "statusUrl": "StatusURL"}`)
				}))
			})
			It(`Invoke PcloudPvminstancesPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPvminstancesPut(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CloudInitialization model
				cloudInitializationModel := new(powervsv1.CloudInitialization)
				cloudInitializationModel.VirtualOpticalDevice = core.StringPtr("attach")

				// Construct an instance of the SoftwareLicenses model
				softwareLicensesModel := new(powervsv1.SoftwareLicenses)
				softwareLicensesModel.IbmiCss = core.BoolPtr(false)
				softwareLicensesModel.IbmiDbq = core.BoolPtr(false)
				softwareLicensesModel.IbmiPha = core.BoolPtr(false)
				softwareLicensesModel.IbmiRds = core.BoolPtr(false)
				softwareLicensesModel.IbmiRdsUsers = core.Int64Ptr(int64(38))

				// Construct an instance of the VirtualCores model
				virtualCoresModel := new(powervsv1.VirtualCores)
				virtualCoresModel.Assigned = core.Int64Ptr(int64(38))
				virtualCoresModel.Max = core.Int64Ptr(int64(38))
				virtualCoresModel.Min = core.Int64Ptr(int64(38))

				// Construct an instance of the PcloudPvminstancesPutOptions model
				pcloudPvminstancesPutOptionsModel := new(powervsv1.PcloudPvminstancesPutOptions)
				pcloudPvminstancesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesPutOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesPutOptionsModel.CloudInitialization = cloudInitializationModel
				pcloudPvminstancesPutOptionsModel.LicenseRepositoryCapacity = core.Int64Ptr(int64(38))
				pcloudPvminstancesPutOptionsModel.Memory = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesPutOptionsModel.Migratable = core.BoolPtr(true)
				pcloudPvminstancesPutOptionsModel.PinPolicy = core.StringPtr("none")
				pcloudPvminstancesPutOptionsModel.ProcType = core.StringPtr("dedicated")
				pcloudPvminstancesPutOptionsModel.Processors = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesPutOptionsModel.SapProfileID = core.StringPtr("testString")
				pcloudPvminstancesPutOptionsModel.ServerName = core.StringPtr("testString")
				pcloudPvminstancesPutOptionsModel.SoftwareLicenses = softwareLicensesModel
				pcloudPvminstancesPutOptionsModel.StoragePoolAffinity = core.BoolPtr(true)
				pcloudPvminstancesPutOptionsModel.VirtualCores = virtualCoresModel
				pcloudPvminstancesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPvminstancesPut(pcloudPvminstancesPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPvminstancesPut with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the CloudInitialization model
				cloudInitializationModel := new(powervsv1.CloudInitialization)
				cloudInitializationModel.VirtualOpticalDevice = core.StringPtr("attach")

				// Construct an instance of the SoftwareLicenses model
				softwareLicensesModel := new(powervsv1.SoftwareLicenses)
				softwareLicensesModel.IbmiCss = core.BoolPtr(false)
				softwareLicensesModel.IbmiDbq = core.BoolPtr(false)
				softwareLicensesModel.IbmiPha = core.BoolPtr(false)
				softwareLicensesModel.IbmiRds = core.BoolPtr(false)
				softwareLicensesModel.IbmiRdsUsers = core.Int64Ptr(int64(38))

				// Construct an instance of the VirtualCores model
				virtualCoresModel := new(powervsv1.VirtualCores)
				virtualCoresModel.Assigned = core.Int64Ptr(int64(38))
				virtualCoresModel.Max = core.Int64Ptr(int64(38))
				virtualCoresModel.Min = core.Int64Ptr(int64(38))

				// Construct an instance of the PcloudPvminstancesPutOptions model
				pcloudPvminstancesPutOptionsModel := new(powervsv1.PcloudPvminstancesPutOptions)
				pcloudPvminstancesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesPutOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesPutOptionsModel.CloudInitialization = cloudInitializationModel
				pcloudPvminstancesPutOptionsModel.LicenseRepositoryCapacity = core.Int64Ptr(int64(38))
				pcloudPvminstancesPutOptionsModel.Memory = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesPutOptionsModel.Migratable = core.BoolPtr(true)
				pcloudPvminstancesPutOptionsModel.PinPolicy = core.StringPtr("none")
				pcloudPvminstancesPutOptionsModel.ProcType = core.StringPtr("dedicated")
				pcloudPvminstancesPutOptionsModel.Processors = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesPutOptionsModel.SapProfileID = core.StringPtr("testString")
				pcloudPvminstancesPutOptionsModel.ServerName = core.StringPtr("testString")
				pcloudPvminstancesPutOptionsModel.SoftwareLicenses = softwareLicensesModel
				pcloudPvminstancesPutOptionsModel.StoragePoolAffinity = core.BoolPtr(true)
				pcloudPvminstancesPutOptionsModel.VirtualCores = virtualCoresModel
				pcloudPvminstancesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPvminstancesPut(pcloudPvminstancesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPvminstancesPutOptions model with no property values
				pcloudPvminstancesPutOptionsModelNew := new(powervsv1.PcloudPvminstancesPutOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPvminstancesPut(pcloudPvminstancesPutOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudPvminstancesPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the CloudInitialization model
				cloudInitializationModel := new(powervsv1.CloudInitialization)
				cloudInitializationModel.VirtualOpticalDevice = core.StringPtr("attach")

				// Construct an instance of the SoftwareLicenses model
				softwareLicensesModel := new(powervsv1.SoftwareLicenses)
				softwareLicensesModel.IbmiCss = core.BoolPtr(false)
				softwareLicensesModel.IbmiDbq = core.BoolPtr(false)
				softwareLicensesModel.IbmiPha = core.BoolPtr(false)
				softwareLicensesModel.IbmiRds = core.BoolPtr(false)
				softwareLicensesModel.IbmiRdsUsers = core.Int64Ptr(int64(38))

				// Construct an instance of the VirtualCores model
				virtualCoresModel := new(powervsv1.VirtualCores)
				virtualCoresModel.Assigned = core.Int64Ptr(int64(38))
				virtualCoresModel.Max = core.Int64Ptr(int64(38))
				virtualCoresModel.Min = core.Int64Ptr(int64(38))

				// Construct an instance of the PcloudPvminstancesPutOptions model
				pcloudPvminstancesPutOptionsModel := new(powervsv1.PcloudPvminstancesPutOptions)
				pcloudPvminstancesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesPutOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesPutOptionsModel.CloudInitialization = cloudInitializationModel
				pcloudPvminstancesPutOptionsModel.LicenseRepositoryCapacity = core.Int64Ptr(int64(38))
				pcloudPvminstancesPutOptionsModel.Memory = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesPutOptionsModel.Migratable = core.BoolPtr(true)
				pcloudPvminstancesPutOptionsModel.PinPolicy = core.StringPtr("none")
				pcloudPvminstancesPutOptionsModel.ProcType = core.StringPtr("dedicated")
				pcloudPvminstancesPutOptionsModel.Processors = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesPutOptionsModel.SapProfileID = core.StringPtr("testString")
				pcloudPvminstancesPutOptionsModel.ServerName = core.StringPtr("testString")
				pcloudPvminstancesPutOptionsModel.SoftwareLicenses = softwareLicensesModel
				pcloudPvminstancesPutOptionsModel.StoragePoolAffinity = core.BoolPtr(true)
				pcloudPvminstancesPutOptionsModel.VirtualCores = virtualCoresModel
				pcloudPvminstancesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPvminstancesPut(pcloudPvminstancesPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesActionPost(pcloudPvminstancesActionPostOptions *PcloudPvminstancesActionPostOptions) - Operation response error`, func() {
		pcloudPvminstancesActionPostPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/action"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesActionPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPvminstancesActionPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesActionPostOptions model
				pcloudPvminstancesActionPostOptionsModel := new(powervsv1.PcloudPvminstancesActionPostOptions)
				pcloudPvminstancesActionPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesActionPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesActionPostOptionsModel.Action = core.StringPtr("start")
				pcloudPvminstancesActionPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPvminstancesActionPost(pcloudPvminstancesActionPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPvminstancesActionPost(pcloudPvminstancesActionPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesActionPost(pcloudPvminstancesActionPostOptions *PcloudPvminstancesActionPostOptions)`, func() {
		pcloudPvminstancesActionPostPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/action"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesActionPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudPvminstancesActionPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudPvminstancesActionPostOptions model
				pcloudPvminstancesActionPostOptionsModel := new(powervsv1.PcloudPvminstancesActionPostOptions)
				pcloudPvminstancesActionPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesActionPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesActionPostOptionsModel.Action = core.StringPtr("start")
				pcloudPvminstancesActionPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPvminstancesActionPostWithContext(ctx, pcloudPvminstancesActionPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPvminstancesActionPost(pcloudPvminstancesActionPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPvminstancesActionPostWithContext(ctx, pcloudPvminstancesActionPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesActionPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudPvminstancesActionPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPvminstancesActionPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudPvminstancesActionPostOptions model
				pcloudPvminstancesActionPostOptionsModel := new(powervsv1.PcloudPvminstancesActionPostOptions)
				pcloudPvminstancesActionPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesActionPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesActionPostOptionsModel.Action = core.StringPtr("start")
				pcloudPvminstancesActionPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPvminstancesActionPost(pcloudPvminstancesActionPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPvminstancesActionPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesActionPostOptions model
				pcloudPvminstancesActionPostOptionsModel := new(powervsv1.PcloudPvminstancesActionPostOptions)
				pcloudPvminstancesActionPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesActionPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesActionPostOptionsModel.Action = core.StringPtr("start")
				pcloudPvminstancesActionPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPvminstancesActionPost(pcloudPvminstancesActionPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPvminstancesActionPostOptions model with no property values
				pcloudPvminstancesActionPostOptionsModelNew := new(powervsv1.PcloudPvminstancesActionPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPvminstancesActionPost(pcloudPvminstancesActionPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudPvminstancesActionPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesActionPostOptions model
				pcloudPvminstancesActionPostOptionsModel := new(powervsv1.PcloudPvminstancesActionPostOptions)
				pcloudPvminstancesActionPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesActionPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesActionPostOptionsModel.Action = core.StringPtr("start")
				pcloudPvminstancesActionPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPvminstancesActionPost(pcloudPvminstancesActionPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesCapturePost(pcloudPvminstancesCapturePostOptions *PcloudPvminstancesCapturePostOptions) - Operation response error`, func() {
		pcloudPvminstancesCapturePostPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/capture"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesCapturePostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPvminstancesCapturePost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesCapturePostOptions model
				pcloudPvminstancesCapturePostOptionsModel := new(powervsv1.PcloudPvminstancesCapturePostOptions)
				pcloudPvminstancesCapturePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.CaptureDestination = core.StringPtr("cloud-storage")
				pcloudPvminstancesCapturePostOptionsModel.CaptureName = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.CaptureVolumeIDs = []string{"testString"}
				pcloudPvminstancesCapturePostOptionsModel.CloudStorageAccessKey = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.CloudStorageImagePath = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.CloudStorageRegion = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.CloudStorageSecretKey = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPvminstancesCapturePost(pcloudPvminstancesCapturePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPvminstancesCapturePost(pcloudPvminstancesCapturePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesCapturePost(pcloudPvminstancesCapturePostOptions *PcloudPvminstancesCapturePostOptions)`, func() {
		pcloudPvminstancesCapturePostPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/capture"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesCapturePostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudPvminstancesCapturePost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudPvminstancesCapturePostOptions model
				pcloudPvminstancesCapturePostOptionsModel := new(powervsv1.PcloudPvminstancesCapturePostOptions)
				pcloudPvminstancesCapturePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.CaptureDestination = core.StringPtr("cloud-storage")
				pcloudPvminstancesCapturePostOptionsModel.CaptureName = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.CaptureVolumeIDs = []string{"testString"}
				pcloudPvminstancesCapturePostOptionsModel.CloudStorageAccessKey = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.CloudStorageImagePath = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.CloudStorageRegion = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.CloudStorageSecretKey = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPvminstancesCapturePostWithContext(ctx, pcloudPvminstancesCapturePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPvminstancesCapturePost(pcloudPvminstancesCapturePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPvminstancesCapturePostWithContext(ctx, pcloudPvminstancesCapturePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesCapturePostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudPvminstancesCapturePost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPvminstancesCapturePost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudPvminstancesCapturePostOptions model
				pcloudPvminstancesCapturePostOptionsModel := new(powervsv1.PcloudPvminstancesCapturePostOptions)
				pcloudPvminstancesCapturePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.CaptureDestination = core.StringPtr("cloud-storage")
				pcloudPvminstancesCapturePostOptionsModel.CaptureName = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.CaptureVolumeIDs = []string{"testString"}
				pcloudPvminstancesCapturePostOptionsModel.CloudStorageAccessKey = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.CloudStorageImagePath = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.CloudStorageRegion = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.CloudStorageSecretKey = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPvminstancesCapturePost(pcloudPvminstancesCapturePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPvminstancesCapturePost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesCapturePostOptions model
				pcloudPvminstancesCapturePostOptionsModel := new(powervsv1.PcloudPvminstancesCapturePostOptions)
				pcloudPvminstancesCapturePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.CaptureDestination = core.StringPtr("cloud-storage")
				pcloudPvminstancesCapturePostOptionsModel.CaptureName = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.CaptureVolumeIDs = []string{"testString"}
				pcloudPvminstancesCapturePostOptionsModel.CloudStorageAccessKey = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.CloudStorageImagePath = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.CloudStorageRegion = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.CloudStorageSecretKey = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPvminstancesCapturePost(pcloudPvminstancesCapturePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPvminstancesCapturePostOptions model with no property values
				pcloudPvminstancesCapturePostOptionsModelNew := new(powervsv1.PcloudPvminstancesCapturePostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPvminstancesCapturePost(pcloudPvminstancesCapturePostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudPvminstancesCapturePost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesCapturePostOptions model
				pcloudPvminstancesCapturePostOptionsModel := new(powervsv1.PcloudPvminstancesCapturePostOptions)
				pcloudPvminstancesCapturePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.CaptureDestination = core.StringPtr("cloud-storage")
				pcloudPvminstancesCapturePostOptionsModel.CaptureName = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.CaptureVolumeIDs = []string{"testString"}
				pcloudPvminstancesCapturePostOptionsModel.CloudStorageAccessKey = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.CloudStorageImagePath = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.CloudStorageRegion = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.CloudStorageSecretKey = core.StringPtr("testString")
				pcloudPvminstancesCapturePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPvminstancesCapturePost(pcloudPvminstancesCapturePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesClonePost(pcloudPvminstancesClonePostOptions *PcloudPvminstancesClonePostOptions) - Operation response error`, func() {
		pcloudPvminstancesClonePostPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/clone"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesClonePostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPvminstancesClonePost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PvmInstanceAddNetwork model
				pvmInstanceAddNetworkModel := new(powervsv1.PvmInstanceAddNetwork)
				pvmInstanceAddNetworkModel.IPAddress = core.StringPtr("testString")
				pvmInstanceAddNetworkModel.NetworkID = core.StringPtr("testString")

				// Construct an instance of the SoftwareLicenses model
				softwareLicensesModel := new(powervsv1.SoftwareLicenses)
				softwareLicensesModel.IbmiCss = core.BoolPtr(false)
				softwareLicensesModel.IbmiDbq = core.BoolPtr(false)
				softwareLicensesModel.IbmiPha = core.BoolPtr(false)
				softwareLicensesModel.IbmiRds = core.BoolPtr(false)
				softwareLicensesModel.IbmiRdsUsers = core.Int64Ptr(int64(38))

				// Construct an instance of the PcloudPvminstancesClonePostOptions model
				pcloudPvminstancesClonePostOptionsModel := new(powervsv1.PcloudPvminstancesClonePostOptions)
				pcloudPvminstancesClonePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesClonePostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesClonePostOptionsModel.Name = core.StringPtr("testString")
				pcloudPvminstancesClonePostOptionsModel.Networks = []powervsv1.PvmInstanceAddNetwork{*pvmInstanceAddNetworkModel}
				pcloudPvminstancesClonePostOptionsModel.KeyPairName = core.StringPtr("testString")
				pcloudPvminstancesClonePostOptionsModel.Memory = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesClonePostOptionsModel.ProcType = core.StringPtr("dedicated")
				pcloudPvminstancesClonePostOptionsModel.Processors = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesClonePostOptionsModel.SoftwareLicenses = softwareLicensesModel
				pcloudPvminstancesClonePostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudPvminstancesClonePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPvminstancesClonePost(pcloudPvminstancesClonePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPvminstancesClonePost(pcloudPvminstancesClonePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesClonePost(pcloudPvminstancesClonePostOptions *PcloudPvminstancesClonePostOptions)`, func() {
		pcloudPvminstancesClonePostPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/clone"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesClonePostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"addresses": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}], "consoleLanguage": {"code": "Code", "language": "Language"}, "creationDate": "2019-01-01T12:00:00.000Z", "deploymentType": "DeploymentType", "diskSize": 8, "fault": {"code": 4, "created": "2019-01-01T12:00:00.000Z", "details": "Details", "message": "Message"}, "health": {"lastUpdate": "LastUpdate", "reason": "Reason", "status": "Status"}, "hostID": 6, "imageID": "ImageID", "licenseRepositoryCapacity": 25, "maxmem": 6, "maxproc": 7, "memory": 6, "migratable": true, "minmem": 6, "minproc": 7, "networkIDs": ["NetworkIDs"], "networks": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}], "operatingSystem": "OperatingSystem", "osType": "OsType", "pinPolicy": "PinPolicy", "placementGroup": "none", "procType": "dedicated", "processors": 10, "progress": 8, "pvmInstanceID": "PvmInstanceID", "sapProfile": {"href": "Href", "profileID": "ProfileID"}, "serverName": "ServerName", "sharedProcessorPool": "SharedProcessorPool", "sharedProcessorPoolID": "SharedProcessorPoolID", "softwareLicenses": {"ibmiCSS": false, "ibmiDBQ": false, "ibmiPHA": false, "ibmiRDS": false, "ibmiRDSUsers": 12}, "srcs": [[{"src": "Src", "timestamp": "Timestamp"}]], "status": "Status", "storageConnection": "StorageConnection", "storagePool": "StoragePool", "storagePoolAffinity": true, "storageType": "StorageType", "sysType": "SysType", "updatedDate": "2019-01-01T12:00:00.000Z", "virtualCores": {"assigned": 8, "max": 3, "min": 3}, "volumeIDs": ["VolumeIDs"]}`)
				}))
			})
			It(`Invoke PcloudPvminstancesClonePost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PvmInstanceAddNetwork model
				pvmInstanceAddNetworkModel := new(powervsv1.PvmInstanceAddNetwork)
				pvmInstanceAddNetworkModel.IPAddress = core.StringPtr("testString")
				pvmInstanceAddNetworkModel.NetworkID = core.StringPtr("testString")

				// Construct an instance of the SoftwareLicenses model
				softwareLicensesModel := new(powervsv1.SoftwareLicenses)
				softwareLicensesModel.IbmiCss = core.BoolPtr(false)
				softwareLicensesModel.IbmiDbq = core.BoolPtr(false)
				softwareLicensesModel.IbmiPha = core.BoolPtr(false)
				softwareLicensesModel.IbmiRds = core.BoolPtr(false)
				softwareLicensesModel.IbmiRdsUsers = core.Int64Ptr(int64(38))

				// Construct an instance of the PcloudPvminstancesClonePostOptions model
				pcloudPvminstancesClonePostOptionsModel := new(powervsv1.PcloudPvminstancesClonePostOptions)
				pcloudPvminstancesClonePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesClonePostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesClonePostOptionsModel.Name = core.StringPtr("testString")
				pcloudPvminstancesClonePostOptionsModel.Networks = []powervsv1.PvmInstanceAddNetwork{*pvmInstanceAddNetworkModel}
				pcloudPvminstancesClonePostOptionsModel.KeyPairName = core.StringPtr("testString")
				pcloudPvminstancesClonePostOptionsModel.Memory = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesClonePostOptionsModel.ProcType = core.StringPtr("dedicated")
				pcloudPvminstancesClonePostOptionsModel.Processors = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesClonePostOptionsModel.SoftwareLicenses = softwareLicensesModel
				pcloudPvminstancesClonePostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudPvminstancesClonePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPvminstancesClonePostWithContext(ctx, pcloudPvminstancesClonePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPvminstancesClonePost(pcloudPvminstancesClonePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPvminstancesClonePostWithContext(ctx, pcloudPvminstancesClonePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesClonePostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"addresses": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}], "consoleLanguage": {"code": "Code", "language": "Language"}, "creationDate": "2019-01-01T12:00:00.000Z", "deploymentType": "DeploymentType", "diskSize": 8, "fault": {"code": 4, "created": "2019-01-01T12:00:00.000Z", "details": "Details", "message": "Message"}, "health": {"lastUpdate": "LastUpdate", "reason": "Reason", "status": "Status"}, "hostID": 6, "imageID": "ImageID", "licenseRepositoryCapacity": 25, "maxmem": 6, "maxproc": 7, "memory": 6, "migratable": true, "minmem": 6, "minproc": 7, "networkIDs": ["NetworkIDs"], "networks": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}], "operatingSystem": "OperatingSystem", "osType": "OsType", "pinPolicy": "PinPolicy", "placementGroup": "none", "procType": "dedicated", "processors": 10, "progress": 8, "pvmInstanceID": "PvmInstanceID", "sapProfile": {"href": "Href", "profileID": "ProfileID"}, "serverName": "ServerName", "sharedProcessorPool": "SharedProcessorPool", "sharedProcessorPoolID": "SharedProcessorPoolID", "softwareLicenses": {"ibmiCSS": false, "ibmiDBQ": false, "ibmiPHA": false, "ibmiRDS": false, "ibmiRDSUsers": 12}, "srcs": [[{"src": "Src", "timestamp": "Timestamp"}]], "status": "Status", "storageConnection": "StorageConnection", "storagePool": "StoragePool", "storagePoolAffinity": true, "storageType": "StorageType", "sysType": "SysType", "updatedDate": "2019-01-01T12:00:00.000Z", "virtualCores": {"assigned": 8, "max": 3, "min": 3}, "volumeIDs": ["VolumeIDs"]}`)
				}))
			})
			It(`Invoke PcloudPvminstancesClonePost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPvminstancesClonePost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PvmInstanceAddNetwork model
				pvmInstanceAddNetworkModel := new(powervsv1.PvmInstanceAddNetwork)
				pvmInstanceAddNetworkModel.IPAddress = core.StringPtr("testString")
				pvmInstanceAddNetworkModel.NetworkID = core.StringPtr("testString")

				// Construct an instance of the SoftwareLicenses model
				softwareLicensesModel := new(powervsv1.SoftwareLicenses)
				softwareLicensesModel.IbmiCss = core.BoolPtr(false)
				softwareLicensesModel.IbmiDbq = core.BoolPtr(false)
				softwareLicensesModel.IbmiPha = core.BoolPtr(false)
				softwareLicensesModel.IbmiRds = core.BoolPtr(false)
				softwareLicensesModel.IbmiRdsUsers = core.Int64Ptr(int64(38))

				// Construct an instance of the PcloudPvminstancesClonePostOptions model
				pcloudPvminstancesClonePostOptionsModel := new(powervsv1.PcloudPvminstancesClonePostOptions)
				pcloudPvminstancesClonePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesClonePostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesClonePostOptionsModel.Name = core.StringPtr("testString")
				pcloudPvminstancesClonePostOptionsModel.Networks = []powervsv1.PvmInstanceAddNetwork{*pvmInstanceAddNetworkModel}
				pcloudPvminstancesClonePostOptionsModel.KeyPairName = core.StringPtr("testString")
				pcloudPvminstancesClonePostOptionsModel.Memory = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesClonePostOptionsModel.ProcType = core.StringPtr("dedicated")
				pcloudPvminstancesClonePostOptionsModel.Processors = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesClonePostOptionsModel.SoftwareLicenses = softwareLicensesModel
				pcloudPvminstancesClonePostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudPvminstancesClonePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPvminstancesClonePost(pcloudPvminstancesClonePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPvminstancesClonePost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PvmInstanceAddNetwork model
				pvmInstanceAddNetworkModel := new(powervsv1.PvmInstanceAddNetwork)
				pvmInstanceAddNetworkModel.IPAddress = core.StringPtr("testString")
				pvmInstanceAddNetworkModel.NetworkID = core.StringPtr("testString")

				// Construct an instance of the SoftwareLicenses model
				softwareLicensesModel := new(powervsv1.SoftwareLicenses)
				softwareLicensesModel.IbmiCss = core.BoolPtr(false)
				softwareLicensesModel.IbmiDbq = core.BoolPtr(false)
				softwareLicensesModel.IbmiPha = core.BoolPtr(false)
				softwareLicensesModel.IbmiRds = core.BoolPtr(false)
				softwareLicensesModel.IbmiRdsUsers = core.Int64Ptr(int64(38))

				// Construct an instance of the PcloudPvminstancesClonePostOptions model
				pcloudPvminstancesClonePostOptionsModel := new(powervsv1.PcloudPvminstancesClonePostOptions)
				pcloudPvminstancesClonePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesClonePostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesClonePostOptionsModel.Name = core.StringPtr("testString")
				pcloudPvminstancesClonePostOptionsModel.Networks = []powervsv1.PvmInstanceAddNetwork{*pvmInstanceAddNetworkModel}
				pcloudPvminstancesClonePostOptionsModel.KeyPairName = core.StringPtr("testString")
				pcloudPvminstancesClonePostOptionsModel.Memory = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesClonePostOptionsModel.ProcType = core.StringPtr("dedicated")
				pcloudPvminstancesClonePostOptionsModel.Processors = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesClonePostOptionsModel.SoftwareLicenses = softwareLicensesModel
				pcloudPvminstancesClonePostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudPvminstancesClonePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPvminstancesClonePost(pcloudPvminstancesClonePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPvminstancesClonePostOptions model with no property values
				pcloudPvminstancesClonePostOptionsModelNew := new(powervsv1.PcloudPvminstancesClonePostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPvminstancesClonePost(pcloudPvminstancesClonePostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudPvminstancesClonePost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PvmInstanceAddNetwork model
				pvmInstanceAddNetworkModel := new(powervsv1.PvmInstanceAddNetwork)
				pvmInstanceAddNetworkModel.IPAddress = core.StringPtr("testString")
				pvmInstanceAddNetworkModel.NetworkID = core.StringPtr("testString")

				// Construct an instance of the SoftwareLicenses model
				softwareLicensesModel := new(powervsv1.SoftwareLicenses)
				softwareLicensesModel.IbmiCss = core.BoolPtr(false)
				softwareLicensesModel.IbmiDbq = core.BoolPtr(false)
				softwareLicensesModel.IbmiPha = core.BoolPtr(false)
				softwareLicensesModel.IbmiRds = core.BoolPtr(false)
				softwareLicensesModel.IbmiRdsUsers = core.Int64Ptr(int64(38))

				// Construct an instance of the PcloudPvminstancesClonePostOptions model
				pcloudPvminstancesClonePostOptionsModel := new(powervsv1.PcloudPvminstancesClonePostOptions)
				pcloudPvminstancesClonePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesClonePostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesClonePostOptionsModel.Name = core.StringPtr("testString")
				pcloudPvminstancesClonePostOptionsModel.Networks = []powervsv1.PvmInstanceAddNetwork{*pvmInstanceAddNetworkModel}
				pcloudPvminstancesClonePostOptionsModel.KeyPairName = core.StringPtr("testString")
				pcloudPvminstancesClonePostOptionsModel.Memory = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesClonePostOptionsModel.ProcType = core.StringPtr("dedicated")
				pcloudPvminstancesClonePostOptionsModel.Processors = core.Float64Ptr(float64(72.5))
				pcloudPvminstancesClonePostOptionsModel.SoftwareLicenses = softwareLicensesModel
				pcloudPvminstancesClonePostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudPvminstancesClonePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPvminstancesClonePost(pcloudPvminstancesClonePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesConsoleGet(pcloudPvminstancesConsoleGetOptions *PcloudPvminstancesConsoleGetOptions) - Operation response error`, func() {
		pcloudPvminstancesConsoleGetPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/console"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesConsoleGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPvminstancesConsoleGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesConsoleGetOptions model
				pcloudPvminstancesConsoleGetOptionsModel := new(powervsv1.PcloudPvminstancesConsoleGetOptions)
				pcloudPvminstancesConsoleGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsoleGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsoleGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPvminstancesConsoleGet(pcloudPvminstancesConsoleGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPvminstancesConsoleGet(pcloudPvminstancesConsoleGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesConsoleGet(pcloudPvminstancesConsoleGetOptions *PcloudPvminstancesConsoleGetOptions)`, func() {
		pcloudPvminstancesConsoleGetPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/console"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesConsoleGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"consoleLanguages": [{"code": "Code", "language": "Language"}]}`)
				}))
			})
			It(`Invoke PcloudPvminstancesConsoleGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudPvminstancesConsoleGetOptions model
				pcloudPvminstancesConsoleGetOptionsModel := new(powervsv1.PcloudPvminstancesConsoleGetOptions)
				pcloudPvminstancesConsoleGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsoleGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsoleGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPvminstancesConsoleGetWithContext(ctx, pcloudPvminstancesConsoleGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPvminstancesConsoleGet(pcloudPvminstancesConsoleGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPvminstancesConsoleGetWithContext(ctx, pcloudPvminstancesConsoleGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesConsoleGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"consoleLanguages": [{"code": "Code", "language": "Language"}]}`)
				}))
			})
			It(`Invoke PcloudPvminstancesConsoleGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPvminstancesConsoleGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudPvminstancesConsoleGetOptions model
				pcloudPvminstancesConsoleGetOptionsModel := new(powervsv1.PcloudPvminstancesConsoleGetOptions)
				pcloudPvminstancesConsoleGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsoleGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsoleGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPvminstancesConsoleGet(pcloudPvminstancesConsoleGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPvminstancesConsoleGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesConsoleGetOptions model
				pcloudPvminstancesConsoleGetOptionsModel := new(powervsv1.PcloudPvminstancesConsoleGetOptions)
				pcloudPvminstancesConsoleGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsoleGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsoleGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPvminstancesConsoleGet(pcloudPvminstancesConsoleGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPvminstancesConsoleGetOptions model with no property values
				pcloudPvminstancesConsoleGetOptionsModelNew := new(powervsv1.PcloudPvminstancesConsoleGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPvminstancesConsoleGet(pcloudPvminstancesConsoleGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudPvminstancesConsoleGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesConsoleGetOptions model
				pcloudPvminstancesConsoleGetOptionsModel := new(powervsv1.PcloudPvminstancesConsoleGetOptions)
				pcloudPvminstancesConsoleGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsoleGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsoleGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPvminstancesConsoleGet(pcloudPvminstancesConsoleGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesConsolePost(pcloudPvminstancesConsolePostOptions *PcloudPvminstancesConsolePostOptions) - Operation response error`, func() {
		pcloudPvminstancesConsolePostPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/console"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesConsolePostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPvminstancesConsolePost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesConsolePostOptions model
				pcloudPvminstancesConsolePostOptionsModel := new(powervsv1.PcloudPvminstancesConsolePostOptions)
				pcloudPvminstancesConsolePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsolePostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsolePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPvminstancesConsolePost(pcloudPvminstancesConsolePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPvminstancesConsolePost(pcloudPvminstancesConsolePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesConsolePost(pcloudPvminstancesConsolePostOptions *PcloudPvminstancesConsolePostOptions)`, func() {
		pcloudPvminstancesConsolePostPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/console"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesConsolePostPath))
					Expect(req.Method).To(Equal("POST"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"consoleURL": "ConsoleURL"}`)
				}))
			})
			It(`Invoke PcloudPvminstancesConsolePost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudPvminstancesConsolePostOptions model
				pcloudPvminstancesConsolePostOptionsModel := new(powervsv1.PcloudPvminstancesConsolePostOptions)
				pcloudPvminstancesConsolePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsolePostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsolePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPvminstancesConsolePostWithContext(ctx, pcloudPvminstancesConsolePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPvminstancesConsolePost(pcloudPvminstancesConsolePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPvminstancesConsolePostWithContext(ctx, pcloudPvminstancesConsolePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesConsolePostPath))
					Expect(req.Method).To(Equal("POST"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"consoleURL": "ConsoleURL"}`)
				}))
			})
			It(`Invoke PcloudPvminstancesConsolePost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPvminstancesConsolePost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudPvminstancesConsolePostOptions model
				pcloudPvminstancesConsolePostOptionsModel := new(powervsv1.PcloudPvminstancesConsolePostOptions)
				pcloudPvminstancesConsolePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsolePostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsolePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPvminstancesConsolePost(pcloudPvminstancesConsolePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPvminstancesConsolePost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesConsolePostOptions model
				pcloudPvminstancesConsolePostOptionsModel := new(powervsv1.PcloudPvminstancesConsolePostOptions)
				pcloudPvminstancesConsolePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsolePostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsolePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPvminstancesConsolePost(pcloudPvminstancesConsolePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPvminstancesConsolePostOptions model with no property values
				pcloudPvminstancesConsolePostOptionsModelNew := new(powervsv1.PcloudPvminstancesConsolePostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPvminstancesConsolePost(pcloudPvminstancesConsolePostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke PcloudPvminstancesConsolePost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesConsolePostOptions model
				pcloudPvminstancesConsolePostOptionsModel := new(powervsv1.PcloudPvminstancesConsolePostOptions)
				pcloudPvminstancesConsolePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsolePostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsolePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPvminstancesConsolePost(pcloudPvminstancesConsolePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesConsolePut(pcloudPvminstancesConsolePutOptions *PcloudPvminstancesConsolePutOptions) - Operation response error`, func() {
		pcloudPvminstancesConsolePutPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/console"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesConsolePutPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPvminstancesConsolePut with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesConsolePutOptions model
				pcloudPvminstancesConsolePutOptionsModel := new(powervsv1.PcloudPvminstancesConsolePutOptions)
				pcloudPvminstancesConsolePutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsolePutOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsolePutOptionsModel.Code = core.StringPtr("testString")
				pcloudPvminstancesConsolePutOptionsModel.Language = core.StringPtr("testString")
				pcloudPvminstancesConsolePutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPvminstancesConsolePut(pcloudPvminstancesConsolePutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPvminstancesConsolePut(pcloudPvminstancesConsolePutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesConsolePut(pcloudPvminstancesConsolePutOptions *PcloudPvminstancesConsolePutOptions)`, func() {
		pcloudPvminstancesConsolePutPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/console"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesConsolePutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"code": "Code", "language": "Language"}`)
				}))
			})
			It(`Invoke PcloudPvminstancesConsolePut successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudPvminstancesConsolePutOptions model
				pcloudPvminstancesConsolePutOptionsModel := new(powervsv1.PcloudPvminstancesConsolePutOptions)
				pcloudPvminstancesConsolePutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsolePutOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsolePutOptionsModel.Code = core.StringPtr("testString")
				pcloudPvminstancesConsolePutOptionsModel.Language = core.StringPtr("testString")
				pcloudPvminstancesConsolePutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPvminstancesConsolePutWithContext(ctx, pcloudPvminstancesConsolePutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPvminstancesConsolePut(pcloudPvminstancesConsolePutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPvminstancesConsolePutWithContext(ctx, pcloudPvminstancesConsolePutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesConsolePutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"code": "Code", "language": "Language"}`)
				}))
			})
			It(`Invoke PcloudPvminstancesConsolePut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPvminstancesConsolePut(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudPvminstancesConsolePutOptions model
				pcloudPvminstancesConsolePutOptionsModel := new(powervsv1.PcloudPvminstancesConsolePutOptions)
				pcloudPvminstancesConsolePutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsolePutOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsolePutOptionsModel.Code = core.StringPtr("testString")
				pcloudPvminstancesConsolePutOptionsModel.Language = core.StringPtr("testString")
				pcloudPvminstancesConsolePutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPvminstancesConsolePut(pcloudPvminstancesConsolePutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPvminstancesConsolePut with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesConsolePutOptions model
				pcloudPvminstancesConsolePutOptionsModel := new(powervsv1.PcloudPvminstancesConsolePutOptions)
				pcloudPvminstancesConsolePutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsolePutOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsolePutOptionsModel.Code = core.StringPtr("testString")
				pcloudPvminstancesConsolePutOptionsModel.Language = core.StringPtr("testString")
				pcloudPvminstancesConsolePutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPvminstancesConsolePut(pcloudPvminstancesConsolePutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPvminstancesConsolePutOptions model with no property values
				pcloudPvminstancesConsolePutOptionsModelNew := new(powervsv1.PcloudPvminstancesConsolePutOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPvminstancesConsolePut(pcloudPvminstancesConsolePutOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudPvminstancesConsolePut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesConsolePutOptions model
				pcloudPvminstancesConsolePutOptionsModel := new(powervsv1.PcloudPvminstancesConsolePutOptions)
				pcloudPvminstancesConsolePutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsolePutOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesConsolePutOptionsModel.Code = core.StringPtr("testString")
				pcloudPvminstancesConsolePutOptionsModel.Language = core.StringPtr("testString")
				pcloudPvminstancesConsolePutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPvminstancesConsolePut(pcloudPvminstancesConsolePutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesNetworksGetall(pcloudPvminstancesNetworksGetallOptions *PcloudPvminstancesNetworksGetallOptions) - Operation response error`, func() {
		pcloudPvminstancesNetworksGetallPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/networks"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesNetworksGetallPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPvminstancesNetworksGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesNetworksGetallOptions model
				pcloudPvminstancesNetworksGetallOptionsModel := new(powervsv1.PcloudPvminstancesNetworksGetallOptions)
				pcloudPvminstancesNetworksGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksGetallOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPvminstancesNetworksGetall(pcloudPvminstancesNetworksGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPvminstancesNetworksGetall(pcloudPvminstancesNetworksGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesNetworksGetall(pcloudPvminstancesNetworksGetallOptions *PcloudPvminstancesNetworksGetallOptions)`, func() {
		pcloudPvminstancesNetworksGetallPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/networks"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesNetworksGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"networks": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}]}`)
				}))
			})
			It(`Invoke PcloudPvminstancesNetworksGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudPvminstancesNetworksGetallOptions model
				pcloudPvminstancesNetworksGetallOptionsModel := new(powervsv1.PcloudPvminstancesNetworksGetallOptions)
				pcloudPvminstancesNetworksGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksGetallOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPvminstancesNetworksGetallWithContext(ctx, pcloudPvminstancesNetworksGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPvminstancesNetworksGetall(pcloudPvminstancesNetworksGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPvminstancesNetworksGetallWithContext(ctx, pcloudPvminstancesNetworksGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesNetworksGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"networks": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}]}`)
				}))
			})
			It(`Invoke PcloudPvminstancesNetworksGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPvminstancesNetworksGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudPvminstancesNetworksGetallOptions model
				pcloudPvminstancesNetworksGetallOptionsModel := new(powervsv1.PcloudPvminstancesNetworksGetallOptions)
				pcloudPvminstancesNetworksGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksGetallOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPvminstancesNetworksGetall(pcloudPvminstancesNetworksGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPvminstancesNetworksGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesNetworksGetallOptions model
				pcloudPvminstancesNetworksGetallOptionsModel := new(powervsv1.PcloudPvminstancesNetworksGetallOptions)
				pcloudPvminstancesNetworksGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksGetallOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPvminstancesNetworksGetall(pcloudPvminstancesNetworksGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPvminstancesNetworksGetallOptions model with no property values
				pcloudPvminstancesNetworksGetallOptionsModelNew := new(powervsv1.PcloudPvminstancesNetworksGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPvminstancesNetworksGetall(pcloudPvminstancesNetworksGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudPvminstancesNetworksGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesNetworksGetallOptions model
				pcloudPvminstancesNetworksGetallOptionsModel := new(powervsv1.PcloudPvminstancesNetworksGetallOptions)
				pcloudPvminstancesNetworksGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksGetallOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPvminstancesNetworksGetall(pcloudPvminstancesNetworksGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesNetworksPost(pcloudPvminstancesNetworksPostOptions *PcloudPvminstancesNetworksPostOptions) - Operation response error`, func() {
		pcloudPvminstancesNetworksPostPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/networks"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesNetworksPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPvminstancesNetworksPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesNetworksPostOptions model
				pcloudPvminstancesNetworksPostOptionsModel := new(powervsv1.PcloudPvminstancesNetworksPostOptions)
				pcloudPvminstancesNetworksPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksPostOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudPvminstancesNetworksPostOptionsModel.IPAddress = core.StringPtr("testString")
				pcloudPvminstancesNetworksPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPvminstancesNetworksPost(pcloudPvminstancesNetworksPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPvminstancesNetworksPost(pcloudPvminstancesNetworksPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesNetworksPost(pcloudPvminstancesNetworksPostOptions *PcloudPvminstancesNetworksPostOptions)`, func() {
		pcloudPvminstancesNetworksPostPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/networks"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesNetworksPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}`)
				}))
			})
			It(`Invoke PcloudPvminstancesNetworksPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudPvminstancesNetworksPostOptions model
				pcloudPvminstancesNetworksPostOptionsModel := new(powervsv1.PcloudPvminstancesNetworksPostOptions)
				pcloudPvminstancesNetworksPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksPostOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudPvminstancesNetworksPostOptionsModel.IPAddress = core.StringPtr("testString")
				pcloudPvminstancesNetworksPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPvminstancesNetworksPostWithContext(ctx, pcloudPvminstancesNetworksPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPvminstancesNetworksPost(pcloudPvminstancesNetworksPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPvminstancesNetworksPostWithContext(ctx, pcloudPvminstancesNetworksPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesNetworksPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}`)
				}))
			})
			It(`Invoke PcloudPvminstancesNetworksPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPvminstancesNetworksPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudPvminstancesNetworksPostOptions model
				pcloudPvminstancesNetworksPostOptionsModel := new(powervsv1.PcloudPvminstancesNetworksPostOptions)
				pcloudPvminstancesNetworksPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksPostOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudPvminstancesNetworksPostOptionsModel.IPAddress = core.StringPtr("testString")
				pcloudPvminstancesNetworksPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPvminstancesNetworksPost(pcloudPvminstancesNetworksPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPvminstancesNetworksPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesNetworksPostOptions model
				pcloudPvminstancesNetworksPostOptionsModel := new(powervsv1.PcloudPvminstancesNetworksPostOptions)
				pcloudPvminstancesNetworksPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksPostOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudPvminstancesNetworksPostOptionsModel.IPAddress = core.StringPtr("testString")
				pcloudPvminstancesNetworksPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPvminstancesNetworksPost(pcloudPvminstancesNetworksPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPvminstancesNetworksPostOptions model with no property values
				pcloudPvminstancesNetworksPostOptionsModelNew := new(powervsv1.PcloudPvminstancesNetworksPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPvminstancesNetworksPost(pcloudPvminstancesNetworksPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke PcloudPvminstancesNetworksPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesNetworksPostOptions model
				pcloudPvminstancesNetworksPostOptionsModel := new(powervsv1.PcloudPvminstancesNetworksPostOptions)
				pcloudPvminstancesNetworksPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksPostOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudPvminstancesNetworksPostOptionsModel.IPAddress = core.StringPtr("testString")
				pcloudPvminstancesNetworksPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPvminstancesNetworksPost(pcloudPvminstancesNetworksPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesNetworksDelete(pcloudPvminstancesNetworksDeleteOptions *PcloudPvminstancesNetworksDeleteOptions) - Operation response error`, func() {
		pcloudPvminstancesNetworksDeletePath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/networks/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesNetworksDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPvminstancesNetworksDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesNetworksDeleteOptions model
				pcloudPvminstancesNetworksDeleteOptionsModel := new(powervsv1.PcloudPvminstancesNetworksDeleteOptions)
				pcloudPvminstancesNetworksDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksDeleteOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksDeleteOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudPvminstancesNetworksDeleteOptionsModel.MacAddress = core.StringPtr("testString")
				pcloudPvminstancesNetworksDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPvminstancesNetworksDelete(pcloudPvminstancesNetworksDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPvminstancesNetworksDelete(pcloudPvminstancesNetworksDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesNetworksDelete(pcloudPvminstancesNetworksDeleteOptions *PcloudPvminstancesNetworksDeleteOptions)`, func() {
		pcloudPvminstancesNetworksDeletePath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/networks/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesNetworksDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudPvminstancesNetworksDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudPvminstancesNetworksDeleteOptions model
				pcloudPvminstancesNetworksDeleteOptionsModel := new(powervsv1.PcloudPvminstancesNetworksDeleteOptions)
				pcloudPvminstancesNetworksDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksDeleteOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksDeleteOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudPvminstancesNetworksDeleteOptionsModel.MacAddress = core.StringPtr("testString")
				pcloudPvminstancesNetworksDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPvminstancesNetworksDeleteWithContext(ctx, pcloudPvminstancesNetworksDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPvminstancesNetworksDelete(pcloudPvminstancesNetworksDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPvminstancesNetworksDeleteWithContext(ctx, pcloudPvminstancesNetworksDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesNetworksDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudPvminstancesNetworksDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPvminstancesNetworksDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudPvminstancesNetworksDeleteOptions model
				pcloudPvminstancesNetworksDeleteOptionsModel := new(powervsv1.PcloudPvminstancesNetworksDeleteOptions)
				pcloudPvminstancesNetworksDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksDeleteOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksDeleteOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudPvminstancesNetworksDeleteOptionsModel.MacAddress = core.StringPtr("testString")
				pcloudPvminstancesNetworksDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPvminstancesNetworksDelete(pcloudPvminstancesNetworksDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPvminstancesNetworksDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesNetworksDeleteOptions model
				pcloudPvminstancesNetworksDeleteOptionsModel := new(powervsv1.PcloudPvminstancesNetworksDeleteOptions)
				pcloudPvminstancesNetworksDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksDeleteOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksDeleteOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudPvminstancesNetworksDeleteOptionsModel.MacAddress = core.StringPtr("testString")
				pcloudPvminstancesNetworksDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPvminstancesNetworksDelete(pcloudPvminstancesNetworksDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPvminstancesNetworksDeleteOptions model with no property values
				pcloudPvminstancesNetworksDeleteOptionsModelNew := new(powervsv1.PcloudPvminstancesNetworksDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPvminstancesNetworksDelete(pcloudPvminstancesNetworksDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudPvminstancesNetworksDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesNetworksDeleteOptions model
				pcloudPvminstancesNetworksDeleteOptionsModel := new(powervsv1.PcloudPvminstancesNetworksDeleteOptions)
				pcloudPvminstancesNetworksDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksDeleteOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksDeleteOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudPvminstancesNetworksDeleteOptionsModel.MacAddress = core.StringPtr("testString")
				pcloudPvminstancesNetworksDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPvminstancesNetworksDelete(pcloudPvminstancesNetworksDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesNetworksGet(pcloudPvminstancesNetworksGetOptions *PcloudPvminstancesNetworksGetOptions) - Operation response error`, func() {
		pcloudPvminstancesNetworksGetPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/networks/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesNetworksGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPvminstancesNetworksGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesNetworksGetOptions model
				pcloudPvminstancesNetworksGetOptionsModel := new(powervsv1.PcloudPvminstancesNetworksGetOptions)
				pcloudPvminstancesNetworksGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksGetOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudPvminstancesNetworksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPvminstancesNetworksGet(pcloudPvminstancesNetworksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPvminstancesNetworksGet(pcloudPvminstancesNetworksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesNetworksGet(pcloudPvminstancesNetworksGetOptions *PcloudPvminstancesNetworksGetOptions)`, func() {
		pcloudPvminstancesNetworksGetPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/networks/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesNetworksGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"networks": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}]}`)
				}))
			})
			It(`Invoke PcloudPvminstancesNetworksGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudPvminstancesNetworksGetOptions model
				pcloudPvminstancesNetworksGetOptionsModel := new(powervsv1.PcloudPvminstancesNetworksGetOptions)
				pcloudPvminstancesNetworksGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksGetOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudPvminstancesNetworksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPvminstancesNetworksGetWithContext(ctx, pcloudPvminstancesNetworksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPvminstancesNetworksGet(pcloudPvminstancesNetworksGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPvminstancesNetworksGetWithContext(ctx, pcloudPvminstancesNetworksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesNetworksGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"networks": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}]}`)
				}))
			})
			It(`Invoke PcloudPvminstancesNetworksGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPvminstancesNetworksGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudPvminstancesNetworksGetOptions model
				pcloudPvminstancesNetworksGetOptionsModel := new(powervsv1.PcloudPvminstancesNetworksGetOptions)
				pcloudPvminstancesNetworksGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksGetOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudPvminstancesNetworksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPvminstancesNetworksGet(pcloudPvminstancesNetworksGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPvminstancesNetworksGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesNetworksGetOptions model
				pcloudPvminstancesNetworksGetOptionsModel := new(powervsv1.PcloudPvminstancesNetworksGetOptions)
				pcloudPvminstancesNetworksGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksGetOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudPvminstancesNetworksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPvminstancesNetworksGet(pcloudPvminstancesNetworksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPvminstancesNetworksGetOptions model with no property values
				pcloudPvminstancesNetworksGetOptionsModelNew := new(powervsv1.PcloudPvminstancesNetworksGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPvminstancesNetworksGet(pcloudPvminstancesNetworksGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudPvminstancesNetworksGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesNetworksGetOptions model
				pcloudPvminstancesNetworksGetOptionsModel := new(powervsv1.PcloudPvminstancesNetworksGetOptions)
				pcloudPvminstancesNetworksGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesNetworksGetOptionsModel.NetworkID = core.StringPtr("testString")
				pcloudPvminstancesNetworksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPvminstancesNetworksGet(pcloudPvminstancesNetworksGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesOperationsPost(pcloudPvminstancesOperationsPostOptions *PcloudPvminstancesOperationsPostOptions) - Operation response error`, func() {
		pcloudPvminstancesOperationsPostPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/operations"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesOperationsPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPvminstancesOperationsPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the Operations model
				operationsModel := new(powervsv1.Operations)
				operationsModel.BootMode = core.StringPtr("a")
				operationsModel.OperatingMode = core.StringPtr("normal")
				operationsModel.Task = core.StringPtr("dston")

				// Construct an instance of the PcloudPvminstancesOperationsPostOptions model
				pcloudPvminstancesOperationsPostOptionsModel := new(powervsv1.PcloudPvminstancesOperationsPostOptions)
				pcloudPvminstancesOperationsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesOperationsPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesOperationsPostOptionsModel.Operation = operationsModel
				pcloudPvminstancesOperationsPostOptionsModel.OperationType = core.StringPtr("job")
				pcloudPvminstancesOperationsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPvminstancesOperationsPost(pcloudPvminstancesOperationsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPvminstancesOperationsPost(pcloudPvminstancesOperationsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesOperationsPost(pcloudPvminstancesOperationsPostOptions *PcloudPvminstancesOperationsPostOptions)`, func() {
		pcloudPvminstancesOperationsPostPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/operations"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesOperationsPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudPvminstancesOperationsPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the Operations model
				operationsModel := new(powervsv1.Operations)
				operationsModel.BootMode = core.StringPtr("a")
				operationsModel.OperatingMode = core.StringPtr("normal")
				operationsModel.Task = core.StringPtr("dston")

				// Construct an instance of the PcloudPvminstancesOperationsPostOptions model
				pcloudPvminstancesOperationsPostOptionsModel := new(powervsv1.PcloudPvminstancesOperationsPostOptions)
				pcloudPvminstancesOperationsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesOperationsPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesOperationsPostOptionsModel.Operation = operationsModel
				pcloudPvminstancesOperationsPostOptionsModel.OperationType = core.StringPtr("job")
				pcloudPvminstancesOperationsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPvminstancesOperationsPostWithContext(ctx, pcloudPvminstancesOperationsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPvminstancesOperationsPost(pcloudPvminstancesOperationsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPvminstancesOperationsPostWithContext(ctx, pcloudPvminstancesOperationsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesOperationsPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudPvminstancesOperationsPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPvminstancesOperationsPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the Operations model
				operationsModel := new(powervsv1.Operations)
				operationsModel.BootMode = core.StringPtr("a")
				operationsModel.OperatingMode = core.StringPtr("normal")
				operationsModel.Task = core.StringPtr("dston")

				// Construct an instance of the PcloudPvminstancesOperationsPostOptions model
				pcloudPvminstancesOperationsPostOptionsModel := new(powervsv1.PcloudPvminstancesOperationsPostOptions)
				pcloudPvminstancesOperationsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesOperationsPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesOperationsPostOptionsModel.Operation = operationsModel
				pcloudPvminstancesOperationsPostOptionsModel.OperationType = core.StringPtr("job")
				pcloudPvminstancesOperationsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPvminstancesOperationsPost(pcloudPvminstancesOperationsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPvminstancesOperationsPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the Operations model
				operationsModel := new(powervsv1.Operations)
				operationsModel.BootMode = core.StringPtr("a")
				operationsModel.OperatingMode = core.StringPtr("normal")
				operationsModel.Task = core.StringPtr("dston")

				// Construct an instance of the PcloudPvminstancesOperationsPostOptions model
				pcloudPvminstancesOperationsPostOptionsModel := new(powervsv1.PcloudPvminstancesOperationsPostOptions)
				pcloudPvminstancesOperationsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesOperationsPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesOperationsPostOptionsModel.Operation = operationsModel
				pcloudPvminstancesOperationsPostOptionsModel.OperationType = core.StringPtr("job")
				pcloudPvminstancesOperationsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPvminstancesOperationsPost(pcloudPvminstancesOperationsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPvminstancesOperationsPostOptions model with no property values
				pcloudPvminstancesOperationsPostOptionsModelNew := new(powervsv1.PcloudPvminstancesOperationsPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPvminstancesOperationsPost(pcloudPvminstancesOperationsPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudPvminstancesOperationsPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the Operations model
				operationsModel := new(powervsv1.Operations)
				operationsModel.BootMode = core.StringPtr("a")
				operationsModel.OperatingMode = core.StringPtr("normal")
				operationsModel.Task = core.StringPtr("dston")

				// Construct an instance of the PcloudPvminstancesOperationsPostOptions model
				pcloudPvminstancesOperationsPostOptionsModel := new(powervsv1.PcloudPvminstancesOperationsPostOptions)
				pcloudPvminstancesOperationsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesOperationsPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesOperationsPostOptionsModel.Operation = operationsModel
				pcloudPvminstancesOperationsPostOptionsModel.OperationType = core.StringPtr("job")
				pcloudPvminstancesOperationsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPvminstancesOperationsPost(pcloudPvminstancesOperationsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesSnapshotsGetall(pcloudPvminstancesSnapshotsGetallOptions *PcloudPvminstancesSnapshotsGetallOptions) - Operation response error`, func() {
		pcloudPvminstancesSnapshotsGetallPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/snapshots"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesSnapshotsGetallPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPvminstancesSnapshotsGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesSnapshotsGetallOptions model
				pcloudPvminstancesSnapshotsGetallOptionsModel := new(powervsv1.PcloudPvminstancesSnapshotsGetallOptions)
				pcloudPvminstancesSnapshotsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsGetallOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPvminstancesSnapshotsGetall(pcloudPvminstancesSnapshotsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPvminstancesSnapshotsGetall(pcloudPvminstancesSnapshotsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesSnapshotsGetall(pcloudPvminstancesSnapshotsGetallOptions *PcloudPvminstancesSnapshotsGetallOptions)`, func() {
		pcloudPvminstancesSnapshotsGetallPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/snapshots"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesSnapshotsGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"snapshots": [{"action": "Action", "creationDate": "2019-01-01T12:00:00.000Z", "description": "Description", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "name": "Name", "percentComplete": 15, "pvmInstanceID": "PvmInstanceID", "snapshotID": "SnapshotID", "status": "Status", "volumeSnapshots": {"mapKey": "Inner"}}]}`)
				}))
			})
			It(`Invoke PcloudPvminstancesSnapshotsGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudPvminstancesSnapshotsGetallOptions model
				pcloudPvminstancesSnapshotsGetallOptionsModel := new(powervsv1.PcloudPvminstancesSnapshotsGetallOptions)
				pcloudPvminstancesSnapshotsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsGetallOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPvminstancesSnapshotsGetallWithContext(ctx, pcloudPvminstancesSnapshotsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPvminstancesSnapshotsGetall(pcloudPvminstancesSnapshotsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPvminstancesSnapshotsGetallWithContext(ctx, pcloudPvminstancesSnapshotsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesSnapshotsGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"snapshots": [{"action": "Action", "creationDate": "2019-01-01T12:00:00.000Z", "description": "Description", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "name": "Name", "percentComplete": 15, "pvmInstanceID": "PvmInstanceID", "snapshotID": "SnapshotID", "status": "Status", "volumeSnapshots": {"mapKey": "Inner"}}]}`)
				}))
			})
			It(`Invoke PcloudPvminstancesSnapshotsGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPvminstancesSnapshotsGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudPvminstancesSnapshotsGetallOptions model
				pcloudPvminstancesSnapshotsGetallOptionsModel := new(powervsv1.PcloudPvminstancesSnapshotsGetallOptions)
				pcloudPvminstancesSnapshotsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsGetallOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPvminstancesSnapshotsGetall(pcloudPvminstancesSnapshotsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPvminstancesSnapshotsGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesSnapshotsGetallOptions model
				pcloudPvminstancesSnapshotsGetallOptionsModel := new(powervsv1.PcloudPvminstancesSnapshotsGetallOptions)
				pcloudPvminstancesSnapshotsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsGetallOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPvminstancesSnapshotsGetall(pcloudPvminstancesSnapshotsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPvminstancesSnapshotsGetallOptions model with no property values
				pcloudPvminstancesSnapshotsGetallOptionsModelNew := new(powervsv1.PcloudPvminstancesSnapshotsGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPvminstancesSnapshotsGetall(pcloudPvminstancesSnapshotsGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudPvminstancesSnapshotsGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesSnapshotsGetallOptions model
				pcloudPvminstancesSnapshotsGetallOptionsModel := new(powervsv1.PcloudPvminstancesSnapshotsGetallOptions)
				pcloudPvminstancesSnapshotsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsGetallOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPvminstancesSnapshotsGetall(pcloudPvminstancesSnapshotsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesSnapshotsPost(pcloudPvminstancesSnapshotsPostOptions *PcloudPvminstancesSnapshotsPostOptions) - Operation response error`, func() {
		pcloudPvminstancesSnapshotsPostPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/snapshots"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesSnapshotsPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPvminstancesSnapshotsPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesSnapshotsPostOptions model
				pcloudPvminstancesSnapshotsPostOptionsModel := new(powervsv1.PcloudPvminstancesSnapshotsPostOptions)
				pcloudPvminstancesSnapshotsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsPostOptionsModel.Description = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsPostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudPvminstancesSnapshotsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPvminstancesSnapshotsPost(pcloudPvminstancesSnapshotsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPvminstancesSnapshotsPost(pcloudPvminstancesSnapshotsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesSnapshotsPost(pcloudPvminstancesSnapshotsPostOptions *PcloudPvminstancesSnapshotsPostOptions)`, func() {
		pcloudPvminstancesSnapshotsPostPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/snapshots"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesSnapshotsPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"snapshotID": "SnapshotID"}`)
				}))
			})
			It(`Invoke PcloudPvminstancesSnapshotsPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudPvminstancesSnapshotsPostOptions model
				pcloudPvminstancesSnapshotsPostOptionsModel := new(powervsv1.PcloudPvminstancesSnapshotsPostOptions)
				pcloudPvminstancesSnapshotsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsPostOptionsModel.Description = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsPostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudPvminstancesSnapshotsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPvminstancesSnapshotsPostWithContext(ctx, pcloudPvminstancesSnapshotsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPvminstancesSnapshotsPost(pcloudPvminstancesSnapshotsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPvminstancesSnapshotsPostWithContext(ctx, pcloudPvminstancesSnapshotsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesSnapshotsPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"snapshotID": "SnapshotID"}`)
				}))
			})
			It(`Invoke PcloudPvminstancesSnapshotsPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPvminstancesSnapshotsPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudPvminstancesSnapshotsPostOptions model
				pcloudPvminstancesSnapshotsPostOptionsModel := new(powervsv1.PcloudPvminstancesSnapshotsPostOptions)
				pcloudPvminstancesSnapshotsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsPostOptionsModel.Description = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsPostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudPvminstancesSnapshotsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPvminstancesSnapshotsPost(pcloudPvminstancesSnapshotsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPvminstancesSnapshotsPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesSnapshotsPostOptions model
				pcloudPvminstancesSnapshotsPostOptionsModel := new(powervsv1.PcloudPvminstancesSnapshotsPostOptions)
				pcloudPvminstancesSnapshotsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsPostOptionsModel.Description = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsPostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudPvminstancesSnapshotsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPvminstancesSnapshotsPost(pcloudPvminstancesSnapshotsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPvminstancesSnapshotsPostOptions model with no property values
				pcloudPvminstancesSnapshotsPostOptionsModelNew := new(powervsv1.PcloudPvminstancesSnapshotsPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPvminstancesSnapshotsPost(pcloudPvminstancesSnapshotsPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudPvminstancesSnapshotsPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesSnapshotsPostOptions model
				pcloudPvminstancesSnapshotsPostOptionsModel := new(powervsv1.PcloudPvminstancesSnapshotsPostOptions)
				pcloudPvminstancesSnapshotsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsPostOptionsModel.Description = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsPostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudPvminstancesSnapshotsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPvminstancesSnapshotsPost(pcloudPvminstancesSnapshotsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesSnapshotsRestorePost(pcloudPvminstancesSnapshotsRestorePostOptions *PcloudPvminstancesSnapshotsRestorePostOptions) - Operation response error`, func() {
		pcloudPvminstancesSnapshotsRestorePostPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/snapshots/testString/restore"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesSnapshotsRestorePostPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["restore_fail_action"]).To(Equal([]string{"retry"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPvminstancesSnapshotsRestorePost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesSnapshotsRestorePostOptions model
				pcloudPvminstancesSnapshotsRestorePostOptionsModel := new(powervsv1.PcloudPvminstancesSnapshotsRestorePostOptions)
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.SnapshotID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.Force = core.BoolPtr(false)
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.RestoreFailAction = core.StringPtr("retry")
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPvminstancesSnapshotsRestorePost(pcloudPvminstancesSnapshotsRestorePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPvminstancesSnapshotsRestorePost(pcloudPvminstancesSnapshotsRestorePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesSnapshotsRestorePost(pcloudPvminstancesSnapshotsRestorePostOptions *PcloudPvminstancesSnapshotsRestorePostOptions)`, func() {
		pcloudPvminstancesSnapshotsRestorePostPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/snapshots/testString/restore"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesSnapshotsRestorePostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["restore_fail_action"]).To(Equal([]string{"retry"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"action": "Action", "creationDate": "2019-01-01T12:00:00.000Z", "description": "Description", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "name": "Name", "percentComplete": 15, "pvmInstanceID": "PvmInstanceID", "snapshotID": "SnapshotID", "status": "Status", "volumeSnapshots": {"mapKey": "Inner"}}`)
				}))
			})
			It(`Invoke PcloudPvminstancesSnapshotsRestorePost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudPvminstancesSnapshotsRestorePostOptions model
				pcloudPvminstancesSnapshotsRestorePostOptionsModel := new(powervsv1.PcloudPvminstancesSnapshotsRestorePostOptions)
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.SnapshotID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.Force = core.BoolPtr(false)
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.RestoreFailAction = core.StringPtr("retry")
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPvminstancesSnapshotsRestorePostWithContext(ctx, pcloudPvminstancesSnapshotsRestorePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPvminstancesSnapshotsRestorePost(pcloudPvminstancesSnapshotsRestorePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPvminstancesSnapshotsRestorePostWithContext(ctx, pcloudPvminstancesSnapshotsRestorePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesSnapshotsRestorePostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["restore_fail_action"]).To(Equal([]string{"retry"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"action": "Action", "creationDate": "2019-01-01T12:00:00.000Z", "description": "Description", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "name": "Name", "percentComplete": 15, "pvmInstanceID": "PvmInstanceID", "snapshotID": "SnapshotID", "status": "Status", "volumeSnapshots": {"mapKey": "Inner"}}`)
				}))
			})
			It(`Invoke PcloudPvminstancesSnapshotsRestorePost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPvminstancesSnapshotsRestorePost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudPvminstancesSnapshotsRestorePostOptions model
				pcloudPvminstancesSnapshotsRestorePostOptionsModel := new(powervsv1.PcloudPvminstancesSnapshotsRestorePostOptions)
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.SnapshotID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.Force = core.BoolPtr(false)
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.RestoreFailAction = core.StringPtr("retry")
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPvminstancesSnapshotsRestorePost(pcloudPvminstancesSnapshotsRestorePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPvminstancesSnapshotsRestorePost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesSnapshotsRestorePostOptions model
				pcloudPvminstancesSnapshotsRestorePostOptionsModel := new(powervsv1.PcloudPvminstancesSnapshotsRestorePostOptions)
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.SnapshotID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.Force = core.BoolPtr(false)
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.RestoreFailAction = core.StringPtr("retry")
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPvminstancesSnapshotsRestorePost(pcloudPvminstancesSnapshotsRestorePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPvminstancesSnapshotsRestorePostOptions model with no property values
				pcloudPvminstancesSnapshotsRestorePostOptionsModelNew := new(powervsv1.PcloudPvminstancesSnapshotsRestorePostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPvminstancesSnapshotsRestorePost(pcloudPvminstancesSnapshotsRestorePostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudPvminstancesSnapshotsRestorePost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesSnapshotsRestorePostOptions model
				pcloudPvminstancesSnapshotsRestorePostOptionsModel := new(powervsv1.PcloudPvminstancesSnapshotsRestorePostOptions)
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.SnapshotID = core.StringPtr("testString")
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.Force = core.BoolPtr(false)
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.RestoreFailAction = core.StringPtr("retry")
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPvminstancesSnapshotsRestorePost(pcloudPvminstancesSnapshotsRestorePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2PvminstancesGetall(pcloudV2PvminstancesGetallOptions *PcloudV2PvminstancesGetallOptions) - Operation response error`, func() {
		pcloudV2PvminstancesGetallPath := "/pcloud/v2/cloud-instances/testString/pvm-instances"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2PvminstancesGetallPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudV2PvminstancesGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2PvminstancesGetallOptions model
				pcloudV2PvminstancesGetallOptionsModel := new(powervsv1.PcloudV2PvminstancesGetallOptions)
				pcloudV2PvminstancesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudV2PvminstancesGetall(pcloudV2PvminstancesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudV2PvminstancesGetall(pcloudV2PvminstancesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2PvminstancesGetall(pcloudV2PvminstancesGetallOptions *PcloudV2PvminstancesGetallOptions)`, func() {
		pcloudV2PvminstancesGetallPath := "/pcloud/v2/cloud-instances/testString/pvm-instances"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2PvminstancesGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"pvmInstances": [{"configuration": {"consoleLanguage": {"code": "Code", "language": "Language"}, "licenseRepositoryCapacity": 25, "sapProfile": {"href": "Href", "profileID": "ProfileID"}, "softwareLicenses": {"ibmiCSS": false, "ibmiDBQ": false, "ibmiPHA": false, "ibmiRDS": false, "ibmiRDSUsers": 12}, "systemReferenceCodes": [[{"src": "Src", "timestamp": "Timestamp"}]]}, "cores": {"assigned": 8, "maximum": 7, "minimum": 7}, "creationDate": "2019-01-01T12:00:00.000Z", "deployment": {"machineType": "MachineType", "pinPolicy": "PinPolicy", "processorMode": "dedicated", "type": "Type"}, "health": {"status": "Status"}, "host": {"id": 2}, "href": "Href", "id": "ID", "memory": {"assigned": 8, "maximum": 7, "minimum": 7}, "name": "Name", "networkPorts": [{"id": "ID", "ipProtocol": "IPv4", "macAddress": "MacAddress", "privateIP": "PrivateIP", "type": "dhcp"}], "operatingSystem": {"type": "Type", "version": "Version"}, "placementGroup": {"id": "ID"}, "status": "Status", "virtualCores": {"assigned": 8, "maximum": 7, "minimum": 7}}]}`)
				}))
			})
			It(`Invoke PcloudV2PvminstancesGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudV2PvminstancesGetallOptions model
				pcloudV2PvminstancesGetallOptionsModel := new(powervsv1.PcloudV2PvminstancesGetallOptions)
				pcloudV2PvminstancesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudV2PvminstancesGetallWithContext(ctx, pcloudV2PvminstancesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudV2PvminstancesGetall(pcloudV2PvminstancesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudV2PvminstancesGetallWithContext(ctx, pcloudV2PvminstancesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2PvminstancesGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"pvmInstances": [{"configuration": {"consoleLanguage": {"code": "Code", "language": "Language"}, "licenseRepositoryCapacity": 25, "sapProfile": {"href": "Href", "profileID": "ProfileID"}, "softwareLicenses": {"ibmiCSS": false, "ibmiDBQ": false, "ibmiPHA": false, "ibmiRDS": false, "ibmiRDSUsers": 12}, "systemReferenceCodes": [[{"src": "Src", "timestamp": "Timestamp"}]]}, "cores": {"assigned": 8, "maximum": 7, "minimum": 7}, "creationDate": "2019-01-01T12:00:00.000Z", "deployment": {"machineType": "MachineType", "pinPolicy": "PinPolicy", "processorMode": "dedicated", "type": "Type"}, "health": {"status": "Status"}, "host": {"id": 2}, "href": "Href", "id": "ID", "memory": {"assigned": 8, "maximum": 7, "minimum": 7}, "name": "Name", "networkPorts": [{"id": "ID", "ipProtocol": "IPv4", "macAddress": "MacAddress", "privateIP": "PrivateIP", "type": "dhcp"}], "operatingSystem": {"type": "Type", "version": "Version"}, "placementGroup": {"id": "ID"}, "status": "Status", "virtualCores": {"assigned": 8, "maximum": 7, "minimum": 7}}]}`)
				}))
			})
			It(`Invoke PcloudV2PvminstancesGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudV2PvminstancesGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudV2PvminstancesGetallOptions model
				pcloudV2PvminstancesGetallOptionsModel := new(powervsv1.PcloudV2PvminstancesGetallOptions)
				pcloudV2PvminstancesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudV2PvminstancesGetall(pcloudV2PvminstancesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudV2PvminstancesGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2PvminstancesGetallOptions model
				pcloudV2PvminstancesGetallOptionsModel := new(powervsv1.PcloudV2PvminstancesGetallOptions)
				pcloudV2PvminstancesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudV2PvminstancesGetall(pcloudV2PvminstancesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudV2PvminstancesGetallOptions model with no property values
				pcloudV2PvminstancesGetallOptionsModelNew := new(powervsv1.PcloudV2PvminstancesGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudV2PvminstancesGetall(pcloudV2PvminstancesGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudV2PvminstancesGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2PvminstancesGetallOptions model
				pcloudV2PvminstancesGetallOptionsModel := new(powervsv1.PcloudV2PvminstancesGetallOptions)
				pcloudV2PvminstancesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudV2PvminstancesGetall(pcloudV2PvminstancesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2PvminstancesCaptureGet(pcloudV2PvminstancesCaptureGetOptions *PcloudV2PvminstancesCaptureGetOptions) - Operation response error`, func() {
		pcloudV2PvminstancesCaptureGetPath := "/pcloud/v2/cloud-instances/testString/pvm-instances/testString/capture"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2PvminstancesCaptureGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudV2PvminstancesCaptureGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2PvminstancesCaptureGetOptions model
				pcloudV2PvminstancesCaptureGetOptionsModel := new(powervsv1.PcloudV2PvminstancesCaptureGetOptions)
				pcloudV2PvminstancesCaptureGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesCaptureGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesCaptureGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudV2PvminstancesCaptureGet(pcloudV2PvminstancesCaptureGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudV2PvminstancesCaptureGet(pcloudV2PvminstancesCaptureGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2PvminstancesCaptureGet(pcloudV2PvminstancesCaptureGetOptions *PcloudV2PvminstancesCaptureGetOptions)`, func() {
		pcloudV2PvminstancesCaptureGetPath := "/pcloud/v2/cloud-instances/testString/pvm-instances/testString/capture"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2PvminstancesCaptureGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"createTimestamp": "2019-01-01T12:00:00.000Z", "id": "ID", "operation": {"action": "Action", "id": "ID", "target": "Target"}, "status": {"message": "Message", "progress": "Progress", "state": "State"}}`)
				}))
			})
			It(`Invoke PcloudV2PvminstancesCaptureGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudV2PvminstancesCaptureGetOptions model
				pcloudV2PvminstancesCaptureGetOptionsModel := new(powervsv1.PcloudV2PvminstancesCaptureGetOptions)
				pcloudV2PvminstancesCaptureGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesCaptureGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesCaptureGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudV2PvminstancesCaptureGetWithContext(ctx, pcloudV2PvminstancesCaptureGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudV2PvminstancesCaptureGet(pcloudV2PvminstancesCaptureGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudV2PvminstancesCaptureGetWithContext(ctx, pcloudV2PvminstancesCaptureGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2PvminstancesCaptureGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"createTimestamp": "2019-01-01T12:00:00.000Z", "id": "ID", "operation": {"action": "Action", "id": "ID", "target": "Target"}, "status": {"message": "Message", "progress": "Progress", "state": "State"}}`)
				}))
			})
			It(`Invoke PcloudV2PvminstancesCaptureGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudV2PvminstancesCaptureGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudV2PvminstancesCaptureGetOptions model
				pcloudV2PvminstancesCaptureGetOptionsModel := new(powervsv1.PcloudV2PvminstancesCaptureGetOptions)
				pcloudV2PvminstancesCaptureGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesCaptureGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesCaptureGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudV2PvminstancesCaptureGet(pcloudV2PvminstancesCaptureGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudV2PvminstancesCaptureGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2PvminstancesCaptureGetOptions model
				pcloudV2PvminstancesCaptureGetOptionsModel := new(powervsv1.PcloudV2PvminstancesCaptureGetOptions)
				pcloudV2PvminstancesCaptureGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesCaptureGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesCaptureGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudV2PvminstancesCaptureGet(pcloudV2PvminstancesCaptureGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudV2PvminstancesCaptureGetOptions model with no property values
				pcloudV2PvminstancesCaptureGetOptionsModelNew := new(powervsv1.PcloudV2PvminstancesCaptureGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudV2PvminstancesCaptureGet(pcloudV2PvminstancesCaptureGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudV2PvminstancesCaptureGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2PvminstancesCaptureGetOptions model
				pcloudV2PvminstancesCaptureGetOptionsModel := new(powervsv1.PcloudV2PvminstancesCaptureGetOptions)
				pcloudV2PvminstancesCaptureGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesCaptureGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesCaptureGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudV2PvminstancesCaptureGet(pcloudV2PvminstancesCaptureGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2PvminstancesCapturePost(pcloudV2PvminstancesCapturePostOptions *PcloudV2PvminstancesCapturePostOptions) - Operation response error`, func() {
		pcloudV2PvminstancesCapturePostPath := "/pcloud/v2/cloud-instances/testString/pvm-instances/testString/capture"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2PvminstancesCapturePostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudV2PvminstancesCapturePost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2PvminstancesCapturePostOptions model
				pcloudV2PvminstancesCapturePostOptionsModel := new(powervsv1.PcloudV2PvminstancesCapturePostOptions)
				pcloudV2PvminstancesCapturePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.CaptureDestination = core.StringPtr("cloud-storage")
				pcloudV2PvminstancesCapturePostOptionsModel.CaptureName = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.CaptureVolumeIDs = []string{"testString"}
				pcloudV2PvminstancesCapturePostOptionsModel.CloudStorageAccessKey = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.CloudStorageImagePath = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.CloudStorageRegion = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.CloudStorageSecretKey = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudV2PvminstancesCapturePost(pcloudV2PvminstancesCapturePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudV2PvminstancesCapturePost(pcloudV2PvminstancesCapturePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2PvminstancesCapturePost(pcloudV2PvminstancesCapturePostOptions *PcloudV2PvminstancesCapturePostOptions)`, func() {
		pcloudV2PvminstancesCapturePostPath := "/pcloud/v2/cloud-instances/testString/pvm-instances/testString/capture"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2PvminstancesCapturePostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"href": "Href", "id": "ID"}`)
				}))
			})
			It(`Invoke PcloudV2PvminstancesCapturePost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudV2PvminstancesCapturePostOptions model
				pcloudV2PvminstancesCapturePostOptionsModel := new(powervsv1.PcloudV2PvminstancesCapturePostOptions)
				pcloudV2PvminstancesCapturePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.CaptureDestination = core.StringPtr("cloud-storage")
				pcloudV2PvminstancesCapturePostOptionsModel.CaptureName = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.CaptureVolumeIDs = []string{"testString"}
				pcloudV2PvminstancesCapturePostOptionsModel.CloudStorageAccessKey = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.CloudStorageImagePath = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.CloudStorageRegion = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.CloudStorageSecretKey = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudV2PvminstancesCapturePostWithContext(ctx, pcloudV2PvminstancesCapturePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudV2PvminstancesCapturePost(pcloudV2PvminstancesCapturePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudV2PvminstancesCapturePostWithContext(ctx, pcloudV2PvminstancesCapturePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2PvminstancesCapturePostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"href": "Href", "id": "ID"}`)
				}))
			})
			It(`Invoke PcloudV2PvminstancesCapturePost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudV2PvminstancesCapturePost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudV2PvminstancesCapturePostOptions model
				pcloudV2PvminstancesCapturePostOptionsModel := new(powervsv1.PcloudV2PvminstancesCapturePostOptions)
				pcloudV2PvminstancesCapturePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.CaptureDestination = core.StringPtr("cloud-storage")
				pcloudV2PvminstancesCapturePostOptionsModel.CaptureName = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.CaptureVolumeIDs = []string{"testString"}
				pcloudV2PvminstancesCapturePostOptionsModel.CloudStorageAccessKey = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.CloudStorageImagePath = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.CloudStorageRegion = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.CloudStorageSecretKey = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudV2PvminstancesCapturePost(pcloudV2PvminstancesCapturePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudV2PvminstancesCapturePost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2PvminstancesCapturePostOptions model
				pcloudV2PvminstancesCapturePostOptionsModel := new(powervsv1.PcloudV2PvminstancesCapturePostOptions)
				pcloudV2PvminstancesCapturePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.CaptureDestination = core.StringPtr("cloud-storage")
				pcloudV2PvminstancesCapturePostOptionsModel.CaptureName = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.CaptureVolumeIDs = []string{"testString"}
				pcloudV2PvminstancesCapturePostOptionsModel.CloudStorageAccessKey = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.CloudStorageImagePath = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.CloudStorageRegion = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.CloudStorageSecretKey = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudV2PvminstancesCapturePost(pcloudV2PvminstancesCapturePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudV2PvminstancesCapturePostOptions model with no property values
				pcloudV2PvminstancesCapturePostOptionsModelNew := new(powervsv1.PcloudV2PvminstancesCapturePostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudV2PvminstancesCapturePost(pcloudV2PvminstancesCapturePostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudV2PvminstancesCapturePost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2PvminstancesCapturePostOptions model
				pcloudV2PvminstancesCapturePostOptionsModel := new(powervsv1.PcloudV2PvminstancesCapturePostOptions)
				pcloudV2PvminstancesCapturePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.CaptureDestination = core.StringPtr("cloud-storage")
				pcloudV2PvminstancesCapturePostOptionsModel.CaptureName = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.CaptureVolumeIDs = []string{"testString"}
				pcloudV2PvminstancesCapturePostOptionsModel.CloudStorageAccessKey = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.CloudStorageImagePath = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.CloudStorageRegion = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.CloudStorageSecretKey = core.StringPtr("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudV2PvminstancesCapturePost(pcloudV2PvminstancesCapturePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPlacementgroupsGetall(pcloudPlacementgroupsGetallOptions *PcloudPlacementgroupsGetallOptions) - Operation response error`, func() {
		pcloudPlacementgroupsGetallPath := "/pcloud/v1/cloud-instances/testString/placement-groups"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPlacementgroupsGetallPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPlacementgroupsGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPlacementgroupsGetallOptions model
				pcloudPlacementgroupsGetallOptionsModel := new(powervsv1.PcloudPlacementgroupsGetallOptions)
				pcloudPlacementgroupsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPlacementgroupsGetall(pcloudPlacementgroupsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPlacementgroupsGetall(pcloudPlacementgroupsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPlacementgroupsGetall(pcloudPlacementgroupsGetallOptions *PcloudPlacementgroupsGetallOptions)`, func() {
		pcloudPlacementgroupsGetallPath := "/pcloud/v1/cloud-instances/testString/placement-groups"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPlacementgroupsGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"placementGroups": [{"id": "ID", "members": ["Members"], "name": "Name", "policy": "affinity"}]}`)
				}))
			})
			It(`Invoke PcloudPlacementgroupsGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudPlacementgroupsGetallOptions model
				pcloudPlacementgroupsGetallOptionsModel := new(powervsv1.PcloudPlacementgroupsGetallOptions)
				pcloudPlacementgroupsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPlacementgroupsGetallWithContext(ctx, pcloudPlacementgroupsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPlacementgroupsGetall(pcloudPlacementgroupsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPlacementgroupsGetallWithContext(ctx, pcloudPlacementgroupsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPlacementgroupsGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"placementGroups": [{"id": "ID", "members": ["Members"], "name": "Name", "policy": "affinity"}]}`)
				}))
			})
			It(`Invoke PcloudPlacementgroupsGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPlacementgroupsGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudPlacementgroupsGetallOptions model
				pcloudPlacementgroupsGetallOptionsModel := new(powervsv1.PcloudPlacementgroupsGetallOptions)
				pcloudPlacementgroupsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPlacementgroupsGetall(pcloudPlacementgroupsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPlacementgroupsGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPlacementgroupsGetallOptions model
				pcloudPlacementgroupsGetallOptionsModel := new(powervsv1.PcloudPlacementgroupsGetallOptions)
				pcloudPlacementgroupsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPlacementgroupsGetall(pcloudPlacementgroupsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPlacementgroupsGetallOptions model with no property values
				pcloudPlacementgroupsGetallOptionsModelNew := new(powervsv1.PcloudPlacementgroupsGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPlacementgroupsGetall(pcloudPlacementgroupsGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudPlacementgroupsGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPlacementgroupsGetallOptions model
				pcloudPlacementgroupsGetallOptionsModel := new(powervsv1.PcloudPlacementgroupsGetallOptions)
				pcloudPlacementgroupsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPlacementgroupsGetall(pcloudPlacementgroupsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPlacementgroupsPost(pcloudPlacementgroupsPostOptions *PcloudPlacementgroupsPostOptions) - Operation response error`, func() {
		pcloudPlacementgroupsPostPath := "/pcloud/v1/cloud-instances/testString/placement-groups"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPlacementgroupsPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPlacementgroupsPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPlacementgroupsPostOptions model
				pcloudPlacementgroupsPostOptionsModel := new(powervsv1.PcloudPlacementgroupsPostOptions)
				pcloudPlacementgroupsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudPlacementgroupsPostOptionsModel.Policy = core.StringPtr("affinity")
				pcloudPlacementgroupsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPlacementgroupsPost(pcloudPlacementgroupsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPlacementgroupsPost(pcloudPlacementgroupsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPlacementgroupsPost(pcloudPlacementgroupsPostOptions *PcloudPlacementgroupsPostOptions)`, func() {
		pcloudPlacementgroupsPostPath := "/pcloud/v1/cloud-instances/testString/placement-groups"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPlacementgroupsPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "members": ["Members"], "name": "Name", "policy": "affinity"}`)
				}))
			})
			It(`Invoke PcloudPlacementgroupsPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudPlacementgroupsPostOptions model
				pcloudPlacementgroupsPostOptionsModel := new(powervsv1.PcloudPlacementgroupsPostOptions)
				pcloudPlacementgroupsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudPlacementgroupsPostOptionsModel.Policy = core.StringPtr("affinity")
				pcloudPlacementgroupsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPlacementgroupsPostWithContext(ctx, pcloudPlacementgroupsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPlacementgroupsPost(pcloudPlacementgroupsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPlacementgroupsPostWithContext(ctx, pcloudPlacementgroupsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPlacementgroupsPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "members": ["Members"], "name": "Name", "policy": "affinity"}`)
				}))
			})
			It(`Invoke PcloudPlacementgroupsPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPlacementgroupsPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudPlacementgroupsPostOptions model
				pcloudPlacementgroupsPostOptionsModel := new(powervsv1.PcloudPlacementgroupsPostOptions)
				pcloudPlacementgroupsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudPlacementgroupsPostOptionsModel.Policy = core.StringPtr("affinity")
				pcloudPlacementgroupsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPlacementgroupsPost(pcloudPlacementgroupsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPlacementgroupsPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPlacementgroupsPostOptions model
				pcloudPlacementgroupsPostOptionsModel := new(powervsv1.PcloudPlacementgroupsPostOptions)
				pcloudPlacementgroupsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudPlacementgroupsPostOptionsModel.Policy = core.StringPtr("affinity")
				pcloudPlacementgroupsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPlacementgroupsPost(pcloudPlacementgroupsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPlacementgroupsPostOptions model with no property values
				pcloudPlacementgroupsPostOptionsModelNew := new(powervsv1.PcloudPlacementgroupsPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPlacementgroupsPost(pcloudPlacementgroupsPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudPlacementgroupsPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPlacementgroupsPostOptions model
				pcloudPlacementgroupsPostOptionsModel := new(powervsv1.PcloudPlacementgroupsPostOptions)
				pcloudPlacementgroupsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudPlacementgroupsPostOptionsModel.Policy = core.StringPtr("affinity")
				pcloudPlacementgroupsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPlacementgroupsPost(pcloudPlacementgroupsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPlacementgroupsDelete(pcloudPlacementgroupsDeleteOptions *PcloudPlacementgroupsDeleteOptions) - Operation response error`, func() {
		pcloudPlacementgroupsDeletePath := "/pcloud/v1/cloud-instances/testString/placement-groups/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPlacementgroupsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPlacementgroupsDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPlacementgroupsDeleteOptions model
				pcloudPlacementgroupsDeleteOptionsModel := new(powervsv1.PcloudPlacementgroupsDeleteOptions)
				pcloudPlacementgroupsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsDeleteOptionsModel.PlacementGroupID = core.StringPtr("testString")
				pcloudPlacementgroupsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPlacementgroupsDelete(pcloudPlacementgroupsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPlacementgroupsDelete(pcloudPlacementgroupsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPlacementgroupsDelete(pcloudPlacementgroupsDeleteOptions *PcloudPlacementgroupsDeleteOptions)`, func() {
		pcloudPlacementgroupsDeletePath := "/pcloud/v1/cloud-instances/testString/placement-groups/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPlacementgroupsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudPlacementgroupsDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudPlacementgroupsDeleteOptions model
				pcloudPlacementgroupsDeleteOptionsModel := new(powervsv1.PcloudPlacementgroupsDeleteOptions)
				pcloudPlacementgroupsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsDeleteOptionsModel.PlacementGroupID = core.StringPtr("testString")
				pcloudPlacementgroupsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPlacementgroupsDeleteWithContext(ctx, pcloudPlacementgroupsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPlacementgroupsDelete(pcloudPlacementgroupsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPlacementgroupsDeleteWithContext(ctx, pcloudPlacementgroupsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPlacementgroupsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudPlacementgroupsDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPlacementgroupsDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudPlacementgroupsDeleteOptions model
				pcloudPlacementgroupsDeleteOptionsModel := new(powervsv1.PcloudPlacementgroupsDeleteOptions)
				pcloudPlacementgroupsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsDeleteOptionsModel.PlacementGroupID = core.StringPtr("testString")
				pcloudPlacementgroupsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPlacementgroupsDelete(pcloudPlacementgroupsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPlacementgroupsDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPlacementgroupsDeleteOptions model
				pcloudPlacementgroupsDeleteOptionsModel := new(powervsv1.PcloudPlacementgroupsDeleteOptions)
				pcloudPlacementgroupsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsDeleteOptionsModel.PlacementGroupID = core.StringPtr("testString")
				pcloudPlacementgroupsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPlacementgroupsDelete(pcloudPlacementgroupsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPlacementgroupsDeleteOptions model with no property values
				pcloudPlacementgroupsDeleteOptionsModelNew := new(powervsv1.PcloudPlacementgroupsDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPlacementgroupsDelete(pcloudPlacementgroupsDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudPlacementgroupsDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPlacementgroupsDeleteOptions model
				pcloudPlacementgroupsDeleteOptionsModel := new(powervsv1.PcloudPlacementgroupsDeleteOptions)
				pcloudPlacementgroupsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsDeleteOptionsModel.PlacementGroupID = core.StringPtr("testString")
				pcloudPlacementgroupsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPlacementgroupsDelete(pcloudPlacementgroupsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPlacementgroupsGet(pcloudPlacementgroupsGetOptions *PcloudPlacementgroupsGetOptions) - Operation response error`, func() {
		pcloudPlacementgroupsGetPath := "/pcloud/v1/cloud-instances/testString/placement-groups/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPlacementgroupsGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPlacementgroupsGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPlacementgroupsGetOptions model
				pcloudPlacementgroupsGetOptionsModel := new(powervsv1.PcloudPlacementgroupsGetOptions)
				pcloudPlacementgroupsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsGetOptionsModel.PlacementGroupID = core.StringPtr("testString")
				pcloudPlacementgroupsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPlacementgroupsGet(pcloudPlacementgroupsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPlacementgroupsGet(pcloudPlacementgroupsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPlacementgroupsGet(pcloudPlacementgroupsGetOptions *PcloudPlacementgroupsGetOptions)`, func() {
		pcloudPlacementgroupsGetPath := "/pcloud/v1/cloud-instances/testString/placement-groups/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPlacementgroupsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "members": ["Members"], "name": "Name", "policy": "affinity"}`)
				}))
			})
			It(`Invoke PcloudPlacementgroupsGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudPlacementgroupsGetOptions model
				pcloudPlacementgroupsGetOptionsModel := new(powervsv1.PcloudPlacementgroupsGetOptions)
				pcloudPlacementgroupsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsGetOptionsModel.PlacementGroupID = core.StringPtr("testString")
				pcloudPlacementgroupsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPlacementgroupsGetWithContext(ctx, pcloudPlacementgroupsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPlacementgroupsGet(pcloudPlacementgroupsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPlacementgroupsGetWithContext(ctx, pcloudPlacementgroupsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPlacementgroupsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "members": ["Members"], "name": "Name", "policy": "affinity"}`)
				}))
			})
			It(`Invoke PcloudPlacementgroupsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPlacementgroupsGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudPlacementgroupsGetOptions model
				pcloudPlacementgroupsGetOptionsModel := new(powervsv1.PcloudPlacementgroupsGetOptions)
				pcloudPlacementgroupsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsGetOptionsModel.PlacementGroupID = core.StringPtr("testString")
				pcloudPlacementgroupsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPlacementgroupsGet(pcloudPlacementgroupsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPlacementgroupsGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPlacementgroupsGetOptions model
				pcloudPlacementgroupsGetOptionsModel := new(powervsv1.PcloudPlacementgroupsGetOptions)
				pcloudPlacementgroupsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsGetOptionsModel.PlacementGroupID = core.StringPtr("testString")
				pcloudPlacementgroupsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPlacementgroupsGet(pcloudPlacementgroupsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPlacementgroupsGetOptions model with no property values
				pcloudPlacementgroupsGetOptionsModelNew := new(powervsv1.PcloudPlacementgroupsGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPlacementgroupsGet(pcloudPlacementgroupsGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudPlacementgroupsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPlacementgroupsGetOptions model
				pcloudPlacementgroupsGetOptionsModel := new(powervsv1.PcloudPlacementgroupsGetOptions)
				pcloudPlacementgroupsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsGetOptionsModel.PlacementGroupID = core.StringPtr("testString")
				pcloudPlacementgroupsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPlacementgroupsGet(pcloudPlacementgroupsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPlacementgroupsMembersDelete(pcloudPlacementgroupsMembersDeleteOptions *PcloudPlacementgroupsMembersDeleteOptions) - Operation response error`, func() {
		pcloudPlacementgroupsMembersDeletePath := "/pcloud/v1/cloud-instances/testString/placement-groups/testString/members"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPlacementgroupsMembersDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPlacementgroupsMembersDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPlacementgroupsMembersDeleteOptions model
				pcloudPlacementgroupsMembersDeleteOptionsModel := new(powervsv1.PcloudPlacementgroupsMembersDeleteOptions)
				pcloudPlacementgroupsMembersDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersDeleteOptionsModel.PlacementGroupID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersDeleteOptionsModel.ID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPlacementgroupsMembersDelete(pcloudPlacementgroupsMembersDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPlacementgroupsMembersDelete(pcloudPlacementgroupsMembersDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPlacementgroupsMembersDelete(pcloudPlacementgroupsMembersDeleteOptions *PcloudPlacementgroupsMembersDeleteOptions)`, func() {
		pcloudPlacementgroupsMembersDeletePath := "/pcloud/v1/cloud-instances/testString/placement-groups/testString/members"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPlacementgroupsMembersDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "members": ["Members"], "name": "Name", "policy": "affinity"}`)
				}))
			})
			It(`Invoke PcloudPlacementgroupsMembersDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudPlacementgroupsMembersDeleteOptions model
				pcloudPlacementgroupsMembersDeleteOptionsModel := new(powervsv1.PcloudPlacementgroupsMembersDeleteOptions)
				pcloudPlacementgroupsMembersDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersDeleteOptionsModel.PlacementGroupID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersDeleteOptionsModel.ID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPlacementgroupsMembersDeleteWithContext(ctx, pcloudPlacementgroupsMembersDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPlacementgroupsMembersDelete(pcloudPlacementgroupsMembersDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPlacementgroupsMembersDeleteWithContext(ctx, pcloudPlacementgroupsMembersDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPlacementgroupsMembersDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "members": ["Members"], "name": "Name", "policy": "affinity"}`)
				}))
			})
			It(`Invoke PcloudPlacementgroupsMembersDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPlacementgroupsMembersDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudPlacementgroupsMembersDeleteOptions model
				pcloudPlacementgroupsMembersDeleteOptionsModel := new(powervsv1.PcloudPlacementgroupsMembersDeleteOptions)
				pcloudPlacementgroupsMembersDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersDeleteOptionsModel.PlacementGroupID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersDeleteOptionsModel.ID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPlacementgroupsMembersDelete(pcloudPlacementgroupsMembersDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPlacementgroupsMembersDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPlacementgroupsMembersDeleteOptions model
				pcloudPlacementgroupsMembersDeleteOptionsModel := new(powervsv1.PcloudPlacementgroupsMembersDeleteOptions)
				pcloudPlacementgroupsMembersDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersDeleteOptionsModel.PlacementGroupID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersDeleteOptionsModel.ID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPlacementgroupsMembersDelete(pcloudPlacementgroupsMembersDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPlacementgroupsMembersDeleteOptions model with no property values
				pcloudPlacementgroupsMembersDeleteOptionsModelNew := new(powervsv1.PcloudPlacementgroupsMembersDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPlacementgroupsMembersDelete(pcloudPlacementgroupsMembersDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudPlacementgroupsMembersDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPlacementgroupsMembersDeleteOptions model
				pcloudPlacementgroupsMembersDeleteOptionsModel := new(powervsv1.PcloudPlacementgroupsMembersDeleteOptions)
				pcloudPlacementgroupsMembersDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersDeleteOptionsModel.PlacementGroupID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersDeleteOptionsModel.ID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPlacementgroupsMembersDelete(pcloudPlacementgroupsMembersDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPlacementgroupsMembersPost(pcloudPlacementgroupsMembersPostOptions *PcloudPlacementgroupsMembersPostOptions) - Operation response error`, func() {
		pcloudPlacementgroupsMembersPostPath := "/pcloud/v1/cloud-instances/testString/placement-groups/testString/members"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPlacementgroupsMembersPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPlacementgroupsMembersPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPlacementgroupsMembersPostOptions model
				pcloudPlacementgroupsMembersPostOptionsModel := new(powervsv1.PcloudPlacementgroupsMembersPostOptions)
				pcloudPlacementgroupsMembersPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersPostOptionsModel.PlacementGroupID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersPostOptionsModel.ID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPlacementgroupsMembersPost(pcloudPlacementgroupsMembersPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPlacementgroupsMembersPost(pcloudPlacementgroupsMembersPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPlacementgroupsMembersPost(pcloudPlacementgroupsMembersPostOptions *PcloudPlacementgroupsMembersPostOptions)`, func() {
		pcloudPlacementgroupsMembersPostPath := "/pcloud/v1/cloud-instances/testString/placement-groups/testString/members"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPlacementgroupsMembersPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "members": ["Members"], "name": "Name", "policy": "affinity"}`)
				}))
			})
			It(`Invoke PcloudPlacementgroupsMembersPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudPlacementgroupsMembersPostOptions model
				pcloudPlacementgroupsMembersPostOptionsModel := new(powervsv1.PcloudPlacementgroupsMembersPostOptions)
				pcloudPlacementgroupsMembersPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersPostOptionsModel.PlacementGroupID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersPostOptionsModel.ID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPlacementgroupsMembersPostWithContext(ctx, pcloudPlacementgroupsMembersPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPlacementgroupsMembersPost(pcloudPlacementgroupsMembersPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPlacementgroupsMembersPostWithContext(ctx, pcloudPlacementgroupsMembersPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPlacementgroupsMembersPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "members": ["Members"], "name": "Name", "policy": "affinity"}`)
				}))
			})
			It(`Invoke PcloudPlacementgroupsMembersPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPlacementgroupsMembersPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudPlacementgroupsMembersPostOptions model
				pcloudPlacementgroupsMembersPostOptionsModel := new(powervsv1.PcloudPlacementgroupsMembersPostOptions)
				pcloudPlacementgroupsMembersPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersPostOptionsModel.PlacementGroupID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersPostOptionsModel.ID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPlacementgroupsMembersPost(pcloudPlacementgroupsMembersPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPlacementgroupsMembersPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPlacementgroupsMembersPostOptions model
				pcloudPlacementgroupsMembersPostOptionsModel := new(powervsv1.PcloudPlacementgroupsMembersPostOptions)
				pcloudPlacementgroupsMembersPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersPostOptionsModel.PlacementGroupID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersPostOptionsModel.ID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPlacementgroupsMembersPost(pcloudPlacementgroupsMembersPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPlacementgroupsMembersPostOptions model with no property values
				pcloudPlacementgroupsMembersPostOptionsModelNew := new(powervsv1.PcloudPlacementgroupsMembersPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPlacementgroupsMembersPost(pcloudPlacementgroupsMembersPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudPlacementgroupsMembersPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPlacementgroupsMembersPostOptions model
				pcloudPlacementgroupsMembersPostOptionsModel := new(powervsv1.PcloudPlacementgroupsMembersPostOptions)
				pcloudPlacementgroupsMembersPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersPostOptionsModel.PlacementGroupID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersPostOptionsModel.ID = core.StringPtr("testString")
				pcloudPlacementgroupsMembersPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPlacementgroupsMembersPost(pcloudPlacementgroupsMembersPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPodcapacityGet(pcloudPodcapacityGetOptions *PcloudPodcapacityGetOptions) - Operation response error`, func() {
		pcloudPodcapacityGetPath := "/pcloud/v1/cloud-instances/testString/pod-capacity"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPodcapacityGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPodcapacityGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPodcapacityGetOptions model
				pcloudPodcapacityGetOptionsModel := new(powervsv1.PcloudPodcapacityGetOptions)
				pcloudPodcapacityGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPodcapacityGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPodcapacityGet(pcloudPodcapacityGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPodcapacityGet(pcloudPodcapacityGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPodcapacityGet(pcloudPodcapacityGetOptions *PcloudPodcapacityGetOptions)`, func() {
		pcloudPodcapacityGetPath := "/pcloud/v1/cloud-instances/testString/pod-capacity"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPodcapacityGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"PodData": {"cores": 5, "memory": 6, "satLocationID": "SatLocationID", "storage": 7, "totalCores": 10, "totalMemory": 11, "totalPhysCores": 14, "totalPhysMemory": 15, "totalPhysStorage": 16, "totalStorage": 12}, "StorageControllers": {"mapKey": {"displayName": "DisplayName", "health": "Health", "poolStorage": 11, "poolTotalStorage": 16, "pools": {"mapKey": {"poolName": "PoolName", "storage": 7, "totalStorage": 12}}}}, "SystemPools": {"mapKey": {"cores": 5, "memory": 6, "systems": [{"cores": 5, "id": 2, "memory": 6, "totalCores": 10, "totalMemory": 11, "totalPhysCores": 14, "totalPhysMemory": 15}], "totalCores": 10, "totalMemory": 11, "totalPhysCores": 14, "totalPhysMemory": 15}}}`)
				}))
			})
			It(`Invoke PcloudPodcapacityGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudPodcapacityGetOptions model
				pcloudPodcapacityGetOptionsModel := new(powervsv1.PcloudPodcapacityGetOptions)
				pcloudPodcapacityGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPodcapacityGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPodcapacityGetWithContext(ctx, pcloudPodcapacityGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPodcapacityGet(pcloudPodcapacityGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPodcapacityGetWithContext(ctx, pcloudPodcapacityGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPodcapacityGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"PodData": {"cores": 5, "memory": 6, "satLocationID": "SatLocationID", "storage": 7, "totalCores": 10, "totalMemory": 11, "totalPhysCores": 14, "totalPhysMemory": 15, "totalPhysStorage": 16, "totalStorage": 12}, "StorageControllers": {"mapKey": {"displayName": "DisplayName", "health": "Health", "poolStorage": 11, "poolTotalStorage": 16, "pools": {"mapKey": {"poolName": "PoolName", "storage": 7, "totalStorage": 12}}}}, "SystemPools": {"mapKey": {"cores": 5, "memory": 6, "systems": [{"cores": 5, "id": 2, "memory": 6, "totalCores": 10, "totalMemory": 11, "totalPhysCores": 14, "totalPhysMemory": 15}], "totalCores": 10, "totalMemory": 11, "totalPhysCores": 14, "totalPhysMemory": 15}}}`)
				}))
			})
			It(`Invoke PcloudPodcapacityGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPodcapacityGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudPodcapacityGetOptions model
				pcloudPodcapacityGetOptionsModel := new(powervsv1.PcloudPodcapacityGetOptions)
				pcloudPodcapacityGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPodcapacityGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPodcapacityGet(pcloudPodcapacityGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPodcapacityGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPodcapacityGetOptions model
				pcloudPodcapacityGetOptionsModel := new(powervsv1.PcloudPodcapacityGetOptions)
				pcloudPodcapacityGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPodcapacityGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPodcapacityGet(pcloudPodcapacityGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPodcapacityGetOptions model with no property values
				pcloudPodcapacityGetOptionsModelNew := new(powervsv1.PcloudPodcapacityGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPodcapacityGet(pcloudPodcapacityGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudPodcapacityGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPodcapacityGetOptions model
				pcloudPodcapacityGetOptionsModel := new(powervsv1.PcloudPodcapacityGetOptions)
				pcloudPodcapacityGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPodcapacityGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPodcapacityGet(pcloudPodcapacityGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSapGetall(pcloudSapGetallOptions *PcloudSapGetallOptions) - Operation response error`, func() {
		pcloudSapGetallPath := "/pcloud/v1/cloud-instances/testString/sap"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSapGetallPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudSapGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSapGetallOptions model
				pcloudSapGetallOptionsModel := new(powervsv1.PcloudSapGetallOptions)
				pcloudSapGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSapGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudSapGetall(pcloudSapGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudSapGetall(pcloudSapGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSapGetall(pcloudSapGetallOptions *PcloudSapGetallOptions)`, func() {
		pcloudSapGetallPath := "/pcloud/v1/cloud-instances/testString/sap"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSapGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"profiles": [{"certified": false, "cores": 5, "memory": 6, "profileID": "ProfileID", "supportedSystems": ["SupportedSystems"], "type": "balanced"}]}`)
				}))
			})
			It(`Invoke PcloudSapGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudSapGetallOptions model
				pcloudSapGetallOptionsModel := new(powervsv1.PcloudSapGetallOptions)
				pcloudSapGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSapGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudSapGetallWithContext(ctx, pcloudSapGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudSapGetall(pcloudSapGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudSapGetallWithContext(ctx, pcloudSapGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSapGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"profiles": [{"certified": false, "cores": 5, "memory": 6, "profileID": "ProfileID", "supportedSystems": ["SupportedSystems"], "type": "balanced"}]}`)
				}))
			})
			It(`Invoke PcloudSapGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudSapGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudSapGetallOptions model
				pcloudSapGetallOptionsModel := new(powervsv1.PcloudSapGetallOptions)
				pcloudSapGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSapGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudSapGetall(pcloudSapGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudSapGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSapGetallOptions model
				pcloudSapGetallOptionsModel := new(powervsv1.PcloudSapGetallOptions)
				pcloudSapGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSapGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudSapGetall(pcloudSapGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudSapGetallOptions model with no property values
				pcloudSapGetallOptionsModelNew := new(powervsv1.PcloudSapGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudSapGetall(pcloudSapGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudSapGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSapGetallOptions model
				pcloudSapGetallOptionsModel := new(powervsv1.PcloudSapGetallOptions)
				pcloudSapGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSapGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudSapGetall(pcloudSapGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSapPost(pcloudSapPostOptions *PcloudSapPostOptions) - Operation response error`, func() {
		pcloudSapPostPath := "/pcloud/v1/cloud-instances/testString/sap"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSapPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudSapPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PvmInstanceAddNetwork model
				pvmInstanceAddNetworkModel := new(powervsv1.PvmInstanceAddNetwork)
				pvmInstanceAddNetworkModel.IPAddress = core.StringPtr("testString")
				pvmInstanceAddNetworkModel.NetworkID = core.StringPtr("testString")

				// Construct an instance of the PvmInstanceMultiCreate model
				pvmInstanceMultiCreateModel := new(powervsv1.PvmInstanceMultiCreate)
				pvmInstanceMultiCreateModel.AffinityPolicy = core.StringPtr("none")
				pvmInstanceMultiCreateModel.Count = core.Int64Ptr(int64(38))
				pvmInstanceMultiCreateModel.Numerical = core.StringPtr("suffix")

				// Construct an instance of the StorageAffinity model
				storageAffinityModel := new(powervsv1.StorageAffinity)
				storageAffinityModel.AffinityPvmInstance = core.StringPtr("testString")
				storageAffinityModel.AffinityPolicy = core.StringPtr("affinity")
				storageAffinityModel.AffinityVolume = core.StringPtr("testString")
				storageAffinityModel.AntiAffinityPvmInstances = []string{"testString"}
				storageAffinityModel.AntiAffinityVolumes = []string{"testString"}

				// Construct an instance of the PcloudSapPostOptions model
				pcloudSapPostOptionsModel := new(powervsv1.PcloudSapPostOptions)
				pcloudSapPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSapPostOptionsModel.ImageID = core.StringPtr("testString")
				pcloudSapPostOptionsModel.Name = core.StringPtr("testString")
				pcloudSapPostOptionsModel.Networks = []powervsv1.PvmInstanceAddNetwork{*pvmInstanceAddNetworkModel}
				pcloudSapPostOptionsModel.ProfileID = core.StringPtr("testString")
				pcloudSapPostOptionsModel.DeploymentType = core.StringPtr("testString")
				pcloudSapPostOptionsModel.Instances = pvmInstanceMultiCreateModel
				pcloudSapPostOptionsModel.PinPolicy = core.StringPtr("none")
				pcloudSapPostOptionsModel.PlacementGroup = core.StringPtr("testString")
				pcloudSapPostOptionsModel.SshKeyName = core.StringPtr("testString")
				pcloudSapPostOptionsModel.StorageAffinity = storageAffinityModel
				pcloudSapPostOptionsModel.StoragePool = core.StringPtr("testString")
				pcloudSapPostOptionsModel.StorageType = core.StringPtr("testString")
				pcloudSapPostOptionsModel.SysType = core.StringPtr("testString")
				pcloudSapPostOptionsModel.UserData = core.StringPtr("testString")
				pcloudSapPostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudSapPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudSapPost(pcloudSapPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudSapPost(pcloudSapPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSapPost(pcloudSapPostOptions *PcloudSapPostOptions)`, func() {
		pcloudSapPostPath := "/pcloud/v1/cloud-instances/testString/sap"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSapPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"addresses": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}], "consoleLanguage": {"code": "Code", "language": "Language"}, "creationDate": "2019-01-01T12:00:00.000Z", "deploymentType": "DeploymentType", "diskSize": 8, "fault": {"code": 4, "created": "2019-01-01T12:00:00.000Z", "details": "Details", "message": "Message"}, "health": {"lastUpdate": "LastUpdate", "reason": "Reason", "status": "Status"}, "hostID": 6, "imageID": "ImageID", "licenseRepositoryCapacity": 25, "maxmem": 6, "maxproc": 7, "memory": 6, "migratable": true, "minmem": 6, "minproc": 7, "networkIDs": ["NetworkIDs"], "networks": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}], "operatingSystem": "OperatingSystem", "osType": "OsType", "pinPolicy": "PinPolicy", "placementGroup": "none", "procType": "dedicated", "processors": 10, "progress": 8, "pvmInstanceID": "PvmInstanceID", "sapProfile": {"href": "Href", "profileID": "ProfileID"}, "serverName": "ServerName", "sharedProcessorPool": "SharedProcessorPool", "sharedProcessorPoolID": "SharedProcessorPoolID", "softwareLicenses": {"ibmiCSS": false, "ibmiDBQ": false, "ibmiPHA": false, "ibmiRDS": false, "ibmiRDSUsers": 12}, "srcs": [[{"src": "Src", "timestamp": "Timestamp"}]], "status": "Status", "storageConnection": "StorageConnection", "storagePool": "StoragePool", "storagePoolAffinity": true, "storageType": "StorageType", "sysType": "SysType", "updatedDate": "2019-01-01T12:00:00.000Z", "virtualCores": {"assigned": 8, "max": 3, "min": 3}, "volumeIDs": ["VolumeIDs"]}]`)
				}))
			})
			It(`Invoke PcloudSapPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PvmInstanceAddNetwork model
				pvmInstanceAddNetworkModel := new(powervsv1.PvmInstanceAddNetwork)
				pvmInstanceAddNetworkModel.IPAddress = core.StringPtr("testString")
				pvmInstanceAddNetworkModel.NetworkID = core.StringPtr("testString")

				// Construct an instance of the PvmInstanceMultiCreate model
				pvmInstanceMultiCreateModel := new(powervsv1.PvmInstanceMultiCreate)
				pvmInstanceMultiCreateModel.AffinityPolicy = core.StringPtr("none")
				pvmInstanceMultiCreateModel.Count = core.Int64Ptr(int64(38))
				pvmInstanceMultiCreateModel.Numerical = core.StringPtr("suffix")

				// Construct an instance of the StorageAffinity model
				storageAffinityModel := new(powervsv1.StorageAffinity)
				storageAffinityModel.AffinityPvmInstance = core.StringPtr("testString")
				storageAffinityModel.AffinityPolicy = core.StringPtr("affinity")
				storageAffinityModel.AffinityVolume = core.StringPtr("testString")
				storageAffinityModel.AntiAffinityPvmInstances = []string{"testString"}
				storageAffinityModel.AntiAffinityVolumes = []string{"testString"}

				// Construct an instance of the PcloudSapPostOptions model
				pcloudSapPostOptionsModel := new(powervsv1.PcloudSapPostOptions)
				pcloudSapPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSapPostOptionsModel.ImageID = core.StringPtr("testString")
				pcloudSapPostOptionsModel.Name = core.StringPtr("testString")
				pcloudSapPostOptionsModel.Networks = []powervsv1.PvmInstanceAddNetwork{*pvmInstanceAddNetworkModel}
				pcloudSapPostOptionsModel.ProfileID = core.StringPtr("testString")
				pcloudSapPostOptionsModel.DeploymentType = core.StringPtr("testString")
				pcloudSapPostOptionsModel.Instances = pvmInstanceMultiCreateModel
				pcloudSapPostOptionsModel.PinPolicy = core.StringPtr("none")
				pcloudSapPostOptionsModel.PlacementGroup = core.StringPtr("testString")
				pcloudSapPostOptionsModel.SshKeyName = core.StringPtr("testString")
				pcloudSapPostOptionsModel.StorageAffinity = storageAffinityModel
				pcloudSapPostOptionsModel.StoragePool = core.StringPtr("testString")
				pcloudSapPostOptionsModel.StorageType = core.StringPtr("testString")
				pcloudSapPostOptionsModel.SysType = core.StringPtr("testString")
				pcloudSapPostOptionsModel.UserData = core.StringPtr("testString")
				pcloudSapPostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudSapPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudSapPostWithContext(ctx, pcloudSapPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudSapPost(pcloudSapPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudSapPostWithContext(ctx, pcloudSapPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSapPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"addresses": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}], "consoleLanguage": {"code": "Code", "language": "Language"}, "creationDate": "2019-01-01T12:00:00.000Z", "deploymentType": "DeploymentType", "diskSize": 8, "fault": {"code": 4, "created": "2019-01-01T12:00:00.000Z", "details": "Details", "message": "Message"}, "health": {"lastUpdate": "LastUpdate", "reason": "Reason", "status": "Status"}, "hostID": 6, "imageID": "ImageID", "licenseRepositoryCapacity": 25, "maxmem": 6, "maxproc": 7, "memory": 6, "migratable": true, "minmem": 6, "minproc": 7, "networkIDs": ["NetworkIDs"], "networks": [{"externalIP": "ExternalIP", "href": "Href", "ip": "IP", "ipAddress": "IPAddress", "macAddress": "MacAddress", "networkID": "NetworkID", "networkName": "NetworkName", "type": "Type", "version": 7}], "operatingSystem": "OperatingSystem", "osType": "OsType", "pinPolicy": "PinPolicy", "placementGroup": "none", "procType": "dedicated", "processors": 10, "progress": 8, "pvmInstanceID": "PvmInstanceID", "sapProfile": {"href": "Href", "profileID": "ProfileID"}, "serverName": "ServerName", "sharedProcessorPool": "SharedProcessorPool", "sharedProcessorPoolID": "SharedProcessorPoolID", "softwareLicenses": {"ibmiCSS": false, "ibmiDBQ": false, "ibmiPHA": false, "ibmiRDS": false, "ibmiRDSUsers": 12}, "srcs": [[{"src": "Src", "timestamp": "Timestamp"}]], "status": "Status", "storageConnection": "StorageConnection", "storagePool": "StoragePool", "storagePoolAffinity": true, "storageType": "StorageType", "sysType": "SysType", "updatedDate": "2019-01-01T12:00:00.000Z", "virtualCores": {"assigned": 8, "max": 3, "min": 3}, "volumeIDs": ["VolumeIDs"]}]`)
				}))
			})
			It(`Invoke PcloudSapPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudSapPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PvmInstanceAddNetwork model
				pvmInstanceAddNetworkModel := new(powervsv1.PvmInstanceAddNetwork)
				pvmInstanceAddNetworkModel.IPAddress = core.StringPtr("testString")
				pvmInstanceAddNetworkModel.NetworkID = core.StringPtr("testString")

				// Construct an instance of the PvmInstanceMultiCreate model
				pvmInstanceMultiCreateModel := new(powervsv1.PvmInstanceMultiCreate)
				pvmInstanceMultiCreateModel.AffinityPolicy = core.StringPtr("none")
				pvmInstanceMultiCreateModel.Count = core.Int64Ptr(int64(38))
				pvmInstanceMultiCreateModel.Numerical = core.StringPtr("suffix")

				// Construct an instance of the StorageAffinity model
				storageAffinityModel := new(powervsv1.StorageAffinity)
				storageAffinityModel.AffinityPvmInstance = core.StringPtr("testString")
				storageAffinityModel.AffinityPolicy = core.StringPtr("affinity")
				storageAffinityModel.AffinityVolume = core.StringPtr("testString")
				storageAffinityModel.AntiAffinityPvmInstances = []string{"testString"}
				storageAffinityModel.AntiAffinityVolumes = []string{"testString"}

				// Construct an instance of the PcloudSapPostOptions model
				pcloudSapPostOptionsModel := new(powervsv1.PcloudSapPostOptions)
				pcloudSapPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSapPostOptionsModel.ImageID = core.StringPtr("testString")
				pcloudSapPostOptionsModel.Name = core.StringPtr("testString")
				pcloudSapPostOptionsModel.Networks = []powervsv1.PvmInstanceAddNetwork{*pvmInstanceAddNetworkModel}
				pcloudSapPostOptionsModel.ProfileID = core.StringPtr("testString")
				pcloudSapPostOptionsModel.DeploymentType = core.StringPtr("testString")
				pcloudSapPostOptionsModel.Instances = pvmInstanceMultiCreateModel
				pcloudSapPostOptionsModel.PinPolicy = core.StringPtr("none")
				pcloudSapPostOptionsModel.PlacementGroup = core.StringPtr("testString")
				pcloudSapPostOptionsModel.SshKeyName = core.StringPtr("testString")
				pcloudSapPostOptionsModel.StorageAffinity = storageAffinityModel
				pcloudSapPostOptionsModel.StoragePool = core.StringPtr("testString")
				pcloudSapPostOptionsModel.StorageType = core.StringPtr("testString")
				pcloudSapPostOptionsModel.SysType = core.StringPtr("testString")
				pcloudSapPostOptionsModel.UserData = core.StringPtr("testString")
				pcloudSapPostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudSapPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudSapPost(pcloudSapPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudSapPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PvmInstanceAddNetwork model
				pvmInstanceAddNetworkModel := new(powervsv1.PvmInstanceAddNetwork)
				pvmInstanceAddNetworkModel.IPAddress = core.StringPtr("testString")
				pvmInstanceAddNetworkModel.NetworkID = core.StringPtr("testString")

				// Construct an instance of the PvmInstanceMultiCreate model
				pvmInstanceMultiCreateModel := new(powervsv1.PvmInstanceMultiCreate)
				pvmInstanceMultiCreateModel.AffinityPolicy = core.StringPtr("none")
				pvmInstanceMultiCreateModel.Count = core.Int64Ptr(int64(38))
				pvmInstanceMultiCreateModel.Numerical = core.StringPtr("suffix")

				// Construct an instance of the StorageAffinity model
				storageAffinityModel := new(powervsv1.StorageAffinity)
				storageAffinityModel.AffinityPvmInstance = core.StringPtr("testString")
				storageAffinityModel.AffinityPolicy = core.StringPtr("affinity")
				storageAffinityModel.AffinityVolume = core.StringPtr("testString")
				storageAffinityModel.AntiAffinityPvmInstances = []string{"testString"}
				storageAffinityModel.AntiAffinityVolumes = []string{"testString"}

				// Construct an instance of the PcloudSapPostOptions model
				pcloudSapPostOptionsModel := new(powervsv1.PcloudSapPostOptions)
				pcloudSapPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSapPostOptionsModel.ImageID = core.StringPtr("testString")
				pcloudSapPostOptionsModel.Name = core.StringPtr("testString")
				pcloudSapPostOptionsModel.Networks = []powervsv1.PvmInstanceAddNetwork{*pvmInstanceAddNetworkModel}
				pcloudSapPostOptionsModel.ProfileID = core.StringPtr("testString")
				pcloudSapPostOptionsModel.DeploymentType = core.StringPtr("testString")
				pcloudSapPostOptionsModel.Instances = pvmInstanceMultiCreateModel
				pcloudSapPostOptionsModel.PinPolicy = core.StringPtr("none")
				pcloudSapPostOptionsModel.PlacementGroup = core.StringPtr("testString")
				pcloudSapPostOptionsModel.SshKeyName = core.StringPtr("testString")
				pcloudSapPostOptionsModel.StorageAffinity = storageAffinityModel
				pcloudSapPostOptionsModel.StoragePool = core.StringPtr("testString")
				pcloudSapPostOptionsModel.StorageType = core.StringPtr("testString")
				pcloudSapPostOptionsModel.SysType = core.StringPtr("testString")
				pcloudSapPostOptionsModel.UserData = core.StringPtr("testString")
				pcloudSapPostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudSapPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudSapPost(pcloudSapPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudSapPostOptions model with no property values
				pcloudSapPostOptionsModelNew := new(powervsv1.PcloudSapPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudSapPost(pcloudSapPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudSapPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PvmInstanceAddNetwork model
				pvmInstanceAddNetworkModel := new(powervsv1.PvmInstanceAddNetwork)
				pvmInstanceAddNetworkModel.IPAddress = core.StringPtr("testString")
				pvmInstanceAddNetworkModel.NetworkID = core.StringPtr("testString")

				// Construct an instance of the PvmInstanceMultiCreate model
				pvmInstanceMultiCreateModel := new(powervsv1.PvmInstanceMultiCreate)
				pvmInstanceMultiCreateModel.AffinityPolicy = core.StringPtr("none")
				pvmInstanceMultiCreateModel.Count = core.Int64Ptr(int64(38))
				pvmInstanceMultiCreateModel.Numerical = core.StringPtr("suffix")

				// Construct an instance of the StorageAffinity model
				storageAffinityModel := new(powervsv1.StorageAffinity)
				storageAffinityModel.AffinityPvmInstance = core.StringPtr("testString")
				storageAffinityModel.AffinityPolicy = core.StringPtr("affinity")
				storageAffinityModel.AffinityVolume = core.StringPtr("testString")
				storageAffinityModel.AntiAffinityPvmInstances = []string{"testString"}
				storageAffinityModel.AntiAffinityVolumes = []string{"testString"}

				// Construct an instance of the PcloudSapPostOptions model
				pcloudSapPostOptionsModel := new(powervsv1.PcloudSapPostOptions)
				pcloudSapPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSapPostOptionsModel.ImageID = core.StringPtr("testString")
				pcloudSapPostOptionsModel.Name = core.StringPtr("testString")
				pcloudSapPostOptionsModel.Networks = []powervsv1.PvmInstanceAddNetwork{*pvmInstanceAddNetworkModel}
				pcloudSapPostOptionsModel.ProfileID = core.StringPtr("testString")
				pcloudSapPostOptionsModel.DeploymentType = core.StringPtr("testString")
				pcloudSapPostOptionsModel.Instances = pvmInstanceMultiCreateModel
				pcloudSapPostOptionsModel.PinPolicy = core.StringPtr("none")
				pcloudSapPostOptionsModel.PlacementGroup = core.StringPtr("testString")
				pcloudSapPostOptionsModel.SshKeyName = core.StringPtr("testString")
				pcloudSapPostOptionsModel.StorageAffinity = storageAffinityModel
				pcloudSapPostOptionsModel.StoragePool = core.StringPtr("testString")
				pcloudSapPostOptionsModel.StorageType = core.StringPtr("testString")
				pcloudSapPostOptionsModel.SysType = core.StringPtr("testString")
				pcloudSapPostOptionsModel.UserData = core.StringPtr("testString")
				pcloudSapPostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudSapPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudSapPost(pcloudSapPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSapGet(pcloudSapGetOptions *PcloudSapGetOptions) - Operation response error`, func() {
		pcloudSapGetPath := "/pcloud/v1/cloud-instances/testString/sap/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSapGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudSapGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSapGetOptions model
				pcloudSapGetOptionsModel := new(powervsv1.PcloudSapGetOptions)
				pcloudSapGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSapGetOptionsModel.SapProfileID = core.StringPtr("testString")
				pcloudSapGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudSapGet(pcloudSapGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudSapGet(pcloudSapGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSapGet(pcloudSapGetOptions *PcloudSapGetOptions)`, func() {
		pcloudSapGetPath := "/pcloud/v1/cloud-instances/testString/sap/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSapGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"certified": false, "cores": 5, "memory": 6, "profileID": "ProfileID", "supportedSystems": ["SupportedSystems"], "type": "balanced"}`)
				}))
			})
			It(`Invoke PcloudSapGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudSapGetOptions model
				pcloudSapGetOptionsModel := new(powervsv1.PcloudSapGetOptions)
				pcloudSapGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSapGetOptionsModel.SapProfileID = core.StringPtr("testString")
				pcloudSapGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudSapGetWithContext(ctx, pcloudSapGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudSapGet(pcloudSapGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudSapGetWithContext(ctx, pcloudSapGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSapGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"certified": false, "cores": 5, "memory": 6, "profileID": "ProfileID", "supportedSystems": ["SupportedSystems"], "type": "balanced"}`)
				}))
			})
			It(`Invoke PcloudSapGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudSapGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudSapGetOptions model
				pcloudSapGetOptionsModel := new(powervsv1.PcloudSapGetOptions)
				pcloudSapGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSapGetOptionsModel.SapProfileID = core.StringPtr("testString")
				pcloudSapGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudSapGet(pcloudSapGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudSapGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSapGetOptions model
				pcloudSapGetOptionsModel := new(powervsv1.PcloudSapGetOptions)
				pcloudSapGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSapGetOptionsModel.SapProfileID = core.StringPtr("testString")
				pcloudSapGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudSapGet(pcloudSapGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudSapGetOptions model with no property values
				pcloudSapGetOptionsModelNew := new(powervsv1.PcloudSapGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudSapGet(pcloudSapGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudSapGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSapGetOptions model
				pcloudSapGetOptionsModel := new(powervsv1.PcloudSapGetOptions)
				pcloudSapGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSapGetOptionsModel.SapProfileID = core.StringPtr("testString")
				pcloudSapGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudSapGet(pcloudSapGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSppplacementgroupsGetall(pcloudSppplacementgroupsGetallOptions *PcloudSppplacementgroupsGetallOptions) - Operation response error`, func() {
		pcloudSppplacementgroupsGetallPath := "/pcloud/v1/cloud-instances/testString/spp-placement-groups"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSppplacementgroupsGetallPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudSppplacementgroupsGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSppplacementgroupsGetallOptions model
				pcloudSppplacementgroupsGetallOptionsModel := new(powervsv1.PcloudSppplacementgroupsGetallOptions)
				pcloudSppplacementgroupsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudSppplacementgroupsGetall(pcloudSppplacementgroupsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudSppplacementgroupsGetall(pcloudSppplacementgroupsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSppplacementgroupsGetall(pcloudSppplacementgroupsGetallOptions *PcloudSppplacementgroupsGetallOptions)`, func() {
		pcloudSppplacementgroupsGetallPath := "/pcloud/v1/cloud-instances/testString/spp-placement-groups"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSppplacementgroupsGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"sppPlacementGroups": [{"id": "ID", "memberSharedProcessorPools": ["MemberSharedProcessorPools"], "name": "Name", "policy": "Policy"}]}`)
				}))
			})
			It(`Invoke PcloudSppplacementgroupsGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudSppplacementgroupsGetallOptions model
				pcloudSppplacementgroupsGetallOptionsModel := new(powervsv1.PcloudSppplacementgroupsGetallOptions)
				pcloudSppplacementgroupsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudSppplacementgroupsGetallWithContext(ctx, pcloudSppplacementgroupsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudSppplacementgroupsGetall(pcloudSppplacementgroupsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudSppplacementgroupsGetallWithContext(ctx, pcloudSppplacementgroupsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSppplacementgroupsGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"sppPlacementGroups": [{"id": "ID", "memberSharedProcessorPools": ["MemberSharedProcessorPools"], "name": "Name", "policy": "Policy"}]}`)
				}))
			})
			It(`Invoke PcloudSppplacementgroupsGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudSppplacementgroupsGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudSppplacementgroupsGetallOptions model
				pcloudSppplacementgroupsGetallOptionsModel := new(powervsv1.PcloudSppplacementgroupsGetallOptions)
				pcloudSppplacementgroupsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudSppplacementgroupsGetall(pcloudSppplacementgroupsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudSppplacementgroupsGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSppplacementgroupsGetallOptions model
				pcloudSppplacementgroupsGetallOptionsModel := new(powervsv1.PcloudSppplacementgroupsGetallOptions)
				pcloudSppplacementgroupsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudSppplacementgroupsGetall(pcloudSppplacementgroupsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudSppplacementgroupsGetallOptions model with no property values
				pcloudSppplacementgroupsGetallOptionsModelNew := new(powervsv1.PcloudSppplacementgroupsGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudSppplacementgroupsGetall(pcloudSppplacementgroupsGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudSppplacementgroupsGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSppplacementgroupsGetallOptions model
				pcloudSppplacementgroupsGetallOptionsModel := new(powervsv1.PcloudSppplacementgroupsGetallOptions)
				pcloudSppplacementgroupsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudSppplacementgroupsGetall(pcloudSppplacementgroupsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSppplacementgroupsPost(pcloudSppplacementgroupsPostOptions *PcloudSppplacementgroupsPostOptions) - Operation response error`, func() {
		pcloudSppplacementgroupsPostPath := "/pcloud/v1/cloud-instances/testString/spp-placement-groups"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSppplacementgroupsPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudSppplacementgroupsPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSppplacementgroupsPostOptions model
				pcloudSppplacementgroupsPostOptionsModel := new(powervsv1.PcloudSppplacementgroupsPostOptions)
				pcloudSppplacementgroupsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudSppplacementgroupsPostOptionsModel.Policy = core.StringPtr("affinity")
				pcloudSppplacementgroupsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudSppplacementgroupsPost(pcloudSppplacementgroupsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudSppplacementgroupsPost(pcloudSppplacementgroupsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSppplacementgroupsPost(pcloudSppplacementgroupsPostOptions *PcloudSppplacementgroupsPostOptions)`, func() {
		pcloudSppplacementgroupsPostPath := "/pcloud/v1/cloud-instances/testString/spp-placement-groups"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSppplacementgroupsPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "memberSharedProcessorPools": ["MemberSharedProcessorPools"], "name": "Name", "policy": "Policy"}`)
				}))
			})
			It(`Invoke PcloudSppplacementgroupsPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudSppplacementgroupsPostOptions model
				pcloudSppplacementgroupsPostOptionsModel := new(powervsv1.PcloudSppplacementgroupsPostOptions)
				pcloudSppplacementgroupsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudSppplacementgroupsPostOptionsModel.Policy = core.StringPtr("affinity")
				pcloudSppplacementgroupsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudSppplacementgroupsPostWithContext(ctx, pcloudSppplacementgroupsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudSppplacementgroupsPost(pcloudSppplacementgroupsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudSppplacementgroupsPostWithContext(ctx, pcloudSppplacementgroupsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSppplacementgroupsPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "memberSharedProcessorPools": ["MemberSharedProcessorPools"], "name": "Name", "policy": "Policy"}`)
				}))
			})
			It(`Invoke PcloudSppplacementgroupsPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudSppplacementgroupsPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudSppplacementgroupsPostOptions model
				pcloudSppplacementgroupsPostOptionsModel := new(powervsv1.PcloudSppplacementgroupsPostOptions)
				pcloudSppplacementgroupsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudSppplacementgroupsPostOptionsModel.Policy = core.StringPtr("affinity")
				pcloudSppplacementgroupsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudSppplacementgroupsPost(pcloudSppplacementgroupsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudSppplacementgroupsPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSppplacementgroupsPostOptions model
				pcloudSppplacementgroupsPostOptionsModel := new(powervsv1.PcloudSppplacementgroupsPostOptions)
				pcloudSppplacementgroupsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudSppplacementgroupsPostOptionsModel.Policy = core.StringPtr("affinity")
				pcloudSppplacementgroupsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudSppplacementgroupsPost(pcloudSppplacementgroupsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudSppplacementgroupsPostOptions model with no property values
				pcloudSppplacementgroupsPostOptionsModelNew := new(powervsv1.PcloudSppplacementgroupsPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudSppplacementgroupsPost(pcloudSppplacementgroupsPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudSppplacementgroupsPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSppplacementgroupsPostOptions model
				pcloudSppplacementgroupsPostOptionsModel := new(powervsv1.PcloudSppplacementgroupsPostOptions)
				pcloudSppplacementgroupsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudSppplacementgroupsPostOptionsModel.Policy = core.StringPtr("affinity")
				pcloudSppplacementgroupsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudSppplacementgroupsPost(pcloudSppplacementgroupsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSppplacementgroupsDelete(pcloudSppplacementgroupsDeleteOptions *PcloudSppplacementgroupsDeleteOptions) - Operation response error`, func() {
		pcloudSppplacementgroupsDeletePath := "/pcloud/v1/cloud-instances/testString/spp-placement-groups/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSppplacementgroupsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudSppplacementgroupsDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSppplacementgroupsDeleteOptions model
				pcloudSppplacementgroupsDeleteOptionsModel := new(powervsv1.PcloudSppplacementgroupsDeleteOptions)
				pcloudSppplacementgroupsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsDeleteOptionsModel.SppPlacementGroupID = core.StringPtr("testString")
				pcloudSppplacementgroupsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudSppplacementgroupsDelete(pcloudSppplacementgroupsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudSppplacementgroupsDelete(pcloudSppplacementgroupsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSppplacementgroupsDelete(pcloudSppplacementgroupsDeleteOptions *PcloudSppplacementgroupsDeleteOptions)`, func() {
		pcloudSppplacementgroupsDeletePath := "/pcloud/v1/cloud-instances/testString/spp-placement-groups/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSppplacementgroupsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudSppplacementgroupsDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudSppplacementgroupsDeleteOptions model
				pcloudSppplacementgroupsDeleteOptionsModel := new(powervsv1.PcloudSppplacementgroupsDeleteOptions)
				pcloudSppplacementgroupsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsDeleteOptionsModel.SppPlacementGroupID = core.StringPtr("testString")
				pcloudSppplacementgroupsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudSppplacementgroupsDeleteWithContext(ctx, pcloudSppplacementgroupsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudSppplacementgroupsDelete(pcloudSppplacementgroupsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudSppplacementgroupsDeleteWithContext(ctx, pcloudSppplacementgroupsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSppplacementgroupsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudSppplacementgroupsDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudSppplacementgroupsDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudSppplacementgroupsDeleteOptions model
				pcloudSppplacementgroupsDeleteOptionsModel := new(powervsv1.PcloudSppplacementgroupsDeleteOptions)
				pcloudSppplacementgroupsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsDeleteOptionsModel.SppPlacementGroupID = core.StringPtr("testString")
				pcloudSppplacementgroupsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudSppplacementgroupsDelete(pcloudSppplacementgroupsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudSppplacementgroupsDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSppplacementgroupsDeleteOptions model
				pcloudSppplacementgroupsDeleteOptionsModel := new(powervsv1.PcloudSppplacementgroupsDeleteOptions)
				pcloudSppplacementgroupsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsDeleteOptionsModel.SppPlacementGroupID = core.StringPtr("testString")
				pcloudSppplacementgroupsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudSppplacementgroupsDelete(pcloudSppplacementgroupsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudSppplacementgroupsDeleteOptions model with no property values
				pcloudSppplacementgroupsDeleteOptionsModelNew := new(powervsv1.PcloudSppplacementgroupsDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudSppplacementgroupsDelete(pcloudSppplacementgroupsDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudSppplacementgroupsDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSppplacementgroupsDeleteOptions model
				pcloudSppplacementgroupsDeleteOptionsModel := new(powervsv1.PcloudSppplacementgroupsDeleteOptions)
				pcloudSppplacementgroupsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsDeleteOptionsModel.SppPlacementGroupID = core.StringPtr("testString")
				pcloudSppplacementgroupsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudSppplacementgroupsDelete(pcloudSppplacementgroupsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSppplacementgroupsGet(pcloudSppplacementgroupsGetOptions *PcloudSppplacementgroupsGetOptions) - Operation response error`, func() {
		pcloudSppplacementgroupsGetPath := "/pcloud/v1/cloud-instances/testString/spp-placement-groups/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSppplacementgroupsGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudSppplacementgroupsGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSppplacementgroupsGetOptions model
				pcloudSppplacementgroupsGetOptionsModel := new(powervsv1.PcloudSppplacementgroupsGetOptions)
				pcloudSppplacementgroupsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsGetOptionsModel.SppPlacementGroupID = core.StringPtr("testString")
				pcloudSppplacementgroupsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudSppplacementgroupsGet(pcloudSppplacementgroupsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudSppplacementgroupsGet(pcloudSppplacementgroupsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSppplacementgroupsGet(pcloudSppplacementgroupsGetOptions *PcloudSppplacementgroupsGetOptions)`, func() {
		pcloudSppplacementgroupsGetPath := "/pcloud/v1/cloud-instances/testString/spp-placement-groups/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSppplacementgroupsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "memberSharedProcessorPools": ["MemberSharedProcessorPools"], "name": "Name", "policy": "Policy"}`)
				}))
			})
			It(`Invoke PcloudSppplacementgroupsGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudSppplacementgroupsGetOptions model
				pcloudSppplacementgroupsGetOptionsModel := new(powervsv1.PcloudSppplacementgroupsGetOptions)
				pcloudSppplacementgroupsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsGetOptionsModel.SppPlacementGroupID = core.StringPtr("testString")
				pcloudSppplacementgroupsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudSppplacementgroupsGetWithContext(ctx, pcloudSppplacementgroupsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudSppplacementgroupsGet(pcloudSppplacementgroupsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudSppplacementgroupsGetWithContext(ctx, pcloudSppplacementgroupsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSppplacementgroupsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "memberSharedProcessorPools": ["MemberSharedProcessorPools"], "name": "Name", "policy": "Policy"}`)
				}))
			})
			It(`Invoke PcloudSppplacementgroupsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudSppplacementgroupsGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudSppplacementgroupsGetOptions model
				pcloudSppplacementgroupsGetOptionsModel := new(powervsv1.PcloudSppplacementgroupsGetOptions)
				pcloudSppplacementgroupsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsGetOptionsModel.SppPlacementGroupID = core.StringPtr("testString")
				pcloudSppplacementgroupsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudSppplacementgroupsGet(pcloudSppplacementgroupsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudSppplacementgroupsGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSppplacementgroupsGetOptions model
				pcloudSppplacementgroupsGetOptionsModel := new(powervsv1.PcloudSppplacementgroupsGetOptions)
				pcloudSppplacementgroupsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsGetOptionsModel.SppPlacementGroupID = core.StringPtr("testString")
				pcloudSppplacementgroupsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudSppplacementgroupsGet(pcloudSppplacementgroupsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudSppplacementgroupsGetOptions model with no property values
				pcloudSppplacementgroupsGetOptionsModelNew := new(powervsv1.PcloudSppplacementgroupsGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudSppplacementgroupsGet(pcloudSppplacementgroupsGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudSppplacementgroupsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSppplacementgroupsGetOptions model
				pcloudSppplacementgroupsGetOptionsModel := new(powervsv1.PcloudSppplacementgroupsGetOptions)
				pcloudSppplacementgroupsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsGetOptionsModel.SppPlacementGroupID = core.StringPtr("testString")
				pcloudSppplacementgroupsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudSppplacementgroupsGet(pcloudSppplacementgroupsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSppplacementgroupsMembersDelete(pcloudSppplacementgroupsMembersDeleteOptions *PcloudSppplacementgroupsMembersDeleteOptions) - Operation response error`, func() {
		pcloudSppplacementgroupsMembersDeletePath := "/pcloud/v1/cloud-instances/testString/spp-placement-groups/testString/members/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSppplacementgroupsMembersDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudSppplacementgroupsMembersDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSppplacementgroupsMembersDeleteOptions model
				pcloudSppplacementgroupsMembersDeleteOptionsModel := new(powervsv1.PcloudSppplacementgroupsMembersDeleteOptions)
				pcloudSppplacementgroupsMembersDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersDeleteOptionsModel.SppPlacementGroupID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersDeleteOptionsModel.SharedProcessorPoolID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudSppplacementgroupsMembersDelete(pcloudSppplacementgroupsMembersDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudSppplacementgroupsMembersDelete(pcloudSppplacementgroupsMembersDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSppplacementgroupsMembersDelete(pcloudSppplacementgroupsMembersDeleteOptions *PcloudSppplacementgroupsMembersDeleteOptions)`, func() {
		pcloudSppplacementgroupsMembersDeletePath := "/pcloud/v1/cloud-instances/testString/spp-placement-groups/testString/members/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSppplacementgroupsMembersDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "memberSharedProcessorPools": ["MemberSharedProcessorPools"], "name": "Name", "policy": "Policy"}`)
				}))
			})
			It(`Invoke PcloudSppplacementgroupsMembersDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudSppplacementgroupsMembersDeleteOptions model
				pcloudSppplacementgroupsMembersDeleteOptionsModel := new(powervsv1.PcloudSppplacementgroupsMembersDeleteOptions)
				pcloudSppplacementgroupsMembersDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersDeleteOptionsModel.SppPlacementGroupID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersDeleteOptionsModel.SharedProcessorPoolID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudSppplacementgroupsMembersDeleteWithContext(ctx, pcloudSppplacementgroupsMembersDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudSppplacementgroupsMembersDelete(pcloudSppplacementgroupsMembersDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudSppplacementgroupsMembersDeleteWithContext(ctx, pcloudSppplacementgroupsMembersDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSppplacementgroupsMembersDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "memberSharedProcessorPools": ["MemberSharedProcessorPools"], "name": "Name", "policy": "Policy"}`)
				}))
			})
			It(`Invoke PcloudSppplacementgroupsMembersDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudSppplacementgroupsMembersDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudSppplacementgroupsMembersDeleteOptions model
				pcloudSppplacementgroupsMembersDeleteOptionsModel := new(powervsv1.PcloudSppplacementgroupsMembersDeleteOptions)
				pcloudSppplacementgroupsMembersDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersDeleteOptionsModel.SppPlacementGroupID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersDeleteOptionsModel.SharedProcessorPoolID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudSppplacementgroupsMembersDelete(pcloudSppplacementgroupsMembersDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudSppplacementgroupsMembersDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSppplacementgroupsMembersDeleteOptions model
				pcloudSppplacementgroupsMembersDeleteOptionsModel := new(powervsv1.PcloudSppplacementgroupsMembersDeleteOptions)
				pcloudSppplacementgroupsMembersDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersDeleteOptionsModel.SppPlacementGroupID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersDeleteOptionsModel.SharedProcessorPoolID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudSppplacementgroupsMembersDelete(pcloudSppplacementgroupsMembersDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudSppplacementgroupsMembersDeleteOptions model with no property values
				pcloudSppplacementgroupsMembersDeleteOptionsModelNew := new(powervsv1.PcloudSppplacementgroupsMembersDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudSppplacementgroupsMembersDelete(pcloudSppplacementgroupsMembersDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudSppplacementgroupsMembersDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSppplacementgroupsMembersDeleteOptions model
				pcloudSppplacementgroupsMembersDeleteOptionsModel := new(powervsv1.PcloudSppplacementgroupsMembersDeleteOptions)
				pcloudSppplacementgroupsMembersDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersDeleteOptionsModel.SppPlacementGroupID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersDeleteOptionsModel.SharedProcessorPoolID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudSppplacementgroupsMembersDelete(pcloudSppplacementgroupsMembersDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSppplacementgroupsMembersPost(pcloudSppplacementgroupsMembersPostOptions *PcloudSppplacementgroupsMembersPostOptions) - Operation response error`, func() {
		pcloudSppplacementgroupsMembersPostPath := "/pcloud/v1/cloud-instances/testString/spp-placement-groups/testString/members/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSppplacementgroupsMembersPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudSppplacementgroupsMembersPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSppplacementgroupsMembersPostOptions model
				pcloudSppplacementgroupsMembersPostOptionsModel := new(powervsv1.PcloudSppplacementgroupsMembersPostOptions)
				pcloudSppplacementgroupsMembersPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersPostOptionsModel.SppPlacementGroupID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersPostOptionsModel.SharedProcessorPoolID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudSppplacementgroupsMembersPost(pcloudSppplacementgroupsMembersPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudSppplacementgroupsMembersPost(pcloudSppplacementgroupsMembersPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSppplacementgroupsMembersPost(pcloudSppplacementgroupsMembersPostOptions *PcloudSppplacementgroupsMembersPostOptions)`, func() {
		pcloudSppplacementgroupsMembersPostPath := "/pcloud/v1/cloud-instances/testString/spp-placement-groups/testString/members/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSppplacementgroupsMembersPostPath))
					Expect(req.Method).To(Equal("POST"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "memberSharedProcessorPools": ["MemberSharedProcessorPools"], "name": "Name", "policy": "Policy"}`)
				}))
			})
			It(`Invoke PcloudSppplacementgroupsMembersPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudSppplacementgroupsMembersPostOptions model
				pcloudSppplacementgroupsMembersPostOptionsModel := new(powervsv1.PcloudSppplacementgroupsMembersPostOptions)
				pcloudSppplacementgroupsMembersPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersPostOptionsModel.SppPlacementGroupID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersPostOptionsModel.SharedProcessorPoolID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudSppplacementgroupsMembersPostWithContext(ctx, pcloudSppplacementgroupsMembersPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudSppplacementgroupsMembersPost(pcloudSppplacementgroupsMembersPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudSppplacementgroupsMembersPostWithContext(ctx, pcloudSppplacementgroupsMembersPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSppplacementgroupsMembersPostPath))
					Expect(req.Method).To(Equal("POST"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "memberSharedProcessorPools": ["MemberSharedProcessorPools"], "name": "Name", "policy": "Policy"}`)
				}))
			})
			It(`Invoke PcloudSppplacementgroupsMembersPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudSppplacementgroupsMembersPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudSppplacementgroupsMembersPostOptions model
				pcloudSppplacementgroupsMembersPostOptionsModel := new(powervsv1.PcloudSppplacementgroupsMembersPostOptions)
				pcloudSppplacementgroupsMembersPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersPostOptionsModel.SppPlacementGroupID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersPostOptionsModel.SharedProcessorPoolID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudSppplacementgroupsMembersPost(pcloudSppplacementgroupsMembersPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudSppplacementgroupsMembersPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSppplacementgroupsMembersPostOptions model
				pcloudSppplacementgroupsMembersPostOptionsModel := new(powervsv1.PcloudSppplacementgroupsMembersPostOptions)
				pcloudSppplacementgroupsMembersPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersPostOptionsModel.SppPlacementGroupID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersPostOptionsModel.SharedProcessorPoolID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudSppplacementgroupsMembersPost(pcloudSppplacementgroupsMembersPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudSppplacementgroupsMembersPostOptions model with no property values
				pcloudSppplacementgroupsMembersPostOptionsModelNew := new(powervsv1.PcloudSppplacementgroupsMembersPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudSppplacementgroupsMembersPost(pcloudSppplacementgroupsMembersPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudSppplacementgroupsMembersPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSppplacementgroupsMembersPostOptions model
				pcloudSppplacementgroupsMembersPostOptionsModel := new(powervsv1.PcloudSppplacementgroupsMembersPostOptions)
				pcloudSppplacementgroupsMembersPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersPostOptionsModel.SppPlacementGroupID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersPostOptionsModel.SharedProcessorPoolID = core.StringPtr("testString")
				pcloudSppplacementgroupsMembersPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudSppplacementgroupsMembersPost(pcloudSppplacementgroupsMembersPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudDhcpGetall(pcloudDhcpGetallOptions *PcloudDhcpGetallOptions) - Operation response error`, func() {
		pcloudDhcpGetallPath := "/pcloud/v1/cloud-instances/testString/services/dhcp"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudDhcpGetallPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudDhcpGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudDhcpGetallOptions model
				pcloudDhcpGetallOptionsModel := new(powervsv1.PcloudDhcpGetallOptions)
				pcloudDhcpGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudDhcpGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudDhcpGetall(pcloudDhcpGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudDhcpGetall(pcloudDhcpGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudDhcpGetall(pcloudDhcpGetallOptions *PcloudDhcpGetallOptions)`, func() {
		pcloudDhcpGetallPath := "/pcloud/v1/cloud-instances/testString/services/dhcp"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudDhcpGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"id": "ID", "network": {"id": "ID", "name": "Name"}, "status": "Status"}]`)
				}))
			})
			It(`Invoke PcloudDhcpGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudDhcpGetallOptions model
				pcloudDhcpGetallOptionsModel := new(powervsv1.PcloudDhcpGetallOptions)
				pcloudDhcpGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudDhcpGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudDhcpGetallWithContext(ctx, pcloudDhcpGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudDhcpGetall(pcloudDhcpGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudDhcpGetallWithContext(ctx, pcloudDhcpGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudDhcpGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"id": "ID", "network": {"id": "ID", "name": "Name"}, "status": "Status"}]`)
				}))
			})
			It(`Invoke PcloudDhcpGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudDhcpGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudDhcpGetallOptions model
				pcloudDhcpGetallOptionsModel := new(powervsv1.PcloudDhcpGetallOptions)
				pcloudDhcpGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudDhcpGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudDhcpGetall(pcloudDhcpGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudDhcpGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudDhcpGetallOptions model
				pcloudDhcpGetallOptionsModel := new(powervsv1.PcloudDhcpGetallOptions)
				pcloudDhcpGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudDhcpGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudDhcpGetall(pcloudDhcpGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudDhcpGetallOptions model with no property values
				pcloudDhcpGetallOptionsModelNew := new(powervsv1.PcloudDhcpGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudDhcpGetall(pcloudDhcpGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudDhcpGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudDhcpGetallOptions model
				pcloudDhcpGetallOptionsModel := new(powervsv1.PcloudDhcpGetallOptions)
				pcloudDhcpGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudDhcpGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudDhcpGetall(pcloudDhcpGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudDhcpPost(pcloudDhcpPostOptions *PcloudDhcpPostOptions) - Operation response error`, func() {
		pcloudDhcpPostPath := "/pcloud/v1/cloud-instances/testString/services/dhcp"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudDhcpPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudDhcpPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudDhcpPostOptions model
				pcloudDhcpPostOptionsModel := new(powervsv1.PcloudDhcpPostOptions)
				pcloudDhcpPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudDhcpPostOptionsModel.CIDR = core.StringPtr("testString")
				pcloudDhcpPostOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudDhcpPostOptionsModel.DnsServer = core.StringPtr("testString")
				pcloudDhcpPostOptionsModel.Name = core.StringPtr("testString")
				pcloudDhcpPostOptionsModel.SnatEnabled = core.BoolPtr(true)
				pcloudDhcpPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudDhcpPost(pcloudDhcpPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudDhcpPost(pcloudDhcpPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudDhcpPost(pcloudDhcpPostOptions *PcloudDhcpPostOptions)`, func() {
		pcloudDhcpPostPath := "/pcloud/v1/cloud-instances/testString/services/dhcp"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudDhcpPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"id": "ID", "network": {"id": "ID", "name": "Name"}, "status": "Status"}`)
				}))
			})
			It(`Invoke PcloudDhcpPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudDhcpPostOptions model
				pcloudDhcpPostOptionsModel := new(powervsv1.PcloudDhcpPostOptions)
				pcloudDhcpPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudDhcpPostOptionsModel.CIDR = core.StringPtr("testString")
				pcloudDhcpPostOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudDhcpPostOptionsModel.DnsServer = core.StringPtr("testString")
				pcloudDhcpPostOptionsModel.Name = core.StringPtr("testString")
				pcloudDhcpPostOptionsModel.SnatEnabled = core.BoolPtr(true)
				pcloudDhcpPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudDhcpPostWithContext(ctx, pcloudDhcpPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudDhcpPost(pcloudDhcpPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudDhcpPostWithContext(ctx, pcloudDhcpPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudDhcpPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"id": "ID", "network": {"id": "ID", "name": "Name"}, "status": "Status"}`)
				}))
			})
			It(`Invoke PcloudDhcpPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudDhcpPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudDhcpPostOptions model
				pcloudDhcpPostOptionsModel := new(powervsv1.PcloudDhcpPostOptions)
				pcloudDhcpPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudDhcpPostOptionsModel.CIDR = core.StringPtr("testString")
				pcloudDhcpPostOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudDhcpPostOptionsModel.DnsServer = core.StringPtr("testString")
				pcloudDhcpPostOptionsModel.Name = core.StringPtr("testString")
				pcloudDhcpPostOptionsModel.SnatEnabled = core.BoolPtr(true)
				pcloudDhcpPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudDhcpPost(pcloudDhcpPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudDhcpPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudDhcpPostOptions model
				pcloudDhcpPostOptionsModel := new(powervsv1.PcloudDhcpPostOptions)
				pcloudDhcpPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudDhcpPostOptionsModel.CIDR = core.StringPtr("testString")
				pcloudDhcpPostOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudDhcpPostOptionsModel.DnsServer = core.StringPtr("testString")
				pcloudDhcpPostOptionsModel.Name = core.StringPtr("testString")
				pcloudDhcpPostOptionsModel.SnatEnabled = core.BoolPtr(true)
				pcloudDhcpPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudDhcpPost(pcloudDhcpPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudDhcpPostOptions model with no property values
				pcloudDhcpPostOptionsModelNew := new(powervsv1.PcloudDhcpPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudDhcpPost(pcloudDhcpPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudDhcpPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudDhcpPostOptions model
				pcloudDhcpPostOptionsModel := new(powervsv1.PcloudDhcpPostOptions)
				pcloudDhcpPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudDhcpPostOptionsModel.CIDR = core.StringPtr("testString")
				pcloudDhcpPostOptionsModel.CloudConnectionID = core.StringPtr("testString")
				pcloudDhcpPostOptionsModel.DnsServer = core.StringPtr("testString")
				pcloudDhcpPostOptionsModel.Name = core.StringPtr("testString")
				pcloudDhcpPostOptionsModel.SnatEnabled = core.BoolPtr(true)
				pcloudDhcpPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudDhcpPost(pcloudDhcpPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudDhcpDelete(pcloudDhcpDeleteOptions *PcloudDhcpDeleteOptions) - Operation response error`, func() {
		pcloudDhcpDeletePath := "/pcloud/v1/cloud-instances/testString/services/dhcp/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudDhcpDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudDhcpDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudDhcpDeleteOptions model
				pcloudDhcpDeleteOptionsModel := new(powervsv1.PcloudDhcpDeleteOptions)
				pcloudDhcpDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudDhcpDeleteOptionsModel.DhcpID = core.StringPtr("testString")
				pcloudDhcpDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudDhcpDelete(pcloudDhcpDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudDhcpDelete(pcloudDhcpDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudDhcpDelete(pcloudDhcpDeleteOptions *PcloudDhcpDeleteOptions)`, func() {
		pcloudDhcpDeletePath := "/pcloud/v1/cloud-instances/testString/services/dhcp/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudDhcpDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudDhcpDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudDhcpDeleteOptions model
				pcloudDhcpDeleteOptionsModel := new(powervsv1.PcloudDhcpDeleteOptions)
				pcloudDhcpDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudDhcpDeleteOptionsModel.DhcpID = core.StringPtr("testString")
				pcloudDhcpDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudDhcpDeleteWithContext(ctx, pcloudDhcpDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudDhcpDelete(pcloudDhcpDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudDhcpDeleteWithContext(ctx, pcloudDhcpDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudDhcpDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudDhcpDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudDhcpDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudDhcpDeleteOptions model
				pcloudDhcpDeleteOptionsModel := new(powervsv1.PcloudDhcpDeleteOptions)
				pcloudDhcpDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudDhcpDeleteOptionsModel.DhcpID = core.StringPtr("testString")
				pcloudDhcpDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudDhcpDelete(pcloudDhcpDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudDhcpDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudDhcpDeleteOptions model
				pcloudDhcpDeleteOptionsModel := new(powervsv1.PcloudDhcpDeleteOptions)
				pcloudDhcpDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudDhcpDeleteOptionsModel.DhcpID = core.StringPtr("testString")
				pcloudDhcpDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudDhcpDelete(pcloudDhcpDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudDhcpDeleteOptions model with no property values
				pcloudDhcpDeleteOptionsModelNew := new(powervsv1.PcloudDhcpDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudDhcpDelete(pcloudDhcpDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudDhcpDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudDhcpDeleteOptions model
				pcloudDhcpDeleteOptionsModel := new(powervsv1.PcloudDhcpDeleteOptions)
				pcloudDhcpDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudDhcpDeleteOptionsModel.DhcpID = core.StringPtr("testString")
				pcloudDhcpDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudDhcpDelete(pcloudDhcpDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudDhcpGet(pcloudDhcpGetOptions *PcloudDhcpGetOptions) - Operation response error`, func() {
		pcloudDhcpGetPath := "/pcloud/v1/cloud-instances/testString/services/dhcp/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudDhcpGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudDhcpGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudDhcpGetOptions model
				pcloudDhcpGetOptionsModel := new(powervsv1.PcloudDhcpGetOptions)
				pcloudDhcpGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudDhcpGetOptionsModel.DhcpID = core.StringPtr("testString")
				pcloudDhcpGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudDhcpGet(pcloudDhcpGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudDhcpGet(pcloudDhcpGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudDhcpGet(pcloudDhcpGetOptions *PcloudDhcpGetOptions)`, func() {
		pcloudDhcpGetPath := "/pcloud/v1/cloud-instances/testString/services/dhcp/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudDhcpGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "leases": [{"instanceIP": "InstanceIP", "instanceMacAddress": "InstanceMacAddress"}], "network": {"id": "ID", "name": "Name"}, "status": "Status"}`)
				}))
			})
			It(`Invoke PcloudDhcpGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudDhcpGetOptions model
				pcloudDhcpGetOptionsModel := new(powervsv1.PcloudDhcpGetOptions)
				pcloudDhcpGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudDhcpGetOptionsModel.DhcpID = core.StringPtr("testString")
				pcloudDhcpGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudDhcpGetWithContext(ctx, pcloudDhcpGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudDhcpGet(pcloudDhcpGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudDhcpGetWithContext(ctx, pcloudDhcpGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudDhcpGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "leases": [{"instanceIP": "InstanceIP", "instanceMacAddress": "InstanceMacAddress"}], "network": {"id": "ID", "name": "Name"}, "status": "Status"}`)
				}))
			})
			It(`Invoke PcloudDhcpGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudDhcpGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudDhcpGetOptions model
				pcloudDhcpGetOptionsModel := new(powervsv1.PcloudDhcpGetOptions)
				pcloudDhcpGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudDhcpGetOptionsModel.DhcpID = core.StringPtr("testString")
				pcloudDhcpGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudDhcpGet(pcloudDhcpGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudDhcpGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudDhcpGetOptions model
				pcloudDhcpGetOptionsModel := new(powervsv1.PcloudDhcpGetOptions)
				pcloudDhcpGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudDhcpGetOptionsModel.DhcpID = core.StringPtr("testString")
				pcloudDhcpGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudDhcpGet(pcloudDhcpGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudDhcpGetOptions model with no property values
				pcloudDhcpGetOptionsModelNew := new(powervsv1.PcloudDhcpGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudDhcpGet(pcloudDhcpGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudDhcpGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudDhcpGetOptions model
				pcloudDhcpGetOptionsModel := new(powervsv1.PcloudDhcpGetOptions)
				pcloudDhcpGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudDhcpGetOptionsModel.DhcpID = core.StringPtr("testString")
				pcloudDhcpGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudDhcpGet(pcloudDhcpGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSharedprocessorpoolsGetall(pcloudSharedprocessorpoolsGetallOptions *PcloudSharedprocessorpoolsGetallOptions) - Operation response error`, func() {
		pcloudSharedprocessorpoolsGetallPath := "/pcloud/v1/cloud-instances/testString/shared-processor-pools"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSharedprocessorpoolsGetallPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudSharedprocessorpoolsGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSharedprocessorpoolsGetallOptions model
				pcloudSharedprocessorpoolsGetallOptionsModel := new(powervsv1.PcloudSharedprocessorpoolsGetallOptions)
				pcloudSharedprocessorpoolsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudSharedprocessorpoolsGetall(pcloudSharedprocessorpoolsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudSharedprocessorpoolsGetall(pcloudSharedprocessorpoolsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSharedprocessorpoolsGetall(pcloudSharedprocessorpoolsGetallOptions *PcloudSharedprocessorpoolsGetallOptions)`, func() {
		pcloudSharedprocessorpoolsGetallPath := "/pcloud/v1/cloud-instances/testString/shared-processor-pools"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSharedprocessorpoolsGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"sharedProcessorPools": [{"allocatedCores": 14, "availableCores": 14, "hostGroup": "HostGroup", "hostID": 6, "id": "ID", "name": "Name", "reservedCores": 13, "sharedProcessorPoolPlacementGroups": [{"id": "ID", "name": "Name", "policy": "Policy"}], "status": "Status", "statusDetail": "StatusDetail"}]}`)
				}))
			})
			It(`Invoke PcloudSharedprocessorpoolsGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudSharedprocessorpoolsGetallOptions model
				pcloudSharedprocessorpoolsGetallOptionsModel := new(powervsv1.PcloudSharedprocessorpoolsGetallOptions)
				pcloudSharedprocessorpoolsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudSharedprocessorpoolsGetallWithContext(ctx, pcloudSharedprocessorpoolsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudSharedprocessorpoolsGetall(pcloudSharedprocessorpoolsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudSharedprocessorpoolsGetallWithContext(ctx, pcloudSharedprocessorpoolsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSharedprocessorpoolsGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"sharedProcessorPools": [{"allocatedCores": 14, "availableCores": 14, "hostGroup": "HostGroup", "hostID": 6, "id": "ID", "name": "Name", "reservedCores": 13, "sharedProcessorPoolPlacementGroups": [{"id": "ID", "name": "Name", "policy": "Policy"}], "status": "Status", "statusDetail": "StatusDetail"}]}`)
				}))
			})
			It(`Invoke PcloudSharedprocessorpoolsGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudSharedprocessorpoolsGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudSharedprocessorpoolsGetallOptions model
				pcloudSharedprocessorpoolsGetallOptionsModel := new(powervsv1.PcloudSharedprocessorpoolsGetallOptions)
				pcloudSharedprocessorpoolsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudSharedprocessorpoolsGetall(pcloudSharedprocessorpoolsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudSharedprocessorpoolsGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSharedprocessorpoolsGetallOptions model
				pcloudSharedprocessorpoolsGetallOptionsModel := new(powervsv1.PcloudSharedprocessorpoolsGetallOptions)
				pcloudSharedprocessorpoolsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudSharedprocessorpoolsGetall(pcloudSharedprocessorpoolsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudSharedprocessorpoolsGetallOptions model with no property values
				pcloudSharedprocessorpoolsGetallOptionsModelNew := new(powervsv1.PcloudSharedprocessorpoolsGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudSharedprocessorpoolsGetall(pcloudSharedprocessorpoolsGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudSharedprocessorpoolsGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSharedprocessorpoolsGetallOptions model
				pcloudSharedprocessorpoolsGetallOptionsModel := new(powervsv1.PcloudSharedprocessorpoolsGetallOptions)
				pcloudSharedprocessorpoolsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudSharedprocessorpoolsGetall(pcloudSharedprocessorpoolsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSharedprocessorpoolsPost(pcloudSharedprocessorpoolsPostOptions *PcloudSharedprocessorpoolsPostOptions) - Operation response error`, func() {
		pcloudSharedprocessorpoolsPostPath := "/pcloud/v1/cloud-instances/testString/shared-processor-pools"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSharedprocessorpoolsPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudSharedprocessorpoolsPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSharedprocessorpoolsPostOptions model
				pcloudSharedprocessorpoolsPostOptionsModel := new(powervsv1.PcloudSharedprocessorpoolsPostOptions)
				pcloudSharedprocessorpoolsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPostOptionsModel.HostGroup = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPostOptionsModel.ReservedCores = core.Int64Ptr(int64(38))
				pcloudSharedprocessorpoolsPostOptionsModel.PlacementGroupID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudSharedprocessorpoolsPost(pcloudSharedprocessorpoolsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudSharedprocessorpoolsPost(pcloudSharedprocessorpoolsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSharedprocessorpoolsPost(pcloudSharedprocessorpoolsPostOptions *PcloudSharedprocessorpoolsPostOptions)`, func() {
		pcloudSharedprocessorpoolsPostPath := "/pcloud/v1/cloud-instances/testString/shared-processor-pools"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSharedprocessorpoolsPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"allocatedCores": 14, "availableCores": 14, "hostGroup": "HostGroup", "hostID": 6, "id": "ID", "name": "Name", "reservedCores": 13, "sharedProcessorPoolPlacementGroups": [{"id": "ID", "name": "Name", "policy": "Policy"}], "status": "Status", "statusDetail": "StatusDetail"}`)
				}))
			})
			It(`Invoke PcloudSharedprocessorpoolsPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudSharedprocessorpoolsPostOptions model
				pcloudSharedprocessorpoolsPostOptionsModel := new(powervsv1.PcloudSharedprocessorpoolsPostOptions)
				pcloudSharedprocessorpoolsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPostOptionsModel.HostGroup = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPostOptionsModel.ReservedCores = core.Int64Ptr(int64(38))
				pcloudSharedprocessorpoolsPostOptionsModel.PlacementGroupID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudSharedprocessorpoolsPostWithContext(ctx, pcloudSharedprocessorpoolsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudSharedprocessorpoolsPost(pcloudSharedprocessorpoolsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudSharedprocessorpoolsPostWithContext(ctx, pcloudSharedprocessorpoolsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSharedprocessorpoolsPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"allocatedCores": 14, "availableCores": 14, "hostGroup": "HostGroup", "hostID": 6, "id": "ID", "name": "Name", "reservedCores": 13, "sharedProcessorPoolPlacementGroups": [{"id": "ID", "name": "Name", "policy": "Policy"}], "status": "Status", "statusDetail": "StatusDetail"}`)
				}))
			})
			It(`Invoke PcloudSharedprocessorpoolsPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudSharedprocessorpoolsPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudSharedprocessorpoolsPostOptions model
				pcloudSharedprocessorpoolsPostOptionsModel := new(powervsv1.PcloudSharedprocessorpoolsPostOptions)
				pcloudSharedprocessorpoolsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPostOptionsModel.HostGroup = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPostOptionsModel.ReservedCores = core.Int64Ptr(int64(38))
				pcloudSharedprocessorpoolsPostOptionsModel.PlacementGroupID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudSharedprocessorpoolsPost(pcloudSharedprocessorpoolsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudSharedprocessorpoolsPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSharedprocessorpoolsPostOptions model
				pcloudSharedprocessorpoolsPostOptionsModel := new(powervsv1.PcloudSharedprocessorpoolsPostOptions)
				pcloudSharedprocessorpoolsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPostOptionsModel.HostGroup = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPostOptionsModel.ReservedCores = core.Int64Ptr(int64(38))
				pcloudSharedprocessorpoolsPostOptionsModel.PlacementGroupID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudSharedprocessorpoolsPost(pcloudSharedprocessorpoolsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudSharedprocessorpoolsPostOptions model with no property values
				pcloudSharedprocessorpoolsPostOptionsModelNew := new(powervsv1.PcloudSharedprocessorpoolsPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudSharedprocessorpoolsPost(pcloudSharedprocessorpoolsPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudSharedprocessorpoolsPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSharedprocessorpoolsPostOptions model
				pcloudSharedprocessorpoolsPostOptionsModel := new(powervsv1.PcloudSharedprocessorpoolsPostOptions)
				pcloudSharedprocessorpoolsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPostOptionsModel.HostGroup = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPostOptionsModel.ReservedCores = core.Int64Ptr(int64(38))
				pcloudSharedprocessorpoolsPostOptionsModel.PlacementGroupID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudSharedprocessorpoolsPost(pcloudSharedprocessorpoolsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSharedprocessorpoolsDelete(pcloudSharedprocessorpoolsDeleteOptions *PcloudSharedprocessorpoolsDeleteOptions) - Operation response error`, func() {
		pcloudSharedprocessorpoolsDeletePath := "/pcloud/v1/cloud-instances/testString/shared-processor-pools/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSharedprocessorpoolsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudSharedprocessorpoolsDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSharedprocessorpoolsDeleteOptions model
				pcloudSharedprocessorpoolsDeleteOptionsModel := new(powervsv1.PcloudSharedprocessorpoolsDeleteOptions)
				pcloudSharedprocessorpoolsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsDeleteOptionsModel.SharedProcessorPoolID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudSharedprocessorpoolsDelete(pcloudSharedprocessorpoolsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudSharedprocessorpoolsDelete(pcloudSharedprocessorpoolsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSharedprocessorpoolsDelete(pcloudSharedprocessorpoolsDeleteOptions *PcloudSharedprocessorpoolsDeleteOptions)`, func() {
		pcloudSharedprocessorpoolsDeletePath := "/pcloud/v1/cloud-instances/testString/shared-processor-pools/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSharedprocessorpoolsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudSharedprocessorpoolsDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudSharedprocessorpoolsDeleteOptions model
				pcloudSharedprocessorpoolsDeleteOptionsModel := new(powervsv1.PcloudSharedprocessorpoolsDeleteOptions)
				pcloudSharedprocessorpoolsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsDeleteOptionsModel.SharedProcessorPoolID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudSharedprocessorpoolsDeleteWithContext(ctx, pcloudSharedprocessorpoolsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudSharedprocessorpoolsDelete(pcloudSharedprocessorpoolsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudSharedprocessorpoolsDeleteWithContext(ctx, pcloudSharedprocessorpoolsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSharedprocessorpoolsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudSharedprocessorpoolsDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudSharedprocessorpoolsDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudSharedprocessorpoolsDeleteOptions model
				pcloudSharedprocessorpoolsDeleteOptionsModel := new(powervsv1.PcloudSharedprocessorpoolsDeleteOptions)
				pcloudSharedprocessorpoolsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsDeleteOptionsModel.SharedProcessorPoolID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudSharedprocessorpoolsDelete(pcloudSharedprocessorpoolsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudSharedprocessorpoolsDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSharedprocessorpoolsDeleteOptions model
				pcloudSharedprocessorpoolsDeleteOptionsModel := new(powervsv1.PcloudSharedprocessorpoolsDeleteOptions)
				pcloudSharedprocessorpoolsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsDeleteOptionsModel.SharedProcessorPoolID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudSharedprocessorpoolsDelete(pcloudSharedprocessorpoolsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudSharedprocessorpoolsDeleteOptions model with no property values
				pcloudSharedprocessorpoolsDeleteOptionsModelNew := new(powervsv1.PcloudSharedprocessorpoolsDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudSharedprocessorpoolsDelete(pcloudSharedprocessorpoolsDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudSharedprocessorpoolsDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSharedprocessorpoolsDeleteOptions model
				pcloudSharedprocessorpoolsDeleteOptionsModel := new(powervsv1.PcloudSharedprocessorpoolsDeleteOptions)
				pcloudSharedprocessorpoolsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsDeleteOptionsModel.SharedProcessorPoolID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudSharedprocessorpoolsDelete(pcloudSharedprocessorpoolsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSharedprocessorpoolsGet(pcloudSharedprocessorpoolsGetOptions *PcloudSharedprocessorpoolsGetOptions) - Operation response error`, func() {
		pcloudSharedprocessorpoolsGetPath := "/pcloud/v1/cloud-instances/testString/shared-processor-pools/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSharedprocessorpoolsGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudSharedprocessorpoolsGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSharedprocessorpoolsGetOptions model
				pcloudSharedprocessorpoolsGetOptionsModel := new(powervsv1.PcloudSharedprocessorpoolsGetOptions)
				pcloudSharedprocessorpoolsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsGetOptionsModel.SharedProcessorPoolID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudSharedprocessorpoolsGet(pcloudSharedprocessorpoolsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudSharedprocessorpoolsGet(pcloudSharedprocessorpoolsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSharedprocessorpoolsGet(pcloudSharedprocessorpoolsGetOptions *PcloudSharedprocessorpoolsGetOptions)`, func() {
		pcloudSharedprocessorpoolsGetPath := "/pcloud/v1/cloud-instances/testString/shared-processor-pools/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSharedprocessorpoolsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"servers": [{"Cpus": 4, "Uncapped": true, "availabilityZone": "AvailabilityZone", "id": "ID", "memory": 6, "name": "Name", "status": "Status", "vcpus": 5}], "sharedProcessorPool": {"allocatedCores": 14, "availableCores": 14, "hostGroup": "HostGroup", "hostID": 6, "id": "ID", "name": "Name", "reservedCores": 13, "sharedProcessorPoolPlacementGroups": [{"id": "ID", "name": "Name", "policy": "Policy"}], "status": "Status", "statusDetail": "StatusDetail"}}`)
				}))
			})
			It(`Invoke PcloudSharedprocessorpoolsGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudSharedprocessorpoolsGetOptions model
				pcloudSharedprocessorpoolsGetOptionsModel := new(powervsv1.PcloudSharedprocessorpoolsGetOptions)
				pcloudSharedprocessorpoolsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsGetOptionsModel.SharedProcessorPoolID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudSharedprocessorpoolsGetWithContext(ctx, pcloudSharedprocessorpoolsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudSharedprocessorpoolsGet(pcloudSharedprocessorpoolsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudSharedprocessorpoolsGetWithContext(ctx, pcloudSharedprocessorpoolsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSharedprocessorpoolsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"servers": [{"Cpus": 4, "Uncapped": true, "availabilityZone": "AvailabilityZone", "id": "ID", "memory": 6, "name": "Name", "status": "Status", "vcpus": 5}], "sharedProcessorPool": {"allocatedCores": 14, "availableCores": 14, "hostGroup": "HostGroup", "hostID": 6, "id": "ID", "name": "Name", "reservedCores": 13, "sharedProcessorPoolPlacementGroups": [{"id": "ID", "name": "Name", "policy": "Policy"}], "status": "Status", "statusDetail": "StatusDetail"}}`)
				}))
			})
			It(`Invoke PcloudSharedprocessorpoolsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudSharedprocessorpoolsGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudSharedprocessorpoolsGetOptions model
				pcloudSharedprocessorpoolsGetOptionsModel := new(powervsv1.PcloudSharedprocessorpoolsGetOptions)
				pcloudSharedprocessorpoolsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsGetOptionsModel.SharedProcessorPoolID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudSharedprocessorpoolsGet(pcloudSharedprocessorpoolsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudSharedprocessorpoolsGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSharedprocessorpoolsGetOptions model
				pcloudSharedprocessorpoolsGetOptionsModel := new(powervsv1.PcloudSharedprocessorpoolsGetOptions)
				pcloudSharedprocessorpoolsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsGetOptionsModel.SharedProcessorPoolID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudSharedprocessorpoolsGet(pcloudSharedprocessorpoolsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudSharedprocessorpoolsGetOptions model with no property values
				pcloudSharedprocessorpoolsGetOptionsModelNew := new(powervsv1.PcloudSharedprocessorpoolsGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudSharedprocessorpoolsGet(pcloudSharedprocessorpoolsGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudSharedprocessorpoolsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSharedprocessorpoolsGetOptions model
				pcloudSharedprocessorpoolsGetOptionsModel := new(powervsv1.PcloudSharedprocessorpoolsGetOptions)
				pcloudSharedprocessorpoolsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsGetOptionsModel.SharedProcessorPoolID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudSharedprocessorpoolsGet(pcloudSharedprocessorpoolsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSharedprocessorpoolsPut(pcloudSharedprocessorpoolsPutOptions *PcloudSharedprocessorpoolsPutOptions) - Operation response error`, func() {
		pcloudSharedprocessorpoolsPutPath := "/pcloud/v1/cloud-instances/testString/shared-processor-pools/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSharedprocessorpoolsPutPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudSharedprocessorpoolsPut with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSharedprocessorpoolsPutOptions model
				pcloudSharedprocessorpoolsPutOptionsModel := new(powervsv1.PcloudSharedprocessorpoolsPutOptions)
				pcloudSharedprocessorpoolsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPutOptionsModel.SharedProcessorPoolID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPutOptionsModel.Name = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPutOptionsModel.ReservedCores = core.Int64Ptr(int64(38))
				pcloudSharedprocessorpoolsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudSharedprocessorpoolsPut(pcloudSharedprocessorpoolsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudSharedprocessorpoolsPut(pcloudSharedprocessorpoolsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSharedprocessorpoolsPut(pcloudSharedprocessorpoolsPutOptions *PcloudSharedprocessorpoolsPutOptions)`, func() {
		pcloudSharedprocessorpoolsPutPath := "/pcloud/v1/cloud-instances/testString/shared-processor-pools/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSharedprocessorpoolsPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"allocatedCores": 14, "availableCores": 14, "hostGroup": "HostGroup", "hostID": 6, "id": "ID", "name": "Name", "reservedCores": 13, "sharedProcessorPoolPlacementGroups": [{"id": "ID", "name": "Name", "policy": "Policy"}], "status": "Status", "statusDetail": "StatusDetail"}`)
				}))
			})
			It(`Invoke PcloudSharedprocessorpoolsPut successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudSharedprocessorpoolsPutOptions model
				pcloudSharedprocessorpoolsPutOptionsModel := new(powervsv1.PcloudSharedprocessorpoolsPutOptions)
				pcloudSharedprocessorpoolsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPutOptionsModel.SharedProcessorPoolID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPutOptionsModel.Name = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPutOptionsModel.ReservedCores = core.Int64Ptr(int64(38))
				pcloudSharedprocessorpoolsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudSharedprocessorpoolsPutWithContext(ctx, pcloudSharedprocessorpoolsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudSharedprocessorpoolsPut(pcloudSharedprocessorpoolsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudSharedprocessorpoolsPutWithContext(ctx, pcloudSharedprocessorpoolsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSharedprocessorpoolsPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"allocatedCores": 14, "availableCores": 14, "hostGroup": "HostGroup", "hostID": 6, "id": "ID", "name": "Name", "reservedCores": 13, "sharedProcessorPoolPlacementGroups": [{"id": "ID", "name": "Name", "policy": "Policy"}], "status": "Status", "statusDetail": "StatusDetail"}`)
				}))
			})
			It(`Invoke PcloudSharedprocessorpoolsPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudSharedprocessorpoolsPut(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudSharedprocessorpoolsPutOptions model
				pcloudSharedprocessorpoolsPutOptionsModel := new(powervsv1.PcloudSharedprocessorpoolsPutOptions)
				pcloudSharedprocessorpoolsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPutOptionsModel.SharedProcessorPoolID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPutOptionsModel.Name = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPutOptionsModel.ReservedCores = core.Int64Ptr(int64(38))
				pcloudSharedprocessorpoolsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudSharedprocessorpoolsPut(pcloudSharedprocessorpoolsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudSharedprocessorpoolsPut with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSharedprocessorpoolsPutOptions model
				pcloudSharedprocessorpoolsPutOptionsModel := new(powervsv1.PcloudSharedprocessorpoolsPutOptions)
				pcloudSharedprocessorpoolsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPutOptionsModel.SharedProcessorPoolID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPutOptionsModel.Name = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPutOptionsModel.ReservedCores = core.Int64Ptr(int64(38))
				pcloudSharedprocessorpoolsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudSharedprocessorpoolsPut(pcloudSharedprocessorpoolsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudSharedprocessorpoolsPutOptions model with no property values
				pcloudSharedprocessorpoolsPutOptionsModelNew := new(powervsv1.PcloudSharedprocessorpoolsPutOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudSharedprocessorpoolsPut(pcloudSharedprocessorpoolsPutOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudSharedprocessorpoolsPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSharedprocessorpoolsPutOptions model
				pcloudSharedprocessorpoolsPutOptionsModel := new(powervsv1.PcloudSharedprocessorpoolsPutOptions)
				pcloudSharedprocessorpoolsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPutOptionsModel.SharedProcessorPoolID = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPutOptionsModel.Name = core.StringPtr("testString")
				pcloudSharedprocessorpoolsPutOptionsModel.ReservedCores = core.Int64Ptr(int64(38))
				pcloudSharedprocessorpoolsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudSharedprocessorpoolsPut(pcloudSharedprocessorpoolsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesSnapshotsGetall(pcloudCloudinstancesSnapshotsGetallOptions *PcloudCloudinstancesSnapshotsGetallOptions) - Operation response error`, func() {
		pcloudCloudinstancesSnapshotsGetallPath := "/pcloud/v1/cloud-instances/testString/snapshots"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesSnapshotsGetallPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudinstancesSnapshotsGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesSnapshotsGetallOptions model
				pcloudCloudinstancesSnapshotsGetallOptionsModel := new(powervsv1.PcloudCloudinstancesSnapshotsGetallOptions)
				pcloudCloudinstancesSnapshotsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudinstancesSnapshotsGetall(pcloudCloudinstancesSnapshotsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudinstancesSnapshotsGetall(pcloudCloudinstancesSnapshotsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesSnapshotsGetall(pcloudCloudinstancesSnapshotsGetallOptions *PcloudCloudinstancesSnapshotsGetallOptions)`, func() {
		pcloudCloudinstancesSnapshotsGetallPath := "/pcloud/v1/cloud-instances/testString/snapshots"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesSnapshotsGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"snapshots": [{"action": "Action", "creationDate": "2019-01-01T12:00:00.000Z", "description": "Description", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "name": "Name", "percentComplete": 15, "pvmInstanceID": "PvmInstanceID", "snapshotID": "SnapshotID", "status": "Status", "volumeSnapshots": {"mapKey": "Inner"}}]}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesSnapshotsGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudinstancesSnapshotsGetallOptions model
				pcloudCloudinstancesSnapshotsGetallOptionsModel := new(powervsv1.PcloudCloudinstancesSnapshotsGetallOptions)
				pcloudCloudinstancesSnapshotsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudinstancesSnapshotsGetallWithContext(ctx, pcloudCloudinstancesSnapshotsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudinstancesSnapshotsGetall(pcloudCloudinstancesSnapshotsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudinstancesSnapshotsGetallWithContext(ctx, pcloudCloudinstancesSnapshotsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesSnapshotsGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"snapshots": [{"action": "Action", "creationDate": "2019-01-01T12:00:00.000Z", "description": "Description", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "name": "Name", "percentComplete": 15, "pvmInstanceID": "PvmInstanceID", "snapshotID": "SnapshotID", "status": "Status", "volumeSnapshots": {"mapKey": "Inner"}}]}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesSnapshotsGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudinstancesSnapshotsGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudinstancesSnapshotsGetallOptions model
				pcloudCloudinstancesSnapshotsGetallOptionsModel := new(powervsv1.PcloudCloudinstancesSnapshotsGetallOptions)
				pcloudCloudinstancesSnapshotsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudinstancesSnapshotsGetall(pcloudCloudinstancesSnapshotsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudinstancesSnapshotsGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesSnapshotsGetallOptions model
				pcloudCloudinstancesSnapshotsGetallOptionsModel := new(powervsv1.PcloudCloudinstancesSnapshotsGetallOptions)
				pcloudCloudinstancesSnapshotsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudinstancesSnapshotsGetall(pcloudCloudinstancesSnapshotsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudinstancesSnapshotsGetallOptions model with no property values
				pcloudCloudinstancesSnapshotsGetallOptionsModelNew := new(powervsv1.PcloudCloudinstancesSnapshotsGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudinstancesSnapshotsGetall(pcloudCloudinstancesSnapshotsGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudinstancesSnapshotsGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesSnapshotsGetallOptions model
				pcloudCloudinstancesSnapshotsGetallOptionsModel := new(powervsv1.PcloudCloudinstancesSnapshotsGetallOptions)
				pcloudCloudinstancesSnapshotsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudinstancesSnapshotsGetall(pcloudCloudinstancesSnapshotsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesSnapshotsDelete(pcloudCloudinstancesSnapshotsDeleteOptions *PcloudCloudinstancesSnapshotsDeleteOptions) - Operation response error`, func() {
		pcloudCloudinstancesSnapshotsDeletePath := "/pcloud/v1/cloud-instances/testString/snapshots/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesSnapshotsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudinstancesSnapshotsDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesSnapshotsDeleteOptions model
				pcloudCloudinstancesSnapshotsDeleteOptionsModel := new(powervsv1.PcloudCloudinstancesSnapshotsDeleteOptions)
				pcloudCloudinstancesSnapshotsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsDeleteOptionsModel.SnapshotID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudinstancesSnapshotsDelete(pcloudCloudinstancesSnapshotsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudinstancesSnapshotsDelete(pcloudCloudinstancesSnapshotsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesSnapshotsDelete(pcloudCloudinstancesSnapshotsDeleteOptions *PcloudCloudinstancesSnapshotsDeleteOptions)`, func() {
		pcloudCloudinstancesSnapshotsDeletePath := "/pcloud/v1/cloud-instances/testString/snapshots/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesSnapshotsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesSnapshotsDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudinstancesSnapshotsDeleteOptions model
				pcloudCloudinstancesSnapshotsDeleteOptionsModel := new(powervsv1.PcloudCloudinstancesSnapshotsDeleteOptions)
				pcloudCloudinstancesSnapshotsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsDeleteOptionsModel.SnapshotID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudinstancesSnapshotsDeleteWithContext(ctx, pcloudCloudinstancesSnapshotsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudinstancesSnapshotsDelete(pcloudCloudinstancesSnapshotsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudinstancesSnapshotsDeleteWithContext(ctx, pcloudCloudinstancesSnapshotsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesSnapshotsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesSnapshotsDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudinstancesSnapshotsDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudinstancesSnapshotsDeleteOptions model
				pcloudCloudinstancesSnapshotsDeleteOptionsModel := new(powervsv1.PcloudCloudinstancesSnapshotsDeleteOptions)
				pcloudCloudinstancesSnapshotsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsDeleteOptionsModel.SnapshotID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudinstancesSnapshotsDelete(pcloudCloudinstancesSnapshotsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudinstancesSnapshotsDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesSnapshotsDeleteOptions model
				pcloudCloudinstancesSnapshotsDeleteOptionsModel := new(powervsv1.PcloudCloudinstancesSnapshotsDeleteOptions)
				pcloudCloudinstancesSnapshotsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsDeleteOptionsModel.SnapshotID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudinstancesSnapshotsDelete(pcloudCloudinstancesSnapshotsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudinstancesSnapshotsDeleteOptions model with no property values
				pcloudCloudinstancesSnapshotsDeleteOptionsModelNew := new(powervsv1.PcloudCloudinstancesSnapshotsDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudinstancesSnapshotsDelete(pcloudCloudinstancesSnapshotsDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudCloudinstancesSnapshotsDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesSnapshotsDeleteOptions model
				pcloudCloudinstancesSnapshotsDeleteOptionsModel := new(powervsv1.PcloudCloudinstancesSnapshotsDeleteOptions)
				pcloudCloudinstancesSnapshotsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsDeleteOptionsModel.SnapshotID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudinstancesSnapshotsDelete(pcloudCloudinstancesSnapshotsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesSnapshotsGet(pcloudCloudinstancesSnapshotsGetOptions *PcloudCloudinstancesSnapshotsGetOptions) - Operation response error`, func() {
		pcloudCloudinstancesSnapshotsGetPath := "/pcloud/v1/cloud-instances/testString/snapshots/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesSnapshotsGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudinstancesSnapshotsGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesSnapshotsGetOptions model
				pcloudCloudinstancesSnapshotsGetOptionsModel := new(powervsv1.PcloudCloudinstancesSnapshotsGetOptions)
				pcloudCloudinstancesSnapshotsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsGetOptionsModel.SnapshotID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudinstancesSnapshotsGet(pcloudCloudinstancesSnapshotsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudinstancesSnapshotsGet(pcloudCloudinstancesSnapshotsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesSnapshotsGet(pcloudCloudinstancesSnapshotsGetOptions *PcloudCloudinstancesSnapshotsGetOptions)`, func() {
		pcloudCloudinstancesSnapshotsGetPath := "/pcloud/v1/cloud-instances/testString/snapshots/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesSnapshotsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"action": "Action", "creationDate": "2019-01-01T12:00:00.000Z", "description": "Description", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "name": "Name", "percentComplete": 15, "pvmInstanceID": "PvmInstanceID", "snapshotID": "SnapshotID", "status": "Status", "volumeSnapshots": {"mapKey": "Inner"}}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesSnapshotsGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudinstancesSnapshotsGetOptions model
				pcloudCloudinstancesSnapshotsGetOptionsModel := new(powervsv1.PcloudCloudinstancesSnapshotsGetOptions)
				pcloudCloudinstancesSnapshotsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsGetOptionsModel.SnapshotID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudinstancesSnapshotsGetWithContext(ctx, pcloudCloudinstancesSnapshotsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudinstancesSnapshotsGet(pcloudCloudinstancesSnapshotsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudinstancesSnapshotsGetWithContext(ctx, pcloudCloudinstancesSnapshotsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesSnapshotsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"action": "Action", "creationDate": "2019-01-01T12:00:00.000Z", "description": "Description", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "name": "Name", "percentComplete": 15, "pvmInstanceID": "PvmInstanceID", "snapshotID": "SnapshotID", "status": "Status", "volumeSnapshots": {"mapKey": "Inner"}}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesSnapshotsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudinstancesSnapshotsGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudinstancesSnapshotsGetOptions model
				pcloudCloudinstancesSnapshotsGetOptionsModel := new(powervsv1.PcloudCloudinstancesSnapshotsGetOptions)
				pcloudCloudinstancesSnapshotsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsGetOptionsModel.SnapshotID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudinstancesSnapshotsGet(pcloudCloudinstancesSnapshotsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudinstancesSnapshotsGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesSnapshotsGetOptions model
				pcloudCloudinstancesSnapshotsGetOptionsModel := new(powervsv1.PcloudCloudinstancesSnapshotsGetOptions)
				pcloudCloudinstancesSnapshotsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsGetOptionsModel.SnapshotID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudinstancesSnapshotsGet(pcloudCloudinstancesSnapshotsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudinstancesSnapshotsGetOptions model with no property values
				pcloudCloudinstancesSnapshotsGetOptionsModelNew := new(powervsv1.PcloudCloudinstancesSnapshotsGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudinstancesSnapshotsGet(pcloudCloudinstancesSnapshotsGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudinstancesSnapshotsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesSnapshotsGetOptions model
				pcloudCloudinstancesSnapshotsGetOptionsModel := new(powervsv1.PcloudCloudinstancesSnapshotsGetOptions)
				pcloudCloudinstancesSnapshotsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsGetOptionsModel.SnapshotID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudinstancesSnapshotsGet(pcloudCloudinstancesSnapshotsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesSnapshotsPut(pcloudCloudinstancesSnapshotsPutOptions *PcloudCloudinstancesSnapshotsPutOptions) - Operation response error`, func() {
		pcloudCloudinstancesSnapshotsPutPath := "/pcloud/v1/cloud-instances/testString/snapshots/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesSnapshotsPutPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudinstancesSnapshotsPut with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesSnapshotsPutOptions model
				pcloudCloudinstancesSnapshotsPutOptionsModel := new(powervsv1.PcloudCloudinstancesSnapshotsPutOptions)
				pcloudCloudinstancesSnapshotsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsPutOptionsModel.SnapshotID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsPutOptionsModel.Description = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsPutOptionsModel.Name = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudinstancesSnapshotsPut(pcloudCloudinstancesSnapshotsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudinstancesSnapshotsPut(pcloudCloudinstancesSnapshotsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesSnapshotsPut(pcloudCloudinstancesSnapshotsPutOptions *PcloudCloudinstancesSnapshotsPutOptions)`, func() {
		pcloudCloudinstancesSnapshotsPutPath := "/pcloud/v1/cloud-instances/testString/snapshots/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesSnapshotsPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesSnapshotsPut successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudinstancesSnapshotsPutOptions model
				pcloudCloudinstancesSnapshotsPutOptionsModel := new(powervsv1.PcloudCloudinstancesSnapshotsPutOptions)
				pcloudCloudinstancesSnapshotsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsPutOptionsModel.SnapshotID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsPutOptionsModel.Description = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsPutOptionsModel.Name = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudinstancesSnapshotsPutWithContext(ctx, pcloudCloudinstancesSnapshotsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudinstancesSnapshotsPut(pcloudCloudinstancesSnapshotsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudinstancesSnapshotsPutWithContext(ctx, pcloudCloudinstancesSnapshotsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesSnapshotsPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesSnapshotsPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudinstancesSnapshotsPut(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudinstancesSnapshotsPutOptions model
				pcloudCloudinstancesSnapshotsPutOptionsModel := new(powervsv1.PcloudCloudinstancesSnapshotsPutOptions)
				pcloudCloudinstancesSnapshotsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsPutOptionsModel.SnapshotID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsPutOptionsModel.Description = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsPutOptionsModel.Name = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudinstancesSnapshotsPut(pcloudCloudinstancesSnapshotsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudinstancesSnapshotsPut with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesSnapshotsPutOptions model
				pcloudCloudinstancesSnapshotsPutOptionsModel := new(powervsv1.PcloudCloudinstancesSnapshotsPutOptions)
				pcloudCloudinstancesSnapshotsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsPutOptionsModel.SnapshotID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsPutOptionsModel.Description = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsPutOptionsModel.Name = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudinstancesSnapshotsPut(pcloudCloudinstancesSnapshotsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudinstancesSnapshotsPutOptions model with no property values
				pcloudCloudinstancesSnapshotsPutOptionsModelNew := new(powervsv1.PcloudCloudinstancesSnapshotsPutOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudinstancesSnapshotsPut(pcloudCloudinstancesSnapshotsPutOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudinstancesSnapshotsPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesSnapshotsPutOptions model
				pcloudCloudinstancesSnapshotsPutOptionsModel := new(powervsv1.PcloudCloudinstancesSnapshotsPutOptions)
				pcloudCloudinstancesSnapshotsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsPutOptionsModel.SnapshotID = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsPutOptionsModel.Description = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsPutOptionsModel.Name = core.StringPtr("testString")
				pcloudCloudinstancesSnapshotsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudinstancesSnapshotsPut(pcloudCloudinstancesSnapshotsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudStoragecapacityPoolsGetall(pcloudStoragecapacityPoolsGetallOptions *PcloudStoragecapacityPoolsGetallOptions) - Operation response error`, func() {
		pcloudStoragecapacityPoolsGetallPath := "/pcloud/v1/cloud-instances/testString/storage-capacity/storage-pools"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudStoragecapacityPoolsGetallPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudStoragecapacityPoolsGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudStoragecapacityPoolsGetallOptions model
				pcloudStoragecapacityPoolsGetallOptionsModel := new(powervsv1.PcloudStoragecapacityPoolsGetallOptions)
				pcloudStoragecapacityPoolsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudStoragecapacityPoolsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudStoragecapacityPoolsGetall(pcloudStoragecapacityPoolsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudStoragecapacityPoolsGetall(pcloudStoragecapacityPoolsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudStoragecapacityPoolsGetall(pcloudStoragecapacityPoolsGetallOptions *PcloudStoragecapacityPoolsGetallOptions)`, func() {
		pcloudStoragecapacityPoolsGetallPath := "/pcloud/v1/cloud-instances/testString/storage-capacity/storage-pools"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudStoragecapacityPoolsGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"maximumStorageAllocation": {"maxAllocationSize": 17, "storagePool": "StoragePool", "storageType": "StorageType"}, "storagePoolsCapacity": [{"availableCapacity": 17, "maxAllocationSize": 17, "poolName": "PoolName", "replicationEnabled": true, "storageHost": "StorageHost", "storageType": "StorageType", "totalCapacity": 13}]}`)
				}))
			})
			It(`Invoke PcloudStoragecapacityPoolsGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudStoragecapacityPoolsGetallOptions model
				pcloudStoragecapacityPoolsGetallOptionsModel := new(powervsv1.PcloudStoragecapacityPoolsGetallOptions)
				pcloudStoragecapacityPoolsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudStoragecapacityPoolsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudStoragecapacityPoolsGetallWithContext(ctx, pcloudStoragecapacityPoolsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudStoragecapacityPoolsGetall(pcloudStoragecapacityPoolsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudStoragecapacityPoolsGetallWithContext(ctx, pcloudStoragecapacityPoolsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudStoragecapacityPoolsGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"maximumStorageAllocation": {"maxAllocationSize": 17, "storagePool": "StoragePool", "storageType": "StorageType"}, "storagePoolsCapacity": [{"availableCapacity": 17, "maxAllocationSize": 17, "poolName": "PoolName", "replicationEnabled": true, "storageHost": "StorageHost", "storageType": "StorageType", "totalCapacity": 13}]}`)
				}))
			})
			It(`Invoke PcloudStoragecapacityPoolsGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudStoragecapacityPoolsGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudStoragecapacityPoolsGetallOptions model
				pcloudStoragecapacityPoolsGetallOptionsModel := new(powervsv1.PcloudStoragecapacityPoolsGetallOptions)
				pcloudStoragecapacityPoolsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudStoragecapacityPoolsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudStoragecapacityPoolsGetall(pcloudStoragecapacityPoolsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudStoragecapacityPoolsGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudStoragecapacityPoolsGetallOptions model
				pcloudStoragecapacityPoolsGetallOptionsModel := new(powervsv1.PcloudStoragecapacityPoolsGetallOptions)
				pcloudStoragecapacityPoolsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudStoragecapacityPoolsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudStoragecapacityPoolsGetall(pcloudStoragecapacityPoolsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudStoragecapacityPoolsGetallOptions model with no property values
				pcloudStoragecapacityPoolsGetallOptionsModelNew := new(powervsv1.PcloudStoragecapacityPoolsGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudStoragecapacityPoolsGetall(pcloudStoragecapacityPoolsGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudStoragecapacityPoolsGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudStoragecapacityPoolsGetallOptions model
				pcloudStoragecapacityPoolsGetallOptionsModel := new(powervsv1.PcloudStoragecapacityPoolsGetallOptions)
				pcloudStoragecapacityPoolsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudStoragecapacityPoolsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudStoragecapacityPoolsGetall(pcloudStoragecapacityPoolsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudStoragecapacityPoolsGet(pcloudStoragecapacityPoolsGetOptions *PcloudStoragecapacityPoolsGetOptions) - Operation response error`, func() {
		pcloudStoragecapacityPoolsGetPath := "/pcloud/v1/cloud-instances/testString/storage-capacity/storage-pools/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudStoragecapacityPoolsGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudStoragecapacityPoolsGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudStoragecapacityPoolsGetOptions model
				pcloudStoragecapacityPoolsGetOptionsModel := new(powervsv1.PcloudStoragecapacityPoolsGetOptions)
				pcloudStoragecapacityPoolsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudStoragecapacityPoolsGetOptionsModel.StoragePoolName = core.StringPtr("testString")
				pcloudStoragecapacityPoolsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudStoragecapacityPoolsGet(pcloudStoragecapacityPoolsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudStoragecapacityPoolsGet(pcloudStoragecapacityPoolsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudStoragecapacityPoolsGet(pcloudStoragecapacityPoolsGetOptions *PcloudStoragecapacityPoolsGetOptions)`, func() {
		pcloudStoragecapacityPoolsGetPath := "/pcloud/v1/cloud-instances/testString/storage-capacity/storage-pools/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudStoragecapacityPoolsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"availableCapacity": 17, "maxAllocationSize": 17, "poolName": "PoolName", "replicationEnabled": true, "storageHost": "StorageHost", "storageType": "StorageType", "totalCapacity": 13}`)
				}))
			})
			It(`Invoke PcloudStoragecapacityPoolsGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudStoragecapacityPoolsGetOptions model
				pcloudStoragecapacityPoolsGetOptionsModel := new(powervsv1.PcloudStoragecapacityPoolsGetOptions)
				pcloudStoragecapacityPoolsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudStoragecapacityPoolsGetOptionsModel.StoragePoolName = core.StringPtr("testString")
				pcloudStoragecapacityPoolsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudStoragecapacityPoolsGetWithContext(ctx, pcloudStoragecapacityPoolsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudStoragecapacityPoolsGet(pcloudStoragecapacityPoolsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudStoragecapacityPoolsGetWithContext(ctx, pcloudStoragecapacityPoolsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudStoragecapacityPoolsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"availableCapacity": 17, "maxAllocationSize": 17, "poolName": "PoolName", "replicationEnabled": true, "storageHost": "StorageHost", "storageType": "StorageType", "totalCapacity": 13}`)
				}))
			})
			It(`Invoke PcloudStoragecapacityPoolsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudStoragecapacityPoolsGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudStoragecapacityPoolsGetOptions model
				pcloudStoragecapacityPoolsGetOptionsModel := new(powervsv1.PcloudStoragecapacityPoolsGetOptions)
				pcloudStoragecapacityPoolsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudStoragecapacityPoolsGetOptionsModel.StoragePoolName = core.StringPtr("testString")
				pcloudStoragecapacityPoolsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudStoragecapacityPoolsGet(pcloudStoragecapacityPoolsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudStoragecapacityPoolsGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudStoragecapacityPoolsGetOptions model
				pcloudStoragecapacityPoolsGetOptionsModel := new(powervsv1.PcloudStoragecapacityPoolsGetOptions)
				pcloudStoragecapacityPoolsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudStoragecapacityPoolsGetOptionsModel.StoragePoolName = core.StringPtr("testString")
				pcloudStoragecapacityPoolsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudStoragecapacityPoolsGet(pcloudStoragecapacityPoolsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudStoragecapacityPoolsGetOptions model with no property values
				pcloudStoragecapacityPoolsGetOptionsModelNew := new(powervsv1.PcloudStoragecapacityPoolsGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudStoragecapacityPoolsGet(pcloudStoragecapacityPoolsGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudStoragecapacityPoolsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudStoragecapacityPoolsGetOptions model
				pcloudStoragecapacityPoolsGetOptionsModel := new(powervsv1.PcloudStoragecapacityPoolsGetOptions)
				pcloudStoragecapacityPoolsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudStoragecapacityPoolsGetOptionsModel.StoragePoolName = core.StringPtr("testString")
				pcloudStoragecapacityPoolsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudStoragecapacityPoolsGet(pcloudStoragecapacityPoolsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudStoragecapacityTypesGetall(pcloudStoragecapacityTypesGetallOptions *PcloudStoragecapacityTypesGetallOptions) - Operation response error`, func() {
		pcloudStoragecapacityTypesGetallPath := "/pcloud/v1/cloud-instances/testString/storage-capacity/storage-types"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudStoragecapacityTypesGetallPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudStoragecapacityTypesGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudStoragecapacityTypesGetallOptions model
				pcloudStoragecapacityTypesGetallOptionsModel := new(powervsv1.PcloudStoragecapacityTypesGetallOptions)
				pcloudStoragecapacityTypesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudStoragecapacityTypesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudStoragecapacityTypesGetall(pcloudStoragecapacityTypesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudStoragecapacityTypesGetall(pcloudStoragecapacityTypesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudStoragecapacityTypesGetall(pcloudStoragecapacityTypesGetallOptions *PcloudStoragecapacityTypesGetallOptions)`, func() {
		pcloudStoragecapacityTypesGetallPath := "/pcloud/v1/cloud-instances/testString/storage-capacity/storage-types"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudStoragecapacityTypesGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"maximumStorageAllocation": {"maxAllocationSize": 17, "storagePool": "StoragePool", "storageType": "StorageType"}, "storageTypesCapacity": [{"maximumStorageAllocation": {"maxAllocationSize": 17, "storagePool": "StoragePool", "storageType": "StorageType"}, "storagePoolsCapacity": [{"availableCapacity": 17, "maxAllocationSize": 17, "poolName": "PoolName", "replicationEnabled": true, "storageHost": "StorageHost", "storageType": "StorageType", "totalCapacity": 13}], "storageType": "StorageType"}]}`)
				}))
			})
			It(`Invoke PcloudStoragecapacityTypesGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudStoragecapacityTypesGetallOptions model
				pcloudStoragecapacityTypesGetallOptionsModel := new(powervsv1.PcloudStoragecapacityTypesGetallOptions)
				pcloudStoragecapacityTypesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudStoragecapacityTypesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudStoragecapacityTypesGetallWithContext(ctx, pcloudStoragecapacityTypesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudStoragecapacityTypesGetall(pcloudStoragecapacityTypesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudStoragecapacityTypesGetallWithContext(ctx, pcloudStoragecapacityTypesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudStoragecapacityTypesGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"maximumStorageAllocation": {"maxAllocationSize": 17, "storagePool": "StoragePool", "storageType": "StorageType"}, "storageTypesCapacity": [{"maximumStorageAllocation": {"maxAllocationSize": 17, "storagePool": "StoragePool", "storageType": "StorageType"}, "storagePoolsCapacity": [{"availableCapacity": 17, "maxAllocationSize": 17, "poolName": "PoolName", "replicationEnabled": true, "storageHost": "StorageHost", "storageType": "StorageType", "totalCapacity": 13}], "storageType": "StorageType"}]}`)
				}))
			})
			It(`Invoke PcloudStoragecapacityTypesGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudStoragecapacityTypesGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudStoragecapacityTypesGetallOptions model
				pcloudStoragecapacityTypesGetallOptionsModel := new(powervsv1.PcloudStoragecapacityTypesGetallOptions)
				pcloudStoragecapacityTypesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudStoragecapacityTypesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudStoragecapacityTypesGetall(pcloudStoragecapacityTypesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudStoragecapacityTypesGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudStoragecapacityTypesGetallOptions model
				pcloudStoragecapacityTypesGetallOptionsModel := new(powervsv1.PcloudStoragecapacityTypesGetallOptions)
				pcloudStoragecapacityTypesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudStoragecapacityTypesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudStoragecapacityTypesGetall(pcloudStoragecapacityTypesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudStoragecapacityTypesGetallOptions model with no property values
				pcloudStoragecapacityTypesGetallOptionsModelNew := new(powervsv1.PcloudStoragecapacityTypesGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudStoragecapacityTypesGetall(pcloudStoragecapacityTypesGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudStoragecapacityTypesGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudStoragecapacityTypesGetallOptions model
				pcloudStoragecapacityTypesGetallOptionsModel := new(powervsv1.PcloudStoragecapacityTypesGetallOptions)
				pcloudStoragecapacityTypesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudStoragecapacityTypesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudStoragecapacityTypesGetall(pcloudStoragecapacityTypesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudStoragecapacityTypesGet(pcloudStoragecapacityTypesGetOptions *PcloudStoragecapacityTypesGetOptions) - Operation response error`, func() {
		pcloudStoragecapacityTypesGetPath := "/pcloud/v1/cloud-instances/testString/storage-capacity/storage-types/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudStoragecapacityTypesGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudStoragecapacityTypesGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudStoragecapacityTypesGetOptions model
				pcloudStoragecapacityTypesGetOptionsModel := new(powervsv1.PcloudStoragecapacityTypesGetOptions)
				pcloudStoragecapacityTypesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudStoragecapacityTypesGetOptionsModel.StorageTypeName = core.StringPtr("testString")
				pcloudStoragecapacityTypesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudStoragecapacityTypesGet(pcloudStoragecapacityTypesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudStoragecapacityTypesGet(pcloudStoragecapacityTypesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudStoragecapacityTypesGet(pcloudStoragecapacityTypesGetOptions *PcloudStoragecapacityTypesGetOptions)`, func() {
		pcloudStoragecapacityTypesGetPath := "/pcloud/v1/cloud-instances/testString/storage-capacity/storage-types/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudStoragecapacityTypesGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"maximumStorageAllocation": {"maxAllocationSize": 17, "storagePool": "StoragePool", "storageType": "StorageType"}, "storagePoolsCapacity": [{"availableCapacity": 17, "maxAllocationSize": 17, "poolName": "PoolName", "replicationEnabled": true, "storageHost": "StorageHost", "storageType": "StorageType", "totalCapacity": 13}], "storageType": "StorageType"}`)
				}))
			})
			It(`Invoke PcloudStoragecapacityTypesGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudStoragecapacityTypesGetOptions model
				pcloudStoragecapacityTypesGetOptionsModel := new(powervsv1.PcloudStoragecapacityTypesGetOptions)
				pcloudStoragecapacityTypesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudStoragecapacityTypesGetOptionsModel.StorageTypeName = core.StringPtr("testString")
				pcloudStoragecapacityTypesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudStoragecapacityTypesGetWithContext(ctx, pcloudStoragecapacityTypesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudStoragecapacityTypesGet(pcloudStoragecapacityTypesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudStoragecapacityTypesGetWithContext(ctx, pcloudStoragecapacityTypesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudStoragecapacityTypesGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"maximumStorageAllocation": {"maxAllocationSize": 17, "storagePool": "StoragePool", "storageType": "StorageType"}, "storagePoolsCapacity": [{"availableCapacity": 17, "maxAllocationSize": 17, "poolName": "PoolName", "replicationEnabled": true, "storageHost": "StorageHost", "storageType": "StorageType", "totalCapacity": 13}], "storageType": "StorageType"}`)
				}))
			})
			It(`Invoke PcloudStoragecapacityTypesGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudStoragecapacityTypesGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudStoragecapacityTypesGetOptions model
				pcloudStoragecapacityTypesGetOptionsModel := new(powervsv1.PcloudStoragecapacityTypesGetOptions)
				pcloudStoragecapacityTypesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudStoragecapacityTypesGetOptionsModel.StorageTypeName = core.StringPtr("testString")
				pcloudStoragecapacityTypesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudStoragecapacityTypesGet(pcloudStoragecapacityTypesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudStoragecapacityTypesGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudStoragecapacityTypesGetOptions model
				pcloudStoragecapacityTypesGetOptionsModel := new(powervsv1.PcloudStoragecapacityTypesGetOptions)
				pcloudStoragecapacityTypesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudStoragecapacityTypesGetOptionsModel.StorageTypeName = core.StringPtr("testString")
				pcloudStoragecapacityTypesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudStoragecapacityTypesGet(pcloudStoragecapacityTypesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudStoragecapacityTypesGetOptions model with no property values
				pcloudStoragecapacityTypesGetOptionsModelNew := new(powervsv1.PcloudStoragecapacityTypesGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudStoragecapacityTypesGet(pcloudStoragecapacityTypesGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudStoragecapacityTypesGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudStoragecapacityTypesGetOptions model
				pcloudStoragecapacityTypesGetOptionsModel := new(powervsv1.PcloudStoragecapacityTypesGetOptions)
				pcloudStoragecapacityTypesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudStoragecapacityTypesGetOptionsModel.StorageTypeName = core.StringPtr("testString")
				pcloudStoragecapacityTypesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudStoragecapacityTypesGet(pcloudStoragecapacityTypesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesStoragetiersGetall(pcloudCloudinstancesStoragetiersGetallOptions *PcloudCloudinstancesStoragetiersGetallOptions) - Operation response error`, func() {
		pcloudCloudinstancesStoragetiersGetallPath := "/pcloud/v1/cloud-instances/testString/storage-tiers"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesStoragetiersGetallPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudinstancesStoragetiersGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesStoragetiersGetallOptions model
				pcloudCloudinstancesStoragetiersGetallOptionsModel := new(powervsv1.PcloudCloudinstancesStoragetiersGetallOptions)
				pcloudCloudinstancesStoragetiersGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesStoragetiersGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudinstancesStoragetiersGetall(pcloudCloudinstancesStoragetiersGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudinstancesStoragetiersGetall(pcloudCloudinstancesStoragetiersGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesStoragetiersGetall(pcloudCloudinstancesStoragetiersGetallOptions *PcloudCloudinstancesStoragetiersGetallOptions)`, func() {
		pcloudCloudinstancesStoragetiersGetallPath := "/pcloud/v1/cloud-instances/testString/storage-tiers"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesStoragetiersGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"description": "Description", "name": "Name", "state": "active"}]`)
				}))
			})
			It(`Invoke PcloudCloudinstancesStoragetiersGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudinstancesStoragetiersGetallOptions model
				pcloudCloudinstancesStoragetiersGetallOptionsModel := new(powervsv1.PcloudCloudinstancesStoragetiersGetallOptions)
				pcloudCloudinstancesStoragetiersGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesStoragetiersGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudinstancesStoragetiersGetallWithContext(ctx, pcloudCloudinstancesStoragetiersGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudinstancesStoragetiersGetall(pcloudCloudinstancesStoragetiersGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudinstancesStoragetiersGetallWithContext(ctx, pcloudCloudinstancesStoragetiersGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesStoragetiersGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"description": "Description", "name": "Name", "state": "active"}]`)
				}))
			})
			It(`Invoke PcloudCloudinstancesStoragetiersGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudinstancesStoragetiersGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudinstancesStoragetiersGetallOptions model
				pcloudCloudinstancesStoragetiersGetallOptionsModel := new(powervsv1.PcloudCloudinstancesStoragetiersGetallOptions)
				pcloudCloudinstancesStoragetiersGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesStoragetiersGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudinstancesStoragetiersGetall(pcloudCloudinstancesStoragetiersGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudinstancesStoragetiersGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesStoragetiersGetallOptions model
				pcloudCloudinstancesStoragetiersGetallOptionsModel := new(powervsv1.PcloudCloudinstancesStoragetiersGetallOptions)
				pcloudCloudinstancesStoragetiersGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesStoragetiersGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudinstancesStoragetiersGetall(pcloudCloudinstancesStoragetiersGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudinstancesStoragetiersGetallOptions model with no property values
				pcloudCloudinstancesStoragetiersGetallOptionsModelNew := new(powervsv1.PcloudCloudinstancesStoragetiersGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudinstancesStoragetiersGetall(pcloudCloudinstancesStoragetiersGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudinstancesStoragetiersGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesStoragetiersGetallOptions model
				pcloudCloudinstancesStoragetiersGetallOptionsModel := new(powervsv1.PcloudCloudinstancesStoragetiersGetallOptions)
				pcloudCloudinstancesStoragetiersGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesStoragetiersGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudinstancesStoragetiersGetall(pcloudCloudinstancesStoragetiersGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSystempoolsGet(pcloudSystempoolsGetOptions *PcloudSystempoolsGetOptions) - Operation response error`, func() {
		pcloudSystempoolsGetPath := "/pcloud/v1/cloud-instances/testString/system-pools"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSystempoolsGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudSystempoolsGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSystempoolsGetOptions model
				pcloudSystempoolsGetOptionsModel := new(powervsv1.PcloudSystempoolsGetOptions)
				pcloudSystempoolsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSystempoolsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudSystempoolsGet(pcloudSystempoolsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudSystempoolsGet(pcloudSystempoolsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudSystempoolsGet(pcloudSystempoolsGetOptions *PcloudSystempoolsGetOptions)`, func() {
		pcloudSystempoolsGetPath := "/pcloud/v1/cloud-instances/testString/system-pools"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSystempoolsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"mapKey": {"capacity": {"availableCores": 14, "availableMemory": 15, "cores": 5, "id": 2, "memory": 6, "totalCores": 10, "totalMemory": 11, "totalPhysCores": 14, "totalPhysMemory": 15}, "coreMemoryRatio": 15, "maxAvailable": {"availableCores": 14, "availableMemory": 15, "cores": 5, "id": 2, "memory": 6, "totalCores": 10, "totalMemory": 11, "totalPhysCores": 14, "totalPhysMemory": 15}, "maxCoresAvailable": {"availableCores": 14, "availableMemory": 15, "cores": 5, "id": 2, "memory": 6, "totalCores": 10, "totalMemory": 11, "totalPhysCores": 14, "totalPhysMemory": 15}, "maxMemoryAvailable": {"availableCores": 14, "availableMemory": 15, "cores": 5, "id": 2, "memory": 6, "totalCores": 10, "totalMemory": 11, "totalPhysCores": 14, "totalPhysMemory": 15}, "sharedCoreRatio": {"default": 7, "max": 3, "min": 3}, "systems": [{"availableCores": 14, "availableMemory": 15, "cores": 5, "id": 2, "memory": 6, "totalCores": 10, "totalMemory": 11, "totalPhysCores": 14, "totalPhysMemory": 15}], "type": "Type"}}`)
				}))
			})
			It(`Invoke PcloudSystempoolsGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudSystempoolsGetOptions model
				pcloudSystempoolsGetOptionsModel := new(powervsv1.PcloudSystempoolsGetOptions)
				pcloudSystempoolsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSystempoolsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudSystempoolsGetWithContext(ctx, pcloudSystempoolsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudSystempoolsGet(pcloudSystempoolsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudSystempoolsGetWithContext(ctx, pcloudSystempoolsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudSystempoolsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"mapKey": {"capacity": {"availableCores": 14, "availableMemory": 15, "cores": 5, "id": 2, "memory": 6, "totalCores": 10, "totalMemory": 11, "totalPhysCores": 14, "totalPhysMemory": 15}, "coreMemoryRatio": 15, "maxAvailable": {"availableCores": 14, "availableMemory": 15, "cores": 5, "id": 2, "memory": 6, "totalCores": 10, "totalMemory": 11, "totalPhysCores": 14, "totalPhysMemory": 15}, "maxCoresAvailable": {"availableCores": 14, "availableMemory": 15, "cores": 5, "id": 2, "memory": 6, "totalCores": 10, "totalMemory": 11, "totalPhysCores": 14, "totalPhysMemory": 15}, "maxMemoryAvailable": {"availableCores": 14, "availableMemory": 15, "cores": 5, "id": 2, "memory": 6, "totalCores": 10, "totalMemory": 11, "totalPhysCores": 14, "totalPhysMemory": 15}, "sharedCoreRatio": {"default": 7, "max": 3, "min": 3}, "systems": [{"availableCores": 14, "availableMemory": 15, "cores": 5, "id": 2, "memory": 6, "totalCores": 10, "totalMemory": 11, "totalPhysCores": 14, "totalPhysMemory": 15}], "type": "Type"}}`)
				}))
			})
			It(`Invoke PcloudSystempoolsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudSystempoolsGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudSystempoolsGetOptions model
				pcloudSystempoolsGetOptionsModel := new(powervsv1.PcloudSystempoolsGetOptions)
				pcloudSystempoolsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSystempoolsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudSystempoolsGet(pcloudSystempoolsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudSystempoolsGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSystempoolsGetOptions model
				pcloudSystempoolsGetOptionsModel := new(powervsv1.PcloudSystempoolsGetOptions)
				pcloudSystempoolsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSystempoolsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudSystempoolsGet(pcloudSystempoolsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudSystempoolsGetOptions model with no property values
				pcloudSystempoolsGetOptionsModelNew := new(powervsv1.PcloudSystempoolsGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudSystempoolsGet(pcloudSystempoolsGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudSystempoolsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudSystempoolsGetOptions model
				pcloudSystempoolsGetOptionsModel := new(powervsv1.PcloudSystempoolsGetOptions)
				pcloudSystempoolsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudSystempoolsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudSystempoolsGet(pcloudSystempoolsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudTasksDelete(pcloudTasksDeleteOptions *PcloudTasksDeleteOptions) - Operation response error`, func() {
		pcloudTasksDeletePath := "/pcloud/v1/tasks/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudTasksDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudTasksDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudTasksDeleteOptions model
				pcloudTasksDeleteOptionsModel := new(powervsv1.PcloudTasksDeleteOptions)
				pcloudTasksDeleteOptionsModel.TaskID = core.StringPtr("testString")
				pcloudTasksDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudTasksDelete(pcloudTasksDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudTasksDelete(pcloudTasksDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudTasksDelete(pcloudTasksDeleteOptions *PcloudTasksDeleteOptions)`, func() {
		pcloudTasksDeletePath := "/pcloud/v1/tasks/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudTasksDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudTasksDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudTasksDeleteOptions model
				pcloudTasksDeleteOptionsModel := new(powervsv1.PcloudTasksDeleteOptions)
				pcloudTasksDeleteOptionsModel.TaskID = core.StringPtr("testString")
				pcloudTasksDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudTasksDeleteWithContext(ctx, pcloudTasksDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudTasksDelete(pcloudTasksDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudTasksDeleteWithContext(ctx, pcloudTasksDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudTasksDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudTasksDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudTasksDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudTasksDeleteOptions model
				pcloudTasksDeleteOptionsModel := new(powervsv1.PcloudTasksDeleteOptions)
				pcloudTasksDeleteOptionsModel.TaskID = core.StringPtr("testString")
				pcloudTasksDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudTasksDelete(pcloudTasksDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudTasksDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudTasksDeleteOptions model
				pcloudTasksDeleteOptionsModel := new(powervsv1.PcloudTasksDeleteOptions)
				pcloudTasksDeleteOptionsModel.TaskID = core.StringPtr("testString")
				pcloudTasksDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudTasksDelete(pcloudTasksDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudTasksDeleteOptions model with no property values
				pcloudTasksDeleteOptionsModelNew := new(powervsv1.PcloudTasksDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudTasksDelete(pcloudTasksDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudTasksDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudTasksDeleteOptions model
				pcloudTasksDeleteOptionsModel := new(powervsv1.PcloudTasksDeleteOptions)
				pcloudTasksDeleteOptionsModel.TaskID = core.StringPtr("testString")
				pcloudTasksDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudTasksDelete(pcloudTasksDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudTasksGet(pcloudTasksGetOptions *PcloudTasksGetOptions) - Operation response error`, func() {
		pcloudTasksGetPath := "/pcloud/v1/tasks/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudTasksGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudTasksGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudTasksGetOptions model
				pcloudTasksGetOptionsModel := new(powervsv1.PcloudTasksGetOptions)
				pcloudTasksGetOptionsModel.TaskID = core.StringPtr("testString")
				pcloudTasksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudTasksGet(pcloudTasksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudTasksGet(pcloudTasksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudTasksGet(pcloudTasksGetOptions *PcloudTasksGetOptions)`, func() {
		pcloudTasksGetPath := "/pcloud/v1/tasks/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudTasksGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"cloudInstanceID": "CloudInstanceID", "componentID": "ComponentID", "componentType": "ComponentType", "creationDate": "2019-01-01T12:00:00.000Z", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "operation": "Operation", "status": "Status", "statusDetail": "StatusDetail", "taskID": "TaskID"}`)
				}))
			})
			It(`Invoke PcloudTasksGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudTasksGetOptions model
				pcloudTasksGetOptionsModel := new(powervsv1.PcloudTasksGetOptions)
				pcloudTasksGetOptionsModel.TaskID = core.StringPtr("testString")
				pcloudTasksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudTasksGetWithContext(ctx, pcloudTasksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudTasksGet(pcloudTasksGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudTasksGetWithContext(ctx, pcloudTasksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudTasksGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"cloudInstanceID": "CloudInstanceID", "componentID": "ComponentID", "componentType": "ComponentType", "creationDate": "2019-01-01T12:00:00.000Z", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "operation": "Operation", "status": "Status", "statusDetail": "StatusDetail", "taskID": "TaskID"}`)
				}))
			})
			It(`Invoke PcloudTasksGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudTasksGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudTasksGetOptions model
				pcloudTasksGetOptionsModel := new(powervsv1.PcloudTasksGetOptions)
				pcloudTasksGetOptionsModel.TaskID = core.StringPtr("testString")
				pcloudTasksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudTasksGet(pcloudTasksGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudTasksGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudTasksGetOptions model
				pcloudTasksGetOptionsModel := new(powervsv1.PcloudTasksGetOptions)
				pcloudTasksGetOptionsModel.TaskID = core.StringPtr("testString")
				pcloudTasksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudTasksGet(pcloudTasksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudTasksGetOptions model with no property values
				pcloudTasksGetOptionsModelNew := new(powervsv1.PcloudTasksGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudTasksGet(pcloudTasksGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudTasksGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudTasksGetOptions model
				pcloudTasksGetOptionsModel := new(powervsv1.PcloudTasksGetOptions)
				pcloudTasksGetOptionsModel.TaskID = core.StringPtr("testString")
				pcloudTasksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudTasksGet(pcloudTasksGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudTenantsGet(pcloudTenantsGetOptions *PcloudTenantsGetOptions) - Operation response error`, func() {
		pcloudTenantsGetPath := "/pcloud/v1/tenants/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudTenantsGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudTenantsGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudTenantsGetOptions model
				pcloudTenantsGetOptionsModel := new(powervsv1.PcloudTenantsGetOptions)
				pcloudTenantsGetOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudTenantsGet(pcloudTenantsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudTenantsGet(pcloudTenantsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudTenantsGet(pcloudTenantsGetOptions *PcloudTenantsGetOptions)`, func() {
		pcloudTenantsGetPath := "/pcloud/v1/tenants/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudTenantsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"cloudInstances": [{"capabilities": ["Capabilities"], "cloudInstanceID": "CloudInstanceID", "enabled": false, "href": "Href", "initialized": false, "limits": {"instanceMemory": 14, "instanceProcUnits": 17, "instances": 9, "memory": 6, "peeringBandwidth": 16, "peeringNetworks": 15, "procUnits": 9, "processors": 10, "storage": 7, "storageSSD": 10, "storageStandard": 15}, "name": "Name", "region": "Region"}], "creationDate": "2019-01-01T12:00:00.000Z", "enabled": false, "icn": "Icn", "peeringNetworks": [{"cidr": "CIDR", "dnsServers": ["DnsServers"], "projectName": "ProjectName"}], "sshKeys": [{"creationDate": "2019-01-01T12:00:00.000Z", "name": "Name", "sshKey": "SshKey"}], "tenantID": "TenantID"}`)
				}))
			})
			It(`Invoke PcloudTenantsGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudTenantsGetOptions model
				pcloudTenantsGetOptionsModel := new(powervsv1.PcloudTenantsGetOptions)
				pcloudTenantsGetOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudTenantsGetWithContext(ctx, pcloudTenantsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudTenantsGet(pcloudTenantsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudTenantsGetWithContext(ctx, pcloudTenantsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudTenantsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"cloudInstances": [{"capabilities": ["Capabilities"], "cloudInstanceID": "CloudInstanceID", "enabled": false, "href": "Href", "initialized": false, "limits": {"instanceMemory": 14, "instanceProcUnits": 17, "instances": 9, "memory": 6, "peeringBandwidth": 16, "peeringNetworks": 15, "procUnits": 9, "processors": 10, "storage": 7, "storageSSD": 10, "storageStandard": 15}, "name": "Name", "region": "Region"}], "creationDate": "2019-01-01T12:00:00.000Z", "enabled": false, "icn": "Icn", "peeringNetworks": [{"cidr": "CIDR", "dnsServers": ["DnsServers"], "projectName": "ProjectName"}], "sshKeys": [{"creationDate": "2019-01-01T12:00:00.000Z", "name": "Name", "sshKey": "SshKey"}], "tenantID": "TenantID"}`)
				}))
			})
			It(`Invoke PcloudTenantsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudTenantsGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudTenantsGetOptions model
				pcloudTenantsGetOptionsModel := new(powervsv1.PcloudTenantsGetOptions)
				pcloudTenantsGetOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudTenantsGet(pcloudTenantsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudTenantsGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudTenantsGetOptions model
				pcloudTenantsGetOptionsModel := new(powervsv1.PcloudTenantsGetOptions)
				pcloudTenantsGetOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudTenantsGet(pcloudTenantsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudTenantsGetOptions model with no property values
				pcloudTenantsGetOptionsModelNew := new(powervsv1.PcloudTenantsGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudTenantsGet(pcloudTenantsGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudTenantsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudTenantsGetOptions model
				pcloudTenantsGetOptionsModel := new(powervsv1.PcloudTenantsGetOptions)
				pcloudTenantsGetOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudTenantsGet(pcloudTenantsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudTenantsPut(pcloudTenantsPutOptions *PcloudTenantsPutOptions) - Operation response error`, func() {
		pcloudTenantsPutPath := "/pcloud/v1/tenants/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudTenantsPutPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudTenantsPut with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PeeringNetwork model
				peeringNetworkModel := new(powervsv1.PeeringNetwork)
				peeringNetworkModel.CIDR = core.StringPtr("testString")
				peeringNetworkModel.DnsServers = []string{"testString"}
				peeringNetworkModel.ProjectName = core.StringPtr("testString")

				// Construct an instance of the PcloudTenantsPutOptions model
				pcloudTenantsPutOptionsModel := new(powervsv1.PcloudTenantsPutOptions)
				pcloudTenantsPutOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsPutOptionsModel.Icn = core.StringPtr("testString")
				pcloudTenantsPutOptionsModel.PeeringNetworks = []powervsv1.PeeringNetwork{*peeringNetworkModel}
				pcloudTenantsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudTenantsPut(pcloudTenantsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudTenantsPut(pcloudTenantsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudTenantsPut(pcloudTenantsPutOptions *PcloudTenantsPutOptions)`, func() {
		pcloudTenantsPutPath := "/pcloud/v1/tenants/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudTenantsPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"cloudInstances": [{"capabilities": ["Capabilities"], "cloudInstanceID": "CloudInstanceID", "enabled": false, "href": "Href", "initialized": false, "limits": {"instanceMemory": 14, "instanceProcUnits": 17, "instances": 9, "memory": 6, "peeringBandwidth": 16, "peeringNetworks": 15, "procUnits": 9, "processors": 10, "storage": 7, "storageSSD": 10, "storageStandard": 15}, "name": "Name", "region": "Region"}], "creationDate": "2019-01-01T12:00:00.000Z", "enabled": false, "icn": "Icn", "peeringNetworks": [{"cidr": "CIDR", "dnsServers": ["DnsServers"], "projectName": "ProjectName"}], "sshKeys": [{"creationDate": "2019-01-01T12:00:00.000Z", "name": "Name", "sshKey": "SshKey"}], "tenantID": "TenantID"}`)
				}))
			})
			It(`Invoke PcloudTenantsPut successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PeeringNetwork model
				peeringNetworkModel := new(powervsv1.PeeringNetwork)
				peeringNetworkModel.CIDR = core.StringPtr("testString")
				peeringNetworkModel.DnsServers = []string{"testString"}
				peeringNetworkModel.ProjectName = core.StringPtr("testString")

				// Construct an instance of the PcloudTenantsPutOptions model
				pcloudTenantsPutOptionsModel := new(powervsv1.PcloudTenantsPutOptions)
				pcloudTenantsPutOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsPutOptionsModel.Icn = core.StringPtr("testString")
				pcloudTenantsPutOptionsModel.PeeringNetworks = []powervsv1.PeeringNetwork{*peeringNetworkModel}
				pcloudTenantsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudTenantsPutWithContext(ctx, pcloudTenantsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudTenantsPut(pcloudTenantsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudTenantsPutWithContext(ctx, pcloudTenantsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudTenantsPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"cloudInstances": [{"capabilities": ["Capabilities"], "cloudInstanceID": "CloudInstanceID", "enabled": false, "href": "Href", "initialized": false, "limits": {"instanceMemory": 14, "instanceProcUnits": 17, "instances": 9, "memory": 6, "peeringBandwidth": 16, "peeringNetworks": 15, "procUnits": 9, "processors": 10, "storage": 7, "storageSSD": 10, "storageStandard": 15}, "name": "Name", "region": "Region"}], "creationDate": "2019-01-01T12:00:00.000Z", "enabled": false, "icn": "Icn", "peeringNetworks": [{"cidr": "CIDR", "dnsServers": ["DnsServers"], "projectName": "ProjectName"}], "sshKeys": [{"creationDate": "2019-01-01T12:00:00.000Z", "name": "Name", "sshKey": "SshKey"}], "tenantID": "TenantID"}`)
				}))
			})
			It(`Invoke PcloudTenantsPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudTenantsPut(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PeeringNetwork model
				peeringNetworkModel := new(powervsv1.PeeringNetwork)
				peeringNetworkModel.CIDR = core.StringPtr("testString")
				peeringNetworkModel.DnsServers = []string{"testString"}
				peeringNetworkModel.ProjectName = core.StringPtr("testString")

				// Construct an instance of the PcloudTenantsPutOptions model
				pcloudTenantsPutOptionsModel := new(powervsv1.PcloudTenantsPutOptions)
				pcloudTenantsPutOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsPutOptionsModel.Icn = core.StringPtr("testString")
				pcloudTenantsPutOptionsModel.PeeringNetworks = []powervsv1.PeeringNetwork{*peeringNetworkModel}
				pcloudTenantsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudTenantsPut(pcloudTenantsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudTenantsPut with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PeeringNetwork model
				peeringNetworkModel := new(powervsv1.PeeringNetwork)
				peeringNetworkModel.CIDR = core.StringPtr("testString")
				peeringNetworkModel.DnsServers = []string{"testString"}
				peeringNetworkModel.ProjectName = core.StringPtr("testString")

				// Construct an instance of the PcloudTenantsPutOptions model
				pcloudTenantsPutOptionsModel := new(powervsv1.PcloudTenantsPutOptions)
				pcloudTenantsPutOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsPutOptionsModel.Icn = core.StringPtr("testString")
				pcloudTenantsPutOptionsModel.PeeringNetworks = []powervsv1.PeeringNetwork{*peeringNetworkModel}
				pcloudTenantsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudTenantsPut(pcloudTenantsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudTenantsPutOptions model with no property values
				pcloudTenantsPutOptionsModelNew := new(powervsv1.PcloudTenantsPutOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudTenantsPut(pcloudTenantsPutOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudTenantsPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PeeringNetwork model
				peeringNetworkModel := new(powervsv1.PeeringNetwork)
				peeringNetworkModel.CIDR = core.StringPtr("testString")
				peeringNetworkModel.DnsServers = []string{"testString"}
				peeringNetworkModel.ProjectName = core.StringPtr("testString")

				// Construct an instance of the PcloudTenantsPutOptions model
				pcloudTenantsPutOptionsModel := new(powervsv1.PcloudTenantsPutOptions)
				pcloudTenantsPutOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsPutOptionsModel.Icn = core.StringPtr("testString")
				pcloudTenantsPutOptionsModel.PeeringNetworks = []powervsv1.PeeringNetwork{*peeringNetworkModel}
				pcloudTenantsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudTenantsPut(pcloudTenantsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudTenantsSshkeysGetall(pcloudTenantsSshkeysGetallOptions *PcloudTenantsSshkeysGetallOptions) - Operation response error`, func() {
		pcloudTenantsSshkeysGetallPath := "/pcloud/v1/tenants/testString/sshkeys"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudTenantsSshkeysGetallPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudTenantsSshkeysGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudTenantsSshkeysGetallOptions model
				pcloudTenantsSshkeysGetallOptionsModel := new(powervsv1.PcloudTenantsSshkeysGetallOptions)
				pcloudTenantsSshkeysGetallOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsSshkeysGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudTenantsSshkeysGetall(pcloudTenantsSshkeysGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudTenantsSshkeysGetall(pcloudTenantsSshkeysGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudTenantsSshkeysGetall(pcloudTenantsSshkeysGetallOptions *PcloudTenantsSshkeysGetallOptions)`, func() {
		pcloudTenantsSshkeysGetallPath := "/pcloud/v1/tenants/testString/sshkeys"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudTenantsSshkeysGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"sshKeys": [{"creationDate": "2019-01-01T12:00:00.000Z", "name": "Name", "sshKey": "SshKey"}]}`)
				}))
			})
			It(`Invoke PcloudTenantsSshkeysGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudTenantsSshkeysGetallOptions model
				pcloudTenantsSshkeysGetallOptionsModel := new(powervsv1.PcloudTenantsSshkeysGetallOptions)
				pcloudTenantsSshkeysGetallOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsSshkeysGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudTenantsSshkeysGetallWithContext(ctx, pcloudTenantsSshkeysGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudTenantsSshkeysGetall(pcloudTenantsSshkeysGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudTenantsSshkeysGetallWithContext(ctx, pcloudTenantsSshkeysGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudTenantsSshkeysGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"sshKeys": [{"creationDate": "2019-01-01T12:00:00.000Z", "name": "Name", "sshKey": "SshKey"}]}`)
				}))
			})
			It(`Invoke PcloudTenantsSshkeysGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudTenantsSshkeysGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudTenantsSshkeysGetallOptions model
				pcloudTenantsSshkeysGetallOptionsModel := new(powervsv1.PcloudTenantsSshkeysGetallOptions)
				pcloudTenantsSshkeysGetallOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsSshkeysGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudTenantsSshkeysGetall(pcloudTenantsSshkeysGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudTenantsSshkeysGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudTenantsSshkeysGetallOptions model
				pcloudTenantsSshkeysGetallOptionsModel := new(powervsv1.PcloudTenantsSshkeysGetallOptions)
				pcloudTenantsSshkeysGetallOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsSshkeysGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudTenantsSshkeysGetall(pcloudTenantsSshkeysGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudTenantsSshkeysGetallOptions model with no property values
				pcloudTenantsSshkeysGetallOptionsModelNew := new(powervsv1.PcloudTenantsSshkeysGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudTenantsSshkeysGetall(pcloudTenantsSshkeysGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudTenantsSshkeysGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudTenantsSshkeysGetallOptions model
				pcloudTenantsSshkeysGetallOptionsModel := new(powervsv1.PcloudTenantsSshkeysGetallOptions)
				pcloudTenantsSshkeysGetallOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsSshkeysGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudTenantsSshkeysGetall(pcloudTenantsSshkeysGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudTenantsSshkeysPost(pcloudTenantsSshkeysPostOptions *PcloudTenantsSshkeysPostOptions) - Operation response error`, func() {
		pcloudTenantsSshkeysPostPath := "/pcloud/v1/tenants/testString/sshkeys"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudTenantsSshkeysPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudTenantsSshkeysPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudTenantsSshkeysPostOptions model
				pcloudTenantsSshkeysPostOptionsModel := new(powervsv1.PcloudTenantsSshkeysPostOptions)
				pcloudTenantsSshkeysPostOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsSshkeysPostOptionsModel.Name = core.StringPtr("testString")
				pcloudTenantsSshkeysPostOptionsModel.SshKey = core.StringPtr("testString")
				pcloudTenantsSshkeysPostOptionsModel.CreationDate = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				pcloudTenantsSshkeysPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudTenantsSshkeysPost(pcloudTenantsSshkeysPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudTenantsSshkeysPost(pcloudTenantsSshkeysPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudTenantsSshkeysPost(pcloudTenantsSshkeysPostOptions *PcloudTenantsSshkeysPostOptions)`, func() {
		pcloudTenantsSshkeysPostPath := "/pcloud/v1/tenants/testString/sshkeys"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudTenantsSshkeysPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"creationDate": "2019-01-01T12:00:00.000Z", "name": "Name", "sshKey": "SshKey"}`)
				}))
			})
			It(`Invoke PcloudTenantsSshkeysPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudTenantsSshkeysPostOptions model
				pcloudTenantsSshkeysPostOptionsModel := new(powervsv1.PcloudTenantsSshkeysPostOptions)
				pcloudTenantsSshkeysPostOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsSshkeysPostOptionsModel.Name = core.StringPtr("testString")
				pcloudTenantsSshkeysPostOptionsModel.SshKey = core.StringPtr("testString")
				pcloudTenantsSshkeysPostOptionsModel.CreationDate = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				pcloudTenantsSshkeysPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudTenantsSshkeysPostWithContext(ctx, pcloudTenantsSshkeysPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudTenantsSshkeysPost(pcloudTenantsSshkeysPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudTenantsSshkeysPostWithContext(ctx, pcloudTenantsSshkeysPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudTenantsSshkeysPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"creationDate": "2019-01-01T12:00:00.000Z", "name": "Name", "sshKey": "SshKey"}`)
				}))
			})
			It(`Invoke PcloudTenantsSshkeysPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudTenantsSshkeysPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudTenantsSshkeysPostOptions model
				pcloudTenantsSshkeysPostOptionsModel := new(powervsv1.PcloudTenantsSshkeysPostOptions)
				pcloudTenantsSshkeysPostOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsSshkeysPostOptionsModel.Name = core.StringPtr("testString")
				pcloudTenantsSshkeysPostOptionsModel.SshKey = core.StringPtr("testString")
				pcloudTenantsSshkeysPostOptionsModel.CreationDate = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				pcloudTenantsSshkeysPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudTenantsSshkeysPost(pcloudTenantsSshkeysPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudTenantsSshkeysPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudTenantsSshkeysPostOptions model
				pcloudTenantsSshkeysPostOptionsModel := new(powervsv1.PcloudTenantsSshkeysPostOptions)
				pcloudTenantsSshkeysPostOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsSshkeysPostOptionsModel.Name = core.StringPtr("testString")
				pcloudTenantsSshkeysPostOptionsModel.SshKey = core.StringPtr("testString")
				pcloudTenantsSshkeysPostOptionsModel.CreationDate = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				pcloudTenantsSshkeysPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudTenantsSshkeysPost(pcloudTenantsSshkeysPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudTenantsSshkeysPostOptions model with no property values
				pcloudTenantsSshkeysPostOptionsModelNew := new(powervsv1.PcloudTenantsSshkeysPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudTenantsSshkeysPost(pcloudTenantsSshkeysPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudTenantsSshkeysPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudTenantsSshkeysPostOptions model
				pcloudTenantsSshkeysPostOptionsModel := new(powervsv1.PcloudTenantsSshkeysPostOptions)
				pcloudTenantsSshkeysPostOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsSshkeysPostOptionsModel.Name = core.StringPtr("testString")
				pcloudTenantsSshkeysPostOptionsModel.SshKey = core.StringPtr("testString")
				pcloudTenantsSshkeysPostOptionsModel.CreationDate = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				pcloudTenantsSshkeysPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudTenantsSshkeysPost(pcloudTenantsSshkeysPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudTenantsSshkeysDelete(pcloudTenantsSshkeysDeleteOptions *PcloudTenantsSshkeysDeleteOptions) - Operation response error`, func() {
		pcloudTenantsSshkeysDeletePath := "/pcloud/v1/tenants/testString/sshkeys/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudTenantsSshkeysDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudTenantsSshkeysDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudTenantsSshkeysDeleteOptions model
				pcloudTenantsSshkeysDeleteOptionsModel := new(powervsv1.PcloudTenantsSshkeysDeleteOptions)
				pcloudTenantsSshkeysDeleteOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsSshkeysDeleteOptionsModel.SshkeyName = core.StringPtr("testString")
				pcloudTenantsSshkeysDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudTenantsSshkeysDelete(pcloudTenantsSshkeysDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudTenantsSshkeysDelete(pcloudTenantsSshkeysDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudTenantsSshkeysDelete(pcloudTenantsSshkeysDeleteOptions *PcloudTenantsSshkeysDeleteOptions)`, func() {
		pcloudTenantsSshkeysDeletePath := "/pcloud/v1/tenants/testString/sshkeys/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudTenantsSshkeysDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudTenantsSshkeysDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudTenantsSshkeysDeleteOptions model
				pcloudTenantsSshkeysDeleteOptionsModel := new(powervsv1.PcloudTenantsSshkeysDeleteOptions)
				pcloudTenantsSshkeysDeleteOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsSshkeysDeleteOptionsModel.SshkeyName = core.StringPtr("testString")
				pcloudTenantsSshkeysDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudTenantsSshkeysDeleteWithContext(ctx, pcloudTenantsSshkeysDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudTenantsSshkeysDelete(pcloudTenantsSshkeysDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudTenantsSshkeysDeleteWithContext(ctx, pcloudTenantsSshkeysDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudTenantsSshkeysDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudTenantsSshkeysDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudTenantsSshkeysDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudTenantsSshkeysDeleteOptions model
				pcloudTenantsSshkeysDeleteOptionsModel := new(powervsv1.PcloudTenantsSshkeysDeleteOptions)
				pcloudTenantsSshkeysDeleteOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsSshkeysDeleteOptionsModel.SshkeyName = core.StringPtr("testString")
				pcloudTenantsSshkeysDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudTenantsSshkeysDelete(pcloudTenantsSshkeysDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudTenantsSshkeysDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudTenantsSshkeysDeleteOptions model
				pcloudTenantsSshkeysDeleteOptionsModel := new(powervsv1.PcloudTenantsSshkeysDeleteOptions)
				pcloudTenantsSshkeysDeleteOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsSshkeysDeleteOptionsModel.SshkeyName = core.StringPtr("testString")
				pcloudTenantsSshkeysDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudTenantsSshkeysDelete(pcloudTenantsSshkeysDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudTenantsSshkeysDeleteOptions model with no property values
				pcloudTenantsSshkeysDeleteOptionsModelNew := new(powervsv1.PcloudTenantsSshkeysDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudTenantsSshkeysDelete(pcloudTenantsSshkeysDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudTenantsSshkeysDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudTenantsSshkeysDeleteOptions model
				pcloudTenantsSshkeysDeleteOptionsModel := new(powervsv1.PcloudTenantsSshkeysDeleteOptions)
				pcloudTenantsSshkeysDeleteOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsSshkeysDeleteOptionsModel.SshkeyName = core.StringPtr("testString")
				pcloudTenantsSshkeysDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudTenantsSshkeysDelete(pcloudTenantsSshkeysDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudTenantsSshkeysGet(pcloudTenantsSshkeysGetOptions *PcloudTenantsSshkeysGetOptions) - Operation response error`, func() {
		pcloudTenantsSshkeysGetPath := "/pcloud/v1/tenants/testString/sshkeys/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudTenantsSshkeysGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudTenantsSshkeysGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudTenantsSshkeysGetOptions model
				pcloudTenantsSshkeysGetOptionsModel := new(powervsv1.PcloudTenantsSshkeysGetOptions)
				pcloudTenantsSshkeysGetOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsSshkeysGetOptionsModel.SshkeyName = core.StringPtr("testString")
				pcloudTenantsSshkeysGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudTenantsSshkeysGet(pcloudTenantsSshkeysGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudTenantsSshkeysGet(pcloudTenantsSshkeysGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudTenantsSshkeysGet(pcloudTenantsSshkeysGetOptions *PcloudTenantsSshkeysGetOptions)`, func() {
		pcloudTenantsSshkeysGetPath := "/pcloud/v1/tenants/testString/sshkeys/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudTenantsSshkeysGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"creationDate": "2019-01-01T12:00:00.000Z", "name": "Name", "sshKey": "SshKey"}`)
				}))
			})
			It(`Invoke PcloudTenantsSshkeysGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudTenantsSshkeysGetOptions model
				pcloudTenantsSshkeysGetOptionsModel := new(powervsv1.PcloudTenantsSshkeysGetOptions)
				pcloudTenantsSshkeysGetOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsSshkeysGetOptionsModel.SshkeyName = core.StringPtr("testString")
				pcloudTenantsSshkeysGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudTenantsSshkeysGetWithContext(ctx, pcloudTenantsSshkeysGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudTenantsSshkeysGet(pcloudTenantsSshkeysGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudTenantsSshkeysGetWithContext(ctx, pcloudTenantsSshkeysGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudTenantsSshkeysGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"creationDate": "2019-01-01T12:00:00.000Z", "name": "Name", "sshKey": "SshKey"}`)
				}))
			})
			It(`Invoke PcloudTenantsSshkeysGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudTenantsSshkeysGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudTenantsSshkeysGetOptions model
				pcloudTenantsSshkeysGetOptionsModel := new(powervsv1.PcloudTenantsSshkeysGetOptions)
				pcloudTenantsSshkeysGetOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsSshkeysGetOptionsModel.SshkeyName = core.StringPtr("testString")
				pcloudTenantsSshkeysGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudTenantsSshkeysGet(pcloudTenantsSshkeysGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudTenantsSshkeysGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudTenantsSshkeysGetOptions model
				pcloudTenantsSshkeysGetOptionsModel := new(powervsv1.PcloudTenantsSshkeysGetOptions)
				pcloudTenantsSshkeysGetOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsSshkeysGetOptionsModel.SshkeyName = core.StringPtr("testString")
				pcloudTenantsSshkeysGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudTenantsSshkeysGet(pcloudTenantsSshkeysGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudTenantsSshkeysGetOptions model with no property values
				pcloudTenantsSshkeysGetOptionsModelNew := new(powervsv1.PcloudTenantsSshkeysGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudTenantsSshkeysGet(pcloudTenantsSshkeysGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudTenantsSshkeysGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudTenantsSshkeysGetOptions model
				pcloudTenantsSshkeysGetOptionsModel := new(powervsv1.PcloudTenantsSshkeysGetOptions)
				pcloudTenantsSshkeysGetOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsSshkeysGetOptionsModel.SshkeyName = core.StringPtr("testString")
				pcloudTenantsSshkeysGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudTenantsSshkeysGet(pcloudTenantsSshkeysGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudTenantsSshkeysPut(pcloudTenantsSshkeysPutOptions *PcloudTenantsSshkeysPutOptions) - Operation response error`, func() {
		pcloudTenantsSshkeysPutPath := "/pcloud/v1/tenants/testString/sshkeys/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudTenantsSshkeysPutPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudTenantsSshkeysPut with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudTenantsSshkeysPutOptions model
				pcloudTenantsSshkeysPutOptionsModel := new(powervsv1.PcloudTenantsSshkeysPutOptions)
				pcloudTenantsSshkeysPutOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsSshkeysPutOptionsModel.SshkeyName = core.StringPtr("testString")
				pcloudTenantsSshkeysPutOptionsModel.Name = core.StringPtr("testString")
				pcloudTenantsSshkeysPutOptionsModel.SshKey = core.StringPtr("testString")
				pcloudTenantsSshkeysPutOptionsModel.CreationDate = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				pcloudTenantsSshkeysPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudTenantsSshkeysPut(pcloudTenantsSshkeysPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudTenantsSshkeysPut(pcloudTenantsSshkeysPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudTenantsSshkeysPut(pcloudTenantsSshkeysPutOptions *PcloudTenantsSshkeysPutOptions)`, func() {
		pcloudTenantsSshkeysPutPath := "/pcloud/v1/tenants/testString/sshkeys/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudTenantsSshkeysPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"creationDate": "2019-01-01T12:00:00.000Z", "name": "Name", "sshKey": "SshKey"}`)
				}))
			})
			It(`Invoke PcloudTenantsSshkeysPut successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudTenantsSshkeysPutOptions model
				pcloudTenantsSshkeysPutOptionsModel := new(powervsv1.PcloudTenantsSshkeysPutOptions)
				pcloudTenantsSshkeysPutOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsSshkeysPutOptionsModel.SshkeyName = core.StringPtr("testString")
				pcloudTenantsSshkeysPutOptionsModel.Name = core.StringPtr("testString")
				pcloudTenantsSshkeysPutOptionsModel.SshKey = core.StringPtr("testString")
				pcloudTenantsSshkeysPutOptionsModel.CreationDate = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				pcloudTenantsSshkeysPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudTenantsSshkeysPutWithContext(ctx, pcloudTenantsSshkeysPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudTenantsSshkeysPut(pcloudTenantsSshkeysPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudTenantsSshkeysPutWithContext(ctx, pcloudTenantsSshkeysPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudTenantsSshkeysPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"creationDate": "2019-01-01T12:00:00.000Z", "name": "Name", "sshKey": "SshKey"}`)
				}))
			})
			It(`Invoke PcloudTenantsSshkeysPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudTenantsSshkeysPut(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudTenantsSshkeysPutOptions model
				pcloudTenantsSshkeysPutOptionsModel := new(powervsv1.PcloudTenantsSshkeysPutOptions)
				pcloudTenantsSshkeysPutOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsSshkeysPutOptionsModel.SshkeyName = core.StringPtr("testString")
				pcloudTenantsSshkeysPutOptionsModel.Name = core.StringPtr("testString")
				pcloudTenantsSshkeysPutOptionsModel.SshKey = core.StringPtr("testString")
				pcloudTenantsSshkeysPutOptionsModel.CreationDate = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				pcloudTenantsSshkeysPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudTenantsSshkeysPut(pcloudTenantsSshkeysPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudTenantsSshkeysPut with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudTenantsSshkeysPutOptions model
				pcloudTenantsSshkeysPutOptionsModel := new(powervsv1.PcloudTenantsSshkeysPutOptions)
				pcloudTenantsSshkeysPutOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsSshkeysPutOptionsModel.SshkeyName = core.StringPtr("testString")
				pcloudTenantsSshkeysPutOptionsModel.Name = core.StringPtr("testString")
				pcloudTenantsSshkeysPutOptionsModel.SshKey = core.StringPtr("testString")
				pcloudTenantsSshkeysPutOptionsModel.CreationDate = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				pcloudTenantsSshkeysPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudTenantsSshkeysPut(pcloudTenantsSshkeysPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudTenantsSshkeysPutOptions model with no property values
				pcloudTenantsSshkeysPutOptionsModelNew := new(powervsv1.PcloudTenantsSshkeysPutOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudTenantsSshkeysPut(pcloudTenantsSshkeysPutOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudTenantsSshkeysPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudTenantsSshkeysPutOptions model
				pcloudTenantsSshkeysPutOptionsModel := new(powervsv1.PcloudTenantsSshkeysPutOptions)
				pcloudTenantsSshkeysPutOptionsModel.TenantID = core.StringPtr("testString")
				pcloudTenantsSshkeysPutOptionsModel.SshkeyName = core.StringPtr("testString")
				pcloudTenantsSshkeysPutOptionsModel.Name = core.StringPtr("testString")
				pcloudTenantsSshkeysPutOptionsModel.SshKey = core.StringPtr("testString")
				pcloudTenantsSshkeysPutOptionsModel.CreationDate = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				pcloudTenantsSshkeysPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudTenantsSshkeysPut(pcloudTenantsSshkeysPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVpnconnectionsGetall(pcloudVpnconnectionsGetallOptions *PcloudVpnconnectionsGetallOptions) - Operation response error`, func() {
		pcloudVpnconnectionsGetallPath := "/pcloud/v1/cloud-instances/testString/vpn/vpn-connections"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsGetallPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsGetallOptions model
				pcloudVpnconnectionsGetallOptionsModel := new(powervsv1.PcloudVpnconnectionsGetallOptions)
				pcloudVpnconnectionsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudVpnconnectionsGetall(pcloudVpnconnectionsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudVpnconnectionsGetall(pcloudVpnconnectionsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVpnconnectionsGetall(pcloudVpnconnectionsGetallOptions *PcloudVpnconnectionsGetallOptions)`, func() {
		pcloudVpnconnectionsGetallPath := "/pcloud/v1/cloud-instances/testString/vpn/vpn-connections"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"vpnConnections": [{"deadPeerDetection": {"action": "restart", "interval": 10, "threshold": 5}, "id": "123e4567-e89b-12d3-a456-42661475", "ikePolicy": {"id": "6edc8988-ab18-4b5c-b123-0d73e8254463", "name": "IKE Policy 1"}, "ipSecPolicy": {"id": "7abc1234-ab18-4b5c-b123-0d73e8254463", "name": "IPSec Policy 1"}, "localGatewayAddress": "192.168.1.1", "mode": "policy", "name": "VPN-Connection-1", "networkIDs": ["NetworkIDs"], "peerGatewayAddress": "192.168.1.1", "peerSubnets": ["PeerSubnets"], "status": "active", "vpnGatewayAddress": "192.168.204.1"}]}`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudVpnconnectionsGetallOptions model
				pcloudVpnconnectionsGetallOptionsModel := new(powervsv1.PcloudVpnconnectionsGetallOptions)
				pcloudVpnconnectionsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudVpnconnectionsGetallWithContext(ctx, pcloudVpnconnectionsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudVpnconnectionsGetall(pcloudVpnconnectionsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudVpnconnectionsGetallWithContext(ctx, pcloudVpnconnectionsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"vpnConnections": [{"deadPeerDetection": {"action": "restart", "interval": 10, "threshold": 5}, "id": "123e4567-e89b-12d3-a456-42661475", "ikePolicy": {"id": "6edc8988-ab18-4b5c-b123-0d73e8254463", "name": "IKE Policy 1"}, "ipSecPolicy": {"id": "7abc1234-ab18-4b5c-b123-0d73e8254463", "name": "IPSec Policy 1"}, "localGatewayAddress": "192.168.1.1", "mode": "policy", "name": "VPN-Connection-1", "networkIDs": ["NetworkIDs"], "peerGatewayAddress": "192.168.1.1", "peerSubnets": ["PeerSubnets"], "status": "active", "vpnGatewayAddress": "192.168.204.1"}]}`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudVpnconnectionsGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudVpnconnectionsGetallOptions model
				pcloudVpnconnectionsGetallOptionsModel := new(powervsv1.PcloudVpnconnectionsGetallOptions)
				pcloudVpnconnectionsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudVpnconnectionsGetall(pcloudVpnconnectionsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudVpnconnectionsGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsGetallOptions model
				pcloudVpnconnectionsGetallOptionsModel := new(powervsv1.PcloudVpnconnectionsGetallOptions)
				pcloudVpnconnectionsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudVpnconnectionsGetall(pcloudVpnconnectionsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudVpnconnectionsGetallOptions model with no property values
				pcloudVpnconnectionsGetallOptionsModelNew := new(powervsv1.PcloudVpnconnectionsGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudVpnconnectionsGetall(pcloudVpnconnectionsGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudVpnconnectionsGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsGetallOptions model
				pcloudVpnconnectionsGetallOptionsModel := new(powervsv1.PcloudVpnconnectionsGetallOptions)
				pcloudVpnconnectionsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudVpnconnectionsGetall(pcloudVpnconnectionsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVpnconnectionsPost(pcloudVpnconnectionsPostOptions *PcloudVpnconnectionsPostOptions) - Operation response error`, func() {
		pcloudVpnconnectionsPostPath := "/pcloud/v1/cloud-instances/testString/vpn/vpn-connections"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsPostOptions model
				pcloudVpnconnectionsPostOptionsModel := new(powervsv1.PcloudVpnconnectionsPostOptions)
				pcloudVpnconnectionsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsPostOptionsModel.IkePolicy = core.StringPtr("c36723ec-8593-11eb-8dcd-0242ac133853")
				pcloudVpnconnectionsPostOptionsModel.IPSecPolicy = core.StringPtr("c12345d-8593-11eb-8dcd-0242ac134573")
				pcloudVpnconnectionsPostOptionsModel.Mode = core.StringPtr("policy")
				pcloudVpnconnectionsPostOptionsModel.Name = core.StringPtr("VPN-Connection-1")
				pcloudVpnconnectionsPostOptionsModel.Networks = []string{"7f950c76-8582-11veb-8dcd-0242ac153", "7f950c76-8582-11veb-8dcd-0242ac144", "7f950c76-8582-11veb-8dcd-0242ac199"}
				pcloudVpnconnectionsPostOptionsModel.PeerGatewayAddress = core.StringPtr("192.168.1.1")
				pcloudVpnconnectionsPostOptionsModel.PeerSubnets = []string{"128.170.1.0/20", "128.169.1.0/24", "128.168.1.0/27", "128.170.1.0/32"}
				pcloudVpnconnectionsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudVpnconnectionsPost(pcloudVpnconnectionsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudVpnconnectionsPost(pcloudVpnconnectionsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVpnconnectionsPost(pcloudVpnconnectionsPostOptions *PcloudVpnconnectionsPostOptions)`, func() {
		pcloudVpnconnectionsPostPath := "/pcloud/v1/cloud-instances/testString/vpn/vpn-connections"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"deadPeerDetection": {"action": "restart", "interval": 10, "threshold": 5}, "id": "123e4567-e89b-12d3-a456-42661475", "ikePolicy": {"id": "6edc8988-ab18-4b5c-b123-0d73e8254463", "name": "IKE Policy 1"}, "ipSecPolicy": {"id": "7abc1234-ab18-4b5c-b123-0d73e8254463", "name": "IPSec Policy 1"}, "localGatewayAddress": "192.168.1.1", "mode": "policy", "name": "VPN-Connection-1", "networkIDs": ["NetworkIDs"], "peerGatewayAddress": "192.168.1.1", "peerSubnets": ["PeerSubnets"], "status": "active", "vpnGatewayAddress": "192.168.204.1", "jobRef": {"href": "Href", "id": "ID"}}`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudVpnconnectionsPostOptions model
				pcloudVpnconnectionsPostOptionsModel := new(powervsv1.PcloudVpnconnectionsPostOptions)
				pcloudVpnconnectionsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsPostOptionsModel.IkePolicy = core.StringPtr("c36723ec-8593-11eb-8dcd-0242ac133853")
				pcloudVpnconnectionsPostOptionsModel.IPSecPolicy = core.StringPtr("c12345d-8593-11eb-8dcd-0242ac134573")
				pcloudVpnconnectionsPostOptionsModel.Mode = core.StringPtr("policy")
				pcloudVpnconnectionsPostOptionsModel.Name = core.StringPtr("VPN-Connection-1")
				pcloudVpnconnectionsPostOptionsModel.Networks = []string{"7f950c76-8582-11veb-8dcd-0242ac153", "7f950c76-8582-11veb-8dcd-0242ac144", "7f950c76-8582-11veb-8dcd-0242ac199"}
				pcloudVpnconnectionsPostOptionsModel.PeerGatewayAddress = core.StringPtr("192.168.1.1")
				pcloudVpnconnectionsPostOptionsModel.PeerSubnets = []string{"128.170.1.0/20", "128.169.1.0/24", "128.168.1.0/27", "128.170.1.0/32"}
				pcloudVpnconnectionsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudVpnconnectionsPostWithContext(ctx, pcloudVpnconnectionsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudVpnconnectionsPost(pcloudVpnconnectionsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudVpnconnectionsPostWithContext(ctx, pcloudVpnconnectionsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"deadPeerDetection": {"action": "restart", "interval": 10, "threshold": 5}, "id": "123e4567-e89b-12d3-a456-42661475", "ikePolicy": {"id": "6edc8988-ab18-4b5c-b123-0d73e8254463", "name": "IKE Policy 1"}, "ipSecPolicy": {"id": "7abc1234-ab18-4b5c-b123-0d73e8254463", "name": "IPSec Policy 1"}, "localGatewayAddress": "192.168.1.1", "mode": "policy", "name": "VPN-Connection-1", "networkIDs": ["NetworkIDs"], "peerGatewayAddress": "192.168.1.1", "peerSubnets": ["PeerSubnets"], "status": "active", "vpnGatewayAddress": "192.168.204.1", "jobRef": {"href": "Href", "id": "ID"}}`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudVpnconnectionsPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudVpnconnectionsPostOptions model
				pcloudVpnconnectionsPostOptionsModel := new(powervsv1.PcloudVpnconnectionsPostOptions)
				pcloudVpnconnectionsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsPostOptionsModel.IkePolicy = core.StringPtr("c36723ec-8593-11eb-8dcd-0242ac133853")
				pcloudVpnconnectionsPostOptionsModel.IPSecPolicy = core.StringPtr("c12345d-8593-11eb-8dcd-0242ac134573")
				pcloudVpnconnectionsPostOptionsModel.Mode = core.StringPtr("policy")
				pcloudVpnconnectionsPostOptionsModel.Name = core.StringPtr("VPN-Connection-1")
				pcloudVpnconnectionsPostOptionsModel.Networks = []string{"7f950c76-8582-11veb-8dcd-0242ac153", "7f950c76-8582-11veb-8dcd-0242ac144", "7f950c76-8582-11veb-8dcd-0242ac199"}
				pcloudVpnconnectionsPostOptionsModel.PeerGatewayAddress = core.StringPtr("192.168.1.1")
				pcloudVpnconnectionsPostOptionsModel.PeerSubnets = []string{"128.170.1.0/20", "128.169.1.0/24", "128.168.1.0/27", "128.170.1.0/32"}
				pcloudVpnconnectionsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudVpnconnectionsPost(pcloudVpnconnectionsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudVpnconnectionsPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsPostOptions model
				pcloudVpnconnectionsPostOptionsModel := new(powervsv1.PcloudVpnconnectionsPostOptions)
				pcloudVpnconnectionsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsPostOptionsModel.IkePolicy = core.StringPtr("c36723ec-8593-11eb-8dcd-0242ac133853")
				pcloudVpnconnectionsPostOptionsModel.IPSecPolicy = core.StringPtr("c12345d-8593-11eb-8dcd-0242ac134573")
				pcloudVpnconnectionsPostOptionsModel.Mode = core.StringPtr("policy")
				pcloudVpnconnectionsPostOptionsModel.Name = core.StringPtr("VPN-Connection-1")
				pcloudVpnconnectionsPostOptionsModel.Networks = []string{"7f950c76-8582-11veb-8dcd-0242ac153", "7f950c76-8582-11veb-8dcd-0242ac144", "7f950c76-8582-11veb-8dcd-0242ac199"}
				pcloudVpnconnectionsPostOptionsModel.PeerGatewayAddress = core.StringPtr("192.168.1.1")
				pcloudVpnconnectionsPostOptionsModel.PeerSubnets = []string{"128.170.1.0/20", "128.169.1.0/24", "128.168.1.0/27", "128.170.1.0/32"}
				pcloudVpnconnectionsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudVpnconnectionsPost(pcloudVpnconnectionsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudVpnconnectionsPostOptions model with no property values
				pcloudVpnconnectionsPostOptionsModelNew := new(powervsv1.PcloudVpnconnectionsPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudVpnconnectionsPost(pcloudVpnconnectionsPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudVpnconnectionsPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsPostOptions model
				pcloudVpnconnectionsPostOptionsModel := new(powervsv1.PcloudVpnconnectionsPostOptions)
				pcloudVpnconnectionsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsPostOptionsModel.IkePolicy = core.StringPtr("c36723ec-8593-11eb-8dcd-0242ac133853")
				pcloudVpnconnectionsPostOptionsModel.IPSecPolicy = core.StringPtr("c12345d-8593-11eb-8dcd-0242ac134573")
				pcloudVpnconnectionsPostOptionsModel.Mode = core.StringPtr("policy")
				pcloudVpnconnectionsPostOptionsModel.Name = core.StringPtr("VPN-Connection-1")
				pcloudVpnconnectionsPostOptionsModel.Networks = []string{"7f950c76-8582-11veb-8dcd-0242ac153", "7f950c76-8582-11veb-8dcd-0242ac144", "7f950c76-8582-11veb-8dcd-0242ac199"}
				pcloudVpnconnectionsPostOptionsModel.PeerGatewayAddress = core.StringPtr("192.168.1.1")
				pcloudVpnconnectionsPostOptionsModel.PeerSubnets = []string{"128.170.1.0/20", "128.169.1.0/24", "128.168.1.0/27", "128.170.1.0/32"}
				pcloudVpnconnectionsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudVpnconnectionsPost(pcloudVpnconnectionsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVpnconnectionsDelete(pcloudVpnconnectionsDeleteOptions *PcloudVpnconnectionsDeleteOptions) - Operation response error`, func() {
		pcloudVpnconnectionsDeletePath := "/pcloud/v1/cloud-instances/testString/vpn/vpn-connections/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsDeleteOptions model
				pcloudVpnconnectionsDeleteOptionsModel := new(powervsv1.PcloudVpnconnectionsDeleteOptions)
				pcloudVpnconnectionsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsDeleteOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudVpnconnectionsDelete(pcloudVpnconnectionsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudVpnconnectionsDelete(pcloudVpnconnectionsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVpnconnectionsDelete(pcloudVpnconnectionsDeleteOptions *PcloudVpnconnectionsDeleteOptions)`, func() {
		pcloudVpnconnectionsDeletePath := "/pcloud/v1/cloud-instances/testString/vpn/vpn-connections/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"href": "Href", "id": "ID"}`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudVpnconnectionsDeleteOptions model
				pcloudVpnconnectionsDeleteOptionsModel := new(powervsv1.PcloudVpnconnectionsDeleteOptions)
				pcloudVpnconnectionsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsDeleteOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudVpnconnectionsDeleteWithContext(ctx, pcloudVpnconnectionsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudVpnconnectionsDelete(pcloudVpnconnectionsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudVpnconnectionsDeleteWithContext(ctx, pcloudVpnconnectionsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"href": "Href", "id": "ID"}`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudVpnconnectionsDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudVpnconnectionsDeleteOptions model
				pcloudVpnconnectionsDeleteOptionsModel := new(powervsv1.PcloudVpnconnectionsDeleteOptions)
				pcloudVpnconnectionsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsDeleteOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudVpnconnectionsDelete(pcloudVpnconnectionsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudVpnconnectionsDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsDeleteOptions model
				pcloudVpnconnectionsDeleteOptionsModel := new(powervsv1.PcloudVpnconnectionsDeleteOptions)
				pcloudVpnconnectionsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsDeleteOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudVpnconnectionsDelete(pcloudVpnconnectionsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudVpnconnectionsDeleteOptions model with no property values
				pcloudVpnconnectionsDeleteOptionsModelNew := new(powervsv1.PcloudVpnconnectionsDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudVpnconnectionsDelete(pcloudVpnconnectionsDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudVpnconnectionsDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsDeleteOptions model
				pcloudVpnconnectionsDeleteOptionsModel := new(powervsv1.PcloudVpnconnectionsDeleteOptions)
				pcloudVpnconnectionsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsDeleteOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudVpnconnectionsDelete(pcloudVpnconnectionsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVpnconnectionsGet(pcloudVpnconnectionsGetOptions *PcloudVpnconnectionsGetOptions) - Operation response error`, func() {
		pcloudVpnconnectionsGetPath := "/pcloud/v1/cloud-instances/testString/vpn/vpn-connections/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsGetOptions model
				pcloudVpnconnectionsGetOptionsModel := new(powervsv1.PcloudVpnconnectionsGetOptions)
				pcloudVpnconnectionsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsGetOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudVpnconnectionsGet(pcloudVpnconnectionsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudVpnconnectionsGet(pcloudVpnconnectionsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVpnconnectionsGet(pcloudVpnconnectionsGetOptions *PcloudVpnconnectionsGetOptions)`, func() {
		pcloudVpnconnectionsGetPath := "/pcloud/v1/cloud-instances/testString/vpn/vpn-connections/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"deadPeerDetection": {"action": "restart", "interval": 10, "threshold": 5}, "id": "123e4567-e89b-12d3-a456-42661475", "ikePolicy": {"id": "6edc8988-ab18-4b5c-b123-0d73e8254463", "name": "IKE Policy 1"}, "ipSecPolicy": {"id": "7abc1234-ab18-4b5c-b123-0d73e8254463", "name": "IPSec Policy 1"}, "localGatewayAddress": "192.168.1.1", "mode": "policy", "name": "VPN-Connection-1", "networkIDs": ["NetworkIDs"], "peerGatewayAddress": "192.168.1.1", "peerSubnets": ["PeerSubnets"], "status": "active", "vpnGatewayAddress": "192.168.204.1"}`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudVpnconnectionsGetOptions model
				pcloudVpnconnectionsGetOptionsModel := new(powervsv1.PcloudVpnconnectionsGetOptions)
				pcloudVpnconnectionsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsGetOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudVpnconnectionsGetWithContext(ctx, pcloudVpnconnectionsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudVpnconnectionsGet(pcloudVpnconnectionsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudVpnconnectionsGetWithContext(ctx, pcloudVpnconnectionsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"deadPeerDetection": {"action": "restart", "interval": 10, "threshold": 5}, "id": "123e4567-e89b-12d3-a456-42661475", "ikePolicy": {"id": "6edc8988-ab18-4b5c-b123-0d73e8254463", "name": "IKE Policy 1"}, "ipSecPolicy": {"id": "7abc1234-ab18-4b5c-b123-0d73e8254463", "name": "IPSec Policy 1"}, "localGatewayAddress": "192.168.1.1", "mode": "policy", "name": "VPN-Connection-1", "networkIDs": ["NetworkIDs"], "peerGatewayAddress": "192.168.1.1", "peerSubnets": ["PeerSubnets"], "status": "active", "vpnGatewayAddress": "192.168.204.1"}`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudVpnconnectionsGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudVpnconnectionsGetOptions model
				pcloudVpnconnectionsGetOptionsModel := new(powervsv1.PcloudVpnconnectionsGetOptions)
				pcloudVpnconnectionsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsGetOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudVpnconnectionsGet(pcloudVpnconnectionsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudVpnconnectionsGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsGetOptions model
				pcloudVpnconnectionsGetOptionsModel := new(powervsv1.PcloudVpnconnectionsGetOptions)
				pcloudVpnconnectionsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsGetOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudVpnconnectionsGet(pcloudVpnconnectionsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudVpnconnectionsGetOptions model with no property values
				pcloudVpnconnectionsGetOptionsModelNew := new(powervsv1.PcloudVpnconnectionsGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudVpnconnectionsGet(pcloudVpnconnectionsGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudVpnconnectionsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsGetOptions model
				pcloudVpnconnectionsGetOptionsModel := new(powervsv1.PcloudVpnconnectionsGetOptions)
				pcloudVpnconnectionsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsGetOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudVpnconnectionsGet(pcloudVpnconnectionsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVpnconnectionsPut(pcloudVpnconnectionsPutOptions *PcloudVpnconnectionsPutOptions) - Operation response error`, func() {
		pcloudVpnconnectionsPutPath := "/pcloud/v1/cloud-instances/testString/vpn/vpn-connections/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsPutPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsPut with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the VPNConnectionUpdate model
				vpnConnectionUpdateModel := new(powervsv1.VPNConnectionUpdate)
				vpnConnectionUpdateModel.IkePolicy = core.StringPtr("c36723ec-8593-11eb-8dcd-0242ac133853")
				vpnConnectionUpdateModel.IPSecPolicy = core.StringPtr("c12345d-8593-11eb-8dcd-0242ac134573")
				vpnConnectionUpdateModel.Name = core.StringPtr("VPN-Connection-1")
				vpnConnectionUpdateModel.PeerGatewayAddress = core.StringPtr("192.168.1.1")
				vpnConnectionUpdateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the PcloudVpnconnectionsPutOptions model
				pcloudVpnconnectionsPutOptionsModel := new(powervsv1.PcloudVpnconnectionsPutOptions)
				pcloudVpnconnectionsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsPutOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsPutOptionsModel.Body = vpnConnectionUpdateModel
				pcloudVpnconnectionsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudVpnconnectionsPut(pcloudVpnconnectionsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudVpnconnectionsPut(pcloudVpnconnectionsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVpnconnectionsPut(pcloudVpnconnectionsPutOptions *PcloudVpnconnectionsPutOptions)`, func() {
		pcloudVpnconnectionsPutPath := "/pcloud/v1/cloud-instances/testString/vpn/vpn-connections/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"deadPeerDetection": {"action": "restart", "interval": 10, "threshold": 5}, "id": "123e4567-e89b-12d3-a456-42661475", "ikePolicy": {"id": "6edc8988-ab18-4b5c-b123-0d73e8254463", "name": "IKE Policy 1"}, "ipSecPolicy": {"id": "7abc1234-ab18-4b5c-b123-0d73e8254463", "name": "IPSec Policy 1"}, "localGatewayAddress": "192.168.1.1", "mode": "policy", "name": "VPN-Connection-1", "networkIDs": ["NetworkIDs"], "peerGatewayAddress": "192.168.1.1", "peerSubnets": ["PeerSubnets"], "status": "active", "vpnGatewayAddress": "192.168.204.1"}`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsPut successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the VPNConnectionUpdate model
				vpnConnectionUpdateModel := new(powervsv1.VPNConnectionUpdate)
				vpnConnectionUpdateModel.IkePolicy = core.StringPtr("c36723ec-8593-11eb-8dcd-0242ac133853")
				vpnConnectionUpdateModel.IPSecPolicy = core.StringPtr("c12345d-8593-11eb-8dcd-0242ac134573")
				vpnConnectionUpdateModel.Name = core.StringPtr("VPN-Connection-1")
				vpnConnectionUpdateModel.PeerGatewayAddress = core.StringPtr("192.168.1.1")
				vpnConnectionUpdateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the PcloudVpnconnectionsPutOptions model
				pcloudVpnconnectionsPutOptionsModel := new(powervsv1.PcloudVpnconnectionsPutOptions)
				pcloudVpnconnectionsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsPutOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsPutOptionsModel.Body = vpnConnectionUpdateModel
				pcloudVpnconnectionsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudVpnconnectionsPutWithContext(ctx, pcloudVpnconnectionsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudVpnconnectionsPut(pcloudVpnconnectionsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudVpnconnectionsPutWithContext(ctx, pcloudVpnconnectionsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"deadPeerDetection": {"action": "restart", "interval": 10, "threshold": 5}, "id": "123e4567-e89b-12d3-a456-42661475", "ikePolicy": {"id": "6edc8988-ab18-4b5c-b123-0d73e8254463", "name": "IKE Policy 1"}, "ipSecPolicy": {"id": "7abc1234-ab18-4b5c-b123-0d73e8254463", "name": "IPSec Policy 1"}, "localGatewayAddress": "192.168.1.1", "mode": "policy", "name": "VPN-Connection-1", "networkIDs": ["NetworkIDs"], "peerGatewayAddress": "192.168.1.1", "peerSubnets": ["PeerSubnets"], "status": "active", "vpnGatewayAddress": "192.168.204.1"}`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudVpnconnectionsPut(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VPNConnectionUpdate model
				vpnConnectionUpdateModel := new(powervsv1.VPNConnectionUpdate)
				vpnConnectionUpdateModel.IkePolicy = core.StringPtr("c36723ec-8593-11eb-8dcd-0242ac133853")
				vpnConnectionUpdateModel.IPSecPolicy = core.StringPtr("c12345d-8593-11eb-8dcd-0242ac134573")
				vpnConnectionUpdateModel.Name = core.StringPtr("VPN-Connection-1")
				vpnConnectionUpdateModel.PeerGatewayAddress = core.StringPtr("192.168.1.1")
				vpnConnectionUpdateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the PcloudVpnconnectionsPutOptions model
				pcloudVpnconnectionsPutOptionsModel := new(powervsv1.PcloudVpnconnectionsPutOptions)
				pcloudVpnconnectionsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsPutOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsPutOptionsModel.Body = vpnConnectionUpdateModel
				pcloudVpnconnectionsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudVpnconnectionsPut(pcloudVpnconnectionsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudVpnconnectionsPut with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the VPNConnectionUpdate model
				vpnConnectionUpdateModel := new(powervsv1.VPNConnectionUpdate)
				vpnConnectionUpdateModel.IkePolicy = core.StringPtr("c36723ec-8593-11eb-8dcd-0242ac133853")
				vpnConnectionUpdateModel.IPSecPolicy = core.StringPtr("c12345d-8593-11eb-8dcd-0242ac134573")
				vpnConnectionUpdateModel.Name = core.StringPtr("VPN-Connection-1")
				vpnConnectionUpdateModel.PeerGatewayAddress = core.StringPtr("192.168.1.1")
				vpnConnectionUpdateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the PcloudVpnconnectionsPutOptions model
				pcloudVpnconnectionsPutOptionsModel := new(powervsv1.PcloudVpnconnectionsPutOptions)
				pcloudVpnconnectionsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsPutOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsPutOptionsModel.Body = vpnConnectionUpdateModel
				pcloudVpnconnectionsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudVpnconnectionsPut(pcloudVpnconnectionsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudVpnconnectionsPutOptions model with no property values
				pcloudVpnconnectionsPutOptionsModelNew := new(powervsv1.PcloudVpnconnectionsPutOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudVpnconnectionsPut(pcloudVpnconnectionsPutOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudVpnconnectionsPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the VPNConnectionUpdate model
				vpnConnectionUpdateModel := new(powervsv1.VPNConnectionUpdate)
				vpnConnectionUpdateModel.IkePolicy = core.StringPtr("c36723ec-8593-11eb-8dcd-0242ac133853")
				vpnConnectionUpdateModel.IPSecPolicy = core.StringPtr("c12345d-8593-11eb-8dcd-0242ac134573")
				vpnConnectionUpdateModel.Name = core.StringPtr("VPN-Connection-1")
				vpnConnectionUpdateModel.PeerGatewayAddress = core.StringPtr("192.168.1.1")
				vpnConnectionUpdateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the PcloudVpnconnectionsPutOptions model
				pcloudVpnconnectionsPutOptionsModel := new(powervsv1.PcloudVpnconnectionsPutOptions)
				pcloudVpnconnectionsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsPutOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsPutOptionsModel.Body = vpnConnectionUpdateModel
				pcloudVpnconnectionsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudVpnconnectionsPut(pcloudVpnconnectionsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVpnconnectionsNetworksDelete(pcloudVpnconnectionsNetworksDeleteOptions *PcloudVpnconnectionsNetworksDeleteOptions) - Operation response error`, func() {
		pcloudVpnconnectionsNetworksDeletePath := "/pcloud/v1/cloud-instances/testString/vpn/vpn-connections/testString/networks"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsNetworksDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsNetworksDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsNetworksDeleteOptions model
				pcloudVpnconnectionsNetworksDeleteOptionsModel := new(powervsv1.PcloudVpnconnectionsNetworksDeleteOptions)
				pcloudVpnconnectionsNetworksDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksDeleteOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksDeleteOptionsModel.NetworkID = core.StringPtr("7f950c76-8582-11qeb-8dcd-0242ac172")
				pcloudVpnconnectionsNetworksDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudVpnconnectionsNetworksDelete(pcloudVpnconnectionsNetworksDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudVpnconnectionsNetworksDelete(pcloudVpnconnectionsNetworksDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVpnconnectionsNetworksDelete(pcloudVpnconnectionsNetworksDeleteOptions *PcloudVpnconnectionsNetworksDeleteOptions)`, func() {
		pcloudVpnconnectionsNetworksDeletePath := "/pcloud/v1/cloud-instances/testString/vpn/vpn-connections/testString/networks"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsNetworksDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"href": "Href", "id": "ID"}`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsNetworksDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudVpnconnectionsNetworksDeleteOptions model
				pcloudVpnconnectionsNetworksDeleteOptionsModel := new(powervsv1.PcloudVpnconnectionsNetworksDeleteOptions)
				pcloudVpnconnectionsNetworksDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksDeleteOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksDeleteOptionsModel.NetworkID = core.StringPtr("7f950c76-8582-11qeb-8dcd-0242ac172")
				pcloudVpnconnectionsNetworksDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudVpnconnectionsNetworksDeleteWithContext(ctx, pcloudVpnconnectionsNetworksDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudVpnconnectionsNetworksDelete(pcloudVpnconnectionsNetworksDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudVpnconnectionsNetworksDeleteWithContext(ctx, pcloudVpnconnectionsNetworksDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsNetworksDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"href": "Href", "id": "ID"}`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsNetworksDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudVpnconnectionsNetworksDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudVpnconnectionsNetworksDeleteOptions model
				pcloudVpnconnectionsNetworksDeleteOptionsModel := new(powervsv1.PcloudVpnconnectionsNetworksDeleteOptions)
				pcloudVpnconnectionsNetworksDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksDeleteOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksDeleteOptionsModel.NetworkID = core.StringPtr("7f950c76-8582-11qeb-8dcd-0242ac172")
				pcloudVpnconnectionsNetworksDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudVpnconnectionsNetworksDelete(pcloudVpnconnectionsNetworksDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudVpnconnectionsNetworksDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsNetworksDeleteOptions model
				pcloudVpnconnectionsNetworksDeleteOptionsModel := new(powervsv1.PcloudVpnconnectionsNetworksDeleteOptions)
				pcloudVpnconnectionsNetworksDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksDeleteOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksDeleteOptionsModel.NetworkID = core.StringPtr("7f950c76-8582-11qeb-8dcd-0242ac172")
				pcloudVpnconnectionsNetworksDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudVpnconnectionsNetworksDelete(pcloudVpnconnectionsNetworksDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudVpnconnectionsNetworksDeleteOptions model with no property values
				pcloudVpnconnectionsNetworksDeleteOptionsModelNew := new(powervsv1.PcloudVpnconnectionsNetworksDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudVpnconnectionsNetworksDelete(pcloudVpnconnectionsNetworksDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudVpnconnectionsNetworksDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsNetworksDeleteOptions model
				pcloudVpnconnectionsNetworksDeleteOptionsModel := new(powervsv1.PcloudVpnconnectionsNetworksDeleteOptions)
				pcloudVpnconnectionsNetworksDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksDeleteOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksDeleteOptionsModel.NetworkID = core.StringPtr("7f950c76-8582-11qeb-8dcd-0242ac172")
				pcloudVpnconnectionsNetworksDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudVpnconnectionsNetworksDelete(pcloudVpnconnectionsNetworksDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVpnconnectionsNetworksGet(pcloudVpnconnectionsNetworksGetOptions *PcloudVpnconnectionsNetworksGetOptions) - Operation response error`, func() {
		pcloudVpnconnectionsNetworksGetPath := "/pcloud/v1/cloud-instances/testString/vpn/vpn-connections/testString/networks"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsNetworksGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsNetworksGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsNetworksGetOptions model
				pcloudVpnconnectionsNetworksGetOptionsModel := new(powervsv1.PcloudVpnconnectionsNetworksGetOptions)
				pcloudVpnconnectionsNetworksGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksGetOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudVpnconnectionsNetworksGet(pcloudVpnconnectionsNetworksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudVpnconnectionsNetworksGet(pcloudVpnconnectionsNetworksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVpnconnectionsNetworksGet(pcloudVpnconnectionsNetworksGetOptions *PcloudVpnconnectionsNetworksGetOptions)`, func() {
		pcloudVpnconnectionsNetworksGetPath := "/pcloud/v1/cloud-instances/testString/vpn/vpn-connections/testString/networks"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsNetworksGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"networkIDs": ["NetworkIDs"]}`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsNetworksGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudVpnconnectionsNetworksGetOptions model
				pcloudVpnconnectionsNetworksGetOptionsModel := new(powervsv1.PcloudVpnconnectionsNetworksGetOptions)
				pcloudVpnconnectionsNetworksGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksGetOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudVpnconnectionsNetworksGetWithContext(ctx, pcloudVpnconnectionsNetworksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudVpnconnectionsNetworksGet(pcloudVpnconnectionsNetworksGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudVpnconnectionsNetworksGetWithContext(ctx, pcloudVpnconnectionsNetworksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsNetworksGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"networkIDs": ["NetworkIDs"]}`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsNetworksGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudVpnconnectionsNetworksGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudVpnconnectionsNetworksGetOptions model
				pcloudVpnconnectionsNetworksGetOptionsModel := new(powervsv1.PcloudVpnconnectionsNetworksGetOptions)
				pcloudVpnconnectionsNetworksGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksGetOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudVpnconnectionsNetworksGet(pcloudVpnconnectionsNetworksGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudVpnconnectionsNetworksGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsNetworksGetOptions model
				pcloudVpnconnectionsNetworksGetOptionsModel := new(powervsv1.PcloudVpnconnectionsNetworksGetOptions)
				pcloudVpnconnectionsNetworksGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksGetOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudVpnconnectionsNetworksGet(pcloudVpnconnectionsNetworksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudVpnconnectionsNetworksGetOptions model with no property values
				pcloudVpnconnectionsNetworksGetOptionsModelNew := new(powervsv1.PcloudVpnconnectionsNetworksGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudVpnconnectionsNetworksGet(pcloudVpnconnectionsNetworksGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudVpnconnectionsNetworksGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsNetworksGetOptions model
				pcloudVpnconnectionsNetworksGetOptionsModel := new(powervsv1.PcloudVpnconnectionsNetworksGetOptions)
				pcloudVpnconnectionsNetworksGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksGetOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudVpnconnectionsNetworksGet(pcloudVpnconnectionsNetworksGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVpnconnectionsNetworksPut(pcloudVpnconnectionsNetworksPutOptions *PcloudVpnconnectionsNetworksPutOptions) - Operation response error`, func() {
		pcloudVpnconnectionsNetworksPutPath := "/pcloud/v1/cloud-instances/testString/vpn/vpn-connections/testString/networks"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsNetworksPutPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsNetworksPut with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsNetworksPutOptions model
				pcloudVpnconnectionsNetworksPutOptionsModel := new(powervsv1.PcloudVpnconnectionsNetworksPutOptions)
				pcloudVpnconnectionsNetworksPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksPutOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksPutOptionsModel.NetworkID = core.StringPtr("7f950c76-8582-11qeb-8dcd-0242ac172")
				pcloudVpnconnectionsNetworksPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudVpnconnectionsNetworksPut(pcloudVpnconnectionsNetworksPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudVpnconnectionsNetworksPut(pcloudVpnconnectionsNetworksPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVpnconnectionsNetworksPut(pcloudVpnconnectionsNetworksPutOptions *PcloudVpnconnectionsNetworksPutOptions)`, func() {
		pcloudVpnconnectionsNetworksPutPath := "/pcloud/v1/cloud-instances/testString/vpn/vpn-connections/testString/networks"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsNetworksPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"href": "Href", "id": "ID"}`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsNetworksPut successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudVpnconnectionsNetworksPutOptions model
				pcloudVpnconnectionsNetworksPutOptionsModel := new(powervsv1.PcloudVpnconnectionsNetworksPutOptions)
				pcloudVpnconnectionsNetworksPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksPutOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksPutOptionsModel.NetworkID = core.StringPtr("7f950c76-8582-11qeb-8dcd-0242ac172")
				pcloudVpnconnectionsNetworksPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudVpnconnectionsNetworksPutWithContext(ctx, pcloudVpnconnectionsNetworksPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudVpnconnectionsNetworksPut(pcloudVpnconnectionsNetworksPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudVpnconnectionsNetworksPutWithContext(ctx, pcloudVpnconnectionsNetworksPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsNetworksPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"href": "Href", "id": "ID"}`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsNetworksPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudVpnconnectionsNetworksPut(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudVpnconnectionsNetworksPutOptions model
				pcloudVpnconnectionsNetworksPutOptionsModel := new(powervsv1.PcloudVpnconnectionsNetworksPutOptions)
				pcloudVpnconnectionsNetworksPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksPutOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksPutOptionsModel.NetworkID = core.StringPtr("7f950c76-8582-11qeb-8dcd-0242ac172")
				pcloudVpnconnectionsNetworksPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudVpnconnectionsNetworksPut(pcloudVpnconnectionsNetworksPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudVpnconnectionsNetworksPut with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsNetworksPutOptions model
				pcloudVpnconnectionsNetworksPutOptionsModel := new(powervsv1.PcloudVpnconnectionsNetworksPutOptions)
				pcloudVpnconnectionsNetworksPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksPutOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksPutOptionsModel.NetworkID = core.StringPtr("7f950c76-8582-11qeb-8dcd-0242ac172")
				pcloudVpnconnectionsNetworksPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudVpnconnectionsNetworksPut(pcloudVpnconnectionsNetworksPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudVpnconnectionsNetworksPutOptions model with no property values
				pcloudVpnconnectionsNetworksPutOptionsModelNew := new(powervsv1.PcloudVpnconnectionsNetworksPutOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudVpnconnectionsNetworksPut(pcloudVpnconnectionsNetworksPutOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudVpnconnectionsNetworksPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsNetworksPutOptions model
				pcloudVpnconnectionsNetworksPutOptionsModel := new(powervsv1.PcloudVpnconnectionsNetworksPutOptions)
				pcloudVpnconnectionsNetworksPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksPutOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsNetworksPutOptionsModel.NetworkID = core.StringPtr("7f950c76-8582-11qeb-8dcd-0242ac172")
				pcloudVpnconnectionsNetworksPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudVpnconnectionsNetworksPut(pcloudVpnconnectionsNetworksPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVpnconnectionsPeersubnetsDelete(pcloudVpnconnectionsPeersubnetsDeleteOptions *PcloudVpnconnectionsPeersubnetsDeleteOptions) - Operation response error`, func() {
		pcloudVpnconnectionsPeersubnetsDeletePath := "/pcloud/v1/cloud-instances/testString/vpn/vpn-connections/testString/peer-subnets"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsPeersubnetsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsPeersubnetsDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsPeersubnetsDeleteOptions model
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel := new(powervsv1.PcloudVpnconnectionsPeersubnetsDeleteOptions)
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel.CIDR = core.StringPtr("128.170.1.0/32")
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudVpnconnectionsPeersubnetsDelete(pcloudVpnconnectionsPeersubnetsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudVpnconnectionsPeersubnetsDelete(pcloudVpnconnectionsPeersubnetsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVpnconnectionsPeersubnetsDelete(pcloudVpnconnectionsPeersubnetsDeleteOptions *PcloudVpnconnectionsPeersubnetsDeleteOptions)`, func() {
		pcloudVpnconnectionsPeersubnetsDeletePath := "/pcloud/v1/cloud-instances/testString/vpn/vpn-connections/testString/peer-subnets"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsPeersubnetsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"peerSubnets": ["PeerSubnets"]}`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsPeersubnetsDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudVpnconnectionsPeersubnetsDeleteOptions model
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel := new(powervsv1.PcloudVpnconnectionsPeersubnetsDeleteOptions)
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel.CIDR = core.StringPtr("128.170.1.0/32")
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudVpnconnectionsPeersubnetsDeleteWithContext(ctx, pcloudVpnconnectionsPeersubnetsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudVpnconnectionsPeersubnetsDelete(pcloudVpnconnectionsPeersubnetsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudVpnconnectionsPeersubnetsDeleteWithContext(ctx, pcloudVpnconnectionsPeersubnetsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsPeersubnetsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"peerSubnets": ["PeerSubnets"]}`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsPeersubnetsDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudVpnconnectionsPeersubnetsDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudVpnconnectionsPeersubnetsDeleteOptions model
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel := new(powervsv1.PcloudVpnconnectionsPeersubnetsDeleteOptions)
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel.CIDR = core.StringPtr("128.170.1.0/32")
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudVpnconnectionsPeersubnetsDelete(pcloudVpnconnectionsPeersubnetsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudVpnconnectionsPeersubnetsDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsPeersubnetsDeleteOptions model
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel := new(powervsv1.PcloudVpnconnectionsPeersubnetsDeleteOptions)
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel.CIDR = core.StringPtr("128.170.1.0/32")
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudVpnconnectionsPeersubnetsDelete(pcloudVpnconnectionsPeersubnetsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudVpnconnectionsPeersubnetsDeleteOptions model with no property values
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModelNew := new(powervsv1.PcloudVpnconnectionsPeersubnetsDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudVpnconnectionsPeersubnetsDelete(pcloudVpnconnectionsPeersubnetsDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudVpnconnectionsPeersubnetsDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsPeersubnetsDeleteOptions model
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel := new(powervsv1.PcloudVpnconnectionsPeersubnetsDeleteOptions)
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel.CIDR = core.StringPtr("128.170.1.0/32")
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudVpnconnectionsPeersubnetsDelete(pcloudVpnconnectionsPeersubnetsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVpnconnectionsPeersubnetsGet(pcloudVpnconnectionsPeersubnetsGetOptions *PcloudVpnconnectionsPeersubnetsGetOptions) - Operation response error`, func() {
		pcloudVpnconnectionsPeersubnetsGetPath := "/pcloud/v1/cloud-instances/testString/vpn/vpn-connections/testString/peer-subnets"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsPeersubnetsGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsPeersubnetsGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsPeersubnetsGetOptions model
				pcloudVpnconnectionsPeersubnetsGetOptionsModel := new(powervsv1.PcloudVpnconnectionsPeersubnetsGetOptions)
				pcloudVpnconnectionsPeersubnetsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsGetOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudVpnconnectionsPeersubnetsGet(pcloudVpnconnectionsPeersubnetsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudVpnconnectionsPeersubnetsGet(pcloudVpnconnectionsPeersubnetsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVpnconnectionsPeersubnetsGet(pcloudVpnconnectionsPeersubnetsGetOptions *PcloudVpnconnectionsPeersubnetsGetOptions)`, func() {
		pcloudVpnconnectionsPeersubnetsGetPath := "/pcloud/v1/cloud-instances/testString/vpn/vpn-connections/testString/peer-subnets"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsPeersubnetsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"peerSubnets": ["PeerSubnets"]}`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsPeersubnetsGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudVpnconnectionsPeersubnetsGetOptions model
				pcloudVpnconnectionsPeersubnetsGetOptionsModel := new(powervsv1.PcloudVpnconnectionsPeersubnetsGetOptions)
				pcloudVpnconnectionsPeersubnetsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsGetOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudVpnconnectionsPeersubnetsGetWithContext(ctx, pcloudVpnconnectionsPeersubnetsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudVpnconnectionsPeersubnetsGet(pcloudVpnconnectionsPeersubnetsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudVpnconnectionsPeersubnetsGetWithContext(ctx, pcloudVpnconnectionsPeersubnetsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsPeersubnetsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"peerSubnets": ["PeerSubnets"]}`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsPeersubnetsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudVpnconnectionsPeersubnetsGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudVpnconnectionsPeersubnetsGetOptions model
				pcloudVpnconnectionsPeersubnetsGetOptionsModel := new(powervsv1.PcloudVpnconnectionsPeersubnetsGetOptions)
				pcloudVpnconnectionsPeersubnetsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsGetOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudVpnconnectionsPeersubnetsGet(pcloudVpnconnectionsPeersubnetsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudVpnconnectionsPeersubnetsGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsPeersubnetsGetOptions model
				pcloudVpnconnectionsPeersubnetsGetOptionsModel := new(powervsv1.PcloudVpnconnectionsPeersubnetsGetOptions)
				pcloudVpnconnectionsPeersubnetsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsGetOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudVpnconnectionsPeersubnetsGet(pcloudVpnconnectionsPeersubnetsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudVpnconnectionsPeersubnetsGetOptions model with no property values
				pcloudVpnconnectionsPeersubnetsGetOptionsModelNew := new(powervsv1.PcloudVpnconnectionsPeersubnetsGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudVpnconnectionsPeersubnetsGet(pcloudVpnconnectionsPeersubnetsGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudVpnconnectionsPeersubnetsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsPeersubnetsGetOptions model
				pcloudVpnconnectionsPeersubnetsGetOptionsModel := new(powervsv1.PcloudVpnconnectionsPeersubnetsGetOptions)
				pcloudVpnconnectionsPeersubnetsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsGetOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudVpnconnectionsPeersubnetsGet(pcloudVpnconnectionsPeersubnetsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVpnconnectionsPeersubnetsPut(pcloudVpnconnectionsPeersubnetsPutOptions *PcloudVpnconnectionsPeersubnetsPutOptions) - Operation response error`, func() {
		pcloudVpnconnectionsPeersubnetsPutPath := "/pcloud/v1/cloud-instances/testString/vpn/vpn-connections/testString/peer-subnets"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsPeersubnetsPutPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsPeersubnetsPut with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsPeersubnetsPutOptions model
				pcloudVpnconnectionsPeersubnetsPutOptionsModel := new(powervsv1.PcloudVpnconnectionsPeersubnetsPutOptions)
				pcloudVpnconnectionsPeersubnetsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsPutOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsPutOptionsModel.CIDR = core.StringPtr("128.170.1.0/32")
				pcloudVpnconnectionsPeersubnetsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudVpnconnectionsPeersubnetsPut(pcloudVpnconnectionsPeersubnetsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudVpnconnectionsPeersubnetsPut(pcloudVpnconnectionsPeersubnetsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVpnconnectionsPeersubnetsPut(pcloudVpnconnectionsPeersubnetsPutOptions *PcloudVpnconnectionsPeersubnetsPutOptions)`, func() {
		pcloudVpnconnectionsPeersubnetsPutPath := "/pcloud/v1/cloud-instances/testString/vpn/vpn-connections/testString/peer-subnets"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsPeersubnetsPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"peerSubnets": ["PeerSubnets"]}`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsPeersubnetsPut successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudVpnconnectionsPeersubnetsPutOptions model
				pcloudVpnconnectionsPeersubnetsPutOptionsModel := new(powervsv1.PcloudVpnconnectionsPeersubnetsPutOptions)
				pcloudVpnconnectionsPeersubnetsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsPutOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsPutOptionsModel.CIDR = core.StringPtr("128.170.1.0/32")
				pcloudVpnconnectionsPeersubnetsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudVpnconnectionsPeersubnetsPutWithContext(ctx, pcloudVpnconnectionsPeersubnetsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudVpnconnectionsPeersubnetsPut(pcloudVpnconnectionsPeersubnetsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudVpnconnectionsPeersubnetsPutWithContext(ctx, pcloudVpnconnectionsPeersubnetsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVpnconnectionsPeersubnetsPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"peerSubnets": ["PeerSubnets"]}`)
				}))
			})
			It(`Invoke PcloudVpnconnectionsPeersubnetsPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudVpnconnectionsPeersubnetsPut(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudVpnconnectionsPeersubnetsPutOptions model
				pcloudVpnconnectionsPeersubnetsPutOptionsModel := new(powervsv1.PcloudVpnconnectionsPeersubnetsPutOptions)
				pcloudVpnconnectionsPeersubnetsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsPutOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsPutOptionsModel.CIDR = core.StringPtr("128.170.1.0/32")
				pcloudVpnconnectionsPeersubnetsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudVpnconnectionsPeersubnetsPut(pcloudVpnconnectionsPeersubnetsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudVpnconnectionsPeersubnetsPut with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsPeersubnetsPutOptions model
				pcloudVpnconnectionsPeersubnetsPutOptionsModel := new(powervsv1.PcloudVpnconnectionsPeersubnetsPutOptions)
				pcloudVpnconnectionsPeersubnetsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsPutOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsPutOptionsModel.CIDR = core.StringPtr("128.170.1.0/32")
				pcloudVpnconnectionsPeersubnetsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudVpnconnectionsPeersubnetsPut(pcloudVpnconnectionsPeersubnetsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudVpnconnectionsPeersubnetsPutOptions model with no property values
				pcloudVpnconnectionsPeersubnetsPutOptionsModelNew := new(powervsv1.PcloudVpnconnectionsPeersubnetsPutOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudVpnconnectionsPeersubnetsPut(pcloudVpnconnectionsPeersubnetsPutOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudVpnconnectionsPeersubnetsPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVpnconnectionsPeersubnetsPutOptions model
				pcloudVpnconnectionsPeersubnetsPutOptionsModel := new(powervsv1.PcloudVpnconnectionsPeersubnetsPutOptions)
				pcloudVpnconnectionsPeersubnetsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsPutOptionsModel.VPNConnectionID = core.StringPtr("testString")
				pcloudVpnconnectionsPeersubnetsPutOptionsModel.CIDR = core.StringPtr("128.170.1.0/32")
				pcloudVpnconnectionsPeersubnetsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudVpnconnectionsPeersubnetsPut(pcloudVpnconnectionsPeersubnetsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudIkepoliciesGetall(pcloudIkepoliciesGetallOptions *PcloudIkepoliciesGetallOptions) - Operation response error`, func() {
		pcloudIkepoliciesGetallPath := "/pcloud/v1/cloud-instances/testString/vpn/ike-policies"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIkepoliciesGetallPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudIkepoliciesGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudIkepoliciesGetallOptions model
				pcloudIkepoliciesGetallOptionsModel := new(powervsv1.PcloudIkepoliciesGetallOptions)
				pcloudIkepoliciesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIkepoliciesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudIkepoliciesGetall(pcloudIkepoliciesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudIkepoliciesGetall(pcloudIkepoliciesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudIkepoliciesGetall(pcloudIkepoliciesGetallOptions *PcloudIkepoliciesGetallOptions)`, func() {
		pcloudIkepoliciesGetallPath := "/pcloud/v1/cloud-instances/testString/vpn/ike-policies"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIkepoliciesGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"ikePolicies": [{"authentication": "sha-256", "dhGroup": 2, "encryption": "aes-256-cbc", "id": "7edc8988-eb18-4b5c-a594-0d73d8254463", "keyLifetime": 28800, "name": "ikePolicy1", "version": 2}]}`)
				}))
			})
			It(`Invoke PcloudIkepoliciesGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudIkepoliciesGetallOptions model
				pcloudIkepoliciesGetallOptionsModel := new(powervsv1.PcloudIkepoliciesGetallOptions)
				pcloudIkepoliciesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIkepoliciesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudIkepoliciesGetallWithContext(ctx, pcloudIkepoliciesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudIkepoliciesGetall(pcloudIkepoliciesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudIkepoliciesGetallWithContext(ctx, pcloudIkepoliciesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIkepoliciesGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"ikePolicies": [{"authentication": "sha-256", "dhGroup": 2, "encryption": "aes-256-cbc", "id": "7edc8988-eb18-4b5c-a594-0d73d8254463", "keyLifetime": 28800, "name": "ikePolicy1", "version": 2}]}`)
				}))
			})
			It(`Invoke PcloudIkepoliciesGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudIkepoliciesGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudIkepoliciesGetallOptions model
				pcloudIkepoliciesGetallOptionsModel := new(powervsv1.PcloudIkepoliciesGetallOptions)
				pcloudIkepoliciesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIkepoliciesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudIkepoliciesGetall(pcloudIkepoliciesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudIkepoliciesGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudIkepoliciesGetallOptions model
				pcloudIkepoliciesGetallOptionsModel := new(powervsv1.PcloudIkepoliciesGetallOptions)
				pcloudIkepoliciesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIkepoliciesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudIkepoliciesGetall(pcloudIkepoliciesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudIkepoliciesGetallOptions model with no property values
				pcloudIkepoliciesGetallOptionsModelNew := new(powervsv1.PcloudIkepoliciesGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudIkepoliciesGetall(pcloudIkepoliciesGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudIkepoliciesGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudIkepoliciesGetallOptions model
				pcloudIkepoliciesGetallOptionsModel := new(powervsv1.PcloudIkepoliciesGetallOptions)
				pcloudIkepoliciesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIkepoliciesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudIkepoliciesGetall(pcloudIkepoliciesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudIkepoliciesPost(pcloudIkepoliciesPostOptions *PcloudIkepoliciesPostOptions) - Operation response error`, func() {
		pcloudIkepoliciesPostPath := "/pcloud/v1/cloud-instances/testString/vpn/ike-policies"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIkepoliciesPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudIkepoliciesPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudIkepoliciesPostOptions model
				pcloudIkepoliciesPostOptionsModel := new(powervsv1.PcloudIkepoliciesPostOptions)
				pcloudIkepoliciesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIkepoliciesPostOptionsModel.DhGroup = core.Int64Ptr(int64(2))
				pcloudIkepoliciesPostOptionsModel.Encryption = core.StringPtr("aes-256-cbc")
				pcloudIkepoliciesPostOptionsModel.KeyLifetime = core.Int64Ptr(int64(28800))
				pcloudIkepoliciesPostOptionsModel.Name = core.StringPtr("ikePolicy1")
				pcloudIkepoliciesPostOptionsModel.PresharedKey = core.StringPtr("testString")
				pcloudIkepoliciesPostOptionsModel.Version = core.Int64Ptr(int64(2))
				pcloudIkepoliciesPostOptionsModel.Authentication = core.StringPtr("sha-256")
				pcloudIkepoliciesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudIkepoliciesPost(pcloudIkepoliciesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudIkepoliciesPost(pcloudIkepoliciesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudIkepoliciesPost(pcloudIkepoliciesPostOptions *PcloudIkepoliciesPostOptions)`, func() {
		pcloudIkepoliciesPostPath := "/pcloud/v1/cloud-instances/testString/vpn/ike-policies"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIkepoliciesPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"authentication": "sha-256", "dhGroup": 2, "encryption": "aes-256-cbc", "id": "7edc8988-eb18-4b5c-a594-0d73d8254463", "keyLifetime": 28800, "name": "ikePolicy1", "version": 2}`)
				}))
			})
			It(`Invoke PcloudIkepoliciesPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudIkepoliciesPostOptions model
				pcloudIkepoliciesPostOptionsModel := new(powervsv1.PcloudIkepoliciesPostOptions)
				pcloudIkepoliciesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIkepoliciesPostOptionsModel.DhGroup = core.Int64Ptr(int64(2))
				pcloudIkepoliciesPostOptionsModel.Encryption = core.StringPtr("aes-256-cbc")
				pcloudIkepoliciesPostOptionsModel.KeyLifetime = core.Int64Ptr(int64(28800))
				pcloudIkepoliciesPostOptionsModel.Name = core.StringPtr("ikePolicy1")
				pcloudIkepoliciesPostOptionsModel.PresharedKey = core.StringPtr("testString")
				pcloudIkepoliciesPostOptionsModel.Version = core.Int64Ptr(int64(2))
				pcloudIkepoliciesPostOptionsModel.Authentication = core.StringPtr("sha-256")
				pcloudIkepoliciesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudIkepoliciesPostWithContext(ctx, pcloudIkepoliciesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudIkepoliciesPost(pcloudIkepoliciesPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudIkepoliciesPostWithContext(ctx, pcloudIkepoliciesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIkepoliciesPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"authentication": "sha-256", "dhGroup": 2, "encryption": "aes-256-cbc", "id": "7edc8988-eb18-4b5c-a594-0d73d8254463", "keyLifetime": 28800, "name": "ikePolicy1", "version": 2}`)
				}))
			})
			It(`Invoke PcloudIkepoliciesPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudIkepoliciesPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudIkepoliciesPostOptions model
				pcloudIkepoliciesPostOptionsModel := new(powervsv1.PcloudIkepoliciesPostOptions)
				pcloudIkepoliciesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIkepoliciesPostOptionsModel.DhGroup = core.Int64Ptr(int64(2))
				pcloudIkepoliciesPostOptionsModel.Encryption = core.StringPtr("aes-256-cbc")
				pcloudIkepoliciesPostOptionsModel.KeyLifetime = core.Int64Ptr(int64(28800))
				pcloudIkepoliciesPostOptionsModel.Name = core.StringPtr("ikePolicy1")
				pcloudIkepoliciesPostOptionsModel.PresharedKey = core.StringPtr("testString")
				pcloudIkepoliciesPostOptionsModel.Version = core.Int64Ptr(int64(2))
				pcloudIkepoliciesPostOptionsModel.Authentication = core.StringPtr("sha-256")
				pcloudIkepoliciesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudIkepoliciesPost(pcloudIkepoliciesPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudIkepoliciesPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudIkepoliciesPostOptions model
				pcloudIkepoliciesPostOptionsModel := new(powervsv1.PcloudIkepoliciesPostOptions)
				pcloudIkepoliciesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIkepoliciesPostOptionsModel.DhGroup = core.Int64Ptr(int64(2))
				pcloudIkepoliciesPostOptionsModel.Encryption = core.StringPtr("aes-256-cbc")
				pcloudIkepoliciesPostOptionsModel.KeyLifetime = core.Int64Ptr(int64(28800))
				pcloudIkepoliciesPostOptionsModel.Name = core.StringPtr("ikePolicy1")
				pcloudIkepoliciesPostOptionsModel.PresharedKey = core.StringPtr("testString")
				pcloudIkepoliciesPostOptionsModel.Version = core.Int64Ptr(int64(2))
				pcloudIkepoliciesPostOptionsModel.Authentication = core.StringPtr("sha-256")
				pcloudIkepoliciesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudIkepoliciesPost(pcloudIkepoliciesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudIkepoliciesPostOptions model with no property values
				pcloudIkepoliciesPostOptionsModelNew := new(powervsv1.PcloudIkepoliciesPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudIkepoliciesPost(pcloudIkepoliciesPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudIkepoliciesPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudIkepoliciesPostOptions model
				pcloudIkepoliciesPostOptionsModel := new(powervsv1.PcloudIkepoliciesPostOptions)
				pcloudIkepoliciesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIkepoliciesPostOptionsModel.DhGroup = core.Int64Ptr(int64(2))
				pcloudIkepoliciesPostOptionsModel.Encryption = core.StringPtr("aes-256-cbc")
				pcloudIkepoliciesPostOptionsModel.KeyLifetime = core.Int64Ptr(int64(28800))
				pcloudIkepoliciesPostOptionsModel.Name = core.StringPtr("ikePolicy1")
				pcloudIkepoliciesPostOptionsModel.PresharedKey = core.StringPtr("testString")
				pcloudIkepoliciesPostOptionsModel.Version = core.Int64Ptr(int64(2))
				pcloudIkepoliciesPostOptionsModel.Authentication = core.StringPtr("sha-256")
				pcloudIkepoliciesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudIkepoliciesPost(pcloudIkepoliciesPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudIkepoliciesDelete(pcloudIkepoliciesDeleteOptions *PcloudIkepoliciesDeleteOptions) - Operation response error`, func() {
		pcloudIkepoliciesDeletePath := "/pcloud/v1/cloud-instances/testString/vpn/ike-policies/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIkepoliciesDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudIkepoliciesDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudIkepoliciesDeleteOptions model
				pcloudIkepoliciesDeleteOptionsModel := new(powervsv1.PcloudIkepoliciesDeleteOptions)
				pcloudIkepoliciesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIkepoliciesDeleteOptionsModel.IkePolicyID = core.StringPtr("testString")
				pcloudIkepoliciesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudIkepoliciesDelete(pcloudIkepoliciesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudIkepoliciesDelete(pcloudIkepoliciesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudIkepoliciesDelete(pcloudIkepoliciesDeleteOptions *PcloudIkepoliciesDeleteOptions)`, func() {
		pcloudIkepoliciesDeletePath := "/pcloud/v1/cloud-instances/testString/vpn/ike-policies/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIkepoliciesDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudIkepoliciesDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudIkepoliciesDeleteOptions model
				pcloudIkepoliciesDeleteOptionsModel := new(powervsv1.PcloudIkepoliciesDeleteOptions)
				pcloudIkepoliciesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIkepoliciesDeleteOptionsModel.IkePolicyID = core.StringPtr("testString")
				pcloudIkepoliciesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudIkepoliciesDeleteWithContext(ctx, pcloudIkepoliciesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudIkepoliciesDelete(pcloudIkepoliciesDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudIkepoliciesDeleteWithContext(ctx, pcloudIkepoliciesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIkepoliciesDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudIkepoliciesDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudIkepoliciesDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudIkepoliciesDeleteOptions model
				pcloudIkepoliciesDeleteOptionsModel := new(powervsv1.PcloudIkepoliciesDeleteOptions)
				pcloudIkepoliciesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIkepoliciesDeleteOptionsModel.IkePolicyID = core.StringPtr("testString")
				pcloudIkepoliciesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudIkepoliciesDelete(pcloudIkepoliciesDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudIkepoliciesDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudIkepoliciesDeleteOptions model
				pcloudIkepoliciesDeleteOptionsModel := new(powervsv1.PcloudIkepoliciesDeleteOptions)
				pcloudIkepoliciesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIkepoliciesDeleteOptionsModel.IkePolicyID = core.StringPtr("testString")
				pcloudIkepoliciesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudIkepoliciesDelete(pcloudIkepoliciesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudIkepoliciesDeleteOptions model with no property values
				pcloudIkepoliciesDeleteOptionsModelNew := new(powervsv1.PcloudIkepoliciesDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudIkepoliciesDelete(pcloudIkepoliciesDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudIkepoliciesDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudIkepoliciesDeleteOptions model
				pcloudIkepoliciesDeleteOptionsModel := new(powervsv1.PcloudIkepoliciesDeleteOptions)
				pcloudIkepoliciesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIkepoliciesDeleteOptionsModel.IkePolicyID = core.StringPtr("testString")
				pcloudIkepoliciesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudIkepoliciesDelete(pcloudIkepoliciesDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudIkepoliciesGet(pcloudIkepoliciesGetOptions *PcloudIkepoliciesGetOptions) - Operation response error`, func() {
		pcloudIkepoliciesGetPath := "/pcloud/v1/cloud-instances/testString/vpn/ike-policies/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIkepoliciesGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudIkepoliciesGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudIkepoliciesGetOptions model
				pcloudIkepoliciesGetOptionsModel := new(powervsv1.PcloudIkepoliciesGetOptions)
				pcloudIkepoliciesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIkepoliciesGetOptionsModel.IkePolicyID = core.StringPtr("testString")
				pcloudIkepoliciesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudIkepoliciesGet(pcloudIkepoliciesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudIkepoliciesGet(pcloudIkepoliciesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudIkepoliciesGet(pcloudIkepoliciesGetOptions *PcloudIkepoliciesGetOptions)`, func() {
		pcloudIkepoliciesGetPath := "/pcloud/v1/cloud-instances/testString/vpn/ike-policies/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIkepoliciesGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"authentication": "sha-256", "dhGroup": 2, "encryption": "aes-256-cbc", "id": "7edc8988-eb18-4b5c-a594-0d73d8254463", "keyLifetime": 28800, "name": "ikePolicy1", "version": 2}`)
				}))
			})
			It(`Invoke PcloudIkepoliciesGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudIkepoliciesGetOptions model
				pcloudIkepoliciesGetOptionsModel := new(powervsv1.PcloudIkepoliciesGetOptions)
				pcloudIkepoliciesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIkepoliciesGetOptionsModel.IkePolicyID = core.StringPtr("testString")
				pcloudIkepoliciesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudIkepoliciesGetWithContext(ctx, pcloudIkepoliciesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudIkepoliciesGet(pcloudIkepoliciesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudIkepoliciesGetWithContext(ctx, pcloudIkepoliciesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIkepoliciesGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"authentication": "sha-256", "dhGroup": 2, "encryption": "aes-256-cbc", "id": "7edc8988-eb18-4b5c-a594-0d73d8254463", "keyLifetime": 28800, "name": "ikePolicy1", "version": 2}`)
				}))
			})
			It(`Invoke PcloudIkepoliciesGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudIkepoliciesGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudIkepoliciesGetOptions model
				pcloudIkepoliciesGetOptionsModel := new(powervsv1.PcloudIkepoliciesGetOptions)
				pcloudIkepoliciesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIkepoliciesGetOptionsModel.IkePolicyID = core.StringPtr("testString")
				pcloudIkepoliciesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudIkepoliciesGet(pcloudIkepoliciesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudIkepoliciesGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudIkepoliciesGetOptions model
				pcloudIkepoliciesGetOptionsModel := new(powervsv1.PcloudIkepoliciesGetOptions)
				pcloudIkepoliciesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIkepoliciesGetOptionsModel.IkePolicyID = core.StringPtr("testString")
				pcloudIkepoliciesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudIkepoliciesGet(pcloudIkepoliciesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudIkepoliciesGetOptions model with no property values
				pcloudIkepoliciesGetOptionsModelNew := new(powervsv1.PcloudIkepoliciesGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudIkepoliciesGet(pcloudIkepoliciesGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudIkepoliciesGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudIkepoliciesGetOptions model
				pcloudIkepoliciesGetOptionsModel := new(powervsv1.PcloudIkepoliciesGetOptions)
				pcloudIkepoliciesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIkepoliciesGetOptionsModel.IkePolicyID = core.StringPtr("testString")
				pcloudIkepoliciesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudIkepoliciesGet(pcloudIkepoliciesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudIkepoliciesPut(pcloudIkepoliciesPutOptions *PcloudIkepoliciesPutOptions) - Operation response error`, func() {
		pcloudIkepoliciesPutPath := "/pcloud/v1/cloud-instances/testString/vpn/ike-policies/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIkepoliciesPutPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudIkepoliciesPut with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the IkePolicyUpdate model
				ikePolicyUpdateModel := new(powervsv1.IkePolicyUpdate)
				ikePolicyUpdateModel.Authentication = core.StringPtr("sha-256")
				ikePolicyUpdateModel.DhGroup = core.Int64Ptr(int64(2))
				ikePolicyUpdateModel.Encryption = core.StringPtr("aes-256-cbc")
				ikePolicyUpdateModel.KeyLifetime = core.Int64Ptr(int64(28800))
				ikePolicyUpdateModel.Name = core.StringPtr("ikePolicy1")
				ikePolicyUpdateModel.PresharedKey = core.StringPtr("testString")
				ikePolicyUpdateModel.Version = core.Int64Ptr(int64(2))
				ikePolicyUpdateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the PcloudIkepoliciesPutOptions model
				pcloudIkepoliciesPutOptionsModel := new(powervsv1.PcloudIkepoliciesPutOptions)
				pcloudIkepoliciesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIkepoliciesPutOptionsModel.IkePolicyID = core.StringPtr("testString")
				pcloudIkepoliciesPutOptionsModel.Body = ikePolicyUpdateModel
				pcloudIkepoliciesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudIkepoliciesPut(pcloudIkepoliciesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudIkepoliciesPut(pcloudIkepoliciesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudIkepoliciesPut(pcloudIkepoliciesPutOptions *PcloudIkepoliciesPutOptions)`, func() {
		pcloudIkepoliciesPutPath := "/pcloud/v1/cloud-instances/testString/vpn/ike-policies/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIkepoliciesPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"authentication": "sha-256", "dhGroup": 2, "encryption": "aes-256-cbc", "id": "7edc8988-eb18-4b5c-a594-0d73d8254463", "keyLifetime": 28800, "name": "ikePolicy1", "version": 2}`)
				}))
			})
			It(`Invoke PcloudIkepoliciesPut successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the IkePolicyUpdate model
				ikePolicyUpdateModel := new(powervsv1.IkePolicyUpdate)
				ikePolicyUpdateModel.Authentication = core.StringPtr("sha-256")
				ikePolicyUpdateModel.DhGroup = core.Int64Ptr(int64(2))
				ikePolicyUpdateModel.Encryption = core.StringPtr("aes-256-cbc")
				ikePolicyUpdateModel.KeyLifetime = core.Int64Ptr(int64(28800))
				ikePolicyUpdateModel.Name = core.StringPtr("ikePolicy1")
				ikePolicyUpdateModel.PresharedKey = core.StringPtr("testString")
				ikePolicyUpdateModel.Version = core.Int64Ptr(int64(2))
				ikePolicyUpdateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the PcloudIkepoliciesPutOptions model
				pcloudIkepoliciesPutOptionsModel := new(powervsv1.PcloudIkepoliciesPutOptions)
				pcloudIkepoliciesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIkepoliciesPutOptionsModel.IkePolicyID = core.StringPtr("testString")
				pcloudIkepoliciesPutOptionsModel.Body = ikePolicyUpdateModel
				pcloudIkepoliciesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudIkepoliciesPutWithContext(ctx, pcloudIkepoliciesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudIkepoliciesPut(pcloudIkepoliciesPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudIkepoliciesPutWithContext(ctx, pcloudIkepoliciesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIkepoliciesPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"authentication": "sha-256", "dhGroup": 2, "encryption": "aes-256-cbc", "id": "7edc8988-eb18-4b5c-a594-0d73d8254463", "keyLifetime": 28800, "name": "ikePolicy1", "version": 2}`)
				}))
			})
			It(`Invoke PcloudIkepoliciesPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudIkepoliciesPut(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the IkePolicyUpdate model
				ikePolicyUpdateModel := new(powervsv1.IkePolicyUpdate)
				ikePolicyUpdateModel.Authentication = core.StringPtr("sha-256")
				ikePolicyUpdateModel.DhGroup = core.Int64Ptr(int64(2))
				ikePolicyUpdateModel.Encryption = core.StringPtr("aes-256-cbc")
				ikePolicyUpdateModel.KeyLifetime = core.Int64Ptr(int64(28800))
				ikePolicyUpdateModel.Name = core.StringPtr("ikePolicy1")
				ikePolicyUpdateModel.PresharedKey = core.StringPtr("testString")
				ikePolicyUpdateModel.Version = core.Int64Ptr(int64(2))
				ikePolicyUpdateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the PcloudIkepoliciesPutOptions model
				pcloudIkepoliciesPutOptionsModel := new(powervsv1.PcloudIkepoliciesPutOptions)
				pcloudIkepoliciesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIkepoliciesPutOptionsModel.IkePolicyID = core.StringPtr("testString")
				pcloudIkepoliciesPutOptionsModel.Body = ikePolicyUpdateModel
				pcloudIkepoliciesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudIkepoliciesPut(pcloudIkepoliciesPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudIkepoliciesPut with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the IkePolicyUpdate model
				ikePolicyUpdateModel := new(powervsv1.IkePolicyUpdate)
				ikePolicyUpdateModel.Authentication = core.StringPtr("sha-256")
				ikePolicyUpdateModel.DhGroup = core.Int64Ptr(int64(2))
				ikePolicyUpdateModel.Encryption = core.StringPtr("aes-256-cbc")
				ikePolicyUpdateModel.KeyLifetime = core.Int64Ptr(int64(28800))
				ikePolicyUpdateModel.Name = core.StringPtr("ikePolicy1")
				ikePolicyUpdateModel.PresharedKey = core.StringPtr("testString")
				ikePolicyUpdateModel.Version = core.Int64Ptr(int64(2))
				ikePolicyUpdateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the PcloudIkepoliciesPutOptions model
				pcloudIkepoliciesPutOptionsModel := new(powervsv1.PcloudIkepoliciesPutOptions)
				pcloudIkepoliciesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIkepoliciesPutOptionsModel.IkePolicyID = core.StringPtr("testString")
				pcloudIkepoliciesPutOptionsModel.Body = ikePolicyUpdateModel
				pcloudIkepoliciesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudIkepoliciesPut(pcloudIkepoliciesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudIkepoliciesPutOptions model with no property values
				pcloudIkepoliciesPutOptionsModelNew := new(powervsv1.PcloudIkepoliciesPutOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudIkepoliciesPut(pcloudIkepoliciesPutOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudIkepoliciesPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the IkePolicyUpdate model
				ikePolicyUpdateModel := new(powervsv1.IkePolicyUpdate)
				ikePolicyUpdateModel.Authentication = core.StringPtr("sha-256")
				ikePolicyUpdateModel.DhGroup = core.Int64Ptr(int64(2))
				ikePolicyUpdateModel.Encryption = core.StringPtr("aes-256-cbc")
				ikePolicyUpdateModel.KeyLifetime = core.Int64Ptr(int64(28800))
				ikePolicyUpdateModel.Name = core.StringPtr("ikePolicy1")
				ikePolicyUpdateModel.PresharedKey = core.StringPtr("testString")
				ikePolicyUpdateModel.Version = core.Int64Ptr(int64(2))
				ikePolicyUpdateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the PcloudIkepoliciesPutOptions model
				pcloudIkepoliciesPutOptionsModel := new(powervsv1.PcloudIkepoliciesPutOptions)
				pcloudIkepoliciesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIkepoliciesPutOptionsModel.IkePolicyID = core.StringPtr("testString")
				pcloudIkepoliciesPutOptionsModel.Body = ikePolicyUpdateModel
				pcloudIkepoliciesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudIkepoliciesPut(pcloudIkepoliciesPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudIpsecpoliciesGetall(pcloudIpsecpoliciesGetallOptions *PcloudIpsecpoliciesGetallOptions) - Operation response error`, func() {
		pcloudIpsecpoliciesGetallPath := "/pcloud/v1/cloud-instances/testString/vpn/ipsec-policies"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIpsecpoliciesGetallPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudIpsecpoliciesGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudIpsecpoliciesGetallOptions model
				pcloudIpsecpoliciesGetallOptionsModel := new(powervsv1.PcloudIpsecpoliciesGetallOptions)
				pcloudIpsecpoliciesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIpsecpoliciesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudIpsecpoliciesGetall(pcloudIpsecpoliciesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudIpsecpoliciesGetall(pcloudIpsecpoliciesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudIpsecpoliciesGetall(pcloudIpsecpoliciesGetallOptions *PcloudIpsecpoliciesGetallOptions)`, func() {
		pcloudIpsecpoliciesGetallPath := "/pcloud/v1/cloud-instances/testString/vpn/ipsec-policies"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIpsecpoliciesGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"ipSecPolicies": [{"authentication": "hmac-sha-256-128", "dhGroup": 2, "encryption": "aes-256-cbc", "id": "6edc8988-eb18-4b5c-a594-0d73d8254463", "keyLifetime": 28800, "name": "ipSecPolicy2", "pfs": true}]}`)
				}))
			})
			It(`Invoke PcloudIpsecpoliciesGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudIpsecpoliciesGetallOptions model
				pcloudIpsecpoliciesGetallOptionsModel := new(powervsv1.PcloudIpsecpoliciesGetallOptions)
				pcloudIpsecpoliciesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIpsecpoliciesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudIpsecpoliciesGetallWithContext(ctx, pcloudIpsecpoliciesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudIpsecpoliciesGetall(pcloudIpsecpoliciesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudIpsecpoliciesGetallWithContext(ctx, pcloudIpsecpoliciesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIpsecpoliciesGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"ipSecPolicies": [{"authentication": "hmac-sha-256-128", "dhGroup": 2, "encryption": "aes-256-cbc", "id": "6edc8988-eb18-4b5c-a594-0d73d8254463", "keyLifetime": 28800, "name": "ipSecPolicy2", "pfs": true}]}`)
				}))
			})
			It(`Invoke PcloudIpsecpoliciesGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudIpsecpoliciesGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudIpsecpoliciesGetallOptions model
				pcloudIpsecpoliciesGetallOptionsModel := new(powervsv1.PcloudIpsecpoliciesGetallOptions)
				pcloudIpsecpoliciesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIpsecpoliciesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudIpsecpoliciesGetall(pcloudIpsecpoliciesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudIpsecpoliciesGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudIpsecpoliciesGetallOptions model
				pcloudIpsecpoliciesGetallOptionsModel := new(powervsv1.PcloudIpsecpoliciesGetallOptions)
				pcloudIpsecpoliciesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIpsecpoliciesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudIpsecpoliciesGetall(pcloudIpsecpoliciesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudIpsecpoliciesGetallOptions model with no property values
				pcloudIpsecpoliciesGetallOptionsModelNew := new(powervsv1.PcloudIpsecpoliciesGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudIpsecpoliciesGetall(pcloudIpsecpoliciesGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudIpsecpoliciesGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudIpsecpoliciesGetallOptions model
				pcloudIpsecpoliciesGetallOptionsModel := new(powervsv1.PcloudIpsecpoliciesGetallOptions)
				pcloudIpsecpoliciesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIpsecpoliciesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudIpsecpoliciesGetall(pcloudIpsecpoliciesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudIpsecpoliciesPost(pcloudIpsecpoliciesPostOptions *PcloudIpsecpoliciesPostOptions) - Operation response error`, func() {
		pcloudIpsecpoliciesPostPath := "/pcloud/v1/cloud-instances/testString/vpn/ipsec-policies"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIpsecpoliciesPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudIpsecpoliciesPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudIpsecpoliciesPostOptions model
				pcloudIpsecpoliciesPostOptionsModel := new(powervsv1.PcloudIpsecpoliciesPostOptions)
				pcloudIpsecpoliciesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIpsecpoliciesPostOptionsModel.DhGroup = core.Int64Ptr(int64(2))
				pcloudIpsecpoliciesPostOptionsModel.Encryption = core.StringPtr("aes-256-cbc")
				pcloudIpsecpoliciesPostOptionsModel.KeyLifetime = core.Int64Ptr(int64(28800))
				pcloudIpsecpoliciesPostOptionsModel.Name = core.StringPtr("ipSecPolicy2")
				pcloudIpsecpoliciesPostOptionsModel.Pfs = core.BoolPtr(true)
				pcloudIpsecpoliciesPostOptionsModel.Authentication = core.StringPtr("hmac-sha-256-128")
				pcloudIpsecpoliciesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudIpsecpoliciesPost(pcloudIpsecpoliciesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudIpsecpoliciesPost(pcloudIpsecpoliciesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudIpsecpoliciesPost(pcloudIpsecpoliciesPostOptions *PcloudIpsecpoliciesPostOptions)`, func() {
		pcloudIpsecpoliciesPostPath := "/pcloud/v1/cloud-instances/testString/vpn/ipsec-policies"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIpsecpoliciesPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"authentication": "hmac-sha-256-128", "dhGroup": 2, "encryption": "aes-256-cbc", "id": "6edc8988-eb18-4b5c-a594-0d73d8254463", "keyLifetime": 28800, "name": "ipSecPolicy2", "pfs": true}`)
				}))
			})
			It(`Invoke PcloudIpsecpoliciesPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudIpsecpoliciesPostOptions model
				pcloudIpsecpoliciesPostOptionsModel := new(powervsv1.PcloudIpsecpoliciesPostOptions)
				pcloudIpsecpoliciesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIpsecpoliciesPostOptionsModel.DhGroup = core.Int64Ptr(int64(2))
				pcloudIpsecpoliciesPostOptionsModel.Encryption = core.StringPtr("aes-256-cbc")
				pcloudIpsecpoliciesPostOptionsModel.KeyLifetime = core.Int64Ptr(int64(28800))
				pcloudIpsecpoliciesPostOptionsModel.Name = core.StringPtr("ipSecPolicy2")
				pcloudIpsecpoliciesPostOptionsModel.Pfs = core.BoolPtr(true)
				pcloudIpsecpoliciesPostOptionsModel.Authentication = core.StringPtr("hmac-sha-256-128")
				pcloudIpsecpoliciesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudIpsecpoliciesPostWithContext(ctx, pcloudIpsecpoliciesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudIpsecpoliciesPost(pcloudIpsecpoliciesPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudIpsecpoliciesPostWithContext(ctx, pcloudIpsecpoliciesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIpsecpoliciesPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"authentication": "hmac-sha-256-128", "dhGroup": 2, "encryption": "aes-256-cbc", "id": "6edc8988-eb18-4b5c-a594-0d73d8254463", "keyLifetime": 28800, "name": "ipSecPolicy2", "pfs": true}`)
				}))
			})
			It(`Invoke PcloudIpsecpoliciesPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudIpsecpoliciesPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudIpsecpoliciesPostOptions model
				pcloudIpsecpoliciesPostOptionsModel := new(powervsv1.PcloudIpsecpoliciesPostOptions)
				pcloudIpsecpoliciesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIpsecpoliciesPostOptionsModel.DhGroup = core.Int64Ptr(int64(2))
				pcloudIpsecpoliciesPostOptionsModel.Encryption = core.StringPtr("aes-256-cbc")
				pcloudIpsecpoliciesPostOptionsModel.KeyLifetime = core.Int64Ptr(int64(28800))
				pcloudIpsecpoliciesPostOptionsModel.Name = core.StringPtr("ipSecPolicy2")
				pcloudIpsecpoliciesPostOptionsModel.Pfs = core.BoolPtr(true)
				pcloudIpsecpoliciesPostOptionsModel.Authentication = core.StringPtr("hmac-sha-256-128")
				pcloudIpsecpoliciesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudIpsecpoliciesPost(pcloudIpsecpoliciesPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudIpsecpoliciesPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudIpsecpoliciesPostOptions model
				pcloudIpsecpoliciesPostOptionsModel := new(powervsv1.PcloudIpsecpoliciesPostOptions)
				pcloudIpsecpoliciesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIpsecpoliciesPostOptionsModel.DhGroup = core.Int64Ptr(int64(2))
				pcloudIpsecpoliciesPostOptionsModel.Encryption = core.StringPtr("aes-256-cbc")
				pcloudIpsecpoliciesPostOptionsModel.KeyLifetime = core.Int64Ptr(int64(28800))
				pcloudIpsecpoliciesPostOptionsModel.Name = core.StringPtr("ipSecPolicy2")
				pcloudIpsecpoliciesPostOptionsModel.Pfs = core.BoolPtr(true)
				pcloudIpsecpoliciesPostOptionsModel.Authentication = core.StringPtr("hmac-sha-256-128")
				pcloudIpsecpoliciesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudIpsecpoliciesPost(pcloudIpsecpoliciesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudIpsecpoliciesPostOptions model with no property values
				pcloudIpsecpoliciesPostOptionsModelNew := new(powervsv1.PcloudIpsecpoliciesPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudIpsecpoliciesPost(pcloudIpsecpoliciesPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudIpsecpoliciesPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudIpsecpoliciesPostOptions model
				pcloudIpsecpoliciesPostOptionsModel := new(powervsv1.PcloudIpsecpoliciesPostOptions)
				pcloudIpsecpoliciesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIpsecpoliciesPostOptionsModel.DhGroup = core.Int64Ptr(int64(2))
				pcloudIpsecpoliciesPostOptionsModel.Encryption = core.StringPtr("aes-256-cbc")
				pcloudIpsecpoliciesPostOptionsModel.KeyLifetime = core.Int64Ptr(int64(28800))
				pcloudIpsecpoliciesPostOptionsModel.Name = core.StringPtr("ipSecPolicy2")
				pcloudIpsecpoliciesPostOptionsModel.Pfs = core.BoolPtr(true)
				pcloudIpsecpoliciesPostOptionsModel.Authentication = core.StringPtr("hmac-sha-256-128")
				pcloudIpsecpoliciesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudIpsecpoliciesPost(pcloudIpsecpoliciesPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudIpsecpoliciesDelete(pcloudIpsecpoliciesDeleteOptions *PcloudIpsecpoliciesDeleteOptions) - Operation response error`, func() {
		pcloudIpsecpoliciesDeletePath := "/pcloud/v1/cloud-instances/testString/vpn/ipsec-policies/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIpsecpoliciesDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudIpsecpoliciesDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudIpsecpoliciesDeleteOptions model
				pcloudIpsecpoliciesDeleteOptionsModel := new(powervsv1.PcloudIpsecpoliciesDeleteOptions)
				pcloudIpsecpoliciesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIpsecpoliciesDeleteOptionsModel.IpsecPolicyID = core.StringPtr("testString")
				pcloudIpsecpoliciesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudIpsecpoliciesDelete(pcloudIpsecpoliciesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudIpsecpoliciesDelete(pcloudIpsecpoliciesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudIpsecpoliciesDelete(pcloudIpsecpoliciesDeleteOptions *PcloudIpsecpoliciesDeleteOptions)`, func() {
		pcloudIpsecpoliciesDeletePath := "/pcloud/v1/cloud-instances/testString/vpn/ipsec-policies/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIpsecpoliciesDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudIpsecpoliciesDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudIpsecpoliciesDeleteOptions model
				pcloudIpsecpoliciesDeleteOptionsModel := new(powervsv1.PcloudIpsecpoliciesDeleteOptions)
				pcloudIpsecpoliciesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIpsecpoliciesDeleteOptionsModel.IpsecPolicyID = core.StringPtr("testString")
				pcloudIpsecpoliciesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudIpsecpoliciesDeleteWithContext(ctx, pcloudIpsecpoliciesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudIpsecpoliciesDelete(pcloudIpsecpoliciesDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudIpsecpoliciesDeleteWithContext(ctx, pcloudIpsecpoliciesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIpsecpoliciesDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudIpsecpoliciesDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudIpsecpoliciesDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudIpsecpoliciesDeleteOptions model
				pcloudIpsecpoliciesDeleteOptionsModel := new(powervsv1.PcloudIpsecpoliciesDeleteOptions)
				pcloudIpsecpoliciesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIpsecpoliciesDeleteOptionsModel.IpsecPolicyID = core.StringPtr("testString")
				pcloudIpsecpoliciesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudIpsecpoliciesDelete(pcloudIpsecpoliciesDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudIpsecpoliciesDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudIpsecpoliciesDeleteOptions model
				pcloudIpsecpoliciesDeleteOptionsModel := new(powervsv1.PcloudIpsecpoliciesDeleteOptions)
				pcloudIpsecpoliciesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIpsecpoliciesDeleteOptionsModel.IpsecPolicyID = core.StringPtr("testString")
				pcloudIpsecpoliciesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudIpsecpoliciesDelete(pcloudIpsecpoliciesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudIpsecpoliciesDeleteOptions model with no property values
				pcloudIpsecpoliciesDeleteOptionsModelNew := new(powervsv1.PcloudIpsecpoliciesDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudIpsecpoliciesDelete(pcloudIpsecpoliciesDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudIpsecpoliciesDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudIpsecpoliciesDeleteOptions model
				pcloudIpsecpoliciesDeleteOptionsModel := new(powervsv1.PcloudIpsecpoliciesDeleteOptions)
				pcloudIpsecpoliciesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIpsecpoliciesDeleteOptionsModel.IpsecPolicyID = core.StringPtr("testString")
				pcloudIpsecpoliciesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudIpsecpoliciesDelete(pcloudIpsecpoliciesDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudIpsecpoliciesGet(pcloudIpsecpoliciesGetOptions *PcloudIpsecpoliciesGetOptions) - Operation response error`, func() {
		pcloudIpsecpoliciesGetPath := "/pcloud/v1/cloud-instances/testString/vpn/ipsec-policies/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIpsecpoliciesGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudIpsecpoliciesGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudIpsecpoliciesGetOptions model
				pcloudIpsecpoliciesGetOptionsModel := new(powervsv1.PcloudIpsecpoliciesGetOptions)
				pcloudIpsecpoliciesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIpsecpoliciesGetOptionsModel.IpsecPolicyID = core.StringPtr("testString")
				pcloudIpsecpoliciesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudIpsecpoliciesGet(pcloudIpsecpoliciesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudIpsecpoliciesGet(pcloudIpsecpoliciesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudIpsecpoliciesGet(pcloudIpsecpoliciesGetOptions *PcloudIpsecpoliciesGetOptions)`, func() {
		pcloudIpsecpoliciesGetPath := "/pcloud/v1/cloud-instances/testString/vpn/ipsec-policies/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIpsecpoliciesGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"authentication": "hmac-sha-256-128", "dhGroup": 2, "encryption": "aes-256-cbc", "id": "6edc8988-eb18-4b5c-a594-0d73d8254463", "keyLifetime": 28800, "name": "ipSecPolicy2", "pfs": true}`)
				}))
			})
			It(`Invoke PcloudIpsecpoliciesGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudIpsecpoliciesGetOptions model
				pcloudIpsecpoliciesGetOptionsModel := new(powervsv1.PcloudIpsecpoliciesGetOptions)
				pcloudIpsecpoliciesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIpsecpoliciesGetOptionsModel.IpsecPolicyID = core.StringPtr("testString")
				pcloudIpsecpoliciesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudIpsecpoliciesGetWithContext(ctx, pcloudIpsecpoliciesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudIpsecpoliciesGet(pcloudIpsecpoliciesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudIpsecpoliciesGetWithContext(ctx, pcloudIpsecpoliciesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIpsecpoliciesGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"authentication": "hmac-sha-256-128", "dhGroup": 2, "encryption": "aes-256-cbc", "id": "6edc8988-eb18-4b5c-a594-0d73d8254463", "keyLifetime": 28800, "name": "ipSecPolicy2", "pfs": true}`)
				}))
			})
			It(`Invoke PcloudIpsecpoliciesGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudIpsecpoliciesGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudIpsecpoliciesGetOptions model
				pcloudIpsecpoliciesGetOptionsModel := new(powervsv1.PcloudIpsecpoliciesGetOptions)
				pcloudIpsecpoliciesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIpsecpoliciesGetOptionsModel.IpsecPolicyID = core.StringPtr("testString")
				pcloudIpsecpoliciesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudIpsecpoliciesGet(pcloudIpsecpoliciesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudIpsecpoliciesGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudIpsecpoliciesGetOptions model
				pcloudIpsecpoliciesGetOptionsModel := new(powervsv1.PcloudIpsecpoliciesGetOptions)
				pcloudIpsecpoliciesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIpsecpoliciesGetOptionsModel.IpsecPolicyID = core.StringPtr("testString")
				pcloudIpsecpoliciesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudIpsecpoliciesGet(pcloudIpsecpoliciesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudIpsecpoliciesGetOptions model with no property values
				pcloudIpsecpoliciesGetOptionsModelNew := new(powervsv1.PcloudIpsecpoliciesGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudIpsecpoliciesGet(pcloudIpsecpoliciesGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudIpsecpoliciesGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudIpsecpoliciesGetOptions model
				pcloudIpsecpoliciesGetOptionsModel := new(powervsv1.PcloudIpsecpoliciesGetOptions)
				pcloudIpsecpoliciesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIpsecpoliciesGetOptionsModel.IpsecPolicyID = core.StringPtr("testString")
				pcloudIpsecpoliciesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudIpsecpoliciesGet(pcloudIpsecpoliciesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudIpsecpoliciesPut(pcloudIpsecpoliciesPutOptions *PcloudIpsecpoliciesPutOptions) - Operation response error`, func() {
		pcloudIpsecpoliciesPutPath := "/pcloud/v1/cloud-instances/testString/vpn/ipsec-policies/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIpsecpoliciesPutPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudIpsecpoliciesPut with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the IPSecPolicyUpdate model
				ipSecPolicyUpdateModel := new(powervsv1.IPSecPolicyUpdate)
				ipSecPolicyUpdateModel.Authentication = core.StringPtr("hmac-sha-256-128")
				ipSecPolicyUpdateModel.DhGroup = core.Int64Ptr(int64(2))
				ipSecPolicyUpdateModel.Encryption = core.StringPtr("aes-256-cbc")
				ipSecPolicyUpdateModel.KeyLifetime = core.Int64Ptr(int64(28800))
				ipSecPolicyUpdateModel.Name = core.StringPtr("ipSecPolicy2")
				ipSecPolicyUpdateModel.Pfs = core.BoolPtr(true)
				ipSecPolicyUpdateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the PcloudIpsecpoliciesPutOptions model
				pcloudIpsecpoliciesPutOptionsModel := new(powervsv1.PcloudIpsecpoliciesPutOptions)
				pcloudIpsecpoliciesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIpsecpoliciesPutOptionsModel.IpsecPolicyID = core.StringPtr("testString")
				pcloudIpsecpoliciesPutOptionsModel.Body = ipSecPolicyUpdateModel
				pcloudIpsecpoliciesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudIpsecpoliciesPut(pcloudIpsecpoliciesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudIpsecpoliciesPut(pcloudIpsecpoliciesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudIpsecpoliciesPut(pcloudIpsecpoliciesPutOptions *PcloudIpsecpoliciesPutOptions)`, func() {
		pcloudIpsecpoliciesPutPath := "/pcloud/v1/cloud-instances/testString/vpn/ipsec-policies/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIpsecpoliciesPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"authentication": "hmac-sha-256-128", "dhGroup": 2, "encryption": "aes-256-cbc", "id": "6edc8988-eb18-4b5c-a594-0d73d8254463", "keyLifetime": 28800, "name": "ipSecPolicy2", "pfs": true}`)
				}))
			})
			It(`Invoke PcloudIpsecpoliciesPut successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the IPSecPolicyUpdate model
				ipSecPolicyUpdateModel := new(powervsv1.IPSecPolicyUpdate)
				ipSecPolicyUpdateModel.Authentication = core.StringPtr("hmac-sha-256-128")
				ipSecPolicyUpdateModel.DhGroup = core.Int64Ptr(int64(2))
				ipSecPolicyUpdateModel.Encryption = core.StringPtr("aes-256-cbc")
				ipSecPolicyUpdateModel.KeyLifetime = core.Int64Ptr(int64(28800))
				ipSecPolicyUpdateModel.Name = core.StringPtr("ipSecPolicy2")
				ipSecPolicyUpdateModel.Pfs = core.BoolPtr(true)
				ipSecPolicyUpdateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the PcloudIpsecpoliciesPutOptions model
				pcloudIpsecpoliciesPutOptionsModel := new(powervsv1.PcloudIpsecpoliciesPutOptions)
				pcloudIpsecpoliciesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIpsecpoliciesPutOptionsModel.IpsecPolicyID = core.StringPtr("testString")
				pcloudIpsecpoliciesPutOptionsModel.Body = ipSecPolicyUpdateModel
				pcloudIpsecpoliciesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudIpsecpoliciesPutWithContext(ctx, pcloudIpsecpoliciesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudIpsecpoliciesPut(pcloudIpsecpoliciesPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudIpsecpoliciesPutWithContext(ctx, pcloudIpsecpoliciesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudIpsecpoliciesPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"authentication": "hmac-sha-256-128", "dhGroup": 2, "encryption": "aes-256-cbc", "id": "6edc8988-eb18-4b5c-a594-0d73d8254463", "keyLifetime": 28800, "name": "ipSecPolicy2", "pfs": true}`)
				}))
			})
			It(`Invoke PcloudIpsecpoliciesPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudIpsecpoliciesPut(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the IPSecPolicyUpdate model
				ipSecPolicyUpdateModel := new(powervsv1.IPSecPolicyUpdate)
				ipSecPolicyUpdateModel.Authentication = core.StringPtr("hmac-sha-256-128")
				ipSecPolicyUpdateModel.DhGroup = core.Int64Ptr(int64(2))
				ipSecPolicyUpdateModel.Encryption = core.StringPtr("aes-256-cbc")
				ipSecPolicyUpdateModel.KeyLifetime = core.Int64Ptr(int64(28800))
				ipSecPolicyUpdateModel.Name = core.StringPtr("ipSecPolicy2")
				ipSecPolicyUpdateModel.Pfs = core.BoolPtr(true)
				ipSecPolicyUpdateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the PcloudIpsecpoliciesPutOptions model
				pcloudIpsecpoliciesPutOptionsModel := new(powervsv1.PcloudIpsecpoliciesPutOptions)
				pcloudIpsecpoliciesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIpsecpoliciesPutOptionsModel.IpsecPolicyID = core.StringPtr("testString")
				pcloudIpsecpoliciesPutOptionsModel.Body = ipSecPolicyUpdateModel
				pcloudIpsecpoliciesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudIpsecpoliciesPut(pcloudIpsecpoliciesPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudIpsecpoliciesPut with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the IPSecPolicyUpdate model
				ipSecPolicyUpdateModel := new(powervsv1.IPSecPolicyUpdate)
				ipSecPolicyUpdateModel.Authentication = core.StringPtr("hmac-sha-256-128")
				ipSecPolicyUpdateModel.DhGroup = core.Int64Ptr(int64(2))
				ipSecPolicyUpdateModel.Encryption = core.StringPtr("aes-256-cbc")
				ipSecPolicyUpdateModel.KeyLifetime = core.Int64Ptr(int64(28800))
				ipSecPolicyUpdateModel.Name = core.StringPtr("ipSecPolicy2")
				ipSecPolicyUpdateModel.Pfs = core.BoolPtr(true)
				ipSecPolicyUpdateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the PcloudIpsecpoliciesPutOptions model
				pcloudIpsecpoliciesPutOptionsModel := new(powervsv1.PcloudIpsecpoliciesPutOptions)
				pcloudIpsecpoliciesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIpsecpoliciesPutOptionsModel.IpsecPolicyID = core.StringPtr("testString")
				pcloudIpsecpoliciesPutOptionsModel.Body = ipSecPolicyUpdateModel
				pcloudIpsecpoliciesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudIpsecpoliciesPut(pcloudIpsecpoliciesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudIpsecpoliciesPutOptions model with no property values
				pcloudIpsecpoliciesPutOptionsModelNew := new(powervsv1.PcloudIpsecpoliciesPutOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudIpsecpoliciesPut(pcloudIpsecpoliciesPutOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudIpsecpoliciesPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the IPSecPolicyUpdate model
				ipSecPolicyUpdateModel := new(powervsv1.IPSecPolicyUpdate)
				ipSecPolicyUpdateModel.Authentication = core.StringPtr("hmac-sha-256-128")
				ipSecPolicyUpdateModel.DhGroup = core.Int64Ptr(int64(2))
				ipSecPolicyUpdateModel.Encryption = core.StringPtr("aes-256-cbc")
				ipSecPolicyUpdateModel.KeyLifetime = core.Int64Ptr(int64(28800))
				ipSecPolicyUpdateModel.Name = core.StringPtr("ipSecPolicy2")
				ipSecPolicyUpdateModel.Pfs = core.BoolPtr(true)
				ipSecPolicyUpdateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the PcloudIpsecpoliciesPutOptions model
				pcloudIpsecpoliciesPutOptionsModel := new(powervsv1.PcloudIpsecpoliciesPutOptions)
				pcloudIpsecpoliciesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudIpsecpoliciesPutOptionsModel.IpsecPolicyID = core.StringPtr("testString")
				pcloudIpsecpoliciesPutOptionsModel.Body = ipSecPolicyUpdateModel
				pcloudIpsecpoliciesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudIpsecpoliciesPut(pcloudIpsecpoliciesPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVolumegroupsGetall(pcloudVolumegroupsGetallOptions *PcloudVolumegroupsGetallOptions) - Operation response error`, func() {
		pcloudVolumegroupsGetallPath := "/pcloud/v1/cloud-instances/testString/volume-groups"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsGetallPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudVolumegroupsGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumegroupsGetallOptions model
				pcloudVolumegroupsGetallOptionsModel := new(powervsv1.PcloudVolumegroupsGetallOptions)
				pcloudVolumegroupsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudVolumegroupsGetall(pcloudVolumegroupsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudVolumegroupsGetall(pcloudVolumegroupsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVolumegroupsGetall(pcloudVolumegroupsGetallOptions *PcloudVolumegroupsGetallOptions)`, func() {
		pcloudVolumegroupsGetallPath := "/pcloud/v1/cloud-instances/testString/volume-groups"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"volumeGroups": [{"consistencyGroupName": "ConsistencyGroupName", "id": "ID", "name": "Name", "replicationStatus": "ReplicationStatus", "status": "Status", "statusDescription": {"errors": [{"key": "Key", "message": "Message", "volIDs": ["VolIDs"]}]}}]}`)
				}))
			})
			It(`Invoke PcloudVolumegroupsGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudVolumegroupsGetallOptions model
				pcloudVolumegroupsGetallOptionsModel := new(powervsv1.PcloudVolumegroupsGetallOptions)
				pcloudVolumegroupsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudVolumegroupsGetallWithContext(ctx, pcloudVolumegroupsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudVolumegroupsGetall(pcloudVolumegroupsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudVolumegroupsGetallWithContext(ctx, pcloudVolumegroupsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"volumeGroups": [{"consistencyGroupName": "ConsistencyGroupName", "id": "ID", "name": "Name", "replicationStatus": "ReplicationStatus", "status": "Status", "statusDescription": {"errors": [{"key": "Key", "message": "Message", "volIDs": ["VolIDs"]}]}}]}`)
				}))
			})
			It(`Invoke PcloudVolumegroupsGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudVolumegroupsGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudVolumegroupsGetallOptions model
				pcloudVolumegroupsGetallOptionsModel := new(powervsv1.PcloudVolumegroupsGetallOptions)
				pcloudVolumegroupsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudVolumegroupsGetall(pcloudVolumegroupsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudVolumegroupsGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumegroupsGetallOptions model
				pcloudVolumegroupsGetallOptionsModel := new(powervsv1.PcloudVolumegroupsGetallOptions)
				pcloudVolumegroupsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudVolumegroupsGetall(pcloudVolumegroupsGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudVolumegroupsGetallOptions model with no property values
				pcloudVolumegroupsGetallOptionsModelNew := new(powervsv1.PcloudVolumegroupsGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudVolumegroupsGetall(pcloudVolumegroupsGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudVolumegroupsGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumegroupsGetallOptions model
				pcloudVolumegroupsGetallOptionsModel := new(powervsv1.PcloudVolumegroupsGetallOptions)
				pcloudVolumegroupsGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudVolumegroupsGetall(pcloudVolumegroupsGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVolumegroupsPost(pcloudVolumegroupsPostOptions *PcloudVolumegroupsPostOptions) - Operation response error`, func() {
		pcloudVolumegroupsPostPath := "/pcloud/v1/cloud-instances/testString/volume-groups"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudVolumegroupsPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumegroupsPostOptions model
				pcloudVolumegroupsPostOptionsModel := new(powervsv1.PcloudVolumegroupsPostOptions)
				pcloudVolumegroupsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsPostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudVolumegroupsPostOptionsModel.ConsistencyGroupName = core.StringPtr("testString")
				pcloudVolumegroupsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudVolumegroupsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudVolumegroupsPost(pcloudVolumegroupsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudVolumegroupsPost(pcloudVolumegroupsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVolumegroupsPost(pcloudVolumegroupsPostOptions *PcloudVolumegroupsPostOptions)`, func() {
		pcloudVolumegroupsPostPath := "/pcloud/v1/cloud-instances/testString/volume-groups"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"id": "ID", "name": "Name", "status": "Status", "statusDetail": "StatusDetail"}`)
				}))
			})
			It(`Invoke PcloudVolumegroupsPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudVolumegroupsPostOptions model
				pcloudVolumegroupsPostOptionsModel := new(powervsv1.PcloudVolumegroupsPostOptions)
				pcloudVolumegroupsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsPostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudVolumegroupsPostOptionsModel.ConsistencyGroupName = core.StringPtr("testString")
				pcloudVolumegroupsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudVolumegroupsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudVolumegroupsPostWithContext(ctx, pcloudVolumegroupsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudVolumegroupsPost(pcloudVolumegroupsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudVolumegroupsPostWithContext(ctx, pcloudVolumegroupsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"id": "ID", "name": "Name", "status": "Status", "statusDetail": "StatusDetail"}`)
				}))
			})
			It(`Invoke PcloudVolumegroupsPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudVolumegroupsPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudVolumegroupsPostOptions model
				pcloudVolumegroupsPostOptionsModel := new(powervsv1.PcloudVolumegroupsPostOptions)
				pcloudVolumegroupsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsPostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudVolumegroupsPostOptionsModel.ConsistencyGroupName = core.StringPtr("testString")
				pcloudVolumegroupsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudVolumegroupsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudVolumegroupsPost(pcloudVolumegroupsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudVolumegroupsPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumegroupsPostOptions model
				pcloudVolumegroupsPostOptionsModel := new(powervsv1.PcloudVolumegroupsPostOptions)
				pcloudVolumegroupsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsPostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudVolumegroupsPostOptionsModel.ConsistencyGroupName = core.StringPtr("testString")
				pcloudVolumegroupsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudVolumegroupsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudVolumegroupsPost(pcloudVolumegroupsPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudVolumegroupsPostOptions model with no property values
				pcloudVolumegroupsPostOptionsModelNew := new(powervsv1.PcloudVolumegroupsPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudVolumegroupsPost(pcloudVolumegroupsPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudVolumegroupsPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumegroupsPostOptions model
				pcloudVolumegroupsPostOptionsModel := new(powervsv1.PcloudVolumegroupsPostOptions)
				pcloudVolumegroupsPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsPostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudVolumegroupsPostOptionsModel.ConsistencyGroupName = core.StringPtr("testString")
				pcloudVolumegroupsPostOptionsModel.Name = core.StringPtr("testString")
				pcloudVolumegroupsPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudVolumegroupsPost(pcloudVolumegroupsPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVolumegroupsGetallDetails(pcloudVolumegroupsGetallDetailsOptions *PcloudVolumegroupsGetallDetailsOptions) - Operation response error`, func() {
		pcloudVolumegroupsGetallDetailsPath := "/pcloud/v1/cloud-instances/testString/volume-groups/details"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsGetallDetailsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudVolumegroupsGetallDetails with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumegroupsGetallDetailsOptions model
				pcloudVolumegroupsGetallDetailsOptionsModel := new(powervsv1.PcloudVolumegroupsGetallDetailsOptions)
				pcloudVolumegroupsGetallDetailsOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsGetallDetailsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudVolumegroupsGetallDetails(pcloudVolumegroupsGetallDetailsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudVolumegroupsGetallDetails(pcloudVolumegroupsGetallDetailsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVolumegroupsGetallDetails(pcloudVolumegroupsGetallDetailsOptions *PcloudVolumegroupsGetallDetailsOptions)`, func() {
		pcloudVolumegroupsGetallDetailsPath := "/pcloud/v1/cloud-instances/testString/volume-groups/details"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsGetallDetailsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"volumeGroups": [{"consistencyGroupName": "ConsistencyGroupName", "id": "ID", "name": "Name", "replicationStatus": "ReplicationStatus", "status": "Status", "statusDescription": {"errors": [{"key": "Key", "message": "Message", "volIDs": ["VolIDs"]}]}, "volumeIDs": ["VolumeIDs"]}]}`)
				}))
			})
			It(`Invoke PcloudVolumegroupsGetallDetails successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudVolumegroupsGetallDetailsOptions model
				pcloudVolumegroupsGetallDetailsOptionsModel := new(powervsv1.PcloudVolumegroupsGetallDetailsOptions)
				pcloudVolumegroupsGetallDetailsOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsGetallDetailsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudVolumegroupsGetallDetailsWithContext(ctx, pcloudVolumegroupsGetallDetailsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudVolumegroupsGetallDetails(pcloudVolumegroupsGetallDetailsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudVolumegroupsGetallDetailsWithContext(ctx, pcloudVolumegroupsGetallDetailsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsGetallDetailsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"volumeGroups": [{"consistencyGroupName": "ConsistencyGroupName", "id": "ID", "name": "Name", "replicationStatus": "ReplicationStatus", "status": "Status", "statusDescription": {"errors": [{"key": "Key", "message": "Message", "volIDs": ["VolIDs"]}]}, "volumeIDs": ["VolumeIDs"]}]}`)
				}))
			})
			It(`Invoke PcloudVolumegroupsGetallDetails successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudVolumegroupsGetallDetails(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudVolumegroupsGetallDetailsOptions model
				pcloudVolumegroupsGetallDetailsOptionsModel := new(powervsv1.PcloudVolumegroupsGetallDetailsOptions)
				pcloudVolumegroupsGetallDetailsOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsGetallDetailsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudVolumegroupsGetallDetails(pcloudVolumegroupsGetallDetailsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudVolumegroupsGetallDetails with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumegroupsGetallDetailsOptions model
				pcloudVolumegroupsGetallDetailsOptionsModel := new(powervsv1.PcloudVolumegroupsGetallDetailsOptions)
				pcloudVolumegroupsGetallDetailsOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsGetallDetailsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudVolumegroupsGetallDetails(pcloudVolumegroupsGetallDetailsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudVolumegroupsGetallDetailsOptions model with no property values
				pcloudVolumegroupsGetallDetailsOptionsModelNew := new(powervsv1.PcloudVolumegroupsGetallDetailsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudVolumegroupsGetallDetails(pcloudVolumegroupsGetallDetailsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudVolumegroupsGetallDetails successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumegroupsGetallDetailsOptions model
				pcloudVolumegroupsGetallDetailsOptionsModel := new(powervsv1.PcloudVolumegroupsGetallDetailsOptions)
				pcloudVolumegroupsGetallDetailsOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsGetallDetailsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudVolumegroupsGetallDetails(pcloudVolumegroupsGetallDetailsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVolumegroupsDelete(pcloudVolumegroupsDeleteOptions *PcloudVolumegroupsDeleteOptions) - Operation response error`, func() {
		pcloudVolumegroupsDeletePath := "/pcloud/v1/cloud-instances/testString/volume-groups/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudVolumegroupsDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumegroupsDeleteOptions model
				pcloudVolumegroupsDeleteOptionsModel := new(powervsv1.PcloudVolumegroupsDeleteOptions)
				pcloudVolumegroupsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsDeleteOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudVolumegroupsDelete(pcloudVolumegroupsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudVolumegroupsDelete(pcloudVolumegroupsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVolumegroupsDelete(pcloudVolumegroupsDeleteOptions *PcloudVolumegroupsDeleteOptions)`, func() {
		pcloudVolumegroupsDeletePath := "/pcloud/v1/cloud-instances/testString/volume-groups/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudVolumegroupsDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudVolumegroupsDeleteOptions model
				pcloudVolumegroupsDeleteOptionsModel := new(powervsv1.PcloudVolumegroupsDeleteOptions)
				pcloudVolumegroupsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsDeleteOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudVolumegroupsDeleteWithContext(ctx, pcloudVolumegroupsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudVolumegroupsDelete(pcloudVolumegroupsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudVolumegroupsDeleteWithContext(ctx, pcloudVolumegroupsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudVolumegroupsDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudVolumegroupsDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudVolumegroupsDeleteOptions model
				pcloudVolumegroupsDeleteOptionsModel := new(powervsv1.PcloudVolumegroupsDeleteOptions)
				pcloudVolumegroupsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsDeleteOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudVolumegroupsDelete(pcloudVolumegroupsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudVolumegroupsDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumegroupsDeleteOptions model
				pcloudVolumegroupsDeleteOptionsModel := new(powervsv1.PcloudVolumegroupsDeleteOptions)
				pcloudVolumegroupsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsDeleteOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudVolumegroupsDelete(pcloudVolumegroupsDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudVolumegroupsDeleteOptions model with no property values
				pcloudVolumegroupsDeleteOptionsModelNew := new(powervsv1.PcloudVolumegroupsDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudVolumegroupsDelete(pcloudVolumegroupsDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudVolumegroupsDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumegroupsDeleteOptions model
				pcloudVolumegroupsDeleteOptionsModel := new(powervsv1.PcloudVolumegroupsDeleteOptions)
				pcloudVolumegroupsDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsDeleteOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudVolumegroupsDelete(pcloudVolumegroupsDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVolumegroupsGet(pcloudVolumegroupsGetOptions *PcloudVolumegroupsGetOptions) - Operation response error`, func() {
		pcloudVolumegroupsGetPath := "/pcloud/v1/cloud-instances/testString/volume-groups/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudVolumegroupsGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumegroupsGetOptions model
				pcloudVolumegroupsGetOptionsModel := new(powervsv1.PcloudVolumegroupsGetOptions)
				pcloudVolumegroupsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsGetOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudVolumegroupsGet(pcloudVolumegroupsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudVolumegroupsGet(pcloudVolumegroupsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVolumegroupsGet(pcloudVolumegroupsGetOptions *PcloudVolumegroupsGetOptions)`, func() {
		pcloudVolumegroupsGetPath := "/pcloud/v1/cloud-instances/testString/volume-groups/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"consistencyGroupName": "ConsistencyGroupName", "id": "ID", "name": "Name", "replicationStatus": "ReplicationStatus", "status": "Status", "statusDescription": {"errors": [{"key": "Key", "message": "Message", "volIDs": ["VolIDs"]}]}}`)
				}))
			})
			It(`Invoke PcloudVolumegroupsGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudVolumegroupsGetOptions model
				pcloudVolumegroupsGetOptionsModel := new(powervsv1.PcloudVolumegroupsGetOptions)
				pcloudVolumegroupsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsGetOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudVolumegroupsGetWithContext(ctx, pcloudVolumegroupsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudVolumegroupsGet(pcloudVolumegroupsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudVolumegroupsGetWithContext(ctx, pcloudVolumegroupsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"consistencyGroupName": "ConsistencyGroupName", "id": "ID", "name": "Name", "replicationStatus": "ReplicationStatus", "status": "Status", "statusDescription": {"errors": [{"key": "Key", "message": "Message", "volIDs": ["VolIDs"]}]}}`)
				}))
			})
			It(`Invoke PcloudVolumegroupsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudVolumegroupsGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudVolumegroupsGetOptions model
				pcloudVolumegroupsGetOptionsModel := new(powervsv1.PcloudVolumegroupsGetOptions)
				pcloudVolumegroupsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsGetOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudVolumegroupsGet(pcloudVolumegroupsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudVolumegroupsGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumegroupsGetOptions model
				pcloudVolumegroupsGetOptionsModel := new(powervsv1.PcloudVolumegroupsGetOptions)
				pcloudVolumegroupsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsGetOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudVolumegroupsGet(pcloudVolumegroupsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudVolumegroupsGetOptions model with no property values
				pcloudVolumegroupsGetOptionsModelNew := new(powervsv1.PcloudVolumegroupsGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudVolumegroupsGet(pcloudVolumegroupsGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudVolumegroupsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumegroupsGetOptions model
				pcloudVolumegroupsGetOptionsModel := new(powervsv1.PcloudVolumegroupsGetOptions)
				pcloudVolumegroupsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsGetOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudVolumegroupsGet(pcloudVolumegroupsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVolumegroupsPut(pcloudVolumegroupsPutOptions *PcloudVolumegroupsPutOptions) - Operation response error`, func() {
		pcloudVolumegroupsPutPath := "/pcloud/v1/cloud-instances/testString/volume-groups/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsPutPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudVolumegroupsPut with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumegroupsPutOptions model
				pcloudVolumegroupsPutOptionsModel := new(powervsv1.PcloudVolumegroupsPutOptions)
				pcloudVolumegroupsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsPutOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsPutOptionsModel.AddVolumes = []string{"testString"}
				pcloudVolumegroupsPutOptionsModel.RemoveVolumes = []string{"testString"}
				pcloudVolumegroupsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudVolumegroupsPut(pcloudVolumegroupsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudVolumegroupsPut(pcloudVolumegroupsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVolumegroupsPut(pcloudVolumegroupsPutOptions *PcloudVolumegroupsPutOptions)`, func() {
		pcloudVolumegroupsPutPath := "/pcloud/v1/cloud-instances/testString/volume-groups/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudVolumegroupsPut successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudVolumegroupsPutOptions model
				pcloudVolumegroupsPutOptionsModel := new(powervsv1.PcloudVolumegroupsPutOptions)
				pcloudVolumegroupsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsPutOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsPutOptionsModel.AddVolumes = []string{"testString"}
				pcloudVolumegroupsPutOptionsModel.RemoveVolumes = []string{"testString"}
				pcloudVolumegroupsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudVolumegroupsPutWithContext(ctx, pcloudVolumegroupsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudVolumegroupsPut(pcloudVolumegroupsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudVolumegroupsPutWithContext(ctx, pcloudVolumegroupsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudVolumegroupsPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudVolumegroupsPut(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudVolumegroupsPutOptions model
				pcloudVolumegroupsPutOptionsModel := new(powervsv1.PcloudVolumegroupsPutOptions)
				pcloudVolumegroupsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsPutOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsPutOptionsModel.AddVolumes = []string{"testString"}
				pcloudVolumegroupsPutOptionsModel.RemoveVolumes = []string{"testString"}
				pcloudVolumegroupsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudVolumegroupsPut(pcloudVolumegroupsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudVolumegroupsPut with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumegroupsPutOptions model
				pcloudVolumegroupsPutOptionsModel := new(powervsv1.PcloudVolumegroupsPutOptions)
				pcloudVolumegroupsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsPutOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsPutOptionsModel.AddVolumes = []string{"testString"}
				pcloudVolumegroupsPutOptionsModel.RemoveVolumes = []string{"testString"}
				pcloudVolumegroupsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudVolumegroupsPut(pcloudVolumegroupsPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudVolumegroupsPutOptions model with no property values
				pcloudVolumegroupsPutOptionsModelNew := new(powervsv1.PcloudVolumegroupsPutOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudVolumegroupsPut(pcloudVolumegroupsPutOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudVolumegroupsPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumegroupsPutOptions model
				pcloudVolumegroupsPutOptionsModel := new(powervsv1.PcloudVolumegroupsPutOptions)
				pcloudVolumegroupsPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsPutOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsPutOptionsModel.AddVolumes = []string{"testString"}
				pcloudVolumegroupsPutOptionsModel.RemoveVolumes = []string{"testString"}
				pcloudVolumegroupsPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudVolumegroupsPut(pcloudVolumegroupsPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVolumegroupsActionPost(pcloudVolumegroupsActionPostOptions *PcloudVolumegroupsActionPostOptions) - Operation response error`, func() {
		pcloudVolumegroupsActionPostPath := "/pcloud/v1/cloud-instances/testString/volume-groups/testString/action"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsActionPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudVolumegroupsActionPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the VolumeGroupActionReset model
				volumeGroupActionResetModel := new(powervsv1.VolumeGroupActionReset)
				volumeGroupActionResetModel.Status = core.StringPtr("available")

				// Construct an instance of the VolumeGroupActionStart model
				volumeGroupActionStartModel := new(powervsv1.VolumeGroupActionStart)
				volumeGroupActionStartModel.Source = core.StringPtr("master")

				// Construct an instance of the VolumeGroupActionStop model
				volumeGroupActionStopModel := new(powervsv1.VolumeGroupActionStop)
				volumeGroupActionStopModel.Access = core.BoolPtr(true)

				// Construct an instance of the VolumeGroupAction model
				volumeGroupActionModel := new(powervsv1.VolumeGroupAction)
				volumeGroupActionModel.Reset = volumeGroupActionResetModel
				volumeGroupActionModel.Start = volumeGroupActionStartModel
				volumeGroupActionModel.Stop = volumeGroupActionStopModel
				volumeGroupActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the PcloudVolumegroupsActionPostOptions model
				pcloudVolumegroupsActionPostOptionsModel := new(powervsv1.PcloudVolumegroupsActionPostOptions)
				pcloudVolumegroupsActionPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsActionPostOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsActionPostOptionsModel.Body = volumeGroupActionModel
				pcloudVolumegroupsActionPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudVolumegroupsActionPost(pcloudVolumegroupsActionPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudVolumegroupsActionPost(pcloudVolumegroupsActionPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVolumegroupsActionPost(pcloudVolumegroupsActionPostOptions *PcloudVolumegroupsActionPostOptions)`, func() {
		pcloudVolumegroupsActionPostPath := "/pcloud/v1/cloud-instances/testString/volume-groups/testString/action"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsActionPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudVolumegroupsActionPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the VolumeGroupActionReset model
				volumeGroupActionResetModel := new(powervsv1.VolumeGroupActionReset)
				volumeGroupActionResetModel.Status = core.StringPtr("available")

				// Construct an instance of the VolumeGroupActionStart model
				volumeGroupActionStartModel := new(powervsv1.VolumeGroupActionStart)
				volumeGroupActionStartModel.Source = core.StringPtr("master")

				// Construct an instance of the VolumeGroupActionStop model
				volumeGroupActionStopModel := new(powervsv1.VolumeGroupActionStop)
				volumeGroupActionStopModel.Access = core.BoolPtr(true)

				// Construct an instance of the VolumeGroupAction model
				volumeGroupActionModel := new(powervsv1.VolumeGroupAction)
				volumeGroupActionModel.Reset = volumeGroupActionResetModel
				volumeGroupActionModel.Start = volumeGroupActionStartModel
				volumeGroupActionModel.Stop = volumeGroupActionStopModel
				volumeGroupActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the PcloudVolumegroupsActionPostOptions model
				pcloudVolumegroupsActionPostOptionsModel := new(powervsv1.PcloudVolumegroupsActionPostOptions)
				pcloudVolumegroupsActionPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsActionPostOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsActionPostOptionsModel.Body = volumeGroupActionModel
				pcloudVolumegroupsActionPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudVolumegroupsActionPostWithContext(ctx, pcloudVolumegroupsActionPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudVolumegroupsActionPost(pcloudVolumegroupsActionPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudVolumegroupsActionPostWithContext(ctx, pcloudVolumegroupsActionPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsActionPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudVolumegroupsActionPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudVolumegroupsActionPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VolumeGroupActionReset model
				volumeGroupActionResetModel := new(powervsv1.VolumeGroupActionReset)
				volumeGroupActionResetModel.Status = core.StringPtr("available")

				// Construct an instance of the VolumeGroupActionStart model
				volumeGroupActionStartModel := new(powervsv1.VolumeGroupActionStart)
				volumeGroupActionStartModel.Source = core.StringPtr("master")

				// Construct an instance of the VolumeGroupActionStop model
				volumeGroupActionStopModel := new(powervsv1.VolumeGroupActionStop)
				volumeGroupActionStopModel.Access = core.BoolPtr(true)

				// Construct an instance of the VolumeGroupAction model
				volumeGroupActionModel := new(powervsv1.VolumeGroupAction)
				volumeGroupActionModel.Reset = volumeGroupActionResetModel
				volumeGroupActionModel.Start = volumeGroupActionStartModel
				volumeGroupActionModel.Stop = volumeGroupActionStopModel
				volumeGroupActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the PcloudVolumegroupsActionPostOptions model
				pcloudVolumegroupsActionPostOptionsModel := new(powervsv1.PcloudVolumegroupsActionPostOptions)
				pcloudVolumegroupsActionPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsActionPostOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsActionPostOptionsModel.Body = volumeGroupActionModel
				pcloudVolumegroupsActionPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudVolumegroupsActionPost(pcloudVolumegroupsActionPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudVolumegroupsActionPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the VolumeGroupActionReset model
				volumeGroupActionResetModel := new(powervsv1.VolumeGroupActionReset)
				volumeGroupActionResetModel.Status = core.StringPtr("available")

				// Construct an instance of the VolumeGroupActionStart model
				volumeGroupActionStartModel := new(powervsv1.VolumeGroupActionStart)
				volumeGroupActionStartModel.Source = core.StringPtr("master")

				// Construct an instance of the VolumeGroupActionStop model
				volumeGroupActionStopModel := new(powervsv1.VolumeGroupActionStop)
				volumeGroupActionStopModel.Access = core.BoolPtr(true)

				// Construct an instance of the VolumeGroupAction model
				volumeGroupActionModel := new(powervsv1.VolumeGroupAction)
				volumeGroupActionModel.Reset = volumeGroupActionResetModel
				volumeGroupActionModel.Start = volumeGroupActionStartModel
				volumeGroupActionModel.Stop = volumeGroupActionStopModel
				volumeGroupActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the PcloudVolumegroupsActionPostOptions model
				pcloudVolumegroupsActionPostOptionsModel := new(powervsv1.PcloudVolumegroupsActionPostOptions)
				pcloudVolumegroupsActionPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsActionPostOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsActionPostOptionsModel.Body = volumeGroupActionModel
				pcloudVolumegroupsActionPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudVolumegroupsActionPost(pcloudVolumegroupsActionPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudVolumegroupsActionPostOptions model with no property values
				pcloudVolumegroupsActionPostOptionsModelNew := new(powervsv1.PcloudVolumegroupsActionPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudVolumegroupsActionPost(pcloudVolumegroupsActionPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudVolumegroupsActionPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the VolumeGroupActionReset model
				volumeGroupActionResetModel := new(powervsv1.VolumeGroupActionReset)
				volumeGroupActionResetModel.Status = core.StringPtr("available")

				// Construct an instance of the VolumeGroupActionStart model
				volumeGroupActionStartModel := new(powervsv1.VolumeGroupActionStart)
				volumeGroupActionStartModel.Source = core.StringPtr("master")

				// Construct an instance of the VolumeGroupActionStop model
				volumeGroupActionStopModel := new(powervsv1.VolumeGroupActionStop)
				volumeGroupActionStopModel.Access = core.BoolPtr(true)

				// Construct an instance of the VolumeGroupAction model
				volumeGroupActionModel := new(powervsv1.VolumeGroupAction)
				volumeGroupActionModel.Reset = volumeGroupActionResetModel
				volumeGroupActionModel.Start = volumeGroupActionStartModel
				volumeGroupActionModel.Stop = volumeGroupActionStopModel
				volumeGroupActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the PcloudVolumegroupsActionPostOptions model
				pcloudVolumegroupsActionPostOptionsModel := new(powervsv1.PcloudVolumegroupsActionPostOptions)
				pcloudVolumegroupsActionPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsActionPostOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsActionPostOptionsModel.Body = volumeGroupActionModel
				pcloudVolumegroupsActionPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudVolumegroupsActionPost(pcloudVolumegroupsActionPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVolumegroupsGetDetails(pcloudVolumegroupsGetDetailsOptions *PcloudVolumegroupsGetDetailsOptions) - Operation response error`, func() {
		pcloudVolumegroupsGetDetailsPath := "/pcloud/v1/cloud-instances/testString/volume-groups/testString/details"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsGetDetailsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudVolumegroupsGetDetails with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumegroupsGetDetailsOptions model
				pcloudVolumegroupsGetDetailsOptionsModel := new(powervsv1.PcloudVolumegroupsGetDetailsOptions)
				pcloudVolumegroupsGetDetailsOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsGetDetailsOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsGetDetailsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudVolumegroupsGetDetails(pcloudVolumegroupsGetDetailsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudVolumegroupsGetDetails(pcloudVolumegroupsGetDetailsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVolumegroupsGetDetails(pcloudVolumegroupsGetDetailsOptions *PcloudVolumegroupsGetDetailsOptions)`, func() {
		pcloudVolumegroupsGetDetailsPath := "/pcloud/v1/cloud-instances/testString/volume-groups/testString/details"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsGetDetailsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"consistencyGroupName": "ConsistencyGroupName", "id": "ID", "name": "Name", "replicationStatus": "ReplicationStatus", "status": "Status", "statusDescription": {"errors": [{"key": "Key", "message": "Message", "volIDs": ["VolIDs"]}]}, "volumeIDs": ["VolumeIDs"]}`)
				}))
			})
			It(`Invoke PcloudVolumegroupsGetDetails successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudVolumegroupsGetDetailsOptions model
				pcloudVolumegroupsGetDetailsOptionsModel := new(powervsv1.PcloudVolumegroupsGetDetailsOptions)
				pcloudVolumegroupsGetDetailsOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsGetDetailsOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsGetDetailsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudVolumegroupsGetDetailsWithContext(ctx, pcloudVolumegroupsGetDetailsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudVolumegroupsGetDetails(pcloudVolumegroupsGetDetailsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudVolumegroupsGetDetailsWithContext(ctx, pcloudVolumegroupsGetDetailsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsGetDetailsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"consistencyGroupName": "ConsistencyGroupName", "id": "ID", "name": "Name", "replicationStatus": "ReplicationStatus", "status": "Status", "statusDescription": {"errors": [{"key": "Key", "message": "Message", "volIDs": ["VolIDs"]}]}, "volumeIDs": ["VolumeIDs"]}`)
				}))
			})
			It(`Invoke PcloudVolumegroupsGetDetails successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudVolumegroupsGetDetails(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudVolumegroupsGetDetailsOptions model
				pcloudVolumegroupsGetDetailsOptionsModel := new(powervsv1.PcloudVolumegroupsGetDetailsOptions)
				pcloudVolumegroupsGetDetailsOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsGetDetailsOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsGetDetailsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudVolumegroupsGetDetails(pcloudVolumegroupsGetDetailsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudVolumegroupsGetDetails with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumegroupsGetDetailsOptions model
				pcloudVolumegroupsGetDetailsOptionsModel := new(powervsv1.PcloudVolumegroupsGetDetailsOptions)
				pcloudVolumegroupsGetDetailsOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsGetDetailsOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsGetDetailsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudVolumegroupsGetDetails(pcloudVolumegroupsGetDetailsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudVolumegroupsGetDetailsOptions model with no property values
				pcloudVolumegroupsGetDetailsOptionsModelNew := new(powervsv1.PcloudVolumegroupsGetDetailsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudVolumegroupsGetDetails(pcloudVolumegroupsGetDetailsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudVolumegroupsGetDetails successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumegroupsGetDetailsOptions model
				pcloudVolumegroupsGetDetailsOptionsModel := new(powervsv1.PcloudVolumegroupsGetDetailsOptions)
				pcloudVolumegroupsGetDetailsOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsGetDetailsOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsGetDetailsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudVolumegroupsGetDetails(pcloudVolumegroupsGetDetailsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVolumegroupsRemoteCopyRelationshipsGet(pcloudVolumegroupsRemoteCopyRelationshipsGetOptions *PcloudVolumegroupsRemoteCopyRelationshipsGetOptions) - Operation response error`, func() {
		pcloudVolumegroupsRemoteCopyRelationshipsGetPath := "/pcloud/v1/cloud-instances/testString/volume-groups/testString/remote-copy-relationships"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsRemoteCopyRelationshipsGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudVolumegroupsRemoteCopyRelationshipsGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumegroupsRemoteCopyRelationshipsGetOptions model
				pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel := new(powervsv1.PcloudVolumegroupsRemoteCopyRelationshipsGetOptions)
				pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudVolumegroupsRemoteCopyRelationshipsGet(pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudVolumegroupsRemoteCopyRelationshipsGet(pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVolumegroupsRemoteCopyRelationshipsGet(pcloudVolumegroupsRemoteCopyRelationshipsGetOptions *PcloudVolumegroupsRemoteCopyRelationshipsGetOptions)`, func() {
		pcloudVolumegroupsRemoteCopyRelationshipsGetPath := "/pcloud/v1/cloud-instances/testString/volume-groups/testString/remote-copy-relationships"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsRemoteCopyRelationshipsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "remoteCopyRelationships": [{"auxChangedVolumeName": "AuxChangedVolumeName", "auxVolumeName": "AuxVolumeName", "consistencyGroupName": "ConsistencyGroupName", "copyType": "CopyType", "cyclingMode": "CyclingMode", "freezeTime": "2019-01-01T12:00:00.000Z", "masterChangedVolumeName": "MasterChangedVolumeName", "masterVolumeName": "MasterVolumeName", "name": "Name", "primaryRole": "PrimaryRole", "progress": 8, "remoteCopyID": "RemoteCopyID", "state": "State", "sync": "Sync"}]}`)
				}))
			})
			It(`Invoke PcloudVolumegroupsRemoteCopyRelationshipsGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudVolumegroupsRemoteCopyRelationshipsGetOptions model
				pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel := new(powervsv1.PcloudVolumegroupsRemoteCopyRelationshipsGetOptions)
				pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudVolumegroupsRemoteCopyRelationshipsGetWithContext(ctx, pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudVolumegroupsRemoteCopyRelationshipsGet(pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudVolumegroupsRemoteCopyRelationshipsGetWithContext(ctx, pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsRemoteCopyRelationshipsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "remoteCopyRelationships": [{"auxChangedVolumeName": "AuxChangedVolumeName", "auxVolumeName": "AuxVolumeName", "consistencyGroupName": "ConsistencyGroupName", "copyType": "CopyType", "cyclingMode": "CyclingMode", "freezeTime": "2019-01-01T12:00:00.000Z", "masterChangedVolumeName": "MasterChangedVolumeName", "masterVolumeName": "MasterVolumeName", "name": "Name", "primaryRole": "PrimaryRole", "progress": 8, "remoteCopyID": "RemoteCopyID", "state": "State", "sync": "Sync"}]}`)
				}))
			})
			It(`Invoke PcloudVolumegroupsRemoteCopyRelationshipsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudVolumegroupsRemoteCopyRelationshipsGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudVolumegroupsRemoteCopyRelationshipsGetOptions model
				pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel := new(powervsv1.PcloudVolumegroupsRemoteCopyRelationshipsGetOptions)
				pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudVolumegroupsRemoteCopyRelationshipsGet(pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudVolumegroupsRemoteCopyRelationshipsGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumegroupsRemoteCopyRelationshipsGetOptions model
				pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel := new(powervsv1.PcloudVolumegroupsRemoteCopyRelationshipsGetOptions)
				pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudVolumegroupsRemoteCopyRelationshipsGet(pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudVolumegroupsRemoteCopyRelationshipsGetOptions model with no property values
				pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModelNew := new(powervsv1.PcloudVolumegroupsRemoteCopyRelationshipsGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudVolumegroupsRemoteCopyRelationshipsGet(pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudVolumegroupsRemoteCopyRelationshipsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumegroupsRemoteCopyRelationshipsGetOptions model
				pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel := new(powervsv1.PcloudVolumegroupsRemoteCopyRelationshipsGetOptions)
				pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudVolumegroupsRemoteCopyRelationshipsGet(pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVolumegroupsStorageDetailsGet(pcloudVolumegroupsStorageDetailsGetOptions *PcloudVolumegroupsStorageDetailsGetOptions) - Operation response error`, func() {
		pcloudVolumegroupsStorageDetailsGetPath := "/pcloud/v1/cloud-instances/testString/volume-groups/testString/storage-details"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsStorageDetailsGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudVolumegroupsStorageDetailsGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumegroupsStorageDetailsGetOptions model
				pcloudVolumegroupsStorageDetailsGetOptionsModel := new(powervsv1.PcloudVolumegroupsStorageDetailsGetOptions)
				pcloudVolumegroupsStorageDetailsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsStorageDetailsGetOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsStorageDetailsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudVolumegroupsStorageDetailsGet(pcloudVolumegroupsStorageDetailsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudVolumegroupsStorageDetailsGet(pcloudVolumegroupsStorageDetailsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVolumegroupsStorageDetailsGet(pcloudVolumegroupsStorageDetailsGetOptions *PcloudVolumegroupsStorageDetailsGetOptions)`, func() {
		pcloudVolumegroupsStorageDetailsGetPath := "/pcloud/v1/cloud-instances/testString/volume-groups/testString/storage-details"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsStorageDetailsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"consistencyGroupName": "ConsistencyGroupName", "cyclePeriodSeconds": 18, "cyclingMode": "CyclingMode", "numOfvols": 9, "primaryRole": "PrimaryRole", "remoteCopyRelationshipNames": ["RemoteCopyRelationshipNames"], "replicationType": "ReplicationType", "state": "State", "sync": "Sync"}`)
				}))
			})
			It(`Invoke PcloudVolumegroupsStorageDetailsGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudVolumegroupsStorageDetailsGetOptions model
				pcloudVolumegroupsStorageDetailsGetOptionsModel := new(powervsv1.PcloudVolumegroupsStorageDetailsGetOptions)
				pcloudVolumegroupsStorageDetailsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsStorageDetailsGetOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsStorageDetailsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudVolumegroupsStorageDetailsGetWithContext(ctx, pcloudVolumegroupsStorageDetailsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudVolumegroupsStorageDetailsGet(pcloudVolumegroupsStorageDetailsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudVolumegroupsStorageDetailsGetWithContext(ctx, pcloudVolumegroupsStorageDetailsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumegroupsStorageDetailsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"consistencyGroupName": "ConsistencyGroupName", "cyclePeriodSeconds": 18, "cyclingMode": "CyclingMode", "numOfvols": 9, "primaryRole": "PrimaryRole", "remoteCopyRelationshipNames": ["RemoteCopyRelationshipNames"], "replicationType": "ReplicationType", "state": "State", "sync": "Sync"}`)
				}))
			})
			It(`Invoke PcloudVolumegroupsStorageDetailsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudVolumegroupsStorageDetailsGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudVolumegroupsStorageDetailsGetOptions model
				pcloudVolumegroupsStorageDetailsGetOptionsModel := new(powervsv1.PcloudVolumegroupsStorageDetailsGetOptions)
				pcloudVolumegroupsStorageDetailsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsStorageDetailsGetOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsStorageDetailsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudVolumegroupsStorageDetailsGet(pcloudVolumegroupsStorageDetailsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudVolumegroupsStorageDetailsGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumegroupsStorageDetailsGetOptions model
				pcloudVolumegroupsStorageDetailsGetOptionsModel := new(powervsv1.PcloudVolumegroupsStorageDetailsGetOptions)
				pcloudVolumegroupsStorageDetailsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsStorageDetailsGetOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsStorageDetailsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudVolumegroupsStorageDetailsGet(pcloudVolumegroupsStorageDetailsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudVolumegroupsStorageDetailsGetOptions model with no property values
				pcloudVolumegroupsStorageDetailsGetOptionsModelNew := new(powervsv1.PcloudVolumegroupsStorageDetailsGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudVolumegroupsStorageDetailsGet(pcloudVolumegroupsStorageDetailsGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudVolumegroupsStorageDetailsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumegroupsStorageDetailsGetOptions model
				pcloudVolumegroupsStorageDetailsGetOptionsModel := new(powervsv1.PcloudVolumegroupsStorageDetailsGetOptions)
				pcloudVolumegroupsStorageDetailsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumegroupsStorageDetailsGetOptionsModel.VolumeGroupID = core.StringPtr("testString")
				pcloudVolumegroupsStorageDetailsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudVolumegroupsStorageDetailsGet(pcloudVolumegroupsStorageDetailsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVolumeOnboardingGetall(pcloudVolumeOnboardingGetallOptions *PcloudVolumeOnboardingGetallOptions) - Operation response error`, func() {
		pcloudVolumeOnboardingGetallPath := "/pcloud/v1/cloud-instances/testString/volumes/onboarding"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumeOnboardingGetallPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudVolumeOnboardingGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumeOnboardingGetallOptions model
				pcloudVolumeOnboardingGetallOptionsModel := new(powervsv1.PcloudVolumeOnboardingGetallOptions)
				pcloudVolumeOnboardingGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumeOnboardingGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudVolumeOnboardingGetall(pcloudVolumeOnboardingGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudVolumeOnboardingGetall(pcloudVolumeOnboardingGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVolumeOnboardingGetall(pcloudVolumeOnboardingGetallOptions *PcloudVolumeOnboardingGetallOptions)`, func() {
		pcloudVolumeOnboardingGetallPath := "/pcloud/v1/cloud-instances/testString/volumes/onboarding"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumeOnboardingGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"onboardings": [{"description": "Description", "id": "ID", "inputVolumes": ["InputVolumes"], "status": "Status"}]}`)
				}))
			})
			It(`Invoke PcloudVolumeOnboardingGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudVolumeOnboardingGetallOptions model
				pcloudVolumeOnboardingGetallOptionsModel := new(powervsv1.PcloudVolumeOnboardingGetallOptions)
				pcloudVolumeOnboardingGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumeOnboardingGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudVolumeOnboardingGetallWithContext(ctx, pcloudVolumeOnboardingGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudVolumeOnboardingGetall(pcloudVolumeOnboardingGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudVolumeOnboardingGetallWithContext(ctx, pcloudVolumeOnboardingGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumeOnboardingGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"onboardings": [{"description": "Description", "id": "ID", "inputVolumes": ["InputVolumes"], "status": "Status"}]}`)
				}))
			})
			It(`Invoke PcloudVolumeOnboardingGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudVolumeOnboardingGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudVolumeOnboardingGetallOptions model
				pcloudVolumeOnboardingGetallOptionsModel := new(powervsv1.PcloudVolumeOnboardingGetallOptions)
				pcloudVolumeOnboardingGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumeOnboardingGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudVolumeOnboardingGetall(pcloudVolumeOnboardingGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudVolumeOnboardingGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumeOnboardingGetallOptions model
				pcloudVolumeOnboardingGetallOptionsModel := new(powervsv1.PcloudVolumeOnboardingGetallOptions)
				pcloudVolumeOnboardingGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumeOnboardingGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudVolumeOnboardingGetall(pcloudVolumeOnboardingGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudVolumeOnboardingGetallOptions model with no property values
				pcloudVolumeOnboardingGetallOptionsModelNew := new(powervsv1.PcloudVolumeOnboardingGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudVolumeOnboardingGetall(pcloudVolumeOnboardingGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudVolumeOnboardingGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumeOnboardingGetallOptions model
				pcloudVolumeOnboardingGetallOptionsModel := new(powervsv1.PcloudVolumeOnboardingGetallOptions)
				pcloudVolumeOnboardingGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumeOnboardingGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudVolumeOnboardingGetall(pcloudVolumeOnboardingGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVolumeOnboardingPost(pcloudVolumeOnboardingPostOptions *PcloudVolumeOnboardingPostOptions) - Operation response error`, func() {
		pcloudVolumeOnboardingPostPath := "/pcloud/v1/cloud-instances/testString/volumes/onboarding"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumeOnboardingPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudVolumeOnboardingPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the AuxiliaryVolumeForOnboarding model
				auxiliaryVolumeForOnboardingModel := new(powervsv1.AuxiliaryVolumeForOnboarding)
				auxiliaryVolumeForOnboardingModel.AuxVolumeName = core.StringPtr("testString")
				auxiliaryVolumeForOnboardingModel.Name = core.StringPtr("testString")

				// Construct an instance of the AuxiliaryVolumesForOnboarding model
				auxiliaryVolumesForOnboardingModel := new(powervsv1.AuxiliaryVolumesForOnboarding)
				auxiliaryVolumesForOnboardingModel.AuxiliaryVolumes = []powervsv1.AuxiliaryVolumeForOnboarding{*auxiliaryVolumeForOnboardingModel}
				auxiliaryVolumesForOnboardingModel.SourceCRN = core.StringPtr("testString")

				// Construct an instance of the PcloudVolumeOnboardingPostOptions model
				pcloudVolumeOnboardingPostOptionsModel := new(powervsv1.PcloudVolumeOnboardingPostOptions)
				pcloudVolumeOnboardingPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumeOnboardingPostOptionsModel.Volumes = []powervsv1.AuxiliaryVolumesForOnboarding{*auxiliaryVolumesForOnboardingModel}
				pcloudVolumeOnboardingPostOptionsModel.Description = core.StringPtr("testString")
				pcloudVolumeOnboardingPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudVolumeOnboardingPost(pcloudVolumeOnboardingPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudVolumeOnboardingPost(pcloudVolumeOnboardingPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVolumeOnboardingPost(pcloudVolumeOnboardingPostOptions *PcloudVolumeOnboardingPostOptions)`, func() {
		pcloudVolumeOnboardingPostPath := "/pcloud/v1/cloud-instances/testString/volumes/onboarding"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumeOnboardingPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"description": "Description", "id": "ID"}`)
				}))
			})
			It(`Invoke PcloudVolumeOnboardingPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the AuxiliaryVolumeForOnboarding model
				auxiliaryVolumeForOnboardingModel := new(powervsv1.AuxiliaryVolumeForOnboarding)
				auxiliaryVolumeForOnboardingModel.AuxVolumeName = core.StringPtr("testString")
				auxiliaryVolumeForOnboardingModel.Name = core.StringPtr("testString")

				// Construct an instance of the AuxiliaryVolumesForOnboarding model
				auxiliaryVolumesForOnboardingModel := new(powervsv1.AuxiliaryVolumesForOnboarding)
				auxiliaryVolumesForOnboardingModel.AuxiliaryVolumes = []powervsv1.AuxiliaryVolumeForOnboarding{*auxiliaryVolumeForOnboardingModel}
				auxiliaryVolumesForOnboardingModel.SourceCRN = core.StringPtr("testString")

				// Construct an instance of the PcloudVolumeOnboardingPostOptions model
				pcloudVolumeOnboardingPostOptionsModel := new(powervsv1.PcloudVolumeOnboardingPostOptions)
				pcloudVolumeOnboardingPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumeOnboardingPostOptionsModel.Volumes = []powervsv1.AuxiliaryVolumesForOnboarding{*auxiliaryVolumesForOnboardingModel}
				pcloudVolumeOnboardingPostOptionsModel.Description = core.StringPtr("testString")
				pcloudVolumeOnboardingPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudVolumeOnboardingPostWithContext(ctx, pcloudVolumeOnboardingPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudVolumeOnboardingPost(pcloudVolumeOnboardingPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudVolumeOnboardingPostWithContext(ctx, pcloudVolumeOnboardingPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumeOnboardingPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"description": "Description", "id": "ID"}`)
				}))
			})
			It(`Invoke PcloudVolumeOnboardingPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudVolumeOnboardingPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the AuxiliaryVolumeForOnboarding model
				auxiliaryVolumeForOnboardingModel := new(powervsv1.AuxiliaryVolumeForOnboarding)
				auxiliaryVolumeForOnboardingModel.AuxVolumeName = core.StringPtr("testString")
				auxiliaryVolumeForOnboardingModel.Name = core.StringPtr("testString")

				// Construct an instance of the AuxiliaryVolumesForOnboarding model
				auxiliaryVolumesForOnboardingModel := new(powervsv1.AuxiliaryVolumesForOnboarding)
				auxiliaryVolumesForOnboardingModel.AuxiliaryVolumes = []powervsv1.AuxiliaryVolumeForOnboarding{*auxiliaryVolumeForOnboardingModel}
				auxiliaryVolumesForOnboardingModel.SourceCRN = core.StringPtr("testString")

				// Construct an instance of the PcloudVolumeOnboardingPostOptions model
				pcloudVolumeOnboardingPostOptionsModel := new(powervsv1.PcloudVolumeOnboardingPostOptions)
				pcloudVolumeOnboardingPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumeOnboardingPostOptionsModel.Volumes = []powervsv1.AuxiliaryVolumesForOnboarding{*auxiliaryVolumesForOnboardingModel}
				pcloudVolumeOnboardingPostOptionsModel.Description = core.StringPtr("testString")
				pcloudVolumeOnboardingPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudVolumeOnboardingPost(pcloudVolumeOnboardingPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudVolumeOnboardingPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the AuxiliaryVolumeForOnboarding model
				auxiliaryVolumeForOnboardingModel := new(powervsv1.AuxiliaryVolumeForOnboarding)
				auxiliaryVolumeForOnboardingModel.AuxVolumeName = core.StringPtr("testString")
				auxiliaryVolumeForOnboardingModel.Name = core.StringPtr("testString")

				// Construct an instance of the AuxiliaryVolumesForOnboarding model
				auxiliaryVolumesForOnboardingModel := new(powervsv1.AuxiliaryVolumesForOnboarding)
				auxiliaryVolumesForOnboardingModel.AuxiliaryVolumes = []powervsv1.AuxiliaryVolumeForOnboarding{*auxiliaryVolumeForOnboardingModel}
				auxiliaryVolumesForOnboardingModel.SourceCRN = core.StringPtr("testString")

				// Construct an instance of the PcloudVolumeOnboardingPostOptions model
				pcloudVolumeOnboardingPostOptionsModel := new(powervsv1.PcloudVolumeOnboardingPostOptions)
				pcloudVolumeOnboardingPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumeOnboardingPostOptionsModel.Volumes = []powervsv1.AuxiliaryVolumesForOnboarding{*auxiliaryVolumesForOnboardingModel}
				pcloudVolumeOnboardingPostOptionsModel.Description = core.StringPtr("testString")
				pcloudVolumeOnboardingPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudVolumeOnboardingPost(pcloudVolumeOnboardingPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudVolumeOnboardingPostOptions model with no property values
				pcloudVolumeOnboardingPostOptionsModelNew := new(powervsv1.PcloudVolumeOnboardingPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudVolumeOnboardingPost(pcloudVolumeOnboardingPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudVolumeOnboardingPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the AuxiliaryVolumeForOnboarding model
				auxiliaryVolumeForOnboardingModel := new(powervsv1.AuxiliaryVolumeForOnboarding)
				auxiliaryVolumeForOnboardingModel.AuxVolumeName = core.StringPtr("testString")
				auxiliaryVolumeForOnboardingModel.Name = core.StringPtr("testString")

				// Construct an instance of the AuxiliaryVolumesForOnboarding model
				auxiliaryVolumesForOnboardingModel := new(powervsv1.AuxiliaryVolumesForOnboarding)
				auxiliaryVolumesForOnboardingModel.AuxiliaryVolumes = []powervsv1.AuxiliaryVolumeForOnboarding{*auxiliaryVolumeForOnboardingModel}
				auxiliaryVolumesForOnboardingModel.SourceCRN = core.StringPtr("testString")

				// Construct an instance of the PcloudVolumeOnboardingPostOptions model
				pcloudVolumeOnboardingPostOptionsModel := new(powervsv1.PcloudVolumeOnboardingPostOptions)
				pcloudVolumeOnboardingPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumeOnboardingPostOptionsModel.Volumes = []powervsv1.AuxiliaryVolumesForOnboarding{*auxiliaryVolumesForOnboardingModel}
				pcloudVolumeOnboardingPostOptionsModel.Description = core.StringPtr("testString")
				pcloudVolumeOnboardingPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudVolumeOnboardingPost(pcloudVolumeOnboardingPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVolumeOnboardingGet(pcloudVolumeOnboardingGetOptions *PcloudVolumeOnboardingGetOptions) - Operation response error`, func() {
		pcloudVolumeOnboardingGetPath := "/pcloud/v1/cloud-instances/testString/volumes/onboarding/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumeOnboardingGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudVolumeOnboardingGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumeOnboardingGetOptions model
				pcloudVolumeOnboardingGetOptionsModel := new(powervsv1.PcloudVolumeOnboardingGetOptions)
				pcloudVolumeOnboardingGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumeOnboardingGetOptionsModel.VolumeOnboardingID = core.StringPtr("testString")
				pcloudVolumeOnboardingGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudVolumeOnboardingGet(pcloudVolumeOnboardingGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudVolumeOnboardingGet(pcloudVolumeOnboardingGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVolumeOnboardingGet(pcloudVolumeOnboardingGetOptions *PcloudVolumeOnboardingGetOptions)`, func() {
		pcloudVolumeOnboardingGetPath := "/pcloud/v1/cloud-instances/testString/volumes/onboarding/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumeOnboardingGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"description": "Description", "id": "ID", "inputVolumes": ["InputVolumes"], "status": "Status", "creationTimestamp": "2019-01-01T12:00:00.000Z", "progress": 8, "results": {"onboardedVolumes": ["OnboardedVolumes"], "volumeOnboardingFailures": [{"failureMessage": "FailureMessage", "volumes": ["Volumes"]}]}}`)
				}))
			})
			It(`Invoke PcloudVolumeOnboardingGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudVolumeOnboardingGetOptions model
				pcloudVolumeOnboardingGetOptionsModel := new(powervsv1.PcloudVolumeOnboardingGetOptions)
				pcloudVolumeOnboardingGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumeOnboardingGetOptionsModel.VolumeOnboardingID = core.StringPtr("testString")
				pcloudVolumeOnboardingGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudVolumeOnboardingGetWithContext(ctx, pcloudVolumeOnboardingGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudVolumeOnboardingGet(pcloudVolumeOnboardingGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudVolumeOnboardingGetWithContext(ctx, pcloudVolumeOnboardingGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumeOnboardingGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"description": "Description", "id": "ID", "inputVolumes": ["InputVolumes"], "status": "Status", "creationTimestamp": "2019-01-01T12:00:00.000Z", "progress": 8, "results": {"onboardedVolumes": ["OnboardedVolumes"], "volumeOnboardingFailures": [{"failureMessage": "FailureMessage", "volumes": ["Volumes"]}]}}`)
				}))
			})
			It(`Invoke PcloudVolumeOnboardingGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudVolumeOnboardingGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudVolumeOnboardingGetOptions model
				pcloudVolumeOnboardingGetOptionsModel := new(powervsv1.PcloudVolumeOnboardingGetOptions)
				pcloudVolumeOnboardingGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumeOnboardingGetOptionsModel.VolumeOnboardingID = core.StringPtr("testString")
				pcloudVolumeOnboardingGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudVolumeOnboardingGet(pcloudVolumeOnboardingGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudVolumeOnboardingGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumeOnboardingGetOptions model
				pcloudVolumeOnboardingGetOptionsModel := new(powervsv1.PcloudVolumeOnboardingGetOptions)
				pcloudVolumeOnboardingGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumeOnboardingGetOptionsModel.VolumeOnboardingID = core.StringPtr("testString")
				pcloudVolumeOnboardingGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudVolumeOnboardingGet(pcloudVolumeOnboardingGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudVolumeOnboardingGetOptions model with no property values
				pcloudVolumeOnboardingGetOptionsModelNew := new(powervsv1.PcloudVolumeOnboardingGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudVolumeOnboardingGet(pcloudVolumeOnboardingGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudVolumeOnboardingGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumeOnboardingGetOptions model
				pcloudVolumeOnboardingGetOptionsModel := new(powervsv1.PcloudVolumeOnboardingGetOptions)
				pcloudVolumeOnboardingGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumeOnboardingGetOptionsModel.VolumeOnboardingID = core.StringPtr("testString")
				pcloudVolumeOnboardingGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudVolumeOnboardingGet(pcloudVolumeOnboardingGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesVolumesGetall(pcloudPvminstancesVolumesGetallOptions *PcloudPvminstancesVolumesGetallOptions) - Operation response error`, func() {
		pcloudPvminstancesVolumesGetallPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/volumes"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesVolumesGetallPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPvminstancesVolumesGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesVolumesGetallOptions model
				pcloudPvminstancesVolumesGetallOptionsModel := new(powervsv1.PcloudPvminstancesVolumesGetallOptions)
				pcloudPvminstancesVolumesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesGetallOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesGetall(pcloudPvminstancesVolumesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPvminstancesVolumesGetall(pcloudPvminstancesVolumesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesVolumesGetall(pcloudPvminstancesVolumesGetallOptions *PcloudPvminstancesVolumesGetallOptions)`, func() {
		pcloudPvminstancesVolumesGetallPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/volumes"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesVolumesGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"volumes": [{"auxVolumeName": "AuxVolumeName", "auxiliary": false, "bootVolume": true, "bootable": true, "consistencyGroupName": "ConsistencyGroupName", "creationDate": "2019-01-01T12:00:00.000Z", "deleteOnTermination": false, "diskType": "DiskType", "groupID": "GroupID", "href": "Href", "ioThrottleRate": "IoThrottleRate", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "masterVolumeName": "MasterVolumeName", "mirroringState": "MirroringState", "name": "Name", "outOfBandDeleted": true, "primaryRole": "master", "pvmInstanceIDs": ["PvmInstanceIDs"], "replicationEnabled": true, "replicationStatus": "ReplicationStatus", "replicationType": "ReplicationType", "shareable": false, "size": 4, "state": "State", "volumeID": "VolumeID", "volumePool": "VolumePool", "volumeType": "VolumeType", "wwn": "Wwn"}]}`)
				}))
			})
			It(`Invoke PcloudPvminstancesVolumesGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudPvminstancesVolumesGetallOptions model
				pcloudPvminstancesVolumesGetallOptionsModel := new(powervsv1.PcloudPvminstancesVolumesGetallOptions)
				pcloudPvminstancesVolumesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesGetallOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPvminstancesVolumesGetallWithContext(ctx, pcloudPvminstancesVolumesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesGetall(pcloudPvminstancesVolumesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPvminstancesVolumesGetallWithContext(ctx, pcloudPvminstancesVolumesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesVolumesGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"volumes": [{"auxVolumeName": "AuxVolumeName", "auxiliary": false, "bootVolume": true, "bootable": true, "consistencyGroupName": "ConsistencyGroupName", "creationDate": "2019-01-01T12:00:00.000Z", "deleteOnTermination": false, "diskType": "DiskType", "groupID": "GroupID", "href": "Href", "ioThrottleRate": "IoThrottleRate", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "masterVolumeName": "MasterVolumeName", "mirroringState": "MirroringState", "name": "Name", "outOfBandDeleted": true, "primaryRole": "master", "pvmInstanceIDs": ["PvmInstanceIDs"], "replicationEnabled": true, "replicationStatus": "ReplicationStatus", "replicationType": "ReplicationType", "shareable": false, "size": 4, "state": "State", "volumeID": "VolumeID", "volumePool": "VolumePool", "volumeType": "VolumeType", "wwn": "Wwn"}]}`)
				}))
			})
			It(`Invoke PcloudPvminstancesVolumesGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudPvminstancesVolumesGetallOptions model
				pcloudPvminstancesVolumesGetallOptionsModel := new(powervsv1.PcloudPvminstancesVolumesGetallOptions)
				pcloudPvminstancesVolumesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesGetallOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPvminstancesVolumesGetall(pcloudPvminstancesVolumesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPvminstancesVolumesGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesVolumesGetallOptions model
				pcloudPvminstancesVolumesGetallOptionsModel := new(powervsv1.PcloudPvminstancesVolumesGetallOptions)
				pcloudPvminstancesVolumesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesGetallOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesGetall(pcloudPvminstancesVolumesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPvminstancesVolumesGetallOptions model with no property values
				pcloudPvminstancesVolumesGetallOptionsModelNew := new(powervsv1.PcloudPvminstancesVolumesGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPvminstancesVolumesGetall(pcloudPvminstancesVolumesGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudPvminstancesVolumesGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesVolumesGetallOptions model
				pcloudPvminstancesVolumesGetallOptionsModel := new(powervsv1.PcloudPvminstancesVolumesGetallOptions)
				pcloudPvminstancesVolumesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesGetallOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesGetall(pcloudPvminstancesVolumesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesVolumesDelete(pcloudPvminstancesVolumesDeleteOptions *PcloudPvminstancesVolumesDeleteOptions) - Operation response error`, func() {
		pcloudPvminstancesVolumesDeletePath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/volumes/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesVolumesDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPvminstancesVolumesDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesVolumesDeleteOptions model
				pcloudPvminstancesVolumesDeleteOptionsModel := new(powervsv1.PcloudPvminstancesVolumesDeleteOptions)
				pcloudPvminstancesVolumesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesDeleteOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesDeleteOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudPvminstancesVolumesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesDelete(pcloudPvminstancesVolumesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPvminstancesVolumesDelete(pcloudPvminstancesVolumesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesVolumesDelete(pcloudPvminstancesVolumesDeleteOptions *PcloudPvminstancesVolumesDeleteOptions)`, func() {
		pcloudPvminstancesVolumesDeletePath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/volumes/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesVolumesDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudPvminstancesVolumesDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudPvminstancesVolumesDeleteOptions model
				pcloudPvminstancesVolumesDeleteOptionsModel := new(powervsv1.PcloudPvminstancesVolumesDeleteOptions)
				pcloudPvminstancesVolumesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesDeleteOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesDeleteOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudPvminstancesVolumesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPvminstancesVolumesDeleteWithContext(ctx, pcloudPvminstancesVolumesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesDelete(pcloudPvminstancesVolumesDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPvminstancesVolumesDeleteWithContext(ctx, pcloudPvminstancesVolumesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesVolumesDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudPvminstancesVolumesDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudPvminstancesVolumesDeleteOptions model
				pcloudPvminstancesVolumesDeleteOptionsModel := new(powervsv1.PcloudPvminstancesVolumesDeleteOptions)
				pcloudPvminstancesVolumesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesDeleteOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesDeleteOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudPvminstancesVolumesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPvminstancesVolumesDelete(pcloudPvminstancesVolumesDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPvminstancesVolumesDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesVolumesDeleteOptions model
				pcloudPvminstancesVolumesDeleteOptionsModel := new(powervsv1.PcloudPvminstancesVolumesDeleteOptions)
				pcloudPvminstancesVolumesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesDeleteOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesDeleteOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudPvminstancesVolumesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesDelete(pcloudPvminstancesVolumesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPvminstancesVolumesDeleteOptions model with no property values
				pcloudPvminstancesVolumesDeleteOptionsModelNew := new(powervsv1.PcloudPvminstancesVolumesDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPvminstancesVolumesDelete(pcloudPvminstancesVolumesDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudPvminstancesVolumesDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesVolumesDeleteOptions model
				pcloudPvminstancesVolumesDeleteOptionsModel := new(powervsv1.PcloudPvminstancesVolumesDeleteOptions)
				pcloudPvminstancesVolumesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesDeleteOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesDeleteOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudPvminstancesVolumesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesDelete(pcloudPvminstancesVolumesDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesVolumesGet(pcloudPvminstancesVolumesGetOptions *PcloudPvminstancesVolumesGetOptions) - Operation response error`, func() {
		pcloudPvminstancesVolumesGetPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/volumes/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesVolumesGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPvminstancesVolumesGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesVolumesGetOptions model
				pcloudPvminstancesVolumesGetOptionsModel := new(powervsv1.PcloudPvminstancesVolumesGetOptions)
				pcloudPvminstancesVolumesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesGetOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudPvminstancesVolumesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesGet(pcloudPvminstancesVolumesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPvminstancesVolumesGet(pcloudPvminstancesVolumesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesVolumesGet(pcloudPvminstancesVolumesGetOptions *PcloudPvminstancesVolumesGetOptions)`, func() {
		pcloudPvminstancesVolumesGetPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/volumes/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesVolumesGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"auxVolumeName": "AuxVolumeName", "auxiliary": false, "bootVolume": true, "bootable": true, "consistencyGroupName": "ConsistencyGroupName", "creationDate": "2019-01-01T12:00:00.000Z", "deleteOnTermination": false, "diskType": "DiskType", "groupID": "GroupID", "ioThrottleRate": "IoThrottleRate", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "masterVolumeName": "MasterVolumeName", "mirroringState": "MirroringState", "name": "Name", "outOfBandDeleted": true, "primaryRole": "master", "pvmInstanceIDs": ["PvmInstanceIDs"], "replicationEnabled": true, "replicationStatus": "ReplicationStatus", "replicationType": "ReplicationType", "shareable": false, "size": 4, "state": "State", "volumeID": "VolumeID", "volumePool": "VolumePool", "volumeType": "VolumeType", "wwn": "Wwn"}`)
				}))
			})
			It(`Invoke PcloudPvminstancesVolumesGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudPvminstancesVolumesGetOptions model
				pcloudPvminstancesVolumesGetOptionsModel := new(powervsv1.PcloudPvminstancesVolumesGetOptions)
				pcloudPvminstancesVolumesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesGetOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudPvminstancesVolumesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPvminstancesVolumesGetWithContext(ctx, pcloudPvminstancesVolumesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesGet(pcloudPvminstancesVolumesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPvminstancesVolumesGetWithContext(ctx, pcloudPvminstancesVolumesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesVolumesGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"auxVolumeName": "AuxVolumeName", "auxiliary": false, "bootVolume": true, "bootable": true, "consistencyGroupName": "ConsistencyGroupName", "creationDate": "2019-01-01T12:00:00.000Z", "deleteOnTermination": false, "diskType": "DiskType", "groupID": "GroupID", "ioThrottleRate": "IoThrottleRate", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "masterVolumeName": "MasterVolumeName", "mirroringState": "MirroringState", "name": "Name", "outOfBandDeleted": true, "primaryRole": "master", "pvmInstanceIDs": ["PvmInstanceIDs"], "replicationEnabled": true, "replicationStatus": "ReplicationStatus", "replicationType": "ReplicationType", "shareable": false, "size": 4, "state": "State", "volumeID": "VolumeID", "volumePool": "VolumePool", "volumeType": "VolumeType", "wwn": "Wwn"}`)
				}))
			})
			It(`Invoke PcloudPvminstancesVolumesGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudPvminstancesVolumesGetOptions model
				pcloudPvminstancesVolumesGetOptionsModel := new(powervsv1.PcloudPvminstancesVolumesGetOptions)
				pcloudPvminstancesVolumesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesGetOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudPvminstancesVolumesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPvminstancesVolumesGet(pcloudPvminstancesVolumesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPvminstancesVolumesGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesVolumesGetOptions model
				pcloudPvminstancesVolumesGetOptionsModel := new(powervsv1.PcloudPvminstancesVolumesGetOptions)
				pcloudPvminstancesVolumesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesGetOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudPvminstancesVolumesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesGet(pcloudPvminstancesVolumesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPvminstancesVolumesGetOptions model with no property values
				pcloudPvminstancesVolumesGetOptionsModelNew := new(powervsv1.PcloudPvminstancesVolumesGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPvminstancesVolumesGet(pcloudPvminstancesVolumesGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudPvminstancesVolumesGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesVolumesGetOptions model
				pcloudPvminstancesVolumesGetOptionsModel := new(powervsv1.PcloudPvminstancesVolumesGetOptions)
				pcloudPvminstancesVolumesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesGetOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesGetOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudPvminstancesVolumesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesGet(pcloudPvminstancesVolumesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesVolumesPost(pcloudPvminstancesVolumesPostOptions *PcloudPvminstancesVolumesPostOptions) - Operation response error`, func() {
		pcloudPvminstancesVolumesPostPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/volumes/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesVolumesPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPvminstancesVolumesPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesVolumesPostOptions model
				pcloudPvminstancesVolumesPostOptionsModel := new(powervsv1.PcloudPvminstancesVolumesPostOptions)
				pcloudPvminstancesVolumesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPostOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesPost(pcloudPvminstancesVolumesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPvminstancesVolumesPost(pcloudPvminstancesVolumesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesVolumesPost(pcloudPvminstancesVolumesPostOptions *PcloudPvminstancesVolumesPostOptions)`, func() {
		pcloudPvminstancesVolumesPostPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/volumes/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesVolumesPostPath))
					Expect(req.Method).To(Equal("POST"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudPvminstancesVolumesPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudPvminstancesVolumesPostOptions model
				pcloudPvminstancesVolumesPostOptionsModel := new(powervsv1.PcloudPvminstancesVolumesPostOptions)
				pcloudPvminstancesVolumesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPostOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPvminstancesVolumesPostWithContext(ctx, pcloudPvminstancesVolumesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesPost(pcloudPvminstancesVolumesPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPvminstancesVolumesPostWithContext(ctx, pcloudPvminstancesVolumesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesVolumesPostPath))
					Expect(req.Method).To(Equal("POST"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudPvminstancesVolumesPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudPvminstancesVolumesPostOptions model
				pcloudPvminstancesVolumesPostOptionsModel := new(powervsv1.PcloudPvminstancesVolumesPostOptions)
				pcloudPvminstancesVolumesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPostOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPvminstancesVolumesPost(pcloudPvminstancesVolumesPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPvminstancesVolumesPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesVolumesPostOptions model
				pcloudPvminstancesVolumesPostOptionsModel := new(powervsv1.PcloudPvminstancesVolumesPostOptions)
				pcloudPvminstancesVolumesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPostOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesPost(pcloudPvminstancesVolumesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPvminstancesVolumesPostOptions model with no property values
				pcloudPvminstancesVolumesPostOptionsModelNew := new(powervsv1.PcloudPvminstancesVolumesPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPvminstancesVolumesPost(pcloudPvminstancesVolumesPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudPvminstancesVolumesPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesVolumesPostOptions model
				pcloudPvminstancesVolumesPostOptionsModel := new(powervsv1.PcloudPvminstancesVolumesPostOptions)
				pcloudPvminstancesVolumesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPostOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesPost(pcloudPvminstancesVolumesPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesVolumesPut(pcloudPvminstancesVolumesPutOptions *PcloudPvminstancesVolumesPutOptions) - Operation response error`, func() {
		pcloudPvminstancesVolumesPutPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/volumes/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesVolumesPutPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPvminstancesVolumesPut with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesVolumesPutOptions model
				pcloudPvminstancesVolumesPutOptionsModel := new(powervsv1.PcloudPvminstancesVolumesPutOptions)
				pcloudPvminstancesVolumesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPutOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPutOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPutOptionsModel.DeleteOnTermination = core.BoolPtr(true)
				pcloudPvminstancesVolumesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesPut(pcloudPvminstancesVolumesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPvminstancesVolumesPut(pcloudPvminstancesVolumesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesVolumesPut(pcloudPvminstancesVolumesPutOptions *PcloudPvminstancesVolumesPutOptions)`, func() {
		pcloudPvminstancesVolumesPutPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/volumes/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesVolumesPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudPvminstancesVolumesPut successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudPvminstancesVolumesPutOptions model
				pcloudPvminstancesVolumesPutOptionsModel := new(powervsv1.PcloudPvminstancesVolumesPutOptions)
				pcloudPvminstancesVolumesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPutOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPutOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPutOptionsModel.DeleteOnTermination = core.BoolPtr(true)
				pcloudPvminstancesVolumesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPvminstancesVolumesPutWithContext(ctx, pcloudPvminstancesVolumesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesPut(pcloudPvminstancesVolumesPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPvminstancesVolumesPutWithContext(ctx, pcloudPvminstancesVolumesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesVolumesPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudPvminstancesVolumesPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesPut(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudPvminstancesVolumesPutOptions model
				pcloudPvminstancesVolumesPutOptionsModel := new(powervsv1.PcloudPvminstancesVolumesPutOptions)
				pcloudPvminstancesVolumesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPutOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPutOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPutOptionsModel.DeleteOnTermination = core.BoolPtr(true)
				pcloudPvminstancesVolumesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPvminstancesVolumesPut(pcloudPvminstancesVolumesPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPvminstancesVolumesPut with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesVolumesPutOptions model
				pcloudPvminstancesVolumesPutOptionsModel := new(powervsv1.PcloudPvminstancesVolumesPutOptions)
				pcloudPvminstancesVolumesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPutOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPutOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPutOptionsModel.DeleteOnTermination = core.BoolPtr(true)
				pcloudPvminstancesVolumesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesPut(pcloudPvminstancesVolumesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPvminstancesVolumesPutOptions model with no property values
				pcloudPvminstancesVolumesPutOptionsModelNew := new(powervsv1.PcloudPvminstancesVolumesPutOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPvminstancesVolumesPut(pcloudPvminstancesVolumesPutOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudPvminstancesVolumesPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesVolumesPutOptions model
				pcloudPvminstancesVolumesPutOptionsModel := new(powervsv1.PcloudPvminstancesVolumesPutOptions)
				pcloudPvminstancesVolumesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPutOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPutOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudPvminstancesVolumesPutOptionsModel.DeleteOnTermination = core.BoolPtr(true)
				pcloudPvminstancesVolumesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesPut(pcloudPvminstancesVolumesPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesVolumesSetbootPut(pcloudPvminstancesVolumesSetbootPutOptions *PcloudPvminstancesVolumesSetbootPutOptions) - Operation response error`, func() {
		pcloudPvminstancesVolumesSetbootPutPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/volumes/testString/setboot"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesVolumesSetbootPutPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudPvminstancesVolumesSetbootPut with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesVolumesSetbootPutOptions model
				pcloudPvminstancesVolumesSetbootPutOptionsModel := new(powervsv1.PcloudPvminstancesVolumesSetbootPutOptions)
				pcloudPvminstancesVolumesSetbootPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesSetbootPutOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesSetbootPutOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudPvminstancesVolumesSetbootPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesSetbootPut(pcloudPvminstancesVolumesSetbootPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudPvminstancesVolumesSetbootPut(pcloudPvminstancesVolumesSetbootPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudPvminstancesVolumesSetbootPut(pcloudPvminstancesVolumesSetbootPutOptions *PcloudPvminstancesVolumesSetbootPutOptions)`, func() {
		pcloudPvminstancesVolumesSetbootPutPath := "/pcloud/v1/cloud-instances/testString/pvm-instances/testString/volumes/testString/setboot"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesVolumesSetbootPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudPvminstancesVolumesSetbootPut successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudPvminstancesVolumesSetbootPutOptions model
				pcloudPvminstancesVolumesSetbootPutOptionsModel := new(powervsv1.PcloudPvminstancesVolumesSetbootPutOptions)
				pcloudPvminstancesVolumesSetbootPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesSetbootPutOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesSetbootPutOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudPvminstancesVolumesSetbootPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudPvminstancesVolumesSetbootPutWithContext(ctx, pcloudPvminstancesVolumesSetbootPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesSetbootPut(pcloudPvminstancesVolumesSetbootPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudPvminstancesVolumesSetbootPutWithContext(ctx, pcloudPvminstancesVolumesSetbootPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudPvminstancesVolumesSetbootPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudPvminstancesVolumesSetbootPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesSetbootPut(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudPvminstancesVolumesSetbootPutOptions model
				pcloudPvminstancesVolumesSetbootPutOptionsModel := new(powervsv1.PcloudPvminstancesVolumesSetbootPutOptions)
				pcloudPvminstancesVolumesSetbootPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesSetbootPutOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesSetbootPutOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudPvminstancesVolumesSetbootPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudPvminstancesVolumesSetbootPut(pcloudPvminstancesVolumesSetbootPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudPvminstancesVolumesSetbootPut with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesVolumesSetbootPutOptions model
				pcloudPvminstancesVolumesSetbootPutOptionsModel := new(powervsv1.PcloudPvminstancesVolumesSetbootPutOptions)
				pcloudPvminstancesVolumesSetbootPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesSetbootPutOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesSetbootPutOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudPvminstancesVolumesSetbootPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesSetbootPut(pcloudPvminstancesVolumesSetbootPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudPvminstancesVolumesSetbootPutOptions model with no property values
				pcloudPvminstancesVolumesSetbootPutOptionsModelNew := new(powervsv1.PcloudPvminstancesVolumesSetbootPutOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudPvminstancesVolumesSetbootPut(pcloudPvminstancesVolumesSetbootPutOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudPvminstancesVolumesSetbootPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudPvminstancesVolumesSetbootPutOptions model
				pcloudPvminstancesVolumesSetbootPutOptionsModel := new(powervsv1.PcloudPvminstancesVolumesSetbootPutOptions)
				pcloudPvminstancesVolumesSetbootPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesSetbootPutOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudPvminstancesVolumesSetbootPutOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudPvminstancesVolumesSetbootPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudPvminstancesVolumesSetbootPut(pcloudPvminstancesVolumesSetbootPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesVolumesGetall(pcloudCloudinstancesVolumesGetallOptions *PcloudCloudinstancesVolumesGetallOptions) - Operation response error`, func() {
		pcloudCloudinstancesVolumesGetallPath := "/pcloud/v1/cloud-instances/testString/volumes"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesVolumesGetallPath))
					Expect(req.Method).To(Equal("GET"))
					// TODO: Add check for replicationEnabled query parameter
					Expect(req.URL.Query()["affinity"]).To(Equal([]string{"testString"}))
					// TODO: Add check for auxiliary query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesGetallOptions model
				pcloudCloudinstancesVolumesGetallOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesGetallOptions)
				pcloudCloudinstancesVolumesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesGetallOptionsModel.ReplicationEnabled = core.BoolPtr(true)
				pcloudCloudinstancesVolumesGetallOptionsModel.Affinity = core.StringPtr("testString")
				pcloudCloudinstancesVolumesGetallOptionsModel.Auxiliary = core.BoolPtr(true)
				pcloudCloudinstancesVolumesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesGetall(pcloudCloudinstancesVolumesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudinstancesVolumesGetall(pcloudCloudinstancesVolumesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesVolumesGetall(pcloudCloudinstancesVolumesGetallOptions *PcloudCloudinstancesVolumesGetallOptions)`, func() {
		pcloudCloudinstancesVolumesGetallPath := "/pcloud/v1/cloud-instances/testString/volumes"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesVolumesGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// TODO: Add check for replicationEnabled query parameter
					Expect(req.URL.Query()["affinity"]).To(Equal([]string{"testString"}))
					// TODO: Add check for auxiliary query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"volumes": [{"auxVolumeName": "AuxVolumeName", "auxiliary": false, "bootVolume": true, "bootable": true, "consistencyGroupName": "ConsistencyGroupName", "creationDate": "2019-01-01T12:00:00.000Z", "deleteOnTermination": false, "diskType": "DiskType", "groupID": "GroupID", "href": "Href", "ioThrottleRate": "IoThrottleRate", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "masterVolumeName": "MasterVolumeName", "mirroringState": "MirroringState", "name": "Name", "outOfBandDeleted": true, "primaryRole": "master", "pvmInstanceIDs": ["PvmInstanceIDs"], "replicationEnabled": true, "replicationStatus": "ReplicationStatus", "replicationType": "ReplicationType", "shareable": false, "size": 4, "state": "State", "volumeID": "VolumeID", "volumePool": "VolumePool", "volumeType": "VolumeType", "wwn": "Wwn"}]}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudinstancesVolumesGetallOptions model
				pcloudCloudinstancesVolumesGetallOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesGetallOptions)
				pcloudCloudinstancesVolumesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesGetallOptionsModel.ReplicationEnabled = core.BoolPtr(true)
				pcloudCloudinstancesVolumesGetallOptionsModel.Affinity = core.StringPtr("testString")
				pcloudCloudinstancesVolumesGetallOptionsModel.Auxiliary = core.BoolPtr(true)
				pcloudCloudinstancesVolumesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudinstancesVolumesGetallWithContext(ctx, pcloudCloudinstancesVolumesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesGetall(pcloudCloudinstancesVolumesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudinstancesVolumesGetallWithContext(ctx, pcloudCloudinstancesVolumesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesVolumesGetallPath))
					Expect(req.Method).To(Equal("GET"))

					// TODO: Add check for replicationEnabled query parameter
					Expect(req.URL.Query()["affinity"]).To(Equal([]string{"testString"}))
					// TODO: Add check for auxiliary query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"volumes": [{"auxVolumeName": "AuxVolumeName", "auxiliary": false, "bootVolume": true, "bootable": true, "consistencyGroupName": "ConsistencyGroupName", "creationDate": "2019-01-01T12:00:00.000Z", "deleteOnTermination": false, "diskType": "DiskType", "groupID": "GroupID", "href": "Href", "ioThrottleRate": "IoThrottleRate", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "masterVolumeName": "MasterVolumeName", "mirroringState": "MirroringState", "name": "Name", "outOfBandDeleted": true, "primaryRole": "master", "pvmInstanceIDs": ["PvmInstanceIDs"], "replicationEnabled": true, "replicationStatus": "ReplicationStatus", "replicationType": "ReplicationType", "shareable": false, "size": 4, "state": "State", "volumeID": "VolumeID", "volumePool": "VolumePool", "volumeType": "VolumeType", "wwn": "Wwn"}]}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesGetallOptions model
				pcloudCloudinstancesVolumesGetallOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesGetallOptions)
				pcloudCloudinstancesVolumesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesGetallOptionsModel.ReplicationEnabled = core.BoolPtr(true)
				pcloudCloudinstancesVolumesGetallOptionsModel.Affinity = core.StringPtr("testString")
				pcloudCloudinstancesVolumesGetallOptionsModel.Auxiliary = core.BoolPtr(true)
				pcloudCloudinstancesVolumesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudinstancesVolumesGetall(pcloudCloudinstancesVolumesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudinstancesVolumesGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesGetallOptions model
				pcloudCloudinstancesVolumesGetallOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesGetallOptions)
				pcloudCloudinstancesVolumesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesGetallOptionsModel.ReplicationEnabled = core.BoolPtr(true)
				pcloudCloudinstancesVolumesGetallOptionsModel.Affinity = core.StringPtr("testString")
				pcloudCloudinstancesVolumesGetallOptionsModel.Auxiliary = core.BoolPtr(true)
				pcloudCloudinstancesVolumesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesGetall(pcloudCloudinstancesVolumesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudinstancesVolumesGetallOptions model with no property values
				pcloudCloudinstancesVolumesGetallOptionsModelNew := new(powervsv1.PcloudCloudinstancesVolumesGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudinstancesVolumesGetall(pcloudCloudinstancesVolumesGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesGetallOptions model
				pcloudCloudinstancesVolumesGetallOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesGetallOptions)
				pcloudCloudinstancesVolumesGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesGetallOptionsModel.ReplicationEnabled = core.BoolPtr(true)
				pcloudCloudinstancesVolumesGetallOptionsModel.Affinity = core.StringPtr("testString")
				pcloudCloudinstancesVolumesGetallOptionsModel.Auxiliary = core.BoolPtr(true)
				pcloudCloudinstancesVolumesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesGetall(pcloudCloudinstancesVolumesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesVolumesPost(pcloudCloudinstancesVolumesPostOptions *PcloudCloudinstancesVolumesPostOptions) - Operation response error`, func() {
		pcloudCloudinstancesVolumesPostPath := "/pcloud/v1/cloud-instances/testString/volumes"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesVolumesPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesPostOptions model
				pcloudCloudinstancesVolumesPostOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesPostOptions)
				pcloudCloudinstancesVolumesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.Name = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.Size = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesVolumesPostOptionsModel.AffinityPvmInstance = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.AffinityPolicy = core.StringPtr("affinity")
				pcloudCloudinstancesVolumesPostOptionsModel.AffinityVolume = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.AntiAffinityPvmInstances = []string{"testString"}
				pcloudCloudinstancesVolumesPostOptionsModel.AntiAffinityVolumes = []string{"testString"}
				pcloudCloudinstancesVolumesPostOptionsModel.DiskType = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.ReplicationEnabled = core.BoolPtr(true)
				pcloudCloudinstancesVolumesPostOptionsModel.Shareable = core.BoolPtr(true)
				pcloudCloudinstancesVolumesPostOptionsModel.VolumePool = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesPost(pcloudCloudinstancesVolumesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudinstancesVolumesPost(pcloudCloudinstancesVolumesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesVolumesPost(pcloudCloudinstancesVolumesPostOptions *PcloudCloudinstancesVolumesPostOptions)`, func() {
		pcloudCloudinstancesVolumesPostPath := "/pcloud/v1/cloud-instances/testString/volumes"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesVolumesPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"auxVolumeName": "AuxVolumeName", "auxiliary": false, "bootVolume": true, "bootable": true, "consistencyGroupName": "ConsistencyGroupName", "creationDate": "2019-01-01T12:00:00.000Z", "deleteOnTermination": false, "diskType": "DiskType", "groupID": "GroupID", "ioThrottleRate": "IoThrottleRate", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "masterVolumeName": "MasterVolumeName", "mirroringState": "MirroringState", "name": "Name", "outOfBandDeleted": true, "primaryRole": "master", "pvmInstanceIDs": ["PvmInstanceIDs"], "replicationEnabled": true, "replicationStatus": "ReplicationStatus", "replicationType": "ReplicationType", "shareable": false, "size": 4, "state": "State", "volumeID": "VolumeID", "volumePool": "VolumePool", "volumeType": "VolumeType", "wwn": "Wwn"}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudinstancesVolumesPostOptions model
				pcloudCloudinstancesVolumesPostOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesPostOptions)
				pcloudCloudinstancesVolumesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.Name = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.Size = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesVolumesPostOptionsModel.AffinityPvmInstance = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.AffinityPolicy = core.StringPtr("affinity")
				pcloudCloudinstancesVolumesPostOptionsModel.AffinityVolume = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.AntiAffinityPvmInstances = []string{"testString"}
				pcloudCloudinstancesVolumesPostOptionsModel.AntiAffinityVolumes = []string{"testString"}
				pcloudCloudinstancesVolumesPostOptionsModel.DiskType = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.ReplicationEnabled = core.BoolPtr(true)
				pcloudCloudinstancesVolumesPostOptionsModel.Shareable = core.BoolPtr(true)
				pcloudCloudinstancesVolumesPostOptionsModel.VolumePool = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudinstancesVolumesPostWithContext(ctx, pcloudCloudinstancesVolumesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesPost(pcloudCloudinstancesVolumesPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudinstancesVolumesPostWithContext(ctx, pcloudCloudinstancesVolumesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesVolumesPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"auxVolumeName": "AuxVolumeName", "auxiliary": false, "bootVolume": true, "bootable": true, "consistencyGroupName": "ConsistencyGroupName", "creationDate": "2019-01-01T12:00:00.000Z", "deleteOnTermination": false, "diskType": "DiskType", "groupID": "GroupID", "ioThrottleRate": "IoThrottleRate", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "masterVolumeName": "MasterVolumeName", "mirroringState": "MirroringState", "name": "Name", "outOfBandDeleted": true, "primaryRole": "master", "pvmInstanceIDs": ["PvmInstanceIDs"], "replicationEnabled": true, "replicationStatus": "ReplicationStatus", "replicationType": "ReplicationType", "shareable": false, "size": 4, "state": "State", "volumeID": "VolumeID", "volumePool": "VolumePool", "volumeType": "VolumeType", "wwn": "Wwn"}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesPostOptions model
				pcloudCloudinstancesVolumesPostOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesPostOptions)
				pcloudCloudinstancesVolumesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.Name = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.Size = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesVolumesPostOptionsModel.AffinityPvmInstance = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.AffinityPolicy = core.StringPtr("affinity")
				pcloudCloudinstancesVolumesPostOptionsModel.AffinityVolume = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.AntiAffinityPvmInstances = []string{"testString"}
				pcloudCloudinstancesVolumesPostOptionsModel.AntiAffinityVolumes = []string{"testString"}
				pcloudCloudinstancesVolumesPostOptionsModel.DiskType = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.ReplicationEnabled = core.BoolPtr(true)
				pcloudCloudinstancesVolumesPostOptionsModel.Shareable = core.BoolPtr(true)
				pcloudCloudinstancesVolumesPostOptionsModel.VolumePool = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudinstancesVolumesPost(pcloudCloudinstancesVolumesPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudinstancesVolumesPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesPostOptions model
				pcloudCloudinstancesVolumesPostOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesPostOptions)
				pcloudCloudinstancesVolumesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.Name = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.Size = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesVolumesPostOptionsModel.AffinityPvmInstance = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.AffinityPolicy = core.StringPtr("affinity")
				pcloudCloudinstancesVolumesPostOptionsModel.AffinityVolume = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.AntiAffinityPvmInstances = []string{"testString"}
				pcloudCloudinstancesVolumesPostOptionsModel.AntiAffinityVolumes = []string{"testString"}
				pcloudCloudinstancesVolumesPostOptionsModel.DiskType = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.ReplicationEnabled = core.BoolPtr(true)
				pcloudCloudinstancesVolumesPostOptionsModel.Shareable = core.BoolPtr(true)
				pcloudCloudinstancesVolumesPostOptionsModel.VolumePool = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesPost(pcloudCloudinstancesVolumesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudinstancesVolumesPostOptions model with no property values
				pcloudCloudinstancesVolumesPostOptionsModelNew := new(powervsv1.PcloudCloudinstancesVolumesPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudinstancesVolumesPost(pcloudCloudinstancesVolumesPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesPostOptions model
				pcloudCloudinstancesVolumesPostOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesPostOptions)
				pcloudCloudinstancesVolumesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.Name = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.Size = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesVolumesPostOptionsModel.AffinityPvmInstance = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.AffinityPolicy = core.StringPtr("affinity")
				pcloudCloudinstancesVolumesPostOptionsModel.AffinityVolume = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.AntiAffinityPvmInstances = []string{"testString"}
				pcloudCloudinstancesVolumesPostOptionsModel.AntiAffinityVolumes = []string{"testString"}
				pcloudCloudinstancesVolumesPostOptionsModel.DiskType = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.ReplicationEnabled = core.BoolPtr(true)
				pcloudCloudinstancesVolumesPostOptionsModel.Shareable = core.BoolPtr(true)
				pcloudCloudinstancesVolumesPostOptionsModel.VolumePool = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesPost(pcloudCloudinstancesVolumesPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVolumesClonePost(pcloudVolumesClonePostOptions *PcloudVolumesClonePostOptions) - Operation response error`, func() {
		pcloudVolumesClonePostPath := "/pcloud/v1/cloud-instances/testString/volumes/clone"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumesClonePostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudVolumesClonePost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumesClonePostOptions model
				pcloudVolumesClonePostOptionsModel := new(powervsv1.PcloudVolumesClonePostOptions)
				pcloudVolumesClonePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumesClonePostOptionsModel.DisplayName = core.StringPtr("testString")
				pcloudVolumesClonePostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudVolumesClonePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudVolumesClonePost(pcloudVolumesClonePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudVolumesClonePost(pcloudVolumesClonePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudVolumesClonePost(pcloudVolumesClonePostOptions *PcloudVolumesClonePostOptions)`, func() {
		pcloudVolumesClonePostPath := "/pcloud/v1/cloud-instances/testString/volumes/clone"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumesClonePostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"additionalProperties": "AdditionalProperties", "clonedVolumes": {"anyKey": "anyValue"}}`)
				}))
			})
			It(`Invoke PcloudVolumesClonePost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudVolumesClonePostOptions model
				pcloudVolumesClonePostOptionsModel := new(powervsv1.PcloudVolumesClonePostOptions)
				pcloudVolumesClonePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumesClonePostOptionsModel.DisplayName = core.StringPtr("testString")
				pcloudVolumesClonePostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudVolumesClonePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudVolumesClonePostWithContext(ctx, pcloudVolumesClonePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudVolumesClonePost(pcloudVolumesClonePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudVolumesClonePostWithContext(ctx, pcloudVolumesClonePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudVolumesClonePostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"additionalProperties": "AdditionalProperties", "clonedVolumes": {"anyKey": "anyValue"}}`)
				}))
			})
			It(`Invoke PcloudVolumesClonePost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudVolumesClonePost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudVolumesClonePostOptions model
				pcloudVolumesClonePostOptionsModel := new(powervsv1.PcloudVolumesClonePostOptions)
				pcloudVolumesClonePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumesClonePostOptionsModel.DisplayName = core.StringPtr("testString")
				pcloudVolumesClonePostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudVolumesClonePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudVolumesClonePost(pcloudVolumesClonePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudVolumesClonePost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumesClonePostOptions model
				pcloudVolumesClonePostOptionsModel := new(powervsv1.PcloudVolumesClonePostOptions)
				pcloudVolumesClonePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumesClonePostOptionsModel.DisplayName = core.StringPtr("testString")
				pcloudVolumesClonePostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudVolumesClonePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudVolumesClonePost(pcloudVolumesClonePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudVolumesClonePostOptions model with no property values
				pcloudVolumesClonePostOptionsModelNew := new(powervsv1.PcloudVolumesClonePostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudVolumesClonePost(pcloudVolumesClonePostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudVolumesClonePost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudVolumesClonePostOptions model
				pcloudVolumesClonePostOptionsModel := new(powervsv1.PcloudVolumesClonePostOptions)
				pcloudVolumesClonePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudVolumesClonePostOptionsModel.DisplayName = core.StringPtr("testString")
				pcloudVolumesClonePostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudVolumesClonePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudVolumesClonePost(pcloudVolumesClonePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesVolumesDelete(pcloudCloudinstancesVolumesDeleteOptions *PcloudCloudinstancesVolumesDeleteOptions) - Operation response error`, func() {
		pcloudCloudinstancesVolumesDeletePath := "/pcloud/v1/cloud-instances/testString/volumes/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesVolumesDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesDeleteOptions model
				pcloudCloudinstancesVolumesDeleteOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesDeleteOptions)
				pcloudCloudinstancesVolumesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesDeleteOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesDelete(pcloudCloudinstancesVolumesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudinstancesVolumesDelete(pcloudCloudinstancesVolumesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesVolumesDelete(pcloudCloudinstancesVolumesDeleteOptions *PcloudCloudinstancesVolumesDeleteOptions)`, func() {
		pcloudCloudinstancesVolumesDeletePath := "/pcloud/v1/cloud-instances/testString/volumes/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesVolumesDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudinstancesVolumesDeleteOptions model
				pcloudCloudinstancesVolumesDeleteOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesDeleteOptions)
				pcloudCloudinstancesVolumesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesDeleteOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudinstancesVolumesDeleteWithContext(ctx, pcloudCloudinstancesVolumesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesDelete(pcloudCloudinstancesVolumesDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudinstancesVolumesDeleteWithContext(ctx, pcloudCloudinstancesVolumesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesVolumesDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesDeleteOptions model
				pcloudCloudinstancesVolumesDeleteOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesDeleteOptions)
				pcloudCloudinstancesVolumesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesDeleteOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudinstancesVolumesDelete(pcloudCloudinstancesVolumesDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudinstancesVolumesDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesDeleteOptions model
				pcloudCloudinstancesVolumesDeleteOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesDeleteOptions)
				pcloudCloudinstancesVolumesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesDeleteOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesDelete(pcloudCloudinstancesVolumesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudinstancesVolumesDeleteOptions model with no property values
				pcloudCloudinstancesVolumesDeleteOptionsModelNew := new(powervsv1.PcloudCloudinstancesVolumesDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudinstancesVolumesDelete(pcloudCloudinstancesVolumesDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesDeleteOptions model
				pcloudCloudinstancesVolumesDeleteOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesDeleteOptions)
				pcloudCloudinstancesVolumesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesDeleteOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesDelete(pcloudCloudinstancesVolumesDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesVolumesGet(pcloudCloudinstancesVolumesGetOptions *PcloudCloudinstancesVolumesGetOptions) - Operation response error`, func() {
		pcloudCloudinstancesVolumesGetPath := "/pcloud/v1/cloud-instances/testString/volumes/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesVolumesGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesGetOptions model
				pcloudCloudinstancesVolumesGetOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesGetOptions)
				pcloudCloudinstancesVolumesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesGetOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesGet(pcloudCloudinstancesVolumesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudinstancesVolumesGet(pcloudCloudinstancesVolumesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesVolumesGet(pcloudCloudinstancesVolumesGetOptions *PcloudCloudinstancesVolumesGetOptions)`, func() {
		pcloudCloudinstancesVolumesGetPath := "/pcloud/v1/cloud-instances/testString/volumes/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesVolumesGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"auxVolumeName": "AuxVolumeName", "auxiliary": false, "bootVolume": true, "bootable": true, "consistencyGroupName": "ConsistencyGroupName", "creationDate": "2019-01-01T12:00:00.000Z", "deleteOnTermination": false, "diskType": "DiskType", "groupID": "GroupID", "ioThrottleRate": "IoThrottleRate", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "masterVolumeName": "MasterVolumeName", "mirroringState": "MirroringState", "name": "Name", "outOfBandDeleted": true, "primaryRole": "master", "pvmInstanceIDs": ["PvmInstanceIDs"], "replicationEnabled": true, "replicationStatus": "ReplicationStatus", "replicationType": "ReplicationType", "shareable": false, "size": 4, "state": "State", "volumeID": "VolumeID", "volumePool": "VolumePool", "volumeType": "VolumeType", "wwn": "Wwn"}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudinstancesVolumesGetOptions model
				pcloudCloudinstancesVolumesGetOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesGetOptions)
				pcloudCloudinstancesVolumesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesGetOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudinstancesVolumesGetWithContext(ctx, pcloudCloudinstancesVolumesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesGet(pcloudCloudinstancesVolumesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudinstancesVolumesGetWithContext(ctx, pcloudCloudinstancesVolumesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesVolumesGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"auxVolumeName": "AuxVolumeName", "auxiliary": false, "bootVolume": true, "bootable": true, "consistencyGroupName": "ConsistencyGroupName", "creationDate": "2019-01-01T12:00:00.000Z", "deleteOnTermination": false, "diskType": "DiskType", "groupID": "GroupID", "ioThrottleRate": "IoThrottleRate", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "masterVolumeName": "MasterVolumeName", "mirroringState": "MirroringState", "name": "Name", "outOfBandDeleted": true, "primaryRole": "master", "pvmInstanceIDs": ["PvmInstanceIDs"], "replicationEnabled": true, "replicationStatus": "ReplicationStatus", "replicationType": "ReplicationType", "shareable": false, "size": 4, "state": "State", "volumeID": "VolumeID", "volumePool": "VolumePool", "volumeType": "VolumeType", "wwn": "Wwn"}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesGetOptions model
				pcloudCloudinstancesVolumesGetOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesGetOptions)
				pcloudCloudinstancesVolumesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesGetOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudinstancesVolumesGet(pcloudCloudinstancesVolumesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudinstancesVolumesGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesGetOptions model
				pcloudCloudinstancesVolumesGetOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesGetOptions)
				pcloudCloudinstancesVolumesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesGetOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesGet(pcloudCloudinstancesVolumesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudinstancesVolumesGetOptions model with no property values
				pcloudCloudinstancesVolumesGetOptionsModelNew := new(powervsv1.PcloudCloudinstancesVolumesGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudinstancesVolumesGet(pcloudCloudinstancesVolumesGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesGetOptions model
				pcloudCloudinstancesVolumesGetOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesGetOptions)
				pcloudCloudinstancesVolumesGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesGetOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesGet(pcloudCloudinstancesVolumesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesVolumesPut(pcloudCloudinstancesVolumesPutOptions *PcloudCloudinstancesVolumesPutOptions) - Operation response error`, func() {
		pcloudCloudinstancesVolumesPutPath := "/pcloud/v1/cloud-instances/testString/volumes/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesVolumesPutPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesPut with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesPutOptions model
				pcloudCloudinstancesVolumesPutOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesPutOptions)
				pcloudCloudinstancesVolumesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPutOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPutOptionsModel.Bootable = core.BoolPtr(true)
				pcloudCloudinstancesVolumesPutOptionsModel.Name = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPutOptionsModel.Shareable = core.BoolPtr(true)
				pcloudCloudinstancesVolumesPutOptionsModel.Size = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesVolumesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesPut(pcloudCloudinstancesVolumesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudinstancesVolumesPut(pcloudCloudinstancesVolumesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesVolumesPut(pcloudCloudinstancesVolumesPutOptions *PcloudCloudinstancesVolumesPutOptions)`, func() {
		pcloudCloudinstancesVolumesPutPath := "/pcloud/v1/cloud-instances/testString/volumes/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesVolumesPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"auxVolumeName": "AuxVolumeName", "auxiliary": false, "bootVolume": true, "bootable": true, "consistencyGroupName": "ConsistencyGroupName", "creationDate": "2019-01-01T12:00:00.000Z", "deleteOnTermination": false, "diskType": "DiskType", "groupID": "GroupID", "ioThrottleRate": "IoThrottleRate", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "masterVolumeName": "MasterVolumeName", "mirroringState": "MirroringState", "name": "Name", "outOfBandDeleted": true, "primaryRole": "master", "pvmInstanceIDs": ["PvmInstanceIDs"], "replicationEnabled": true, "replicationStatus": "ReplicationStatus", "replicationType": "ReplicationType", "shareable": false, "size": 4, "state": "State", "volumeID": "VolumeID", "volumePool": "VolumePool", "volumeType": "VolumeType", "wwn": "Wwn"}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesPut successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudinstancesVolumesPutOptions model
				pcloudCloudinstancesVolumesPutOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesPutOptions)
				pcloudCloudinstancesVolumesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPutOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPutOptionsModel.Bootable = core.BoolPtr(true)
				pcloudCloudinstancesVolumesPutOptionsModel.Name = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPutOptionsModel.Shareable = core.BoolPtr(true)
				pcloudCloudinstancesVolumesPutOptionsModel.Size = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesVolumesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudinstancesVolumesPutWithContext(ctx, pcloudCloudinstancesVolumesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesPut(pcloudCloudinstancesVolumesPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudinstancesVolumesPutWithContext(ctx, pcloudCloudinstancesVolumesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesVolumesPutPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"auxVolumeName": "AuxVolumeName", "auxiliary": false, "bootVolume": true, "bootable": true, "consistencyGroupName": "ConsistencyGroupName", "creationDate": "2019-01-01T12:00:00.000Z", "deleteOnTermination": false, "diskType": "DiskType", "groupID": "GroupID", "ioThrottleRate": "IoThrottleRate", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "masterVolumeName": "MasterVolumeName", "mirroringState": "MirroringState", "name": "Name", "outOfBandDeleted": true, "primaryRole": "master", "pvmInstanceIDs": ["PvmInstanceIDs"], "replicationEnabled": true, "replicationStatus": "ReplicationStatus", "replicationType": "ReplicationType", "shareable": false, "size": 4, "state": "State", "volumeID": "VolumeID", "volumePool": "VolumePool", "volumeType": "VolumeType", "wwn": "Wwn"}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesPut(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesPutOptions model
				pcloudCloudinstancesVolumesPutOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesPutOptions)
				pcloudCloudinstancesVolumesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPutOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPutOptionsModel.Bootable = core.BoolPtr(true)
				pcloudCloudinstancesVolumesPutOptionsModel.Name = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPutOptionsModel.Shareable = core.BoolPtr(true)
				pcloudCloudinstancesVolumesPutOptionsModel.Size = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesVolumesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudinstancesVolumesPut(pcloudCloudinstancesVolumesPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudinstancesVolumesPut with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesPutOptions model
				pcloudCloudinstancesVolumesPutOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesPutOptions)
				pcloudCloudinstancesVolumesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPutOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPutOptionsModel.Bootable = core.BoolPtr(true)
				pcloudCloudinstancesVolumesPutOptionsModel.Name = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPutOptionsModel.Shareable = core.BoolPtr(true)
				pcloudCloudinstancesVolumesPutOptionsModel.Size = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesVolumesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesPut(pcloudCloudinstancesVolumesPutOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudinstancesVolumesPutOptions model with no property values
				pcloudCloudinstancesVolumesPutOptionsModelNew := new(powervsv1.PcloudCloudinstancesVolumesPutOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudinstancesVolumesPut(pcloudCloudinstancesVolumesPutOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesPut successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesPutOptions model
				pcloudCloudinstancesVolumesPutOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesPutOptions)
				pcloudCloudinstancesVolumesPutOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPutOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPutOptionsModel.Bootable = core.BoolPtr(true)
				pcloudCloudinstancesVolumesPutOptionsModel.Name = core.StringPtr("testString")
				pcloudCloudinstancesVolumesPutOptionsModel.Shareable = core.BoolPtr(true)
				pcloudCloudinstancesVolumesPutOptionsModel.Size = core.Float64Ptr(float64(72.5))
				pcloudCloudinstancesVolumesPutOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesPut(pcloudCloudinstancesVolumesPutOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesVolumesActionPost(pcloudCloudinstancesVolumesActionPostOptions *PcloudCloudinstancesVolumesActionPostOptions) - Operation response error`, func() {
		pcloudCloudinstancesVolumesActionPostPath := "/pcloud/v1/cloud-instances/testString/volumes/testString/action"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesVolumesActionPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesActionPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesActionPostOptions model
				pcloudCloudinstancesVolumesActionPostOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesActionPostOptions)
				pcloudCloudinstancesVolumesActionPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesActionPostOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesActionPostOptionsModel.ReplicationEnabled = core.BoolPtr(true)
				pcloudCloudinstancesVolumesActionPostOptionsModel.TargetStorageTier = core.StringPtr("testString")
				pcloudCloudinstancesVolumesActionPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesActionPost(pcloudCloudinstancesVolumesActionPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudinstancesVolumesActionPost(pcloudCloudinstancesVolumesActionPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesVolumesActionPost(pcloudCloudinstancesVolumesActionPostOptions *PcloudCloudinstancesVolumesActionPostOptions)`, func() {
		pcloudCloudinstancesVolumesActionPostPath := "/pcloud/v1/cloud-instances/testString/volumes/testString/action"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesVolumesActionPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesActionPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudinstancesVolumesActionPostOptions model
				pcloudCloudinstancesVolumesActionPostOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesActionPostOptions)
				pcloudCloudinstancesVolumesActionPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesActionPostOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesActionPostOptionsModel.ReplicationEnabled = core.BoolPtr(true)
				pcloudCloudinstancesVolumesActionPostOptionsModel.TargetStorageTier = core.StringPtr("testString")
				pcloudCloudinstancesVolumesActionPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudinstancesVolumesActionPostWithContext(ctx, pcloudCloudinstancesVolumesActionPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesActionPost(pcloudCloudinstancesVolumesActionPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudinstancesVolumesActionPostWithContext(ctx, pcloudCloudinstancesVolumesActionPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesVolumesActionPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesActionPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesActionPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesActionPostOptions model
				pcloudCloudinstancesVolumesActionPostOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesActionPostOptions)
				pcloudCloudinstancesVolumesActionPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesActionPostOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesActionPostOptionsModel.ReplicationEnabled = core.BoolPtr(true)
				pcloudCloudinstancesVolumesActionPostOptionsModel.TargetStorageTier = core.StringPtr("testString")
				pcloudCloudinstancesVolumesActionPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudinstancesVolumesActionPost(pcloudCloudinstancesVolumesActionPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudinstancesVolumesActionPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesActionPostOptions model
				pcloudCloudinstancesVolumesActionPostOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesActionPostOptions)
				pcloudCloudinstancesVolumesActionPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesActionPostOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesActionPostOptionsModel.ReplicationEnabled = core.BoolPtr(true)
				pcloudCloudinstancesVolumesActionPostOptionsModel.TargetStorageTier = core.StringPtr("testString")
				pcloudCloudinstancesVolumesActionPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesActionPost(pcloudCloudinstancesVolumesActionPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudinstancesVolumesActionPostOptions model with no property values
				pcloudCloudinstancesVolumesActionPostOptionsModelNew := new(powervsv1.PcloudCloudinstancesVolumesActionPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudinstancesVolumesActionPost(pcloudCloudinstancesVolumesActionPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesActionPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesActionPostOptions model
				pcloudCloudinstancesVolumesActionPostOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesActionPostOptions)
				pcloudCloudinstancesVolumesActionPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesActionPostOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesActionPostOptionsModel.ReplicationEnabled = core.BoolPtr(true)
				pcloudCloudinstancesVolumesActionPostOptionsModel.TargetStorageTier = core.StringPtr("testString")
				pcloudCloudinstancesVolumesActionPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesActionPost(pcloudCloudinstancesVolumesActionPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesVolumesFlashCopyMappingsGet(pcloudCloudinstancesVolumesFlashCopyMappingsGetOptions *PcloudCloudinstancesVolumesFlashCopyMappingsGetOptions) - Operation response error`, func() {
		pcloudCloudinstancesVolumesFlashCopyMappingsGetPath := "/pcloud/v1/cloud-instances/testString/volumes/testString/flash-copy-mappings"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesVolumesFlashCopyMappingsGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesFlashCopyMappingsGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesFlashCopyMappingsGetOptions model
				pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesFlashCopyMappingsGetOptions)
				pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesFlashCopyMappingsGet(pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudinstancesVolumesFlashCopyMappingsGet(pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesVolumesFlashCopyMappingsGet(pcloudCloudinstancesVolumesFlashCopyMappingsGetOptions *PcloudCloudinstancesVolumesFlashCopyMappingsGetOptions)`, func() {
		pcloudCloudinstancesVolumesFlashCopyMappingsGetPath := "/pcloud/v1/cloud-instances/testString/volumes/testString/flash-copy-mappings"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesVolumesFlashCopyMappingsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"copyRate": 8, "flashCopyName": "FlashCopyName", "progress": 8, "sourceVolumeName": "SourceVolumeName", "startTime": "2019-01-01T12:00:00.000Z", "status": "Status", "targetVolumeName": "TargetVolumeName"}]`)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesFlashCopyMappingsGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudinstancesVolumesFlashCopyMappingsGetOptions model
				pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesFlashCopyMappingsGetOptions)
				pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudinstancesVolumesFlashCopyMappingsGetWithContext(ctx, pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesFlashCopyMappingsGet(pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudinstancesVolumesFlashCopyMappingsGetWithContext(ctx, pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesVolumesFlashCopyMappingsGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"copyRate": 8, "flashCopyName": "FlashCopyName", "progress": 8, "sourceVolumeName": "SourceVolumeName", "startTime": "2019-01-01T12:00:00.000Z", "status": "Status", "targetVolumeName": "TargetVolumeName"}]`)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesFlashCopyMappingsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesFlashCopyMappingsGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesFlashCopyMappingsGetOptions model
				pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesFlashCopyMappingsGetOptions)
				pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudinstancesVolumesFlashCopyMappingsGet(pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudinstancesVolumesFlashCopyMappingsGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesFlashCopyMappingsGetOptions model
				pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesFlashCopyMappingsGetOptions)
				pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesFlashCopyMappingsGet(pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudinstancesVolumesFlashCopyMappingsGetOptions model with no property values
				pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModelNew := new(powervsv1.PcloudCloudinstancesVolumesFlashCopyMappingsGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudinstancesVolumesFlashCopyMappingsGet(pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesFlashCopyMappingsGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesFlashCopyMappingsGetOptions model
				pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesFlashCopyMappingsGetOptions)
				pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesFlashCopyMappingsGet(pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesVolumesRemoteCopyRelationshipGet(pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptions *PcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptions) - Operation response error`, func() {
		pcloudCloudinstancesVolumesRemoteCopyRelationshipGetPath := "/pcloud/v1/cloud-instances/testString/volumes/testString/remote-copy"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesVolumesRemoteCopyRelationshipGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesRemoteCopyRelationshipGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptions model
				pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptions)
				pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesRemoteCopyRelationshipGet(pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudCloudinstancesVolumesRemoteCopyRelationshipGet(pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudCloudinstancesVolumesRemoteCopyRelationshipGet(pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptions *PcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptions)`, func() {
		pcloudCloudinstancesVolumesRemoteCopyRelationshipGetPath := "/pcloud/v1/cloud-instances/testString/volumes/testString/remote-copy"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesVolumesRemoteCopyRelationshipGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"auxChangedVolumeName": "AuxChangedVolumeName", "auxVolumeName": "AuxVolumeName", "consistencyGroupName": "ConsistencyGroupName", "copyType": "CopyType", "cyclingMode": "CyclingMode", "freezeTime": "2019-01-01T12:00:00.000Z", "masterChangedVolumeName": "MasterChangedVolumeName", "masterVolumeName": "MasterVolumeName", "name": "Name", "primaryRole": "PrimaryRole", "progress": 8, "remoteCopyID": "RemoteCopyID", "state": "State", "sync": "Sync", "cyclePeriodSeconds": 18, "id": "ID"}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesRemoteCopyRelationshipGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptions model
				pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptions)
				pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudCloudinstancesVolumesRemoteCopyRelationshipGetWithContext(ctx, pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesRemoteCopyRelationshipGet(pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudCloudinstancesVolumesRemoteCopyRelationshipGetWithContext(ctx, pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudCloudinstancesVolumesRemoteCopyRelationshipGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"auxChangedVolumeName": "AuxChangedVolumeName", "auxVolumeName": "AuxVolumeName", "consistencyGroupName": "ConsistencyGroupName", "copyType": "CopyType", "cyclingMode": "CyclingMode", "freezeTime": "2019-01-01T12:00:00.000Z", "masterChangedVolumeName": "MasterChangedVolumeName", "masterVolumeName": "MasterVolumeName", "name": "Name", "primaryRole": "PrimaryRole", "progress": 8, "remoteCopyID": "RemoteCopyID", "state": "State", "sync": "Sync", "cyclePeriodSeconds": 18, "id": "ID"}`)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesRemoteCopyRelationshipGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesRemoteCopyRelationshipGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptions model
				pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptions)
				pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudCloudinstancesVolumesRemoteCopyRelationshipGet(pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudCloudinstancesVolumesRemoteCopyRelationshipGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptions model
				pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptions)
				pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesRemoteCopyRelationshipGet(pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptions model with no property values
				pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModelNew := new(powervsv1.PcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudCloudinstancesVolumesRemoteCopyRelationshipGet(pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudCloudinstancesVolumesRemoteCopyRelationshipGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptions model
				pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel := new(powervsv1.PcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptions)
				pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel.VolumeID = core.StringPtr("testString")
				pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudCloudinstancesVolumesRemoteCopyRelationshipGet(pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2PvminstancesVolumesDelete(pcloudV2PvminstancesVolumesDeleteOptions *PcloudV2PvminstancesVolumesDeleteOptions) - Operation response error`, func() {
		pcloudV2PvminstancesVolumesDeletePath := "/pcloud/v2/cloud-instances/testString/pvm-instances/testString/volumes"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2PvminstancesVolumesDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudV2PvminstancesVolumesDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2PvminstancesVolumesDeleteOptions model
				pcloudV2PvminstancesVolumesDeleteOptionsModel := new(powervsv1.PcloudV2PvminstancesVolumesDeleteOptions)
				pcloudV2PvminstancesVolumesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesVolumesDeleteOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesVolumesDeleteOptionsModel.DetachAllVolumes = core.BoolPtr(false)
				pcloudV2PvminstancesVolumesDeleteOptionsModel.DetachPrimaryBootVolume = core.BoolPtr(false)
				pcloudV2PvminstancesVolumesDeleteOptionsModel.VolumeIDs = []string{"testString"}
				pcloudV2PvminstancesVolumesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudV2PvminstancesVolumesDelete(pcloudV2PvminstancesVolumesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudV2PvminstancesVolumesDelete(pcloudV2PvminstancesVolumesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2PvminstancesVolumesDelete(pcloudV2PvminstancesVolumesDeleteOptions *PcloudV2PvminstancesVolumesDeleteOptions)`, func() {
		pcloudV2PvminstancesVolumesDeletePath := "/pcloud/v2/cloud-instances/testString/pvm-instances/testString/volumes"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2PvminstancesVolumesDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"summary": "Summary"}`)
				}))
			})
			It(`Invoke PcloudV2PvminstancesVolumesDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudV2PvminstancesVolumesDeleteOptions model
				pcloudV2PvminstancesVolumesDeleteOptionsModel := new(powervsv1.PcloudV2PvminstancesVolumesDeleteOptions)
				pcloudV2PvminstancesVolumesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesVolumesDeleteOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesVolumesDeleteOptionsModel.DetachAllVolumes = core.BoolPtr(false)
				pcloudV2PvminstancesVolumesDeleteOptionsModel.DetachPrimaryBootVolume = core.BoolPtr(false)
				pcloudV2PvminstancesVolumesDeleteOptionsModel.VolumeIDs = []string{"testString"}
				pcloudV2PvminstancesVolumesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudV2PvminstancesVolumesDeleteWithContext(ctx, pcloudV2PvminstancesVolumesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudV2PvminstancesVolumesDelete(pcloudV2PvminstancesVolumesDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudV2PvminstancesVolumesDeleteWithContext(ctx, pcloudV2PvminstancesVolumesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2PvminstancesVolumesDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"summary": "Summary"}`)
				}))
			})
			It(`Invoke PcloudV2PvminstancesVolumesDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudV2PvminstancesVolumesDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudV2PvminstancesVolumesDeleteOptions model
				pcloudV2PvminstancesVolumesDeleteOptionsModel := new(powervsv1.PcloudV2PvminstancesVolumesDeleteOptions)
				pcloudV2PvminstancesVolumesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesVolumesDeleteOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesVolumesDeleteOptionsModel.DetachAllVolumes = core.BoolPtr(false)
				pcloudV2PvminstancesVolumesDeleteOptionsModel.DetachPrimaryBootVolume = core.BoolPtr(false)
				pcloudV2PvminstancesVolumesDeleteOptionsModel.VolumeIDs = []string{"testString"}
				pcloudV2PvminstancesVolumesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudV2PvminstancesVolumesDelete(pcloudV2PvminstancesVolumesDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudV2PvminstancesVolumesDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2PvminstancesVolumesDeleteOptions model
				pcloudV2PvminstancesVolumesDeleteOptionsModel := new(powervsv1.PcloudV2PvminstancesVolumesDeleteOptions)
				pcloudV2PvminstancesVolumesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesVolumesDeleteOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesVolumesDeleteOptionsModel.DetachAllVolumes = core.BoolPtr(false)
				pcloudV2PvminstancesVolumesDeleteOptionsModel.DetachPrimaryBootVolume = core.BoolPtr(false)
				pcloudV2PvminstancesVolumesDeleteOptionsModel.VolumeIDs = []string{"testString"}
				pcloudV2PvminstancesVolumesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudV2PvminstancesVolumesDelete(pcloudV2PvminstancesVolumesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudV2PvminstancesVolumesDeleteOptions model with no property values
				pcloudV2PvminstancesVolumesDeleteOptionsModelNew := new(powervsv1.PcloudV2PvminstancesVolumesDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudV2PvminstancesVolumesDelete(pcloudV2PvminstancesVolumesDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudV2PvminstancesVolumesDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2PvminstancesVolumesDeleteOptions model
				pcloudV2PvminstancesVolumesDeleteOptionsModel := new(powervsv1.PcloudV2PvminstancesVolumesDeleteOptions)
				pcloudV2PvminstancesVolumesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesVolumesDeleteOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesVolumesDeleteOptionsModel.DetachAllVolumes = core.BoolPtr(false)
				pcloudV2PvminstancesVolumesDeleteOptionsModel.DetachPrimaryBootVolume = core.BoolPtr(false)
				pcloudV2PvminstancesVolumesDeleteOptionsModel.VolumeIDs = []string{"testString"}
				pcloudV2PvminstancesVolumesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudV2PvminstancesVolumesDelete(pcloudV2PvminstancesVolumesDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2PvminstancesVolumesPost(pcloudV2PvminstancesVolumesPostOptions *PcloudV2PvminstancesVolumesPostOptions) - Operation response error`, func() {
		pcloudV2PvminstancesVolumesPostPath := "/pcloud/v2/cloud-instances/testString/pvm-instances/testString/volumes"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2PvminstancesVolumesPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudV2PvminstancesVolumesPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2PvminstancesVolumesPostOptions model
				pcloudV2PvminstancesVolumesPostOptionsModel := new(powervsv1.PcloudV2PvminstancesVolumesPostOptions)
				pcloudV2PvminstancesVolumesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesVolumesPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesVolumesPostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudV2PvminstancesVolumesPostOptionsModel.BootVolumeID = core.StringPtr("testString")
				pcloudV2PvminstancesVolumesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudV2PvminstancesVolumesPost(pcloudV2PvminstancesVolumesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudV2PvminstancesVolumesPost(pcloudV2PvminstancesVolumesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2PvminstancesVolumesPost(pcloudV2PvminstancesVolumesPostOptions *PcloudV2PvminstancesVolumesPostOptions)`, func() {
		pcloudV2PvminstancesVolumesPostPath := "/pcloud/v2/cloud-instances/testString/pvm-instances/testString/volumes"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2PvminstancesVolumesPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"summary": "Summary"}`)
				}))
			})
			It(`Invoke PcloudV2PvminstancesVolumesPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudV2PvminstancesVolumesPostOptions model
				pcloudV2PvminstancesVolumesPostOptionsModel := new(powervsv1.PcloudV2PvminstancesVolumesPostOptions)
				pcloudV2PvminstancesVolumesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesVolumesPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesVolumesPostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudV2PvminstancesVolumesPostOptionsModel.BootVolumeID = core.StringPtr("testString")
				pcloudV2PvminstancesVolumesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudV2PvminstancesVolumesPostWithContext(ctx, pcloudV2PvminstancesVolumesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudV2PvminstancesVolumesPost(pcloudV2PvminstancesVolumesPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudV2PvminstancesVolumesPostWithContext(ctx, pcloudV2PvminstancesVolumesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2PvminstancesVolumesPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"summary": "Summary"}`)
				}))
			})
			It(`Invoke PcloudV2PvminstancesVolumesPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudV2PvminstancesVolumesPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudV2PvminstancesVolumesPostOptions model
				pcloudV2PvminstancesVolumesPostOptionsModel := new(powervsv1.PcloudV2PvminstancesVolumesPostOptions)
				pcloudV2PvminstancesVolumesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesVolumesPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesVolumesPostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudV2PvminstancesVolumesPostOptionsModel.BootVolumeID = core.StringPtr("testString")
				pcloudV2PvminstancesVolumesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudV2PvminstancesVolumesPost(pcloudV2PvminstancesVolumesPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudV2PvminstancesVolumesPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2PvminstancesVolumesPostOptions model
				pcloudV2PvminstancesVolumesPostOptionsModel := new(powervsv1.PcloudV2PvminstancesVolumesPostOptions)
				pcloudV2PvminstancesVolumesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesVolumesPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesVolumesPostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudV2PvminstancesVolumesPostOptionsModel.BootVolumeID = core.StringPtr("testString")
				pcloudV2PvminstancesVolumesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudV2PvminstancesVolumesPost(pcloudV2PvminstancesVolumesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudV2PvminstancesVolumesPostOptions model with no property values
				pcloudV2PvminstancesVolumesPostOptionsModelNew := new(powervsv1.PcloudV2PvminstancesVolumesPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudV2PvminstancesVolumesPost(pcloudV2PvminstancesVolumesPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudV2PvminstancesVolumesPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2PvminstancesVolumesPostOptions model
				pcloudV2PvminstancesVolumesPostOptionsModel := new(powervsv1.PcloudV2PvminstancesVolumesPostOptions)
				pcloudV2PvminstancesVolumesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesVolumesPostOptionsModel.PvmInstanceID = core.StringPtr("testString")
				pcloudV2PvminstancesVolumesPostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudV2PvminstancesVolumesPostOptionsModel.BootVolumeID = core.StringPtr("testString")
				pcloudV2PvminstancesVolumesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudV2PvminstancesVolumesPost(pcloudV2PvminstancesVolumesPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2VolumesDelete(pcloudV2VolumesDeleteOptions *PcloudV2VolumesDeleteOptions) - Operation response error`, func() {
		pcloudV2VolumesDeletePath := "/pcloud/v2/cloud-instances/testString/volumes"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumesDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudV2VolumesDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumesDeleteOptions model
				pcloudV2VolumesDeleteOptionsModel := new(powervsv1.PcloudV2VolumesDeleteOptions)
				pcloudV2VolumesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumesDeleteOptionsModel.VolumeIDs = []string{"testString"}
				pcloudV2VolumesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudV2VolumesDelete(pcloudV2VolumesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudV2VolumesDelete(pcloudV2VolumesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2VolumesDelete(pcloudV2VolumesDeleteOptions *PcloudV2VolumesDeleteOptions)`, func() {
		pcloudV2VolumesDeletePath := "/pcloud/v2/cloud-instances/testString/volumes"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumesDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"summary": "Summary"}`)
				}))
			})
			It(`Invoke PcloudV2VolumesDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudV2VolumesDeleteOptions model
				pcloudV2VolumesDeleteOptionsModel := new(powervsv1.PcloudV2VolumesDeleteOptions)
				pcloudV2VolumesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumesDeleteOptionsModel.VolumeIDs = []string{"testString"}
				pcloudV2VolumesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudV2VolumesDeleteWithContext(ctx, pcloudV2VolumesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudV2VolumesDelete(pcloudV2VolumesDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudV2VolumesDeleteWithContext(ctx, pcloudV2VolumesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumesDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"summary": "Summary"}`)
				}))
			})
			It(`Invoke PcloudV2VolumesDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudV2VolumesDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudV2VolumesDeleteOptions model
				pcloudV2VolumesDeleteOptionsModel := new(powervsv1.PcloudV2VolumesDeleteOptions)
				pcloudV2VolumesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumesDeleteOptionsModel.VolumeIDs = []string{"testString"}
				pcloudV2VolumesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudV2VolumesDelete(pcloudV2VolumesDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudV2VolumesDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumesDeleteOptions model
				pcloudV2VolumesDeleteOptionsModel := new(powervsv1.PcloudV2VolumesDeleteOptions)
				pcloudV2VolumesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumesDeleteOptionsModel.VolumeIDs = []string{"testString"}
				pcloudV2VolumesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudV2VolumesDelete(pcloudV2VolumesDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudV2VolumesDeleteOptions model with no property values
				pcloudV2VolumesDeleteOptionsModelNew := new(powervsv1.PcloudV2VolumesDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudV2VolumesDelete(pcloudV2VolumesDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudV2VolumesDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumesDeleteOptions model
				pcloudV2VolumesDeleteOptionsModel := new(powervsv1.PcloudV2VolumesDeleteOptions)
				pcloudV2VolumesDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumesDeleteOptionsModel.VolumeIDs = []string{"testString"}
				pcloudV2VolumesDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudV2VolumesDelete(pcloudV2VolumesDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2VolumesPost(pcloudV2VolumesPostOptions *PcloudV2VolumesPostOptions) - Operation response error`, func() {
		pcloudV2VolumesPostPath := "/pcloud/v2/cloud-instances/testString/volumes"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumesPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudV2VolumesPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumesPostOptions model
				pcloudV2VolumesPostOptionsModel := new(powervsv1.PcloudV2VolumesPostOptions)
				pcloudV2VolumesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.Name = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.Size = core.Int64Ptr(int64(38))
				pcloudV2VolumesPostOptionsModel.AffinityPvmInstance = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.AffinityPolicy = core.StringPtr("affinity")
				pcloudV2VolumesPostOptionsModel.AffinityVolume = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.AntiAffinityPvmInstances = []string{"testString"}
				pcloudV2VolumesPostOptionsModel.AntiAffinityVolumes = []string{"testString"}
				pcloudV2VolumesPostOptionsModel.Count = core.Int64Ptr(int64(38))
				pcloudV2VolumesPostOptionsModel.DiskType = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.ReplicationEnabled = core.BoolPtr(true)
				pcloudV2VolumesPostOptionsModel.Shareable = core.BoolPtr(true)
				pcloudV2VolumesPostOptionsModel.VolumePool = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudV2VolumesPost(pcloudV2VolumesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudV2VolumesPost(pcloudV2VolumesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2VolumesPost(pcloudV2VolumesPostOptions *PcloudV2VolumesPostOptions)`, func() {
		pcloudV2VolumesPostPath := "/pcloud/v2/cloud-instances/testString/volumes"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumesPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"volumes": [{"auxVolumeName": "AuxVolumeName", "auxiliary": false, "bootVolume": true, "bootable": true, "consistencyGroupName": "ConsistencyGroupName", "creationDate": "2019-01-01T12:00:00.000Z", "deleteOnTermination": false, "diskType": "DiskType", "groupID": "GroupID", "href": "Href", "ioThrottleRate": "IoThrottleRate", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "masterVolumeName": "MasterVolumeName", "mirroringState": "MirroringState", "name": "Name", "outOfBandDeleted": true, "primaryRole": "master", "pvmInstanceIDs": ["PvmInstanceIDs"], "replicationEnabled": true, "replicationStatus": "ReplicationStatus", "replicationType": "ReplicationType", "shareable": false, "size": 4, "state": "State", "volumeID": "VolumeID", "volumePool": "VolumePool", "volumeType": "VolumeType", "wwn": "Wwn"}]}`)
				}))
			})
			It(`Invoke PcloudV2VolumesPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudV2VolumesPostOptions model
				pcloudV2VolumesPostOptionsModel := new(powervsv1.PcloudV2VolumesPostOptions)
				pcloudV2VolumesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.Name = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.Size = core.Int64Ptr(int64(38))
				pcloudV2VolumesPostOptionsModel.AffinityPvmInstance = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.AffinityPolicy = core.StringPtr("affinity")
				pcloudV2VolumesPostOptionsModel.AffinityVolume = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.AntiAffinityPvmInstances = []string{"testString"}
				pcloudV2VolumesPostOptionsModel.AntiAffinityVolumes = []string{"testString"}
				pcloudV2VolumesPostOptionsModel.Count = core.Int64Ptr(int64(38))
				pcloudV2VolumesPostOptionsModel.DiskType = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.ReplicationEnabled = core.BoolPtr(true)
				pcloudV2VolumesPostOptionsModel.Shareable = core.BoolPtr(true)
				pcloudV2VolumesPostOptionsModel.VolumePool = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudV2VolumesPostWithContext(ctx, pcloudV2VolumesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudV2VolumesPost(pcloudV2VolumesPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudV2VolumesPostWithContext(ctx, pcloudV2VolumesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumesPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"volumes": [{"auxVolumeName": "AuxVolumeName", "auxiliary": false, "bootVolume": true, "bootable": true, "consistencyGroupName": "ConsistencyGroupName", "creationDate": "2019-01-01T12:00:00.000Z", "deleteOnTermination": false, "diskType": "DiskType", "groupID": "GroupID", "href": "Href", "ioThrottleRate": "IoThrottleRate", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "masterVolumeName": "MasterVolumeName", "mirroringState": "MirroringState", "name": "Name", "outOfBandDeleted": true, "primaryRole": "master", "pvmInstanceIDs": ["PvmInstanceIDs"], "replicationEnabled": true, "replicationStatus": "ReplicationStatus", "replicationType": "ReplicationType", "shareable": false, "size": 4, "state": "State", "volumeID": "VolumeID", "volumePool": "VolumePool", "volumeType": "VolumeType", "wwn": "Wwn"}]}`)
				}))
			})
			It(`Invoke PcloudV2VolumesPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudV2VolumesPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudV2VolumesPostOptions model
				pcloudV2VolumesPostOptionsModel := new(powervsv1.PcloudV2VolumesPostOptions)
				pcloudV2VolumesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.Name = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.Size = core.Int64Ptr(int64(38))
				pcloudV2VolumesPostOptionsModel.AffinityPvmInstance = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.AffinityPolicy = core.StringPtr("affinity")
				pcloudV2VolumesPostOptionsModel.AffinityVolume = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.AntiAffinityPvmInstances = []string{"testString"}
				pcloudV2VolumesPostOptionsModel.AntiAffinityVolumes = []string{"testString"}
				pcloudV2VolumesPostOptionsModel.Count = core.Int64Ptr(int64(38))
				pcloudV2VolumesPostOptionsModel.DiskType = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.ReplicationEnabled = core.BoolPtr(true)
				pcloudV2VolumesPostOptionsModel.Shareable = core.BoolPtr(true)
				pcloudV2VolumesPostOptionsModel.VolumePool = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudV2VolumesPost(pcloudV2VolumesPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudV2VolumesPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumesPostOptions model
				pcloudV2VolumesPostOptionsModel := new(powervsv1.PcloudV2VolumesPostOptions)
				pcloudV2VolumesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.Name = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.Size = core.Int64Ptr(int64(38))
				pcloudV2VolumesPostOptionsModel.AffinityPvmInstance = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.AffinityPolicy = core.StringPtr("affinity")
				pcloudV2VolumesPostOptionsModel.AffinityVolume = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.AntiAffinityPvmInstances = []string{"testString"}
				pcloudV2VolumesPostOptionsModel.AntiAffinityVolumes = []string{"testString"}
				pcloudV2VolumesPostOptionsModel.Count = core.Int64Ptr(int64(38))
				pcloudV2VolumesPostOptionsModel.DiskType = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.ReplicationEnabled = core.BoolPtr(true)
				pcloudV2VolumesPostOptionsModel.Shareable = core.BoolPtr(true)
				pcloudV2VolumesPostOptionsModel.VolumePool = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudV2VolumesPost(pcloudV2VolumesPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudV2VolumesPostOptions model with no property values
				pcloudV2VolumesPostOptionsModelNew := new(powervsv1.PcloudV2VolumesPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudV2VolumesPost(pcloudV2VolumesPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke PcloudV2VolumesPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumesPostOptions model
				pcloudV2VolumesPostOptionsModel := new(powervsv1.PcloudV2VolumesPostOptions)
				pcloudV2VolumesPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.Name = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.Size = core.Int64Ptr(int64(38))
				pcloudV2VolumesPostOptionsModel.AffinityPvmInstance = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.AffinityPolicy = core.StringPtr("affinity")
				pcloudV2VolumesPostOptionsModel.AffinityVolume = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.AntiAffinityPvmInstances = []string{"testString"}
				pcloudV2VolumesPostOptionsModel.AntiAffinityVolumes = []string{"testString"}
				pcloudV2VolumesPostOptionsModel.Count = core.Int64Ptr(int64(38))
				pcloudV2VolumesPostOptionsModel.DiskType = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.ReplicationEnabled = core.BoolPtr(true)
				pcloudV2VolumesPostOptionsModel.Shareable = core.BoolPtr(true)
				pcloudV2VolumesPostOptionsModel.VolumePool = core.StringPtr("testString")
				pcloudV2VolumesPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudV2VolumesPost(pcloudV2VolumesPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2VolumescloneGetall(pcloudV2VolumescloneGetallOptions *PcloudV2VolumescloneGetallOptions) - Operation response error`, func() {
		pcloudV2VolumescloneGetallPath := "/pcloud/v2/cloud-instances/testString/volumes-clone"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumescloneGetallPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["filter"]).To(Equal([]string{"prepare"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudV2VolumescloneGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumescloneGetallOptions model
				pcloudV2VolumescloneGetallOptionsModel := new(powervsv1.PcloudV2VolumescloneGetallOptions)
				pcloudV2VolumescloneGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneGetallOptionsModel.Filter = core.StringPtr("prepare")
				pcloudV2VolumescloneGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudV2VolumescloneGetall(pcloudV2VolumescloneGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudV2VolumescloneGetall(pcloudV2VolumescloneGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2VolumescloneGetall(pcloudV2VolumescloneGetallOptions *PcloudV2VolumescloneGetallOptions)`, func() {
		pcloudV2VolumescloneGetallPath := "/pcloud/v2/cloud-instances/testString/volumes-clone"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumescloneGetallPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["filter"]).To(Equal([]string{"prepare"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"volumesClone": [{"action": "Action", "creationDate": "2019-01-01T12:00:00.000Z", "failureMessage": "FailureMessage", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "name": "Name", "percentComplete": 15, "status": "Status", "volumesCloneID": "VolumesCloneID"}]}`)
				}))
			})
			It(`Invoke PcloudV2VolumescloneGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudV2VolumescloneGetallOptions model
				pcloudV2VolumescloneGetallOptionsModel := new(powervsv1.PcloudV2VolumescloneGetallOptions)
				pcloudV2VolumescloneGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneGetallOptionsModel.Filter = core.StringPtr("prepare")
				pcloudV2VolumescloneGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudV2VolumescloneGetallWithContext(ctx, pcloudV2VolumescloneGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudV2VolumescloneGetall(pcloudV2VolumescloneGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudV2VolumescloneGetallWithContext(ctx, pcloudV2VolumescloneGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumescloneGetallPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["filter"]).To(Equal([]string{"prepare"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"volumesClone": [{"action": "Action", "creationDate": "2019-01-01T12:00:00.000Z", "failureMessage": "FailureMessage", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "name": "Name", "percentComplete": 15, "status": "Status", "volumesCloneID": "VolumesCloneID"}]}`)
				}))
			})
			It(`Invoke PcloudV2VolumescloneGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudV2VolumescloneGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudV2VolumescloneGetallOptions model
				pcloudV2VolumescloneGetallOptionsModel := new(powervsv1.PcloudV2VolumescloneGetallOptions)
				pcloudV2VolumescloneGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneGetallOptionsModel.Filter = core.StringPtr("prepare")
				pcloudV2VolumescloneGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudV2VolumescloneGetall(pcloudV2VolumescloneGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudV2VolumescloneGetall with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumescloneGetallOptions model
				pcloudV2VolumescloneGetallOptionsModel := new(powervsv1.PcloudV2VolumescloneGetallOptions)
				pcloudV2VolumescloneGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneGetallOptionsModel.Filter = core.StringPtr("prepare")
				pcloudV2VolumescloneGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudV2VolumescloneGetall(pcloudV2VolumescloneGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudV2VolumescloneGetallOptions model with no property values
				pcloudV2VolumescloneGetallOptionsModelNew := new(powervsv1.PcloudV2VolumescloneGetallOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudV2VolumescloneGetall(pcloudV2VolumescloneGetallOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudV2VolumescloneGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumescloneGetallOptions model
				pcloudV2VolumescloneGetallOptionsModel := new(powervsv1.PcloudV2VolumescloneGetallOptions)
				pcloudV2VolumescloneGetallOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneGetallOptionsModel.Filter = core.StringPtr("prepare")
				pcloudV2VolumescloneGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudV2VolumescloneGetall(pcloudV2VolumescloneGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2VolumesclonePost(pcloudV2VolumesclonePostOptions *PcloudV2VolumesclonePostOptions) - Operation response error`, func() {
		pcloudV2VolumesclonePostPath := "/pcloud/v2/cloud-instances/testString/volumes-clone"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumesclonePostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudV2VolumesclonePost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumesclonePostOptions model
				pcloudV2VolumesclonePostOptionsModel := new(powervsv1.PcloudV2VolumesclonePostOptions)
				pcloudV2VolumesclonePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumesclonePostOptionsModel.Name = core.StringPtr("testString")
				pcloudV2VolumesclonePostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudV2VolumesclonePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudV2VolumesclonePost(pcloudV2VolumesclonePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudV2VolumesclonePost(pcloudV2VolumesclonePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2VolumesclonePost(pcloudV2VolumesclonePostOptions *PcloudV2VolumesclonePostOptions)`, func() {
		pcloudV2VolumesclonePostPath := "/pcloud/v2/cloud-instances/testString/volumes-clone"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumesclonePostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"action": "Action", "creationDate": "2019-01-01T12:00:00.000Z", "failureMessage": "FailureMessage", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "name": "Name", "percentComplete": 15, "status": "Status", "volumesCloneID": "VolumesCloneID"}`)
				}))
			})
			It(`Invoke PcloudV2VolumesclonePost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudV2VolumesclonePostOptions model
				pcloudV2VolumesclonePostOptionsModel := new(powervsv1.PcloudV2VolumesclonePostOptions)
				pcloudV2VolumesclonePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumesclonePostOptionsModel.Name = core.StringPtr("testString")
				pcloudV2VolumesclonePostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudV2VolumesclonePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudV2VolumesclonePostWithContext(ctx, pcloudV2VolumesclonePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudV2VolumesclonePost(pcloudV2VolumesclonePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudV2VolumesclonePostWithContext(ctx, pcloudV2VolumesclonePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumesclonePostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"action": "Action", "creationDate": "2019-01-01T12:00:00.000Z", "failureMessage": "FailureMessage", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "name": "Name", "percentComplete": 15, "status": "Status", "volumesCloneID": "VolumesCloneID"}`)
				}))
			})
			It(`Invoke PcloudV2VolumesclonePost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudV2VolumesclonePost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudV2VolumesclonePostOptions model
				pcloudV2VolumesclonePostOptionsModel := new(powervsv1.PcloudV2VolumesclonePostOptions)
				pcloudV2VolumesclonePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumesclonePostOptionsModel.Name = core.StringPtr("testString")
				pcloudV2VolumesclonePostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudV2VolumesclonePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudV2VolumesclonePost(pcloudV2VolumesclonePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudV2VolumesclonePost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumesclonePostOptions model
				pcloudV2VolumesclonePostOptionsModel := new(powervsv1.PcloudV2VolumesclonePostOptions)
				pcloudV2VolumesclonePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumesclonePostOptionsModel.Name = core.StringPtr("testString")
				pcloudV2VolumesclonePostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudV2VolumesclonePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudV2VolumesclonePost(pcloudV2VolumesclonePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudV2VolumesclonePostOptions model with no property values
				pcloudV2VolumesclonePostOptionsModelNew := new(powervsv1.PcloudV2VolumesclonePostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudV2VolumesclonePost(pcloudV2VolumesclonePostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudV2VolumesclonePost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumesclonePostOptions model
				pcloudV2VolumesclonePostOptionsModel := new(powervsv1.PcloudV2VolumesclonePostOptions)
				pcloudV2VolumesclonePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumesclonePostOptionsModel.Name = core.StringPtr("testString")
				pcloudV2VolumesclonePostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudV2VolumesclonePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudV2VolumesclonePost(pcloudV2VolumesclonePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2VolumescloneDelete(pcloudV2VolumescloneDeleteOptions *PcloudV2VolumescloneDeleteOptions) - Operation response error`, func() {
		pcloudV2VolumescloneDeletePath := "/pcloud/v2/cloud-instances/testString/volumes-clone/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumescloneDeletePath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudV2VolumescloneDelete with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumescloneDeleteOptions model
				pcloudV2VolumescloneDeleteOptionsModel := new(powervsv1.PcloudV2VolumescloneDeleteOptions)
				pcloudV2VolumescloneDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneDeleteOptionsModel.VolumesCloneID = core.StringPtr("testString")
				pcloudV2VolumescloneDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudV2VolumescloneDelete(pcloudV2VolumescloneDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudV2VolumescloneDelete(pcloudV2VolumescloneDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2VolumescloneDelete(pcloudV2VolumescloneDeleteOptions *PcloudV2VolumescloneDeleteOptions)`, func() {
		pcloudV2VolumescloneDeletePath := "/pcloud/v2/cloud-instances/testString/volumes-clone/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumescloneDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudV2VolumescloneDelete successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudV2VolumescloneDeleteOptions model
				pcloudV2VolumescloneDeleteOptionsModel := new(powervsv1.PcloudV2VolumescloneDeleteOptions)
				pcloudV2VolumescloneDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneDeleteOptionsModel.VolumesCloneID = core.StringPtr("testString")
				pcloudV2VolumescloneDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudV2VolumescloneDeleteWithContext(ctx, pcloudV2VolumescloneDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudV2VolumescloneDelete(pcloudV2VolumescloneDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudV2VolumescloneDeleteWithContext(ctx, pcloudV2VolumescloneDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumescloneDeletePath))
					Expect(req.Method).To(Equal("DELETE"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PcloudV2VolumescloneDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudV2VolumescloneDelete(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudV2VolumescloneDeleteOptions model
				pcloudV2VolumescloneDeleteOptionsModel := new(powervsv1.PcloudV2VolumescloneDeleteOptions)
				pcloudV2VolumescloneDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneDeleteOptionsModel.VolumesCloneID = core.StringPtr("testString")
				pcloudV2VolumescloneDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudV2VolumescloneDelete(pcloudV2VolumescloneDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudV2VolumescloneDelete with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumescloneDeleteOptions model
				pcloudV2VolumescloneDeleteOptionsModel := new(powervsv1.PcloudV2VolumescloneDeleteOptions)
				pcloudV2VolumescloneDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneDeleteOptionsModel.VolumesCloneID = core.StringPtr("testString")
				pcloudV2VolumescloneDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudV2VolumescloneDelete(pcloudV2VolumescloneDeleteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudV2VolumescloneDeleteOptions model with no property values
				pcloudV2VolumescloneDeleteOptionsModelNew := new(powervsv1.PcloudV2VolumescloneDeleteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudV2VolumescloneDelete(pcloudV2VolumescloneDeleteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudV2VolumescloneDelete successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumescloneDeleteOptions model
				pcloudV2VolumescloneDeleteOptionsModel := new(powervsv1.PcloudV2VolumescloneDeleteOptions)
				pcloudV2VolumescloneDeleteOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneDeleteOptionsModel.VolumesCloneID = core.StringPtr("testString")
				pcloudV2VolumescloneDeleteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudV2VolumescloneDelete(pcloudV2VolumescloneDeleteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2VolumescloneGet(pcloudV2VolumescloneGetOptions *PcloudV2VolumescloneGetOptions) - Operation response error`, func() {
		pcloudV2VolumescloneGetPath := "/pcloud/v2/cloud-instances/testString/volumes-clone/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumescloneGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudV2VolumescloneGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumescloneGetOptions model
				pcloudV2VolumescloneGetOptionsModel := new(powervsv1.PcloudV2VolumescloneGetOptions)
				pcloudV2VolumescloneGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneGetOptionsModel.VolumesCloneID = core.StringPtr("testString")
				pcloudV2VolumescloneGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudV2VolumescloneGet(pcloudV2VolumescloneGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudV2VolumescloneGet(pcloudV2VolumescloneGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2VolumescloneGet(pcloudV2VolumescloneGetOptions *PcloudV2VolumescloneGetOptions)`, func() {
		pcloudV2VolumescloneGetPath := "/pcloud/v2/cloud-instances/testString/volumes-clone/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumescloneGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"action": "Action", "clonedVolumes": [{"clone": {"name": "Name", "volumeID": "VolumeID"}, "source": {"name": "Name", "volumeID": "VolumeID"}}], "creationDate": "2019-01-01T12:00:00.000Z", "failureMessage": "FailureMessage", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "name": "Name", "percentComplete": 15, "status": "Status", "volumesCloneID": "VolumesCloneID"}`)
				}))
			})
			It(`Invoke PcloudV2VolumescloneGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudV2VolumescloneGetOptions model
				pcloudV2VolumescloneGetOptionsModel := new(powervsv1.PcloudV2VolumescloneGetOptions)
				pcloudV2VolumescloneGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneGetOptionsModel.VolumesCloneID = core.StringPtr("testString")
				pcloudV2VolumescloneGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudV2VolumescloneGetWithContext(ctx, pcloudV2VolumescloneGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudV2VolumescloneGet(pcloudV2VolumescloneGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudV2VolumescloneGetWithContext(ctx, pcloudV2VolumescloneGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumescloneGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"action": "Action", "clonedVolumes": [{"clone": {"name": "Name", "volumeID": "VolumeID"}, "source": {"name": "Name", "volumeID": "VolumeID"}}], "creationDate": "2019-01-01T12:00:00.000Z", "failureMessage": "FailureMessage", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "name": "Name", "percentComplete": 15, "status": "Status", "volumesCloneID": "VolumesCloneID"}`)
				}))
			})
			It(`Invoke PcloudV2VolumescloneGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudV2VolumescloneGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudV2VolumescloneGetOptions model
				pcloudV2VolumescloneGetOptionsModel := new(powervsv1.PcloudV2VolumescloneGetOptions)
				pcloudV2VolumescloneGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneGetOptionsModel.VolumesCloneID = core.StringPtr("testString")
				pcloudV2VolumescloneGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudV2VolumescloneGet(pcloudV2VolumescloneGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudV2VolumescloneGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumescloneGetOptions model
				pcloudV2VolumescloneGetOptionsModel := new(powervsv1.PcloudV2VolumescloneGetOptions)
				pcloudV2VolumescloneGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneGetOptionsModel.VolumesCloneID = core.StringPtr("testString")
				pcloudV2VolumescloneGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudV2VolumescloneGet(pcloudV2VolumescloneGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudV2VolumescloneGetOptions model with no property values
				pcloudV2VolumescloneGetOptionsModelNew := new(powervsv1.PcloudV2VolumescloneGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudV2VolumescloneGet(pcloudV2VolumescloneGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudV2VolumescloneGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumescloneGetOptions model
				pcloudV2VolumescloneGetOptionsModel := new(powervsv1.PcloudV2VolumescloneGetOptions)
				pcloudV2VolumescloneGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneGetOptionsModel.VolumesCloneID = core.StringPtr("testString")
				pcloudV2VolumescloneGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudV2VolumescloneGet(pcloudV2VolumescloneGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2VolumescloneCancelPost(pcloudV2VolumescloneCancelPostOptions *PcloudV2VolumescloneCancelPostOptions) - Operation response error`, func() {
		pcloudV2VolumescloneCancelPostPath := "/pcloud/v2/cloud-instances/testString/volumes-clone/testString/cancel"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumescloneCancelPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudV2VolumescloneCancelPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumescloneCancelPostOptions model
				pcloudV2VolumescloneCancelPostOptionsModel := new(powervsv1.PcloudV2VolumescloneCancelPostOptions)
				pcloudV2VolumescloneCancelPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneCancelPostOptionsModel.VolumesCloneID = core.StringPtr("testString")
				pcloudV2VolumescloneCancelPostOptionsModel.Force = core.BoolPtr(true)
				pcloudV2VolumescloneCancelPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudV2VolumescloneCancelPost(pcloudV2VolumescloneCancelPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudV2VolumescloneCancelPost(pcloudV2VolumescloneCancelPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2VolumescloneCancelPost(pcloudV2VolumescloneCancelPostOptions *PcloudV2VolumescloneCancelPostOptions)`, func() {
		pcloudV2VolumescloneCancelPostPath := "/pcloud/v2/cloud-instances/testString/volumes-clone/testString/cancel"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumescloneCancelPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"action": "Action", "creationDate": "2019-01-01T12:00:00.000Z", "failureMessage": "FailureMessage", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "name": "Name", "percentComplete": 15, "status": "Status", "volumesCloneID": "VolumesCloneID"}`)
				}))
			})
			It(`Invoke PcloudV2VolumescloneCancelPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudV2VolumescloneCancelPostOptions model
				pcloudV2VolumescloneCancelPostOptionsModel := new(powervsv1.PcloudV2VolumescloneCancelPostOptions)
				pcloudV2VolumescloneCancelPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneCancelPostOptionsModel.VolumesCloneID = core.StringPtr("testString")
				pcloudV2VolumescloneCancelPostOptionsModel.Force = core.BoolPtr(true)
				pcloudV2VolumescloneCancelPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudV2VolumescloneCancelPostWithContext(ctx, pcloudV2VolumescloneCancelPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudV2VolumescloneCancelPost(pcloudV2VolumescloneCancelPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudV2VolumescloneCancelPostWithContext(ctx, pcloudV2VolumescloneCancelPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumescloneCancelPostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"action": "Action", "creationDate": "2019-01-01T12:00:00.000Z", "failureMessage": "FailureMessage", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "name": "Name", "percentComplete": 15, "status": "Status", "volumesCloneID": "VolumesCloneID"}`)
				}))
			})
			It(`Invoke PcloudV2VolumescloneCancelPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudV2VolumescloneCancelPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudV2VolumescloneCancelPostOptions model
				pcloudV2VolumescloneCancelPostOptionsModel := new(powervsv1.PcloudV2VolumescloneCancelPostOptions)
				pcloudV2VolumescloneCancelPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneCancelPostOptionsModel.VolumesCloneID = core.StringPtr("testString")
				pcloudV2VolumescloneCancelPostOptionsModel.Force = core.BoolPtr(true)
				pcloudV2VolumescloneCancelPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudV2VolumescloneCancelPost(pcloudV2VolumescloneCancelPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudV2VolumescloneCancelPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumescloneCancelPostOptions model
				pcloudV2VolumescloneCancelPostOptionsModel := new(powervsv1.PcloudV2VolumescloneCancelPostOptions)
				pcloudV2VolumescloneCancelPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneCancelPostOptionsModel.VolumesCloneID = core.StringPtr("testString")
				pcloudV2VolumescloneCancelPostOptionsModel.Force = core.BoolPtr(true)
				pcloudV2VolumescloneCancelPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudV2VolumescloneCancelPost(pcloudV2VolumescloneCancelPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudV2VolumescloneCancelPostOptions model with no property values
				pcloudV2VolumescloneCancelPostOptionsModelNew := new(powervsv1.PcloudV2VolumescloneCancelPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudV2VolumescloneCancelPost(pcloudV2VolumescloneCancelPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudV2VolumescloneCancelPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumescloneCancelPostOptions model
				pcloudV2VolumescloneCancelPostOptionsModel := new(powervsv1.PcloudV2VolumescloneCancelPostOptions)
				pcloudV2VolumescloneCancelPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneCancelPostOptionsModel.VolumesCloneID = core.StringPtr("testString")
				pcloudV2VolumescloneCancelPostOptionsModel.Force = core.BoolPtr(true)
				pcloudV2VolumescloneCancelPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudV2VolumescloneCancelPost(pcloudV2VolumescloneCancelPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2VolumescloneExecutePost(pcloudV2VolumescloneExecutePostOptions *PcloudV2VolumescloneExecutePostOptions) - Operation response error`, func() {
		pcloudV2VolumescloneExecutePostPath := "/pcloud/v2/cloud-instances/testString/volumes-clone/testString/execute"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumescloneExecutePostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudV2VolumescloneExecutePost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumescloneExecutePostOptions model
				pcloudV2VolumescloneExecutePostOptionsModel := new(powervsv1.PcloudV2VolumescloneExecutePostOptions)
				pcloudV2VolumescloneExecutePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneExecutePostOptionsModel.VolumesCloneID = core.StringPtr("testString")
				pcloudV2VolumescloneExecutePostOptionsModel.Name = core.StringPtr("testString")
				pcloudV2VolumescloneExecutePostOptionsModel.RollbackPrepare = core.BoolPtr(true)
				pcloudV2VolumescloneExecutePostOptionsModel.TargetReplicationEnabled = core.BoolPtr(true)
				pcloudV2VolumescloneExecutePostOptionsModel.TargetStorageTier = core.StringPtr("testString")
				pcloudV2VolumescloneExecutePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudV2VolumescloneExecutePost(pcloudV2VolumescloneExecutePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudV2VolumescloneExecutePost(pcloudV2VolumescloneExecutePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2VolumescloneExecutePost(pcloudV2VolumescloneExecutePostOptions *PcloudV2VolumescloneExecutePostOptions)`, func() {
		pcloudV2VolumescloneExecutePostPath := "/pcloud/v2/cloud-instances/testString/volumes-clone/testString/execute"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumescloneExecutePostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"action": "Action", "creationDate": "2019-01-01T12:00:00.000Z", "failureMessage": "FailureMessage", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "name": "Name", "percentComplete": 15, "status": "Status", "volumesCloneID": "VolumesCloneID"}`)
				}))
			})
			It(`Invoke PcloudV2VolumescloneExecutePost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudV2VolumescloneExecutePostOptions model
				pcloudV2VolumescloneExecutePostOptionsModel := new(powervsv1.PcloudV2VolumescloneExecutePostOptions)
				pcloudV2VolumescloneExecutePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneExecutePostOptionsModel.VolumesCloneID = core.StringPtr("testString")
				pcloudV2VolumescloneExecutePostOptionsModel.Name = core.StringPtr("testString")
				pcloudV2VolumescloneExecutePostOptionsModel.RollbackPrepare = core.BoolPtr(true)
				pcloudV2VolumescloneExecutePostOptionsModel.TargetReplicationEnabled = core.BoolPtr(true)
				pcloudV2VolumescloneExecutePostOptionsModel.TargetStorageTier = core.StringPtr("testString")
				pcloudV2VolumescloneExecutePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudV2VolumescloneExecutePostWithContext(ctx, pcloudV2VolumescloneExecutePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudV2VolumescloneExecutePost(pcloudV2VolumescloneExecutePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudV2VolumescloneExecutePostWithContext(ctx, pcloudV2VolumescloneExecutePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumescloneExecutePostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"action": "Action", "creationDate": "2019-01-01T12:00:00.000Z", "failureMessage": "FailureMessage", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "name": "Name", "percentComplete": 15, "status": "Status", "volumesCloneID": "VolumesCloneID"}`)
				}))
			})
			It(`Invoke PcloudV2VolumescloneExecutePost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudV2VolumescloneExecutePost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudV2VolumescloneExecutePostOptions model
				pcloudV2VolumescloneExecutePostOptionsModel := new(powervsv1.PcloudV2VolumescloneExecutePostOptions)
				pcloudV2VolumescloneExecutePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneExecutePostOptionsModel.VolumesCloneID = core.StringPtr("testString")
				pcloudV2VolumescloneExecutePostOptionsModel.Name = core.StringPtr("testString")
				pcloudV2VolumescloneExecutePostOptionsModel.RollbackPrepare = core.BoolPtr(true)
				pcloudV2VolumescloneExecutePostOptionsModel.TargetReplicationEnabled = core.BoolPtr(true)
				pcloudV2VolumescloneExecutePostOptionsModel.TargetStorageTier = core.StringPtr("testString")
				pcloudV2VolumescloneExecutePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudV2VolumescloneExecutePost(pcloudV2VolumescloneExecutePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudV2VolumescloneExecutePost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumescloneExecutePostOptions model
				pcloudV2VolumescloneExecutePostOptionsModel := new(powervsv1.PcloudV2VolumescloneExecutePostOptions)
				pcloudV2VolumescloneExecutePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneExecutePostOptionsModel.VolumesCloneID = core.StringPtr("testString")
				pcloudV2VolumescloneExecutePostOptionsModel.Name = core.StringPtr("testString")
				pcloudV2VolumescloneExecutePostOptionsModel.RollbackPrepare = core.BoolPtr(true)
				pcloudV2VolumescloneExecutePostOptionsModel.TargetReplicationEnabled = core.BoolPtr(true)
				pcloudV2VolumescloneExecutePostOptionsModel.TargetStorageTier = core.StringPtr("testString")
				pcloudV2VolumescloneExecutePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudV2VolumescloneExecutePost(pcloudV2VolumescloneExecutePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudV2VolumescloneExecutePostOptions model with no property values
				pcloudV2VolumescloneExecutePostOptionsModelNew := new(powervsv1.PcloudV2VolumescloneExecutePostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudV2VolumescloneExecutePost(pcloudV2VolumescloneExecutePostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudV2VolumescloneExecutePost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumescloneExecutePostOptions model
				pcloudV2VolumescloneExecutePostOptionsModel := new(powervsv1.PcloudV2VolumescloneExecutePostOptions)
				pcloudV2VolumescloneExecutePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneExecutePostOptionsModel.VolumesCloneID = core.StringPtr("testString")
				pcloudV2VolumescloneExecutePostOptionsModel.Name = core.StringPtr("testString")
				pcloudV2VolumescloneExecutePostOptionsModel.RollbackPrepare = core.BoolPtr(true)
				pcloudV2VolumescloneExecutePostOptionsModel.TargetReplicationEnabled = core.BoolPtr(true)
				pcloudV2VolumescloneExecutePostOptionsModel.TargetStorageTier = core.StringPtr("testString")
				pcloudV2VolumescloneExecutePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudV2VolumescloneExecutePost(pcloudV2VolumescloneExecutePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2VolumescloneStartPost(pcloudV2VolumescloneStartPostOptions *PcloudV2VolumescloneStartPostOptions) - Operation response error`, func() {
		pcloudV2VolumescloneStartPostPath := "/pcloud/v2/cloud-instances/testString/volumes-clone/testString/start"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumescloneStartPostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudV2VolumescloneStartPost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumescloneStartPostOptions model
				pcloudV2VolumescloneStartPostOptionsModel := new(powervsv1.PcloudV2VolumescloneStartPostOptions)
				pcloudV2VolumescloneStartPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneStartPostOptionsModel.VolumesCloneID = core.StringPtr("testString")
				pcloudV2VolumescloneStartPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudV2VolumescloneStartPost(pcloudV2VolumescloneStartPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudV2VolumescloneStartPost(pcloudV2VolumescloneStartPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2VolumescloneStartPost(pcloudV2VolumescloneStartPostOptions *PcloudV2VolumescloneStartPostOptions)`, func() {
		pcloudV2VolumescloneStartPostPath := "/pcloud/v2/cloud-instances/testString/volumes-clone/testString/start"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumescloneStartPostPath))
					Expect(req.Method).To(Equal("POST"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"action": "Action", "creationDate": "2019-01-01T12:00:00.000Z", "failureMessage": "FailureMessage", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "name": "Name", "percentComplete": 15, "status": "Status", "volumesCloneID": "VolumesCloneID"}`)
				}))
			})
			It(`Invoke PcloudV2VolumescloneStartPost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudV2VolumescloneStartPostOptions model
				pcloudV2VolumescloneStartPostOptionsModel := new(powervsv1.PcloudV2VolumescloneStartPostOptions)
				pcloudV2VolumescloneStartPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneStartPostOptionsModel.VolumesCloneID = core.StringPtr("testString")
				pcloudV2VolumescloneStartPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudV2VolumescloneStartPostWithContext(ctx, pcloudV2VolumescloneStartPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudV2VolumescloneStartPost(pcloudV2VolumescloneStartPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudV2VolumescloneStartPostWithContext(ctx, pcloudV2VolumescloneStartPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumescloneStartPostPath))
					Expect(req.Method).To(Equal("POST"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"action": "Action", "creationDate": "2019-01-01T12:00:00.000Z", "failureMessage": "FailureMessage", "lastUpdateDate": "2019-01-01T12:00:00.000Z", "name": "Name", "percentComplete": 15, "status": "Status", "volumesCloneID": "VolumesCloneID"}`)
				}))
			})
			It(`Invoke PcloudV2VolumescloneStartPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudV2VolumescloneStartPost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudV2VolumescloneStartPostOptions model
				pcloudV2VolumescloneStartPostOptionsModel := new(powervsv1.PcloudV2VolumescloneStartPostOptions)
				pcloudV2VolumescloneStartPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneStartPostOptionsModel.VolumesCloneID = core.StringPtr("testString")
				pcloudV2VolumescloneStartPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudV2VolumescloneStartPost(pcloudV2VolumescloneStartPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudV2VolumescloneStartPost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumescloneStartPostOptions model
				pcloudV2VolumescloneStartPostOptionsModel := new(powervsv1.PcloudV2VolumescloneStartPostOptions)
				pcloudV2VolumescloneStartPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneStartPostOptionsModel.VolumesCloneID = core.StringPtr("testString")
				pcloudV2VolumescloneStartPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudV2VolumescloneStartPost(pcloudV2VolumescloneStartPostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudV2VolumescloneStartPostOptions model with no property values
				pcloudV2VolumescloneStartPostOptionsModelNew := new(powervsv1.PcloudV2VolumescloneStartPostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudV2VolumescloneStartPost(pcloudV2VolumescloneStartPostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudV2VolumescloneStartPost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumescloneStartPostOptions model
				pcloudV2VolumescloneStartPostOptionsModel := new(powervsv1.PcloudV2VolumescloneStartPostOptions)
				pcloudV2VolumescloneStartPostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumescloneStartPostOptionsModel.VolumesCloneID = core.StringPtr("testString")
				pcloudV2VolumescloneStartPostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudV2VolumescloneStartPost(pcloudV2VolumescloneStartPostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2VolumesClonePost(pcloudV2VolumesClonePostOptions *PcloudV2VolumesClonePostOptions) - Operation response error`, func() {
		pcloudV2VolumesClonePostPath := "/pcloud/v2/cloud-instances/testString/volumes/clone"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumesClonePostPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudV2VolumesClonePost with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumesClonePostOptions model
				pcloudV2VolumesClonePostOptionsModel := new(powervsv1.PcloudV2VolumesClonePostOptions)
				pcloudV2VolumesClonePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumesClonePostOptionsModel.Name = core.StringPtr("testString")
				pcloudV2VolumesClonePostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudV2VolumesClonePostOptionsModel.TargetReplicationEnabled = core.BoolPtr(true)
				pcloudV2VolumesClonePostOptionsModel.TargetStorageTier = core.StringPtr("testString")
				pcloudV2VolumesClonePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudV2VolumesClonePost(pcloudV2VolumesClonePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudV2VolumesClonePost(pcloudV2VolumesClonePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2VolumesClonePost(pcloudV2VolumesClonePostOptions *PcloudV2VolumesClonePostOptions)`, func() {
		pcloudV2VolumesClonePostPath := "/pcloud/v2/cloud-instances/testString/volumes/clone"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumesClonePostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"cloneTaskID": "CloneTaskID", "href": "Href"}`)
				}))
			})
			It(`Invoke PcloudV2VolumesClonePost successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudV2VolumesClonePostOptions model
				pcloudV2VolumesClonePostOptionsModel := new(powervsv1.PcloudV2VolumesClonePostOptions)
				pcloudV2VolumesClonePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumesClonePostOptionsModel.Name = core.StringPtr("testString")
				pcloudV2VolumesClonePostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudV2VolumesClonePostOptionsModel.TargetReplicationEnabled = core.BoolPtr(true)
				pcloudV2VolumesClonePostOptionsModel.TargetStorageTier = core.StringPtr("testString")
				pcloudV2VolumesClonePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudV2VolumesClonePostWithContext(ctx, pcloudV2VolumesClonePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudV2VolumesClonePost(pcloudV2VolumesClonePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudV2VolumesClonePostWithContext(ctx, pcloudV2VolumesClonePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumesClonePostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"cloneTaskID": "CloneTaskID", "href": "Href"}`)
				}))
			})
			It(`Invoke PcloudV2VolumesClonePost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudV2VolumesClonePost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudV2VolumesClonePostOptions model
				pcloudV2VolumesClonePostOptionsModel := new(powervsv1.PcloudV2VolumesClonePostOptions)
				pcloudV2VolumesClonePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumesClonePostOptionsModel.Name = core.StringPtr("testString")
				pcloudV2VolumesClonePostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudV2VolumesClonePostOptionsModel.TargetReplicationEnabled = core.BoolPtr(true)
				pcloudV2VolumesClonePostOptionsModel.TargetStorageTier = core.StringPtr("testString")
				pcloudV2VolumesClonePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudV2VolumesClonePost(pcloudV2VolumesClonePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudV2VolumesClonePost with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumesClonePostOptions model
				pcloudV2VolumesClonePostOptionsModel := new(powervsv1.PcloudV2VolumesClonePostOptions)
				pcloudV2VolumesClonePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumesClonePostOptionsModel.Name = core.StringPtr("testString")
				pcloudV2VolumesClonePostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudV2VolumesClonePostOptionsModel.TargetReplicationEnabled = core.BoolPtr(true)
				pcloudV2VolumesClonePostOptionsModel.TargetStorageTier = core.StringPtr("testString")
				pcloudV2VolumesClonePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudV2VolumesClonePost(pcloudV2VolumesClonePostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudV2VolumesClonePostOptions model with no property values
				pcloudV2VolumesClonePostOptionsModelNew := new(powervsv1.PcloudV2VolumesClonePostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudV2VolumesClonePost(pcloudV2VolumesClonePostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PcloudV2VolumesClonePost successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumesClonePostOptions model
				pcloudV2VolumesClonePostOptionsModel := new(powervsv1.PcloudV2VolumesClonePostOptions)
				pcloudV2VolumesClonePostOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumesClonePostOptionsModel.Name = core.StringPtr("testString")
				pcloudV2VolumesClonePostOptionsModel.VolumeIDs = []string{"testString"}
				pcloudV2VolumesClonePostOptionsModel.TargetReplicationEnabled = core.BoolPtr(true)
				pcloudV2VolumesClonePostOptionsModel.TargetStorageTier = core.StringPtr("testString")
				pcloudV2VolumesClonePostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudV2VolumesClonePost(pcloudV2VolumesClonePostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2VolumesClonetasksGet(pcloudV2VolumesClonetasksGetOptions *PcloudV2VolumesClonetasksGetOptions) - Operation response error`, func() {
		pcloudV2VolumesClonetasksGetPath := "/pcloud/v2/cloud-instances/testString/volumes/clone-tasks/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumesClonetasksGetPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["Accept"]).ToNot(BeNil())
					Expect(req.Header["Accept"][0]).To(Equal(fmt.Sprintf("%v", "application/json")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PcloudV2VolumesClonetasksGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumesClonetasksGetOptions model
				pcloudV2VolumesClonetasksGetOptionsModel := new(powervsv1.PcloudV2VolumesClonetasksGetOptions)
				pcloudV2VolumesClonetasksGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumesClonetasksGetOptionsModel.CloneTaskID = core.StringPtr("testString")
				pcloudV2VolumesClonetasksGetOptionsModel.Accept = core.StringPtr("application/json")
				pcloudV2VolumesClonetasksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.PcloudV2VolumesClonetasksGet(pcloudV2VolumesClonetasksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.PcloudV2VolumesClonetasksGet(pcloudV2VolumesClonetasksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PcloudV2VolumesClonetasksGet(pcloudV2VolumesClonetasksGetOptions *PcloudV2VolumesClonetasksGetOptions)`, func() {
		pcloudV2VolumesClonetasksGetPath := "/pcloud/v2/cloud-instances/testString/volumes/clone-tasks/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumesClonetasksGetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["Accept"]).ToNot(BeNil())
					Expect(req.Header["Accept"][0]).To(Equal(fmt.Sprintf("%v", "application/json")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"clonedVolumes": [{"clonedVolumeID": "ClonedVolumeID", "sourceVolumeID": "SourceVolumeID"}], "failedReason": "FailedReason", "percentComplete": 15, "status": "running"}`)
				}))
			})
			It(`Invoke PcloudV2VolumesClonetasksGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the PcloudV2VolumesClonetasksGetOptions model
				pcloudV2VolumesClonetasksGetOptionsModel := new(powervsv1.PcloudV2VolumesClonetasksGetOptions)
				pcloudV2VolumesClonetasksGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumesClonetasksGetOptionsModel.CloneTaskID = core.StringPtr("testString")
				pcloudV2VolumesClonetasksGetOptionsModel.Accept = core.StringPtr("application/json")
				pcloudV2VolumesClonetasksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.PcloudV2VolumesClonetasksGetWithContext(ctx, pcloudV2VolumesClonetasksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.PcloudV2VolumesClonetasksGet(pcloudV2VolumesClonetasksGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.PcloudV2VolumesClonetasksGetWithContext(ctx, pcloudV2VolumesClonetasksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pcloudV2VolumesClonetasksGetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["Accept"]).ToNot(BeNil())
					Expect(req.Header["Accept"][0]).To(Equal(fmt.Sprintf("%v", "application/json")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"clonedVolumes": [{"clonedVolumeID": "ClonedVolumeID", "sourceVolumeID": "SourceVolumeID"}], "failedReason": "FailedReason", "percentComplete": 15, "status": "running"}`)
				}))
			})
			It(`Invoke PcloudV2VolumesClonetasksGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.PcloudV2VolumesClonetasksGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PcloudV2VolumesClonetasksGetOptions model
				pcloudV2VolumesClonetasksGetOptionsModel := new(powervsv1.PcloudV2VolumesClonetasksGetOptions)
				pcloudV2VolumesClonetasksGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumesClonetasksGetOptionsModel.CloneTaskID = core.StringPtr("testString")
				pcloudV2VolumesClonetasksGetOptionsModel.Accept = core.StringPtr("application/json")
				pcloudV2VolumesClonetasksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.PcloudV2VolumesClonetasksGet(pcloudV2VolumesClonetasksGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PcloudV2VolumesClonetasksGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumesClonetasksGetOptions model
				pcloudV2VolumesClonetasksGetOptionsModel := new(powervsv1.PcloudV2VolumesClonetasksGetOptions)
				pcloudV2VolumesClonetasksGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumesClonetasksGetOptionsModel.CloneTaskID = core.StringPtr("testString")
				pcloudV2VolumesClonetasksGetOptionsModel.Accept = core.StringPtr("application/json")
				pcloudV2VolumesClonetasksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.PcloudV2VolumesClonetasksGet(pcloudV2VolumesClonetasksGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PcloudV2VolumesClonetasksGetOptions model with no property values
				pcloudV2VolumesClonetasksGetOptionsModelNew := new(powervsv1.PcloudV2VolumesClonetasksGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.PcloudV2VolumesClonetasksGet(pcloudV2VolumesClonetasksGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PcloudV2VolumesClonetasksGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the PcloudV2VolumesClonetasksGetOptions model
				pcloudV2VolumesClonetasksGetOptionsModel := new(powervsv1.PcloudV2VolumesClonetasksGetOptions)
				pcloudV2VolumesClonetasksGetOptionsModel.CloudInstanceID = core.StringPtr("testString")
				pcloudV2VolumesClonetasksGetOptionsModel.CloneTaskID = core.StringPtr("testString")
				pcloudV2VolumesClonetasksGetOptionsModel.Accept = core.StringPtr("application/json")
				pcloudV2VolumesClonetasksGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.PcloudV2VolumesClonetasksGet(pcloudV2VolumesClonetasksGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBindingUnbinding(serviceBindingUnbindingOptions *ServiceBindingUnbindingOptions) - Operation response error`, func() {
		serviceBindingUnbindingPath := "/v2/service_instances/testString/service_bindings/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBindingUnbindingPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Broker-Api-Originating-Identity"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Originating-Identity"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["service_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["plan_id"]).To(Equal([]string{"testString"}))
					// TODO: Add check for accepts_incomplete query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceBindingUnbinding with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBindingUnbindingOptions model
				serviceBindingUnbindingOptionsModel := new(powervsv1.ServiceBindingUnbindingOptions)
				serviceBindingUnbindingOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.InstanceID = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.BindingID = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.ServiceID = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.PlanID = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.AcceptsIncomplete = core.BoolPtr(true)
				serviceBindingUnbindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceBindingUnbinding(serviceBindingUnbindingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceBindingUnbinding(serviceBindingUnbindingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBindingUnbinding(serviceBindingUnbindingOptions *ServiceBindingUnbindingOptions)`, func() {
		serviceBindingUnbindingPath := "/v2/service_instances/testString/service_bindings/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBindingUnbindingPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Broker-Api-Originating-Identity"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Originating-Identity"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["service_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["plan_id"]).To(Equal([]string{"testString"}))
					// TODO: Add check for accepts_incomplete query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke ServiceBindingUnbinding successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceBindingUnbindingOptions model
				serviceBindingUnbindingOptionsModel := new(powervsv1.ServiceBindingUnbindingOptions)
				serviceBindingUnbindingOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.InstanceID = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.BindingID = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.ServiceID = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.PlanID = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.AcceptsIncomplete = core.BoolPtr(true)
				serviceBindingUnbindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceBindingUnbindingWithContext(ctx, serviceBindingUnbindingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceBindingUnbinding(serviceBindingUnbindingOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceBindingUnbindingWithContext(ctx, serviceBindingUnbindingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBindingUnbindingPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Broker-Api-Originating-Identity"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Originating-Identity"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["service_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["plan_id"]).To(Equal([]string{"testString"}))
					// TODO: Add check for accepts_incomplete query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke ServiceBindingUnbinding successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceBindingUnbinding(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceBindingUnbindingOptions model
				serviceBindingUnbindingOptionsModel := new(powervsv1.ServiceBindingUnbindingOptions)
				serviceBindingUnbindingOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.InstanceID = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.BindingID = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.ServiceID = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.PlanID = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.AcceptsIncomplete = core.BoolPtr(true)
				serviceBindingUnbindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceBindingUnbinding(serviceBindingUnbindingOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceBindingUnbinding with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBindingUnbindingOptions model
				serviceBindingUnbindingOptionsModel := new(powervsv1.ServiceBindingUnbindingOptions)
				serviceBindingUnbindingOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.InstanceID = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.BindingID = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.ServiceID = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.PlanID = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.AcceptsIncomplete = core.BoolPtr(true)
				serviceBindingUnbindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceBindingUnbinding(serviceBindingUnbindingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ServiceBindingUnbindingOptions model with no property values
				serviceBindingUnbindingOptionsModelNew := new(powervsv1.ServiceBindingUnbindingOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.ServiceBindingUnbinding(serviceBindingUnbindingOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceBindingUnbinding successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBindingUnbindingOptions model
				serviceBindingUnbindingOptionsModel := new(powervsv1.ServiceBindingUnbindingOptions)
				serviceBindingUnbindingOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.InstanceID = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.BindingID = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.ServiceID = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.PlanID = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceBindingUnbindingOptionsModel.AcceptsIncomplete = core.BoolPtr(true)
				serviceBindingUnbindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceBindingUnbinding(serviceBindingUnbindingOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBindingGet(serviceBindingGetOptions *ServiceBindingGetOptions) - Operation response error`, func() {
		serviceBindingGetPath := "/v2/service_instances/testString/service_bindings/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBindingGetPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Broker-Api-Originating-Identity"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Originating-Identity"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceBindingGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBindingGetOptions model
				serviceBindingGetOptionsModel := new(powervsv1.ServiceBindingGetOptions)
				serviceBindingGetOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceBindingGetOptionsModel.InstanceID = core.StringPtr("testString")
				serviceBindingGetOptionsModel.BindingID = core.StringPtr("testString")
				serviceBindingGetOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceBindingGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceBindingGet(serviceBindingGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceBindingGet(serviceBindingGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBindingGet(serviceBindingGetOptions *ServiceBindingGetOptions)`, func() {
		serviceBindingGetPath := "/v2/service_instances/testString/service_bindings/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBindingGetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Broker-Api-Originating-Identity"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Originating-Identity"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"credentials": {}, "parameters": {}, "route_service_url": "RouteServiceURL", "syslog_drain_url": "SyslogDrainURL", "volume_mounts": [{"container_dir": "ContainerDir", "device": {"mount_config": {}, "volume_id": "VolumeID"}, "device_type": "shared", "driver": "Driver", "mode": "r"}]}`)
				}))
			})
			It(`Invoke ServiceBindingGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceBindingGetOptions model
				serviceBindingGetOptionsModel := new(powervsv1.ServiceBindingGetOptions)
				serviceBindingGetOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceBindingGetOptionsModel.InstanceID = core.StringPtr("testString")
				serviceBindingGetOptionsModel.BindingID = core.StringPtr("testString")
				serviceBindingGetOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceBindingGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceBindingGetWithContext(ctx, serviceBindingGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceBindingGet(serviceBindingGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceBindingGetWithContext(ctx, serviceBindingGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBindingGetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Broker-Api-Originating-Identity"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Originating-Identity"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"credentials": {}, "parameters": {}, "route_service_url": "RouteServiceURL", "syslog_drain_url": "SyslogDrainURL", "volume_mounts": [{"container_dir": "ContainerDir", "device": {"mount_config": {}, "volume_id": "VolumeID"}, "device_type": "shared", "driver": "Driver", "mode": "r"}]}`)
				}))
			})
			It(`Invoke ServiceBindingGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceBindingGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceBindingGetOptions model
				serviceBindingGetOptionsModel := new(powervsv1.ServiceBindingGetOptions)
				serviceBindingGetOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceBindingGetOptionsModel.InstanceID = core.StringPtr("testString")
				serviceBindingGetOptionsModel.BindingID = core.StringPtr("testString")
				serviceBindingGetOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceBindingGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceBindingGet(serviceBindingGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceBindingGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBindingGetOptions model
				serviceBindingGetOptionsModel := new(powervsv1.ServiceBindingGetOptions)
				serviceBindingGetOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceBindingGetOptionsModel.InstanceID = core.StringPtr("testString")
				serviceBindingGetOptionsModel.BindingID = core.StringPtr("testString")
				serviceBindingGetOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceBindingGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceBindingGet(serviceBindingGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ServiceBindingGetOptions model with no property values
				serviceBindingGetOptionsModelNew := new(powervsv1.ServiceBindingGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.ServiceBindingGet(serviceBindingGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceBindingGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBindingGetOptions model
				serviceBindingGetOptionsModel := new(powervsv1.ServiceBindingGetOptions)
				serviceBindingGetOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceBindingGetOptionsModel.InstanceID = core.StringPtr("testString")
				serviceBindingGetOptionsModel.BindingID = core.StringPtr("testString")
				serviceBindingGetOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceBindingGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceBindingGet(serviceBindingGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBindingBinding(serviceBindingBindingOptions *ServiceBindingBindingOptions) - Operation response error`, func() {
		serviceBindingBindingPath := "/v2/service_instances/testString/service_bindings/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBindingBindingPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Broker-Api-Originating-Identity"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Originating-Identity"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for accepts_incomplete query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceBindingBinding with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBindingResourceObject model
				serviceBindingResourceObjectModel := new(powervsv1.ServiceBindingResourceObject)
				serviceBindingResourceObjectModel.AppGuid = core.StringPtr("testString")
				serviceBindingResourceObjectModel.Route = core.StringPtr("testString")

				// Construct an instance of the Context model
				contextModel := new(powervsv1.Context)
				contextModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Object model
				objectModel := new(powervsv1.Object)
				objectModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceBindingBindingOptions model
				serviceBindingBindingOptionsModel := new(powervsv1.ServiceBindingBindingOptions)
				serviceBindingBindingOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.InstanceID = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.BindingID = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.PlanID = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.ServiceID = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.AppGuid = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.BindResource = serviceBindingResourceObjectModel
				serviceBindingBindingOptionsModel.Context = contextModel
				serviceBindingBindingOptionsModel.Parameters = objectModel
				serviceBindingBindingOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.AcceptsIncomplete = core.BoolPtr(true)
				serviceBindingBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceBindingBinding(serviceBindingBindingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceBindingBinding(serviceBindingBindingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBindingBinding(serviceBindingBindingOptions *ServiceBindingBindingOptions)`, func() {
		serviceBindingBindingPath := "/v2/service_instances/testString/service_bindings/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBindingBindingPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Broker-Api-Originating-Identity"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Originating-Identity"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for accepts_incomplete query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"credentials": {}, "route_service_url": "RouteServiceURL", "syslog_drain_url": "SyslogDrainURL", "volume_mounts": [{"container_dir": "ContainerDir", "device": {"mount_config": {}, "volume_id": "VolumeID"}, "device_type": "shared", "driver": "Driver", "mode": "r"}]}`)
				}))
			})
			It(`Invoke ServiceBindingBinding successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceBindingResourceObject model
				serviceBindingResourceObjectModel := new(powervsv1.ServiceBindingResourceObject)
				serviceBindingResourceObjectModel.AppGuid = core.StringPtr("testString")
				serviceBindingResourceObjectModel.Route = core.StringPtr("testString")

				// Construct an instance of the Context model
				contextModel := new(powervsv1.Context)
				contextModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Object model
				objectModel := new(powervsv1.Object)
				objectModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceBindingBindingOptions model
				serviceBindingBindingOptionsModel := new(powervsv1.ServiceBindingBindingOptions)
				serviceBindingBindingOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.InstanceID = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.BindingID = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.PlanID = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.ServiceID = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.AppGuid = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.BindResource = serviceBindingResourceObjectModel
				serviceBindingBindingOptionsModel.Context = contextModel
				serviceBindingBindingOptionsModel.Parameters = objectModel
				serviceBindingBindingOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.AcceptsIncomplete = core.BoolPtr(true)
				serviceBindingBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceBindingBindingWithContext(ctx, serviceBindingBindingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceBindingBinding(serviceBindingBindingOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceBindingBindingWithContext(ctx, serviceBindingBindingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBindingBindingPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Broker-Api-Originating-Identity"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Originating-Identity"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for accepts_incomplete query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"credentials": {}, "route_service_url": "RouteServiceURL", "syslog_drain_url": "SyslogDrainURL", "volume_mounts": [{"container_dir": "ContainerDir", "device": {"mount_config": {}, "volume_id": "VolumeID"}, "device_type": "shared", "driver": "Driver", "mode": "r"}]}`)
				}))
			})
			It(`Invoke ServiceBindingBinding successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceBindingBinding(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceBindingResourceObject model
				serviceBindingResourceObjectModel := new(powervsv1.ServiceBindingResourceObject)
				serviceBindingResourceObjectModel.AppGuid = core.StringPtr("testString")
				serviceBindingResourceObjectModel.Route = core.StringPtr("testString")

				// Construct an instance of the Context model
				contextModel := new(powervsv1.Context)
				contextModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Object model
				objectModel := new(powervsv1.Object)
				objectModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceBindingBindingOptions model
				serviceBindingBindingOptionsModel := new(powervsv1.ServiceBindingBindingOptions)
				serviceBindingBindingOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.InstanceID = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.BindingID = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.PlanID = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.ServiceID = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.AppGuid = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.BindResource = serviceBindingResourceObjectModel
				serviceBindingBindingOptionsModel.Context = contextModel
				serviceBindingBindingOptionsModel.Parameters = objectModel
				serviceBindingBindingOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.AcceptsIncomplete = core.BoolPtr(true)
				serviceBindingBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceBindingBinding(serviceBindingBindingOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceBindingBinding with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBindingResourceObject model
				serviceBindingResourceObjectModel := new(powervsv1.ServiceBindingResourceObject)
				serviceBindingResourceObjectModel.AppGuid = core.StringPtr("testString")
				serviceBindingResourceObjectModel.Route = core.StringPtr("testString")

				// Construct an instance of the Context model
				contextModel := new(powervsv1.Context)
				contextModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Object model
				objectModel := new(powervsv1.Object)
				objectModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceBindingBindingOptions model
				serviceBindingBindingOptionsModel := new(powervsv1.ServiceBindingBindingOptions)
				serviceBindingBindingOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.InstanceID = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.BindingID = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.PlanID = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.ServiceID = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.AppGuid = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.BindResource = serviceBindingResourceObjectModel
				serviceBindingBindingOptionsModel.Context = contextModel
				serviceBindingBindingOptionsModel.Parameters = objectModel
				serviceBindingBindingOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.AcceptsIncomplete = core.BoolPtr(true)
				serviceBindingBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceBindingBinding(serviceBindingBindingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ServiceBindingBindingOptions model with no property values
				serviceBindingBindingOptionsModelNew := new(powervsv1.ServiceBindingBindingOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.ServiceBindingBinding(serviceBindingBindingOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceBindingBinding successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBindingResourceObject model
				serviceBindingResourceObjectModel := new(powervsv1.ServiceBindingResourceObject)
				serviceBindingResourceObjectModel.AppGuid = core.StringPtr("testString")
				serviceBindingResourceObjectModel.Route = core.StringPtr("testString")

				// Construct an instance of the Context model
				contextModel := new(powervsv1.Context)
				contextModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Object model
				objectModel := new(powervsv1.Object)
				objectModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceBindingBindingOptions model
				serviceBindingBindingOptionsModel := new(powervsv1.ServiceBindingBindingOptions)
				serviceBindingBindingOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.InstanceID = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.BindingID = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.PlanID = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.ServiceID = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.AppGuid = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.BindResource = serviceBindingResourceObjectModel
				serviceBindingBindingOptionsModel.Context = contextModel
				serviceBindingBindingOptionsModel.Parameters = objectModel
				serviceBindingBindingOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceBindingBindingOptionsModel.AcceptsIncomplete = core.BoolPtr(true)
				serviceBindingBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceBindingBinding(serviceBindingBindingOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBindingLastOperationGet(serviceBindingLastOperationGetOptions *ServiceBindingLastOperationGetOptions) - Operation response error`, func() {
		serviceBindingLastOperationGetPath := "/v2/service_instances/testString/service_bindings/testString/last_operation"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBindingLastOperationGetPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["service_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["plan_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["operation"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceBindingLastOperationGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBindingLastOperationGetOptions model
				serviceBindingLastOperationGetOptionsModel := new(powervsv1.ServiceBindingLastOperationGetOptions)
				serviceBindingLastOperationGetOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.InstanceID = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.BindingID = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.ServiceID = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.PlanID = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.Operation = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceBindingLastOperationGet(serviceBindingLastOperationGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceBindingLastOperationGet(serviceBindingLastOperationGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBindingLastOperationGet(serviceBindingLastOperationGetOptions *ServiceBindingLastOperationGetOptions)`, func() {
		serviceBindingLastOperationGetPath := "/v2/service_instances/testString/service_bindings/testString/last_operation"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBindingLastOperationGetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["service_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["plan_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["operation"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"description": "Description", "state": "in progress"}`)
				}))
			})
			It(`Invoke ServiceBindingLastOperationGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceBindingLastOperationGetOptions model
				serviceBindingLastOperationGetOptionsModel := new(powervsv1.ServiceBindingLastOperationGetOptions)
				serviceBindingLastOperationGetOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.InstanceID = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.BindingID = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.ServiceID = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.PlanID = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.Operation = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceBindingLastOperationGetWithContext(ctx, serviceBindingLastOperationGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceBindingLastOperationGet(serviceBindingLastOperationGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceBindingLastOperationGetWithContext(ctx, serviceBindingLastOperationGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBindingLastOperationGetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["service_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["plan_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["operation"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"description": "Description", "state": "in progress"}`)
				}))
			})
			It(`Invoke ServiceBindingLastOperationGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceBindingLastOperationGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceBindingLastOperationGetOptions model
				serviceBindingLastOperationGetOptionsModel := new(powervsv1.ServiceBindingLastOperationGetOptions)
				serviceBindingLastOperationGetOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.InstanceID = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.BindingID = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.ServiceID = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.PlanID = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.Operation = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceBindingLastOperationGet(serviceBindingLastOperationGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceBindingLastOperationGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBindingLastOperationGetOptions model
				serviceBindingLastOperationGetOptionsModel := new(powervsv1.ServiceBindingLastOperationGetOptions)
				serviceBindingLastOperationGetOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.InstanceID = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.BindingID = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.ServiceID = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.PlanID = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.Operation = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceBindingLastOperationGet(serviceBindingLastOperationGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ServiceBindingLastOperationGetOptions model with no property values
				serviceBindingLastOperationGetOptionsModelNew := new(powervsv1.ServiceBindingLastOperationGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.ServiceBindingLastOperationGet(serviceBindingLastOperationGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceBindingLastOperationGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBindingLastOperationGetOptions model
				serviceBindingLastOperationGetOptionsModel := new(powervsv1.ServiceBindingLastOperationGetOptions)
				serviceBindingLastOperationGetOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.InstanceID = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.BindingID = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.ServiceID = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.PlanID = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.Operation = core.StringPtr("testString")
				serviceBindingLastOperationGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceBindingLastOperationGet(serviceBindingLastOperationGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceInstanceDeprovision(serviceInstanceDeprovisionOptions *ServiceInstanceDeprovisionOptions) - Operation response error`, func() {
		serviceInstanceDeprovisionPath := "/v2/service_instances/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceInstanceDeprovisionPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Broker-Api-Originating-Identity"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Originating-Identity"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["service_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["plan_id"]).To(Equal([]string{"testString"}))
					// TODO: Add check for accepts_incomplete query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceInstanceDeprovision with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceInstanceDeprovisionOptions model
				serviceInstanceDeprovisionOptionsModel := new(powervsv1.ServiceInstanceDeprovisionOptions)
				serviceInstanceDeprovisionOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceInstanceDeprovisionOptionsModel.InstanceID = core.StringPtr("testString")
				serviceInstanceDeprovisionOptionsModel.ServiceID = core.StringPtr("testString")
				serviceInstanceDeprovisionOptionsModel.PlanID = core.StringPtr("testString")
				serviceInstanceDeprovisionOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceInstanceDeprovisionOptionsModel.AcceptsIncomplete = core.BoolPtr(true)
				serviceInstanceDeprovisionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceInstanceDeprovision(serviceInstanceDeprovisionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceInstanceDeprovision(serviceInstanceDeprovisionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceInstanceDeprovision(serviceInstanceDeprovisionOptions *ServiceInstanceDeprovisionOptions)`, func() {
		serviceInstanceDeprovisionPath := "/v2/service_instances/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceInstanceDeprovisionPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Broker-Api-Originating-Identity"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Originating-Identity"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["service_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["plan_id"]).To(Equal([]string{"testString"}))
					// TODO: Add check for accepts_incomplete query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke ServiceInstanceDeprovision successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceInstanceDeprovisionOptions model
				serviceInstanceDeprovisionOptionsModel := new(powervsv1.ServiceInstanceDeprovisionOptions)
				serviceInstanceDeprovisionOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceInstanceDeprovisionOptionsModel.InstanceID = core.StringPtr("testString")
				serviceInstanceDeprovisionOptionsModel.ServiceID = core.StringPtr("testString")
				serviceInstanceDeprovisionOptionsModel.PlanID = core.StringPtr("testString")
				serviceInstanceDeprovisionOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceInstanceDeprovisionOptionsModel.AcceptsIncomplete = core.BoolPtr(true)
				serviceInstanceDeprovisionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceInstanceDeprovisionWithContext(ctx, serviceInstanceDeprovisionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceInstanceDeprovision(serviceInstanceDeprovisionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceInstanceDeprovisionWithContext(ctx, serviceInstanceDeprovisionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceInstanceDeprovisionPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Broker-Api-Originating-Identity"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Originating-Identity"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["service_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["plan_id"]).To(Equal([]string{"testString"}))
					// TODO: Add check for accepts_incomplete query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke ServiceInstanceDeprovision successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceInstanceDeprovision(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceInstanceDeprovisionOptions model
				serviceInstanceDeprovisionOptionsModel := new(powervsv1.ServiceInstanceDeprovisionOptions)
				serviceInstanceDeprovisionOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceInstanceDeprovisionOptionsModel.InstanceID = core.StringPtr("testString")
				serviceInstanceDeprovisionOptionsModel.ServiceID = core.StringPtr("testString")
				serviceInstanceDeprovisionOptionsModel.PlanID = core.StringPtr("testString")
				serviceInstanceDeprovisionOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceInstanceDeprovisionOptionsModel.AcceptsIncomplete = core.BoolPtr(true)
				serviceInstanceDeprovisionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceInstanceDeprovision(serviceInstanceDeprovisionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceInstanceDeprovision with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceInstanceDeprovisionOptions model
				serviceInstanceDeprovisionOptionsModel := new(powervsv1.ServiceInstanceDeprovisionOptions)
				serviceInstanceDeprovisionOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceInstanceDeprovisionOptionsModel.InstanceID = core.StringPtr("testString")
				serviceInstanceDeprovisionOptionsModel.ServiceID = core.StringPtr("testString")
				serviceInstanceDeprovisionOptionsModel.PlanID = core.StringPtr("testString")
				serviceInstanceDeprovisionOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceInstanceDeprovisionOptionsModel.AcceptsIncomplete = core.BoolPtr(true)
				serviceInstanceDeprovisionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceInstanceDeprovision(serviceInstanceDeprovisionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ServiceInstanceDeprovisionOptions model with no property values
				serviceInstanceDeprovisionOptionsModelNew := new(powervsv1.ServiceInstanceDeprovisionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.ServiceInstanceDeprovision(serviceInstanceDeprovisionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceInstanceDeprovision successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceInstanceDeprovisionOptions model
				serviceInstanceDeprovisionOptionsModel := new(powervsv1.ServiceInstanceDeprovisionOptions)
				serviceInstanceDeprovisionOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceInstanceDeprovisionOptionsModel.InstanceID = core.StringPtr("testString")
				serviceInstanceDeprovisionOptionsModel.ServiceID = core.StringPtr("testString")
				serviceInstanceDeprovisionOptionsModel.PlanID = core.StringPtr("testString")
				serviceInstanceDeprovisionOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceInstanceDeprovisionOptionsModel.AcceptsIncomplete = core.BoolPtr(true)
				serviceInstanceDeprovisionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceInstanceDeprovision(serviceInstanceDeprovisionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceInstanceGet(serviceInstanceGetOptions *ServiceInstanceGetOptions) - Operation response error`, func() {
		serviceInstanceGetPath := "/v2/service_instances/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceInstanceGetPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Broker-Api-Originating-Identity"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Originating-Identity"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceInstanceGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceInstanceGetOptions model
				serviceInstanceGetOptionsModel := new(powervsv1.ServiceInstanceGetOptions)
				serviceInstanceGetOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceInstanceGetOptionsModel.InstanceID = core.StringPtr("testString")
				serviceInstanceGetOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceInstanceGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceInstanceGet(serviceInstanceGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceInstanceGet(serviceInstanceGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceInstanceGet(serviceInstanceGetOptions *ServiceInstanceGetOptions)`, func() {
		serviceInstanceGetPath := "/v2/service_instances/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceInstanceGetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Broker-Api-Originating-Identity"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Originating-Identity"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"dashboard_url": "DashboardURL", "parameters": {}, "plan_id": "PlanID", "service_id": "ServiceID"}`)
				}))
			})
			It(`Invoke ServiceInstanceGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceInstanceGetOptions model
				serviceInstanceGetOptionsModel := new(powervsv1.ServiceInstanceGetOptions)
				serviceInstanceGetOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceInstanceGetOptionsModel.InstanceID = core.StringPtr("testString")
				serviceInstanceGetOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceInstanceGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceInstanceGetWithContext(ctx, serviceInstanceGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceInstanceGet(serviceInstanceGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceInstanceGetWithContext(ctx, serviceInstanceGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceInstanceGetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Broker-Api-Originating-Identity"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Originating-Identity"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"dashboard_url": "DashboardURL", "parameters": {}, "plan_id": "PlanID", "service_id": "ServiceID"}`)
				}))
			})
			It(`Invoke ServiceInstanceGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceInstanceGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceInstanceGetOptions model
				serviceInstanceGetOptionsModel := new(powervsv1.ServiceInstanceGetOptions)
				serviceInstanceGetOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceInstanceGetOptionsModel.InstanceID = core.StringPtr("testString")
				serviceInstanceGetOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceInstanceGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceInstanceGet(serviceInstanceGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceInstanceGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceInstanceGetOptions model
				serviceInstanceGetOptionsModel := new(powervsv1.ServiceInstanceGetOptions)
				serviceInstanceGetOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceInstanceGetOptionsModel.InstanceID = core.StringPtr("testString")
				serviceInstanceGetOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceInstanceGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceInstanceGet(serviceInstanceGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ServiceInstanceGetOptions model with no property values
				serviceInstanceGetOptionsModelNew := new(powervsv1.ServiceInstanceGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.ServiceInstanceGet(serviceInstanceGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceInstanceGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceInstanceGetOptions model
				serviceInstanceGetOptionsModel := new(powervsv1.ServiceInstanceGetOptions)
				serviceInstanceGetOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceInstanceGetOptionsModel.InstanceID = core.StringPtr("testString")
				serviceInstanceGetOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceInstanceGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceInstanceGet(serviceInstanceGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceInstanceUpdate(serviceInstanceUpdateOptions *ServiceInstanceUpdateOptions) - Operation response error`, func() {
		serviceInstanceUpdatePath := "/v2/service_instances/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceInstanceUpdatePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Broker-Api-Originating-Identity"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Originating-Identity"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for accepts_incomplete query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceInstanceUpdate with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the Context model
				contextModel := new(powervsv1.Context)
				contextModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Object model
				objectModel := new(powervsv1.Object)
				objectModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceInstancePreviousValues model
				serviceInstancePreviousValuesModel := new(powervsv1.ServiceInstancePreviousValues)
				serviceInstancePreviousValuesModel.OrganizationID = core.StringPtr("testString")
				serviceInstancePreviousValuesModel.PlanID = core.StringPtr("testString")
				serviceInstancePreviousValuesModel.ServiceID = core.StringPtr("testString")
				serviceInstancePreviousValuesModel.SpaceID = core.StringPtr("testString")

				// Construct an instance of the ServiceInstanceUpdateOptions model
				serviceInstanceUpdateOptionsModel := new(powervsv1.ServiceInstanceUpdateOptions)
				serviceInstanceUpdateOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceInstanceUpdateOptionsModel.InstanceID = core.StringPtr("testString")
				serviceInstanceUpdateOptionsModel.ServiceID = core.StringPtr("testString")
				serviceInstanceUpdateOptionsModel.Context = contextModel
				serviceInstanceUpdateOptionsModel.Parameters = objectModel
				serviceInstanceUpdateOptionsModel.PlanID = core.StringPtr("testString")
				serviceInstanceUpdateOptionsModel.PreviousValues = serviceInstancePreviousValuesModel
				serviceInstanceUpdateOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceInstanceUpdateOptionsModel.AcceptsIncomplete = core.BoolPtr(true)
				serviceInstanceUpdateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceInstanceUpdate(serviceInstanceUpdateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceInstanceUpdate(serviceInstanceUpdateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceInstanceUpdate(serviceInstanceUpdateOptions *ServiceInstanceUpdateOptions)`, func() {
		serviceInstanceUpdatePath := "/v2/service_instances/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceInstanceUpdatePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Broker-Api-Originating-Identity"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Originating-Identity"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for accepts_incomplete query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke ServiceInstanceUpdate successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the Context model
				contextModel := new(powervsv1.Context)
				contextModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Object model
				objectModel := new(powervsv1.Object)
				objectModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceInstancePreviousValues model
				serviceInstancePreviousValuesModel := new(powervsv1.ServiceInstancePreviousValues)
				serviceInstancePreviousValuesModel.OrganizationID = core.StringPtr("testString")
				serviceInstancePreviousValuesModel.PlanID = core.StringPtr("testString")
				serviceInstancePreviousValuesModel.ServiceID = core.StringPtr("testString")
				serviceInstancePreviousValuesModel.SpaceID = core.StringPtr("testString")

				// Construct an instance of the ServiceInstanceUpdateOptions model
				serviceInstanceUpdateOptionsModel := new(powervsv1.ServiceInstanceUpdateOptions)
				serviceInstanceUpdateOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceInstanceUpdateOptionsModel.InstanceID = core.StringPtr("testString")
				serviceInstanceUpdateOptionsModel.ServiceID = core.StringPtr("testString")
				serviceInstanceUpdateOptionsModel.Context = contextModel
				serviceInstanceUpdateOptionsModel.Parameters = objectModel
				serviceInstanceUpdateOptionsModel.PlanID = core.StringPtr("testString")
				serviceInstanceUpdateOptionsModel.PreviousValues = serviceInstancePreviousValuesModel
				serviceInstanceUpdateOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceInstanceUpdateOptionsModel.AcceptsIncomplete = core.BoolPtr(true)
				serviceInstanceUpdateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceInstanceUpdateWithContext(ctx, serviceInstanceUpdateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceInstanceUpdate(serviceInstanceUpdateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceInstanceUpdateWithContext(ctx, serviceInstanceUpdateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceInstanceUpdatePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Broker-Api-Originating-Identity"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Originating-Identity"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for accepts_incomplete query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke ServiceInstanceUpdate successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceInstanceUpdate(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the Context model
				contextModel := new(powervsv1.Context)
				contextModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Object model
				objectModel := new(powervsv1.Object)
				objectModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceInstancePreviousValues model
				serviceInstancePreviousValuesModel := new(powervsv1.ServiceInstancePreviousValues)
				serviceInstancePreviousValuesModel.OrganizationID = core.StringPtr("testString")
				serviceInstancePreviousValuesModel.PlanID = core.StringPtr("testString")
				serviceInstancePreviousValuesModel.ServiceID = core.StringPtr("testString")
				serviceInstancePreviousValuesModel.SpaceID = core.StringPtr("testString")

				// Construct an instance of the ServiceInstanceUpdateOptions model
				serviceInstanceUpdateOptionsModel := new(powervsv1.ServiceInstanceUpdateOptions)
				serviceInstanceUpdateOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceInstanceUpdateOptionsModel.InstanceID = core.StringPtr("testString")
				serviceInstanceUpdateOptionsModel.ServiceID = core.StringPtr("testString")
				serviceInstanceUpdateOptionsModel.Context = contextModel
				serviceInstanceUpdateOptionsModel.Parameters = objectModel
				serviceInstanceUpdateOptionsModel.PlanID = core.StringPtr("testString")
				serviceInstanceUpdateOptionsModel.PreviousValues = serviceInstancePreviousValuesModel
				serviceInstanceUpdateOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceInstanceUpdateOptionsModel.AcceptsIncomplete = core.BoolPtr(true)
				serviceInstanceUpdateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceInstanceUpdate(serviceInstanceUpdateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceInstanceUpdate with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the Context model
				contextModel := new(powervsv1.Context)
				contextModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Object model
				objectModel := new(powervsv1.Object)
				objectModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceInstancePreviousValues model
				serviceInstancePreviousValuesModel := new(powervsv1.ServiceInstancePreviousValues)
				serviceInstancePreviousValuesModel.OrganizationID = core.StringPtr("testString")
				serviceInstancePreviousValuesModel.PlanID = core.StringPtr("testString")
				serviceInstancePreviousValuesModel.ServiceID = core.StringPtr("testString")
				serviceInstancePreviousValuesModel.SpaceID = core.StringPtr("testString")

				// Construct an instance of the ServiceInstanceUpdateOptions model
				serviceInstanceUpdateOptionsModel := new(powervsv1.ServiceInstanceUpdateOptions)
				serviceInstanceUpdateOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceInstanceUpdateOptionsModel.InstanceID = core.StringPtr("testString")
				serviceInstanceUpdateOptionsModel.ServiceID = core.StringPtr("testString")
				serviceInstanceUpdateOptionsModel.Context = contextModel
				serviceInstanceUpdateOptionsModel.Parameters = objectModel
				serviceInstanceUpdateOptionsModel.PlanID = core.StringPtr("testString")
				serviceInstanceUpdateOptionsModel.PreviousValues = serviceInstancePreviousValuesModel
				serviceInstanceUpdateOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceInstanceUpdateOptionsModel.AcceptsIncomplete = core.BoolPtr(true)
				serviceInstanceUpdateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceInstanceUpdate(serviceInstanceUpdateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ServiceInstanceUpdateOptions model with no property values
				serviceInstanceUpdateOptionsModelNew := new(powervsv1.ServiceInstanceUpdateOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.ServiceInstanceUpdate(serviceInstanceUpdateOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceInstanceUpdate successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the Context model
				contextModel := new(powervsv1.Context)
				contextModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Object model
				objectModel := new(powervsv1.Object)
				objectModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceInstancePreviousValues model
				serviceInstancePreviousValuesModel := new(powervsv1.ServiceInstancePreviousValues)
				serviceInstancePreviousValuesModel.OrganizationID = core.StringPtr("testString")
				serviceInstancePreviousValuesModel.PlanID = core.StringPtr("testString")
				serviceInstancePreviousValuesModel.ServiceID = core.StringPtr("testString")
				serviceInstancePreviousValuesModel.SpaceID = core.StringPtr("testString")

				// Construct an instance of the ServiceInstanceUpdateOptions model
				serviceInstanceUpdateOptionsModel := new(powervsv1.ServiceInstanceUpdateOptions)
				serviceInstanceUpdateOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceInstanceUpdateOptionsModel.InstanceID = core.StringPtr("testString")
				serviceInstanceUpdateOptionsModel.ServiceID = core.StringPtr("testString")
				serviceInstanceUpdateOptionsModel.Context = contextModel
				serviceInstanceUpdateOptionsModel.Parameters = objectModel
				serviceInstanceUpdateOptionsModel.PlanID = core.StringPtr("testString")
				serviceInstanceUpdateOptionsModel.PreviousValues = serviceInstancePreviousValuesModel
				serviceInstanceUpdateOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceInstanceUpdateOptionsModel.AcceptsIncomplete = core.BoolPtr(true)
				serviceInstanceUpdateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceInstanceUpdate(serviceInstanceUpdateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceInstanceProvision(serviceInstanceProvisionOptions *ServiceInstanceProvisionOptions) - Operation response error`, func() {
		serviceInstanceProvisionPath := "/v2/service_instances/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceInstanceProvisionPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Broker-Api-Originating-Identity"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Originating-Identity"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for accepts_incomplete query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceInstanceProvision with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the Context model
				contextModel := new(powervsv1.Context)
				contextModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Object model
				objectModel := new(powervsv1.Object)
				objectModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceInstanceProvisionOptions model
				serviceInstanceProvisionOptionsModel := new(powervsv1.ServiceInstanceProvisionOptions)
				serviceInstanceProvisionOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.InstanceID = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.PlanID = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.ServiceID = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.Context = contextModel
				serviceInstanceProvisionOptionsModel.OrganizationGuid = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.Parameters = objectModel
				serviceInstanceProvisionOptionsModel.SpaceGuid = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.AcceptsIncomplete = core.BoolPtr(true)
				serviceInstanceProvisionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceInstanceProvision(serviceInstanceProvisionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceInstanceProvision(serviceInstanceProvisionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceInstanceProvision(serviceInstanceProvisionOptions *ServiceInstanceProvisionOptions)`, func() {
		serviceInstanceProvisionPath := "/v2/service_instances/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceInstanceProvisionPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Broker-Api-Originating-Identity"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Originating-Identity"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for accepts_incomplete query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"dashboard_url": "DashboardURL"}`)
				}))
			})
			It(`Invoke ServiceInstanceProvision successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the Context model
				contextModel := new(powervsv1.Context)
				contextModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Object model
				objectModel := new(powervsv1.Object)
				objectModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceInstanceProvisionOptions model
				serviceInstanceProvisionOptionsModel := new(powervsv1.ServiceInstanceProvisionOptions)
				serviceInstanceProvisionOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.InstanceID = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.PlanID = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.ServiceID = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.Context = contextModel
				serviceInstanceProvisionOptionsModel.OrganizationGuid = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.Parameters = objectModel
				serviceInstanceProvisionOptionsModel.SpaceGuid = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.AcceptsIncomplete = core.BoolPtr(true)
				serviceInstanceProvisionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceInstanceProvisionWithContext(ctx, serviceInstanceProvisionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceInstanceProvision(serviceInstanceProvisionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceInstanceProvisionWithContext(ctx, serviceInstanceProvisionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceInstanceProvisionPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Broker-Api-Originating-Identity"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Originating-Identity"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for accepts_incomplete query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"dashboard_url": "DashboardURL"}`)
				}))
			})
			It(`Invoke ServiceInstanceProvision successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceInstanceProvision(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the Context model
				contextModel := new(powervsv1.Context)
				contextModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Object model
				objectModel := new(powervsv1.Object)
				objectModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceInstanceProvisionOptions model
				serviceInstanceProvisionOptionsModel := new(powervsv1.ServiceInstanceProvisionOptions)
				serviceInstanceProvisionOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.InstanceID = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.PlanID = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.ServiceID = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.Context = contextModel
				serviceInstanceProvisionOptionsModel.OrganizationGuid = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.Parameters = objectModel
				serviceInstanceProvisionOptionsModel.SpaceGuid = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.AcceptsIncomplete = core.BoolPtr(true)
				serviceInstanceProvisionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceInstanceProvision(serviceInstanceProvisionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceInstanceProvision with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the Context model
				contextModel := new(powervsv1.Context)
				contextModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Object model
				objectModel := new(powervsv1.Object)
				objectModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceInstanceProvisionOptions model
				serviceInstanceProvisionOptionsModel := new(powervsv1.ServiceInstanceProvisionOptions)
				serviceInstanceProvisionOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.InstanceID = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.PlanID = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.ServiceID = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.Context = contextModel
				serviceInstanceProvisionOptionsModel.OrganizationGuid = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.Parameters = objectModel
				serviceInstanceProvisionOptionsModel.SpaceGuid = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.AcceptsIncomplete = core.BoolPtr(true)
				serviceInstanceProvisionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceInstanceProvision(serviceInstanceProvisionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ServiceInstanceProvisionOptions model with no property values
				serviceInstanceProvisionOptionsModelNew := new(powervsv1.ServiceInstanceProvisionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.ServiceInstanceProvision(serviceInstanceProvisionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceInstanceProvision successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the Context model
				contextModel := new(powervsv1.Context)
				contextModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Object model
				objectModel := new(powervsv1.Object)
				objectModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceInstanceProvisionOptions model
				serviceInstanceProvisionOptionsModel := new(powervsv1.ServiceInstanceProvisionOptions)
				serviceInstanceProvisionOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.InstanceID = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.PlanID = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.ServiceID = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.Context = contextModel
				serviceInstanceProvisionOptionsModel.OrganizationGuid = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.Parameters = objectModel
				serviceInstanceProvisionOptionsModel.SpaceGuid = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.XBrokerApiOriginatingIdentity = core.StringPtr("testString")
				serviceInstanceProvisionOptionsModel.AcceptsIncomplete = core.BoolPtr(true)
				serviceInstanceProvisionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceInstanceProvision(serviceInstanceProvisionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceInstanceLastOperationGet(serviceInstanceLastOperationGetOptions *ServiceInstanceLastOperationGetOptions) - Operation response error`, func() {
		serviceInstanceLastOperationGetPath := "/v2/service_instances/testString/last_operation"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceInstanceLastOperationGetPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["service_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["plan_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["operation"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceInstanceLastOperationGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceInstanceLastOperationGetOptions model
				serviceInstanceLastOperationGetOptionsModel := new(powervsv1.ServiceInstanceLastOperationGetOptions)
				serviceInstanceLastOperationGetOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceInstanceLastOperationGetOptionsModel.InstanceID = core.StringPtr("testString")
				serviceInstanceLastOperationGetOptionsModel.ServiceID = core.StringPtr("testString")
				serviceInstanceLastOperationGetOptionsModel.PlanID = core.StringPtr("testString")
				serviceInstanceLastOperationGetOptionsModel.Operation = core.StringPtr("testString")
				serviceInstanceLastOperationGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceInstanceLastOperationGet(serviceInstanceLastOperationGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceInstanceLastOperationGet(serviceInstanceLastOperationGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceInstanceLastOperationGet(serviceInstanceLastOperationGetOptions *ServiceInstanceLastOperationGetOptions)`, func() {
		serviceInstanceLastOperationGetPath := "/v2/service_instances/testString/last_operation"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceInstanceLastOperationGetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["service_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["plan_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["operation"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"description": "Description", "state": "in progress"}`)
				}))
			})
			It(`Invoke ServiceInstanceLastOperationGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceInstanceLastOperationGetOptions model
				serviceInstanceLastOperationGetOptionsModel := new(powervsv1.ServiceInstanceLastOperationGetOptions)
				serviceInstanceLastOperationGetOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceInstanceLastOperationGetOptionsModel.InstanceID = core.StringPtr("testString")
				serviceInstanceLastOperationGetOptionsModel.ServiceID = core.StringPtr("testString")
				serviceInstanceLastOperationGetOptionsModel.PlanID = core.StringPtr("testString")
				serviceInstanceLastOperationGetOptionsModel.Operation = core.StringPtr("testString")
				serviceInstanceLastOperationGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceInstanceLastOperationGetWithContext(ctx, serviceInstanceLastOperationGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceInstanceLastOperationGet(serviceInstanceLastOperationGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceInstanceLastOperationGetWithContext(ctx, serviceInstanceLastOperationGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceInstanceLastOperationGetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Broker-Api-Version"]).ToNot(BeNil())
					Expect(req.Header["X-Broker-Api-Version"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["service_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["plan_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["operation"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"description": "Description", "state": "in progress"}`)
				}))
			})
			It(`Invoke ServiceInstanceLastOperationGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceInstanceLastOperationGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceInstanceLastOperationGetOptions model
				serviceInstanceLastOperationGetOptionsModel := new(powervsv1.ServiceInstanceLastOperationGetOptions)
				serviceInstanceLastOperationGetOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceInstanceLastOperationGetOptionsModel.InstanceID = core.StringPtr("testString")
				serviceInstanceLastOperationGetOptionsModel.ServiceID = core.StringPtr("testString")
				serviceInstanceLastOperationGetOptionsModel.PlanID = core.StringPtr("testString")
				serviceInstanceLastOperationGetOptionsModel.Operation = core.StringPtr("testString")
				serviceInstanceLastOperationGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceInstanceLastOperationGet(serviceInstanceLastOperationGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceInstanceLastOperationGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceInstanceLastOperationGetOptions model
				serviceInstanceLastOperationGetOptionsModel := new(powervsv1.ServiceInstanceLastOperationGetOptions)
				serviceInstanceLastOperationGetOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceInstanceLastOperationGetOptionsModel.InstanceID = core.StringPtr("testString")
				serviceInstanceLastOperationGetOptionsModel.ServiceID = core.StringPtr("testString")
				serviceInstanceLastOperationGetOptionsModel.PlanID = core.StringPtr("testString")
				serviceInstanceLastOperationGetOptionsModel.Operation = core.StringPtr("testString")
				serviceInstanceLastOperationGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceInstanceLastOperationGet(serviceInstanceLastOperationGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ServiceInstanceLastOperationGetOptions model with no property values
				serviceInstanceLastOperationGetOptionsModelNew := new(powervsv1.ServiceInstanceLastOperationGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.ServiceInstanceLastOperationGet(serviceInstanceLastOperationGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceInstanceLastOperationGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceInstanceLastOperationGetOptions model
				serviceInstanceLastOperationGetOptionsModel := new(powervsv1.ServiceInstanceLastOperationGetOptions)
				serviceInstanceLastOperationGetOptionsModel.XBrokerApiVersion = core.StringPtr("testString")
				serviceInstanceLastOperationGetOptionsModel.InstanceID = core.StringPtr("testString")
				serviceInstanceLastOperationGetOptionsModel.ServiceID = core.StringPtr("testString")
				serviceInstanceLastOperationGetOptionsModel.PlanID = core.StringPtr("testString")
				serviceInstanceLastOperationGetOptionsModel.Operation = core.StringPtr("testString")
				serviceInstanceLastOperationGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceInstanceLastOperationGet(serviceInstanceLastOperationGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerStoragetypesGet(serviceBrokerStoragetypesGetOptions *ServiceBrokerStoragetypesGetOptions) - Operation response error`, func() {
		serviceBrokerStoragetypesGetPath := "/broker/v1/storage-types"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerStoragetypesGetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceBrokerStoragetypesGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerStoragetypesGetOptions model
				serviceBrokerStoragetypesGetOptionsModel := new(powervsv1.ServiceBrokerStoragetypesGetOptions)
				serviceBrokerStoragetypesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceBrokerStoragetypesGet(serviceBrokerStoragetypesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceBrokerStoragetypesGet(serviceBrokerStoragetypesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerStoragetypesGet(serviceBrokerStoragetypesGetOptions *ServiceBrokerStoragetypesGetOptions)`, func() {
		serviceBrokerStoragetypesGetPath := "/broker/v1/storage-types"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerStoragetypesGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"mapKey": [{"default": false, "description": "Description", "state": "active", "type": "Type"}]}`)
				}))
			})
			It(`Invoke ServiceBrokerStoragetypesGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceBrokerStoragetypesGetOptions model
				serviceBrokerStoragetypesGetOptionsModel := new(powervsv1.ServiceBrokerStoragetypesGetOptions)
				serviceBrokerStoragetypesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceBrokerStoragetypesGetWithContext(ctx, serviceBrokerStoragetypesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceBrokerStoragetypesGet(serviceBrokerStoragetypesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceBrokerStoragetypesGetWithContext(ctx, serviceBrokerStoragetypesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerStoragetypesGetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"mapKey": [{"default": false, "description": "Description", "state": "active", "type": "Type"}]}`)
				}))
			})
			It(`Invoke ServiceBrokerStoragetypesGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceBrokerStoragetypesGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceBrokerStoragetypesGetOptions model
				serviceBrokerStoragetypesGetOptionsModel := new(powervsv1.ServiceBrokerStoragetypesGetOptions)
				serviceBrokerStoragetypesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceBrokerStoragetypesGet(serviceBrokerStoragetypesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceBrokerStoragetypesGet with error: Operation request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerStoragetypesGetOptions model
				serviceBrokerStoragetypesGetOptionsModel := new(powervsv1.ServiceBrokerStoragetypesGetOptions)
				serviceBrokerStoragetypesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceBrokerStoragetypesGet(serviceBrokerStoragetypesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceBrokerStoragetypesGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerStoragetypesGetOptions model
				serviceBrokerStoragetypesGetOptionsModel := new(powervsv1.ServiceBrokerStoragetypesGetOptions)
				serviceBrokerStoragetypesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceBrokerStoragetypesGet(serviceBrokerStoragetypesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerSwaggerspec(serviceBrokerSwaggerspecOptions *ServiceBrokerSwaggerspecOptions) - Operation response error`, func() {
		serviceBrokerSwaggerspecPath := "/v1/swagger.json"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerSwaggerspecPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ServiceBrokerSwaggerspec with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerSwaggerspecOptions model
				serviceBrokerSwaggerspecOptionsModel := new(powervsv1.ServiceBrokerSwaggerspecOptions)
				serviceBrokerSwaggerspecOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.ServiceBrokerSwaggerspec(serviceBrokerSwaggerspecOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.ServiceBrokerSwaggerspec(serviceBrokerSwaggerspecOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ServiceBrokerSwaggerspec(serviceBrokerSwaggerspecOptions *ServiceBrokerSwaggerspecOptions)`, func() {
		serviceBrokerSwaggerspecPath := "/v1/swagger.json"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerSwaggerspecPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke ServiceBrokerSwaggerspec successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceBrokerSwaggerspecOptions model
				serviceBrokerSwaggerspecOptionsModel := new(powervsv1.ServiceBrokerSwaggerspecOptions)
				serviceBrokerSwaggerspecOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.ServiceBrokerSwaggerspecWithContext(ctx, serviceBrokerSwaggerspecOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.ServiceBrokerSwaggerspec(serviceBrokerSwaggerspecOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.ServiceBrokerSwaggerspecWithContext(ctx, serviceBrokerSwaggerspecOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(serviceBrokerSwaggerspecPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke ServiceBrokerSwaggerspec successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.ServiceBrokerSwaggerspec(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceBrokerSwaggerspecOptions model
				serviceBrokerSwaggerspecOptionsModel := new(powervsv1.ServiceBrokerSwaggerspecOptions)
				serviceBrokerSwaggerspecOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.ServiceBrokerSwaggerspec(serviceBrokerSwaggerspecOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ServiceBrokerSwaggerspec with error: Operation request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerSwaggerspecOptions model
				serviceBrokerSwaggerspecOptionsModel := new(powervsv1.ServiceBrokerSwaggerspecOptions)
				serviceBrokerSwaggerspecOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.ServiceBrokerSwaggerspec(serviceBrokerSwaggerspecOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ServiceBrokerSwaggerspec successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the ServiceBrokerSwaggerspecOptions model
				serviceBrokerSwaggerspecOptionsModel := new(powervsv1.ServiceBrokerSwaggerspecOptions)
				serviceBrokerSwaggerspecOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.ServiceBrokerSwaggerspec(serviceBrokerSwaggerspecOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`WorkspacesGetall(v1WorkspacesGetallOptions *V1WorkspacesGetallOptions) - Operation response error`, func() {
		v1WorkspacesGetallPath := "/v1/workspaces"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1WorkspacesGetallPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["Accept"]).ToNot(BeNil())
					Expect(req.Header["Accept"][0]).To(Equal(fmt.Sprintf("%v", "application/json")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke WorkspacesGetall with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1WorkspacesGetallOptions model
				v1WorkspacesGetallOptionsModel := new(powervsv1.V1WorkspacesGetallOptions)
				v1WorkspacesGetallOptionsModel.Accept = core.StringPtr("application/json")
				v1WorkspacesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.WorkspacesGetall(v1WorkspacesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.WorkspacesGetall(v1WorkspacesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`WorkspacesGetall(v1WorkspacesGetallOptions *V1WorkspacesGetallOptions)`, func() {
		v1WorkspacesGetallPath := "/v1/workspaces"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1WorkspacesGetallPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["Accept"]).ToNot(BeNil())
					Expect(req.Header["Accept"][0]).To(Equal(fmt.Sprintf("%v", "application/json")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"workspaces": [{"capabilities": {"mapKey": false}, "details": {"creationDate": "2019-01-01T12:00:00.000Z", "crn": "CRN", "href": "Href", "powerEdgeRouter": {"migrationStatus": "intializing", "state": "active", "type": "automated"}}, "id": "ID", "location": {"region": "Region", "type": "Type", "url": "URL"}, "name": "Name", "status": "Status", "type": "off-premises"}]}`)
				}))
			})
			It(`Invoke WorkspacesGetall successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the V1WorkspacesGetallOptions model
				v1WorkspacesGetallOptionsModel := new(powervsv1.V1WorkspacesGetallOptions)
				v1WorkspacesGetallOptionsModel.Accept = core.StringPtr("application/json")
				v1WorkspacesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.WorkspacesGetallWithContext(ctx, v1WorkspacesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.WorkspacesGetall(v1WorkspacesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.WorkspacesGetallWithContext(ctx, v1WorkspacesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1WorkspacesGetallPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["Accept"]).ToNot(BeNil())
					Expect(req.Header["Accept"][0]).To(Equal(fmt.Sprintf("%v", "application/json")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"workspaces": [{"capabilities": {"mapKey": false}, "details": {"creationDate": "2019-01-01T12:00:00.000Z", "crn": "CRN", "href": "Href", "powerEdgeRouter": {"migrationStatus": "intializing", "state": "active", "type": "automated"}}, "id": "ID", "location": {"region": "Region", "type": "Type", "url": "URL"}, "name": "Name", "status": "Status", "type": "off-premises"}]}`)
				}))
			})
			It(`Invoke WorkspacesGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.WorkspacesGetall(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the V1WorkspacesGetallOptions model
				v1WorkspacesGetallOptionsModel := new(powervsv1.V1WorkspacesGetallOptions)
				v1WorkspacesGetallOptionsModel.Accept = core.StringPtr("application/json")
				v1WorkspacesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.WorkspacesGetall(v1WorkspacesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke WorkspacesGetall with error: Operation request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1WorkspacesGetallOptions model
				v1WorkspacesGetallOptionsModel := new(powervsv1.V1WorkspacesGetallOptions)
				v1WorkspacesGetallOptionsModel.Accept = core.StringPtr("application/json")
				v1WorkspacesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.WorkspacesGetall(v1WorkspacesGetallOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke WorkspacesGetall successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1WorkspacesGetallOptions model
				v1WorkspacesGetallOptionsModel := new(powervsv1.V1WorkspacesGetallOptions)
				v1WorkspacesGetallOptionsModel.Accept = core.StringPtr("application/json")
				v1WorkspacesGetallOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.WorkspacesGetall(v1WorkspacesGetallOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`WorkspacesGet(v1WorkspacesGetOptions *V1WorkspacesGetOptions) - Operation response error`, func() {
		v1WorkspacesGetPath := "/v1/workspaces/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1WorkspacesGetPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["Accept"]).ToNot(BeNil())
					Expect(req.Header["Accept"][0]).To(Equal(fmt.Sprintf("%v", "application/json")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke WorkspacesGet with error: Operation response processing error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1WorkspacesGetOptions model
				v1WorkspacesGetOptionsModel := new(powervsv1.V1WorkspacesGetOptions)
				v1WorkspacesGetOptionsModel.WorkspaceID = core.StringPtr("testString")
				v1WorkspacesGetOptionsModel.Accept = core.StringPtr("application/json")
				v1WorkspacesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := powervsService.WorkspacesGet(v1WorkspacesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				powervsService.EnableRetries(0, 0)
				result, response, operationErr = powervsService.WorkspacesGet(v1WorkspacesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`WorkspacesGet(v1WorkspacesGetOptions *V1WorkspacesGetOptions)`, func() {
		v1WorkspacesGetPath := "/v1/workspaces/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1WorkspacesGetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["Accept"]).ToNot(BeNil())
					Expect(req.Header["Accept"][0]).To(Equal(fmt.Sprintf("%v", "application/json")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"capabilities": {"mapKey": false}, "details": {"creationDate": "2019-01-01T12:00:00.000Z", "crn": "CRN", "href": "Href", "powerEdgeRouter": {"migrationStatus": "intializing", "state": "active", "type": "automated"}}, "id": "ID", "location": {"region": "Region", "type": "Type", "url": "URL"}, "name": "Name", "status": "Status", "type": "off-premises"}`)
				}))
			})
			It(`Invoke WorkspacesGet successfully with retries`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())
				powervsService.EnableRetries(0, 0)

				// Construct an instance of the V1WorkspacesGetOptions model
				v1WorkspacesGetOptionsModel := new(powervsv1.V1WorkspacesGetOptions)
				v1WorkspacesGetOptionsModel.WorkspaceID = core.StringPtr("testString")
				v1WorkspacesGetOptionsModel.Accept = core.StringPtr("application/json")
				v1WorkspacesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := powervsService.WorkspacesGetWithContext(ctx, v1WorkspacesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				powervsService.DisableRetries()
				result, response, operationErr := powervsService.WorkspacesGet(v1WorkspacesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = powervsService.WorkspacesGetWithContext(ctx, v1WorkspacesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v1WorkspacesGetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["Accept"]).ToNot(BeNil())
					Expect(req.Header["Accept"][0]).To(Equal(fmt.Sprintf("%v", "application/json")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"capabilities": {"mapKey": false}, "details": {"creationDate": "2019-01-01T12:00:00.000Z", "crn": "CRN", "href": "Href", "powerEdgeRouter": {"migrationStatus": "intializing", "state": "active", "type": "automated"}}, "id": "ID", "location": {"region": "Region", "type": "Type", "url": "URL"}, "name": "Name", "status": "Status", "type": "off-premises"}`)
				}))
			})
			It(`Invoke WorkspacesGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := powervsService.WorkspacesGet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the V1WorkspacesGetOptions model
				v1WorkspacesGetOptionsModel := new(powervsv1.V1WorkspacesGetOptions)
				v1WorkspacesGetOptionsModel.WorkspaceID = core.StringPtr("testString")
				v1WorkspacesGetOptionsModel.Accept = core.StringPtr("application/json")
				v1WorkspacesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = powervsService.WorkspacesGet(v1WorkspacesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke WorkspacesGet with error: Operation validation and request error`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1WorkspacesGetOptions model
				v1WorkspacesGetOptionsModel := new(powervsv1.V1WorkspacesGetOptions)
				v1WorkspacesGetOptionsModel.WorkspaceID = core.StringPtr("testString")
				v1WorkspacesGetOptionsModel.Accept = core.StringPtr("application/json")
				v1WorkspacesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := powervsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := powervsService.WorkspacesGet(v1WorkspacesGetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the V1WorkspacesGetOptions model with no property values
				v1WorkspacesGetOptionsModelNew := new(powervsv1.V1WorkspacesGetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = powervsService.WorkspacesGet(v1WorkspacesGetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke WorkspacesGet successfully`, func() {
				powervsService, serviceErr := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(powervsService).ToNot(BeNil())

				// Construct an instance of the V1WorkspacesGetOptions model
				v1WorkspacesGetOptionsModel := new(powervsv1.V1WorkspacesGetOptions)
				v1WorkspacesGetOptionsModel.WorkspaceID = core.StringPtr("testString")
				v1WorkspacesGetOptionsModel.Accept = core.StringPtr("application/json")
				v1WorkspacesGetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := powervsService.WorkspacesGet(v1WorkspacesGetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Model constructor tests`, func() {
		Context(`Using a service client instance`, func() {
			powervsService, _ := powervsv1.NewPowervsV1(&powervsv1.PowervsV1Options{
				URL:           "http://powervsv1modelgenerator.com",
				Authenticator: &core.NoAuthAuthenticator{},
			})
			It(`Invoke NewAddHost successfully`, func() {
				displayName := "testString"
				sysType := "testString"
				_model, err := powervsService.NewAddHost(displayName, sysType)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewAuxiliaryVolumeForOnboarding successfully`, func() {
				auxVolumeName := "testString"
				_model, err := powervsService.NewAuxiliaryVolumeForOnboarding(auxVolumeName)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewAuxiliaryVolumesForOnboarding successfully`, func() {
				auxiliaryVolumes := []powervsv1.AuxiliaryVolumeForOnboarding{}
				sourceCRN := "testString"
				_model, err := powervsService.NewAuxiliaryVolumesForOnboarding(auxiliaryVolumes, sourceCRN)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewBluemixServiceInstanceGetOptions successfully`, func() {
				// Construct an instance of the BluemixServiceInstanceGetOptions model
				instanceID := "testString"
				bluemixServiceInstanceGetOptionsModel := powervsService.NewBluemixServiceInstanceGetOptions(instanceID)
				bluemixServiceInstanceGetOptionsModel.SetInstanceID("testString")
				bluemixServiceInstanceGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(bluemixServiceInstanceGetOptionsModel).ToNot(BeNil())
				Expect(bluemixServiceInstanceGetOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(bluemixServiceInstanceGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewBluemixServiceInstancePutOptions successfully`, func() {
				// Construct an instance of the BluemixServiceInstancePutOptions model
				instanceID := "testString"
				bluemixServiceInstancePutOptionsEnabled := true
				bluemixServiceInstancePutOptionsModel := powervsService.NewBluemixServiceInstancePutOptions(instanceID, bluemixServiceInstancePutOptionsEnabled)
				bluemixServiceInstancePutOptionsModel.SetInstanceID("testString")
				bluemixServiceInstancePutOptionsModel.SetEnabled(true)
				bluemixServiceInstancePutOptionsModel.SetInitiatorID("testString")
				bluemixServiceInstancePutOptionsModel.SetReasonCode("testString")
				bluemixServiceInstancePutOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(bluemixServiceInstancePutOptionsModel).ToNot(BeNil())
				Expect(bluemixServiceInstancePutOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(bluemixServiceInstancePutOptionsModel.Enabled).To(Equal(core.BoolPtr(true)))
				Expect(bluemixServiceInstancePutOptionsModel.InitiatorID).To(Equal(core.StringPtr("testString")))
				Expect(bluemixServiceInstancePutOptionsModel.ReasonCode).To(Equal(core.StringPtr("testString")))
				Expect(bluemixServiceInstancePutOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCatalogGetOptions successfully`, func() {
				// Construct an instance of the CatalogGetOptions model
				xBrokerApiVersion := "testString"
				catalogGetOptionsModel := powervsService.NewCatalogGetOptions(xBrokerApiVersion)
				catalogGetOptionsModel.SetXBrokerApiVersion("testString")
				catalogGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(catalogGetOptionsModel).ToNot(BeNil())
				Expect(catalogGetOptionsModel.XBrokerApiVersion).To(Equal(core.StringPtr("testString")))
				Expect(catalogGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCloudConnectionGreTunnelCreate successfully`, func() {
				cidr := "testString"
				destIPAddress := "testString"
				_model, err := powervsService.NewCloudConnectionGreTunnelCreate(cidr, destIPAddress)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewCloudConnectionVPC successfully`, func() {
				vpcID := "testString"
				_model, err := powervsService.NewCloudConnectionVPC(vpcID)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewConsoleLanguage successfully`, func() {
				code := "testString"
				_model, err := powervsService.NewConsoleLanguage(code)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewIPAddressRange successfully`, func() {
				endingIPAddress := "testString"
				startingIPAddress := "testString"
				_model, err := powervsService.NewIPAddressRange(endingIPAddress, startingIPAddress)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInternalV1PowervsInstancesGetOptions successfully`, func() {
				// Construct an instance of the InternalV1PowervsInstancesGetOptions model
				internalV1PowervsInstancesGetOptionsModel := powervsService.NewInternalV1PowervsInstancesGetOptions()
				internalV1PowervsInstancesGetOptionsModel.SetPowervsLocation("testString")
				internalV1PowervsInstancesGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(internalV1PowervsInstancesGetOptionsModel).ToNot(BeNil())
				Expect(internalV1PowervsInstancesGetOptionsModel.PowervsLocation).To(Equal(core.StringPtr("testString")))
				Expect(internalV1PowervsInstancesGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewInternalV1PowervsLocationsActivatePutOptions successfully`, func() {
				// Construct an instance of the InternalV1PowervsLocationsActivatePutOptions model
				internalV1PowervsLocationsActivatePutOptionsOrderID := "testString"
				internalV1PowervsLocationsActivatePutOptionsSatelliteID := "testString"
				internalV1PowervsLocationsActivatePutOptionsModel := powervsService.NewInternalV1PowervsLocationsActivatePutOptions(internalV1PowervsLocationsActivatePutOptionsOrderID, internalV1PowervsLocationsActivatePutOptionsSatelliteID)
				internalV1PowervsLocationsActivatePutOptionsModel.SetOrderID("testString")
				internalV1PowervsLocationsActivatePutOptionsModel.SetSatelliteID("testString")
				internalV1PowervsLocationsActivatePutOptionsModel.SetDaysToDelay(int64(38))
				internalV1PowervsLocationsActivatePutOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(internalV1PowervsLocationsActivatePutOptionsModel).ToNot(BeNil())
				Expect(internalV1PowervsLocationsActivatePutOptionsModel.OrderID).To(Equal(core.StringPtr("testString")))
				Expect(internalV1PowervsLocationsActivatePutOptionsModel.SatelliteID).To(Equal(core.StringPtr("testString")))
				Expect(internalV1PowervsLocationsActivatePutOptionsModel.DaysToDelay).To(Equal(core.Int64Ptr(int64(38))))
				Expect(internalV1PowervsLocationsActivatePutOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewInternalV1PowervsLocationsTagDeleteOptions successfully`, func() {
				// Construct an instance of the InternalV1PowervsLocationsTagDeleteOptions model
				internalV1PowervsLocationsTagDeleteOptionsSatelliteID := "testString"
				internalV1PowervsLocationsTagDeleteOptionsModel := powervsService.NewInternalV1PowervsLocationsTagDeleteOptions(internalV1PowervsLocationsTagDeleteOptionsSatelliteID)
				internalV1PowervsLocationsTagDeleteOptionsModel.SetSatelliteID("testString")
				internalV1PowervsLocationsTagDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(internalV1PowervsLocationsTagDeleteOptionsModel).ToNot(BeNil())
				Expect(internalV1PowervsLocationsTagDeleteOptionsModel.SatelliteID).To(Equal(core.StringPtr("testString")))
				Expect(internalV1PowervsLocationsTagDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewInternalV1PowervsLocationsTagPostOptions successfully`, func() {
				// Construct an instance of the InternalV1PowervsLocationsTagPostOptions model
				internalV1PowervsLocationsTagPostOptionsSatelliteID := "testString"
				internalV1PowervsLocationsTagPostOptionsModel := powervsService.NewInternalV1PowervsLocationsTagPostOptions(internalV1PowervsLocationsTagPostOptionsSatelliteID)
				internalV1PowervsLocationsTagPostOptionsModel.SetSatelliteID("testString")
				internalV1PowervsLocationsTagPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(internalV1PowervsLocationsTagPostOptionsModel).ToNot(BeNil())
				Expect(internalV1PowervsLocationsTagPostOptionsModel.SatelliteID).To(Equal(core.StringPtr("testString")))
				Expect(internalV1PowervsLocationsTagPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewInternalV1PowervsLocationsTransitgatewayGetOptions successfully`, func() {
				// Construct an instance of the InternalV1PowervsLocationsTransitgatewayGetOptions model
				internalV1PowervsLocationsTransitgatewayGetOptionsModel := powervsService.NewInternalV1PowervsLocationsTransitgatewayGetOptions()
				internalV1PowervsLocationsTransitgatewayGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(internalV1PowervsLocationsTransitgatewayGetOptionsModel).ToNot(BeNil())
				Expect(internalV1PowervsLocationsTransitgatewayGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewInternalV1StorageRegionsStoragePoolsGetOptions successfully`, func() {
				// Construct an instance of the InternalV1StorageRegionsStoragePoolsGetOptions model
				regionZoneID := "testString"
				storagePoolName := "testString"
				internalV1StorageRegionsStoragePoolsGetOptionsModel := powervsService.NewInternalV1StorageRegionsStoragePoolsGetOptions(regionZoneID, storagePoolName)
				internalV1StorageRegionsStoragePoolsGetOptionsModel.SetRegionZoneID("testString")
				internalV1StorageRegionsStoragePoolsGetOptionsModel.SetStoragePoolName("testString")
				internalV1StorageRegionsStoragePoolsGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(internalV1StorageRegionsStoragePoolsGetOptionsModel).ToNot(BeNil())
				Expect(internalV1StorageRegionsStoragePoolsGetOptionsModel.RegionZoneID).To(Equal(core.StringPtr("testString")))
				Expect(internalV1StorageRegionsStoragePoolsGetOptionsModel.StoragePoolName).To(Equal(core.StringPtr("testString")))
				Expect(internalV1StorageRegionsStoragePoolsGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewInternalV1StorageRegionsStoragePoolsGetallOptions successfully`, func() {
				// Construct an instance of the InternalV1StorageRegionsStoragePoolsGetallOptions model
				regionZoneID := "testString"
				internalV1StorageRegionsStoragePoolsGetallOptionsModel := powervsService.NewInternalV1StorageRegionsStoragePoolsGetallOptions(regionZoneID)
				internalV1StorageRegionsStoragePoolsGetallOptionsModel.SetRegionZoneID("testString")
				internalV1StorageRegionsStoragePoolsGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(internalV1StorageRegionsStoragePoolsGetallOptionsModel).ToNot(BeNil())
				Expect(internalV1StorageRegionsStoragePoolsGetallOptionsModel.RegionZoneID).To(Equal(core.StringPtr("testString")))
				Expect(internalV1StorageRegionsStoragePoolsGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewInternalV1StorageRegionsStoragePoolsPutOptions successfully`, func() {
				// Construct an instance of the StorageEntities model
				storageEntitiesModel := new(powervsv1.StorageEntities)
				Expect(storageEntitiesModel).ToNot(BeNil())
				storageEntitiesModel.ExistingEntity = core.Int64Ptr(int64(38))
				storageEntitiesModel.NewEntity = core.Int64Ptr(int64(38))
				Expect(storageEntitiesModel.ExistingEntity).To(Equal(core.Int64Ptr(int64(38))))
				Expect(storageEntitiesModel.NewEntity).To(Equal(core.Int64Ptr(int64(38))))

				// Construct an instance of the Thresholds model
				thresholdsModel := new(powervsv1.Thresholds)
				Expect(thresholdsModel).ToNot(BeNil())
				thresholdsModel.Capacity = storageEntitiesModel
				thresholdsModel.Overcommit = storageEntitiesModel
				thresholdsModel.PhysicalCapacity = storageEntitiesModel
				thresholdsModel.VdiskCapacity = storageEntitiesModel
				thresholdsModel.VdiskLimit = storageEntitiesModel
				Expect(thresholdsModel.Capacity).To(Equal(storageEntitiesModel))
				Expect(thresholdsModel.Overcommit).To(Equal(storageEntitiesModel))
				Expect(thresholdsModel.PhysicalCapacity).To(Equal(storageEntitiesModel))
				Expect(thresholdsModel.VdiskCapacity).To(Equal(storageEntitiesModel))
				Expect(thresholdsModel.VdiskLimit).To(Equal(storageEntitiesModel))

				// Construct an instance of the InternalV1StorageRegionsStoragePoolsPutOptions model
				regionZoneID := "testString"
				storagePoolName := "testString"
				internalV1StorageRegionsStoragePoolsPutOptionsModel := powervsService.NewInternalV1StorageRegionsStoragePoolsPutOptions(regionZoneID, storagePoolName)
				internalV1StorageRegionsStoragePoolsPutOptionsModel.SetRegionZoneID("testString")
				internalV1StorageRegionsStoragePoolsPutOptionsModel.SetStoragePoolName("testString")
				internalV1StorageRegionsStoragePoolsPutOptionsModel.SetDisplayName("testString")
				internalV1StorageRegionsStoragePoolsPutOptionsModel.SetDrEnabled(true)
				internalV1StorageRegionsStoragePoolsPutOptionsModel.SetOverrideThresholds(thresholdsModel)
				internalV1StorageRegionsStoragePoolsPutOptionsModel.SetState("closed")
				internalV1StorageRegionsStoragePoolsPutOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(internalV1StorageRegionsStoragePoolsPutOptionsModel).ToNot(BeNil())
				Expect(internalV1StorageRegionsStoragePoolsPutOptionsModel.RegionZoneID).To(Equal(core.StringPtr("testString")))
				Expect(internalV1StorageRegionsStoragePoolsPutOptionsModel.StoragePoolName).To(Equal(core.StringPtr("testString")))
				Expect(internalV1StorageRegionsStoragePoolsPutOptionsModel.DisplayName).To(Equal(core.StringPtr("testString")))
				Expect(internalV1StorageRegionsStoragePoolsPutOptionsModel.DrEnabled).To(Equal(core.BoolPtr(true)))
				Expect(internalV1StorageRegionsStoragePoolsPutOptionsModel.OverrideThresholds).To(Equal(thresholdsModel))
				Expect(internalV1StorageRegionsStoragePoolsPutOptionsModel.State).To(Equal(core.StringPtr("closed")))
				Expect(internalV1StorageRegionsStoragePoolsPutOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewInternalV1StorageRegionsThresholdsGetOptions successfully`, func() {
				// Construct an instance of the InternalV1StorageRegionsThresholdsGetOptions model
				regionZoneID := "testString"
				internalV1StorageRegionsThresholdsGetOptionsModel := powervsService.NewInternalV1StorageRegionsThresholdsGetOptions(regionZoneID)
				internalV1StorageRegionsThresholdsGetOptionsModel.SetRegionZoneID("testString")
				internalV1StorageRegionsThresholdsGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(internalV1StorageRegionsThresholdsGetOptionsModel).ToNot(BeNil())
				Expect(internalV1StorageRegionsThresholdsGetOptionsModel.RegionZoneID).To(Equal(core.StringPtr("testString")))
				Expect(internalV1StorageRegionsThresholdsGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewInternalV1StorageRegionsThresholdsPutOptions successfully`, func() {
				// Construct an instance of the StorageEntities model
				storageEntitiesModel := new(powervsv1.StorageEntities)
				Expect(storageEntitiesModel).ToNot(BeNil())
				storageEntitiesModel.ExistingEntity = core.Int64Ptr(int64(38))
				storageEntitiesModel.NewEntity = core.Int64Ptr(int64(38))
				Expect(storageEntitiesModel.ExistingEntity).To(Equal(core.Int64Ptr(int64(38))))
				Expect(storageEntitiesModel.NewEntity).To(Equal(core.Int64Ptr(int64(38))))

				// Construct an instance of the InternalV1StorageRegionsThresholdsPutOptions model
				regionZoneID := "testString"
				internalV1StorageRegionsThresholdsPutOptionsModel := powervsService.NewInternalV1StorageRegionsThresholdsPutOptions(regionZoneID)
				internalV1StorageRegionsThresholdsPutOptionsModel.SetRegionZoneID("testString")
				internalV1StorageRegionsThresholdsPutOptionsModel.SetCapacity(storageEntitiesModel)
				internalV1StorageRegionsThresholdsPutOptionsModel.SetOvercommit(storageEntitiesModel)
				internalV1StorageRegionsThresholdsPutOptionsModel.SetPhysicalCapacity(storageEntitiesModel)
				internalV1StorageRegionsThresholdsPutOptionsModel.SetVdiskCapacity(storageEntitiesModel)
				internalV1StorageRegionsThresholdsPutOptionsModel.SetVdiskLimit(storageEntitiesModel)
				internalV1StorageRegionsThresholdsPutOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(internalV1StorageRegionsThresholdsPutOptionsModel).ToNot(BeNil())
				Expect(internalV1StorageRegionsThresholdsPutOptionsModel.RegionZoneID).To(Equal(core.StringPtr("testString")))
				Expect(internalV1StorageRegionsThresholdsPutOptionsModel.Capacity).To(Equal(storageEntitiesModel))
				Expect(internalV1StorageRegionsThresholdsPutOptionsModel.Overcommit).To(Equal(storageEntitiesModel))
				Expect(internalV1StorageRegionsThresholdsPutOptionsModel.PhysicalCapacity).To(Equal(storageEntitiesModel))
				Expect(internalV1StorageRegionsThresholdsPutOptionsModel.VdiskCapacity).To(Equal(storageEntitiesModel))
				Expect(internalV1StorageRegionsThresholdsPutOptionsModel.VdiskLimit).To(Equal(storageEntitiesModel))
				Expect(internalV1StorageRegionsThresholdsPutOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewInternalV1TransitgatewayGetOptions successfully`, func() {
				// Construct an instance of the InternalV1TransitgatewayGetOptions model
				powervsServiceCRN := "testString"
				ibmUserAuthorization := "testString"
				internalV1TransitgatewayGetOptionsModel := powervsService.NewInternalV1TransitgatewayGetOptions(powervsServiceCRN, ibmUserAuthorization)
				internalV1TransitgatewayGetOptionsModel.SetPowervsServiceCRN("testString")
				internalV1TransitgatewayGetOptionsModel.SetIBMUserAuthorization("testString")
				internalV1TransitgatewayGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(internalV1TransitgatewayGetOptionsModel).ToNot(BeNil())
				Expect(internalV1TransitgatewayGetOptionsModel.PowervsServiceCRN).To(Equal(core.StringPtr("testString")))
				Expect(internalV1TransitgatewayGetOptionsModel.IBMUserAuthorization).To(Equal(core.StringPtr("testString")))
				Expect(internalV1TransitgatewayGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPvmInstanceAddNetwork successfully`, func() {
				networkID := "testString"
				_model, err := powervsService.NewPvmInstanceAddNetwork(networkID)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPcloudCloudconnectionsDeleteOptions successfully`, func() {
				// Construct an instance of the PcloudCloudconnectionsDeleteOptions model
				cloudInstanceID := "testString"
				cloudConnectionID := "testString"
				pcloudCloudconnectionsDeleteOptionsModel := powervsService.NewPcloudCloudconnectionsDeleteOptions(cloudInstanceID, cloudConnectionID)
				pcloudCloudconnectionsDeleteOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudconnectionsDeleteOptionsModel.SetCloudConnectionID("testString")
				pcloudCloudconnectionsDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudconnectionsDeleteOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudconnectionsDeleteOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudconnectionsDeleteOptionsModel.CloudConnectionID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudconnectionsDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudconnectionsGetOptions successfully`, func() {
				// Construct an instance of the PcloudCloudconnectionsGetOptions model
				cloudInstanceID := "testString"
				cloudConnectionID := "testString"
				pcloudCloudconnectionsGetOptionsModel := powervsService.NewPcloudCloudconnectionsGetOptions(cloudInstanceID, cloudConnectionID)
				pcloudCloudconnectionsGetOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudconnectionsGetOptionsModel.SetCloudConnectionID("testString")
				pcloudCloudconnectionsGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudconnectionsGetOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudconnectionsGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudconnectionsGetOptionsModel.CloudConnectionID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudconnectionsGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudconnectionsGetallOptions successfully`, func() {
				// Construct an instance of the PcloudCloudconnectionsGetallOptions model
				cloudInstanceID := "testString"
				pcloudCloudconnectionsGetallOptionsModel := powervsService.NewPcloudCloudconnectionsGetallOptions(cloudInstanceID)
				pcloudCloudconnectionsGetallOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudconnectionsGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudconnectionsGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudconnectionsGetallOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudconnectionsGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudconnectionsNetworksDeleteOptions successfully`, func() {
				// Construct an instance of the PcloudCloudconnectionsNetworksDeleteOptions model
				cloudInstanceID := "testString"
				cloudConnectionID := "testString"
				networkID := "testString"
				pcloudCloudconnectionsNetworksDeleteOptionsModel := powervsService.NewPcloudCloudconnectionsNetworksDeleteOptions(cloudInstanceID, cloudConnectionID, networkID)
				pcloudCloudconnectionsNetworksDeleteOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudconnectionsNetworksDeleteOptionsModel.SetCloudConnectionID("testString")
				pcloudCloudconnectionsNetworksDeleteOptionsModel.SetNetworkID("testString")
				pcloudCloudconnectionsNetworksDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudconnectionsNetworksDeleteOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudconnectionsNetworksDeleteOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudconnectionsNetworksDeleteOptionsModel.CloudConnectionID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudconnectionsNetworksDeleteOptionsModel.NetworkID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudconnectionsNetworksDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudconnectionsNetworksPutOptions successfully`, func() {
				// Construct an instance of the PcloudCloudconnectionsNetworksPutOptions model
				cloudInstanceID := "testString"
				cloudConnectionID := "testString"
				networkID := "testString"
				pcloudCloudconnectionsNetworksPutOptionsModel := powervsService.NewPcloudCloudconnectionsNetworksPutOptions(cloudInstanceID, cloudConnectionID, networkID)
				pcloudCloudconnectionsNetworksPutOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudconnectionsNetworksPutOptionsModel.SetCloudConnectionID("testString")
				pcloudCloudconnectionsNetworksPutOptionsModel.SetNetworkID("testString")
				pcloudCloudconnectionsNetworksPutOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudconnectionsNetworksPutOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudconnectionsNetworksPutOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudconnectionsNetworksPutOptionsModel.CloudConnectionID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudconnectionsNetworksPutOptionsModel.NetworkID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudconnectionsNetworksPutOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudconnectionsPostOptions successfully`, func() {
				// Construct an instance of the CloudConnectionGreTunnelCreate model
				cloudConnectionGreTunnelCreateModel := new(powervsv1.CloudConnectionGreTunnelCreate)
				Expect(cloudConnectionGreTunnelCreateModel).ToNot(BeNil())
				cloudConnectionGreTunnelCreateModel.CIDR = core.StringPtr("testString")
				cloudConnectionGreTunnelCreateModel.DestIPAddress = core.StringPtr("testString")
				Expect(cloudConnectionGreTunnelCreateModel.CIDR).To(Equal(core.StringPtr("testString")))
				Expect(cloudConnectionGreTunnelCreateModel.DestIPAddress).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CloudConnectionEndpointClassicUpdate model
				cloudConnectionEndpointClassicUpdateModel := new(powervsv1.CloudConnectionEndpointClassicUpdate)
				Expect(cloudConnectionEndpointClassicUpdateModel).ToNot(BeNil())
				cloudConnectionEndpointClassicUpdateModel.Enabled = core.BoolPtr(true)
				cloudConnectionEndpointClassicUpdateModel.Gre = cloudConnectionGreTunnelCreateModel
				Expect(cloudConnectionEndpointClassicUpdateModel.Enabled).To(Equal(core.BoolPtr(true)))
				Expect(cloudConnectionEndpointClassicUpdateModel.Gre).To(Equal(cloudConnectionGreTunnelCreateModel))

				// Construct an instance of the CloudConnectionVPC model
				cloudConnectionVPCModel := new(powervsv1.CloudConnectionVPC)
				Expect(cloudConnectionVPCModel).ToNot(BeNil())
				cloudConnectionVPCModel.Name = core.StringPtr("testString")
				cloudConnectionVPCModel.VPCID = core.StringPtr("testString")
				Expect(cloudConnectionVPCModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(cloudConnectionVPCModel.VPCID).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CloudConnectionEndpointVPC model
				cloudConnectionEndpointVPCModel := new(powervsv1.CloudConnectionEndpointVPC)
				Expect(cloudConnectionEndpointVPCModel).ToNot(BeNil())
				cloudConnectionEndpointVPCModel.Enabled = core.BoolPtr(true)
				cloudConnectionEndpointVPCModel.Vpcs = []powervsv1.CloudConnectionVPC{*cloudConnectionVPCModel}
				Expect(cloudConnectionEndpointVPCModel.Enabled).To(Equal(core.BoolPtr(true)))
				Expect(cloudConnectionEndpointVPCModel.Vpcs).To(Equal([]powervsv1.CloudConnectionVPC{*cloudConnectionVPCModel}))

				// Construct an instance of the PcloudCloudconnectionsPostOptions model
				cloudInstanceID := "testString"
				pcloudCloudconnectionsPostOptionsName := "testString"
				pcloudCloudconnectionsPostOptionsSpeed := int64(50)
				pcloudCloudconnectionsPostOptionsModel := powervsService.NewPcloudCloudconnectionsPostOptions(cloudInstanceID, pcloudCloudconnectionsPostOptionsName, pcloudCloudconnectionsPostOptionsSpeed)
				pcloudCloudconnectionsPostOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudconnectionsPostOptionsModel.SetName("testString")
				pcloudCloudconnectionsPostOptionsModel.SetSpeed(int64(50))
				pcloudCloudconnectionsPostOptionsModel.SetClassic(cloudConnectionEndpointClassicUpdateModel)
				pcloudCloudconnectionsPostOptionsModel.SetGlobalRouting(true)
				pcloudCloudconnectionsPostOptionsModel.SetMetered(true)
				pcloudCloudconnectionsPostOptionsModel.SetSubnets([]string{"testString"})
				pcloudCloudconnectionsPostOptionsModel.SetTransitEnabled(true)
				pcloudCloudconnectionsPostOptionsModel.SetVPC(cloudConnectionEndpointVPCModel)
				pcloudCloudconnectionsPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudconnectionsPostOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudconnectionsPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudconnectionsPostOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudconnectionsPostOptionsModel.Speed).To(Equal(core.Int64Ptr(int64(50))))
				Expect(pcloudCloudconnectionsPostOptionsModel.Classic).To(Equal(cloudConnectionEndpointClassicUpdateModel))
				Expect(pcloudCloudconnectionsPostOptionsModel.GlobalRouting).To(Equal(core.BoolPtr(true)))
				Expect(pcloudCloudconnectionsPostOptionsModel.Metered).To(Equal(core.BoolPtr(true)))
				Expect(pcloudCloudconnectionsPostOptionsModel.Subnets).To(Equal([]string{"testString"}))
				Expect(pcloudCloudconnectionsPostOptionsModel.TransitEnabled).To(Equal(core.BoolPtr(true)))
				Expect(pcloudCloudconnectionsPostOptionsModel.VPC).To(Equal(cloudConnectionEndpointVPCModel))
				Expect(pcloudCloudconnectionsPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudconnectionsPutOptions successfully`, func() {
				// Construct an instance of the CloudConnectionGreTunnelCreate model
				cloudConnectionGreTunnelCreateModel := new(powervsv1.CloudConnectionGreTunnelCreate)
				Expect(cloudConnectionGreTunnelCreateModel).ToNot(BeNil())
				cloudConnectionGreTunnelCreateModel.CIDR = core.StringPtr("testString")
				cloudConnectionGreTunnelCreateModel.DestIPAddress = core.StringPtr("testString")
				Expect(cloudConnectionGreTunnelCreateModel.CIDR).To(Equal(core.StringPtr("testString")))
				Expect(cloudConnectionGreTunnelCreateModel.DestIPAddress).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CloudConnectionEndpointClassicUpdate model
				cloudConnectionEndpointClassicUpdateModel := new(powervsv1.CloudConnectionEndpointClassicUpdate)
				Expect(cloudConnectionEndpointClassicUpdateModel).ToNot(BeNil())
				cloudConnectionEndpointClassicUpdateModel.Enabled = core.BoolPtr(true)
				cloudConnectionEndpointClassicUpdateModel.Gre = cloudConnectionGreTunnelCreateModel
				Expect(cloudConnectionEndpointClassicUpdateModel.Enabled).To(Equal(core.BoolPtr(true)))
				Expect(cloudConnectionEndpointClassicUpdateModel.Gre).To(Equal(cloudConnectionGreTunnelCreateModel))

				// Construct an instance of the CloudConnectionVPC model
				cloudConnectionVPCModel := new(powervsv1.CloudConnectionVPC)
				Expect(cloudConnectionVPCModel).ToNot(BeNil())
				cloudConnectionVPCModel.Name = core.StringPtr("testString")
				cloudConnectionVPCModel.VPCID = core.StringPtr("testString")
				Expect(cloudConnectionVPCModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(cloudConnectionVPCModel.VPCID).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CloudConnectionEndpointVPC model
				cloudConnectionEndpointVPCModel := new(powervsv1.CloudConnectionEndpointVPC)
				Expect(cloudConnectionEndpointVPCModel).ToNot(BeNil())
				cloudConnectionEndpointVPCModel.Enabled = core.BoolPtr(true)
				cloudConnectionEndpointVPCModel.Vpcs = []powervsv1.CloudConnectionVPC{*cloudConnectionVPCModel}
				Expect(cloudConnectionEndpointVPCModel.Enabled).To(Equal(core.BoolPtr(true)))
				Expect(cloudConnectionEndpointVPCModel.Vpcs).To(Equal([]powervsv1.CloudConnectionVPC{*cloudConnectionVPCModel}))

				// Construct an instance of the PcloudCloudconnectionsPutOptions model
				cloudInstanceID := "testString"
				cloudConnectionID := "testString"
				pcloudCloudconnectionsPutOptionsModel := powervsService.NewPcloudCloudconnectionsPutOptions(cloudInstanceID, cloudConnectionID)
				pcloudCloudconnectionsPutOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudconnectionsPutOptionsModel.SetCloudConnectionID("testString")
				pcloudCloudconnectionsPutOptionsModel.SetClassic(cloudConnectionEndpointClassicUpdateModel)
				pcloudCloudconnectionsPutOptionsModel.SetGlobalRouting(true)
				pcloudCloudconnectionsPutOptionsModel.SetMetered(true)
				pcloudCloudconnectionsPutOptionsModel.SetName("testString")
				pcloudCloudconnectionsPutOptionsModel.SetSpeed(int64(50))
				pcloudCloudconnectionsPutOptionsModel.SetVPC(cloudConnectionEndpointVPCModel)
				pcloudCloudconnectionsPutOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudconnectionsPutOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudconnectionsPutOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudconnectionsPutOptionsModel.CloudConnectionID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudconnectionsPutOptionsModel.Classic).To(Equal(cloudConnectionEndpointClassicUpdateModel))
				Expect(pcloudCloudconnectionsPutOptionsModel.GlobalRouting).To(Equal(core.BoolPtr(true)))
				Expect(pcloudCloudconnectionsPutOptionsModel.Metered).To(Equal(core.BoolPtr(true)))
				Expect(pcloudCloudconnectionsPutOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudconnectionsPutOptionsModel.Speed).To(Equal(core.Int64Ptr(int64(50))))
				Expect(pcloudCloudconnectionsPutOptionsModel.VPC).To(Equal(cloudConnectionEndpointVPCModel))
				Expect(pcloudCloudconnectionsPutOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudconnectionsVirtualprivatecloudsGetallOptions successfully`, func() {
				// Construct an instance of the PcloudCloudconnectionsVirtualprivatecloudsGetallOptions model
				cloudInstanceID := "testString"
				pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModel := powervsService.NewPcloudCloudconnectionsVirtualprivatecloudsGetallOptions(cloudInstanceID)
				pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudconnectionsVirtualprivatecloudsGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudinstancesDeleteOptions successfully`, func() {
				// Construct an instance of the PcloudCloudinstancesDeleteOptions model
				cloudInstanceID := "testString"
				pcloudCloudinstancesDeleteOptionsModel := powervsService.NewPcloudCloudinstancesDeleteOptions(cloudInstanceID)
				pcloudCloudinstancesDeleteOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudinstancesDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudinstancesDeleteOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudinstancesDeleteOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudinstancesGetOptions successfully`, func() {
				// Construct an instance of the PcloudCloudinstancesGetOptions model
				cloudInstanceID := "testString"
				pcloudCloudinstancesGetOptionsModel := powervsService.NewPcloudCloudinstancesGetOptions(cloudInstanceID)
				pcloudCloudinstancesGetOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudinstancesGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudinstancesGetOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudinstancesGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudinstancesImagesDeleteOptions successfully`, func() {
				// Construct an instance of the PcloudCloudinstancesImagesDeleteOptions model
				cloudInstanceID := "testString"
				imageID := "testString"
				pcloudCloudinstancesImagesDeleteOptionsModel := powervsService.NewPcloudCloudinstancesImagesDeleteOptions(cloudInstanceID, imageID)
				pcloudCloudinstancesImagesDeleteOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudinstancesImagesDeleteOptionsModel.SetImageID("testString")
				pcloudCloudinstancesImagesDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudinstancesImagesDeleteOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudinstancesImagesDeleteOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesImagesDeleteOptionsModel.ImageID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesImagesDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudinstancesImagesExportPostOptions successfully`, func() {
				// Construct an instance of the PcloudCloudinstancesImagesExportPostOptions model
				cloudInstanceID := "testString"
				imageID := "testString"
				pcloudCloudinstancesImagesExportPostOptionsAccessKey := "testString"
				pcloudCloudinstancesImagesExportPostOptionsBucketName := "testString"
				pcloudCloudinstancesImagesExportPostOptionsModel := powervsService.NewPcloudCloudinstancesImagesExportPostOptions(cloudInstanceID, imageID, pcloudCloudinstancesImagesExportPostOptionsAccessKey, pcloudCloudinstancesImagesExportPostOptionsBucketName)
				pcloudCloudinstancesImagesExportPostOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.SetImageID("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.SetAccessKey("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.SetBucketName("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.SetRegion("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.SetSecretKey("testString")
				pcloudCloudinstancesImagesExportPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudinstancesImagesExportPostOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudinstancesImagesExportPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesImagesExportPostOptionsModel.ImageID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesImagesExportPostOptionsModel.AccessKey).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesImagesExportPostOptionsModel.BucketName).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesImagesExportPostOptionsModel.Region).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesImagesExportPostOptionsModel.SecretKey).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesImagesExportPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudinstancesImagesGetOptions successfully`, func() {
				// Construct an instance of the PcloudCloudinstancesImagesGetOptions model
				cloudInstanceID := "testString"
				imageID := "testString"
				pcloudCloudinstancesImagesGetOptionsModel := powervsService.NewPcloudCloudinstancesImagesGetOptions(cloudInstanceID, imageID)
				pcloudCloudinstancesImagesGetOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudinstancesImagesGetOptionsModel.SetImageID("testString")
				pcloudCloudinstancesImagesGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudinstancesImagesGetOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudinstancesImagesGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesImagesGetOptionsModel.ImageID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesImagesGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudinstancesImagesGetallOptions successfully`, func() {
				// Construct an instance of the PcloudCloudinstancesImagesGetallOptions model
				cloudInstanceID := "testString"
				pcloudCloudinstancesImagesGetallOptionsModel := powervsService.NewPcloudCloudinstancesImagesGetallOptions(cloudInstanceID)
				pcloudCloudinstancesImagesGetallOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudinstancesImagesGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudinstancesImagesGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudinstancesImagesGetallOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesImagesGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudinstancesImagesPostOptions successfully`, func() {
				// Construct an instance of the StorageAffinity model
				storageAffinityModel := new(powervsv1.StorageAffinity)
				Expect(storageAffinityModel).ToNot(BeNil())
				storageAffinityModel.AffinityPvmInstance = core.StringPtr("testString")
				storageAffinityModel.AffinityPolicy = core.StringPtr("affinity")
				storageAffinityModel.AffinityVolume = core.StringPtr("testString")
				storageAffinityModel.AntiAffinityPvmInstances = []string{"testString"}
				storageAffinityModel.AntiAffinityVolumes = []string{"testString"}
				Expect(storageAffinityModel.AffinityPvmInstance).To(Equal(core.StringPtr("testString")))
				Expect(storageAffinityModel.AffinityPolicy).To(Equal(core.StringPtr("affinity")))
				Expect(storageAffinityModel.AffinityVolume).To(Equal(core.StringPtr("testString")))
				Expect(storageAffinityModel.AntiAffinityPvmInstances).To(Equal([]string{"testString"}))
				Expect(storageAffinityModel.AntiAffinityVolumes).To(Equal([]string{"testString"}))

				// Construct an instance of the PcloudCloudinstancesImagesPostOptions model
				cloudInstanceID := "testString"
				pcloudCloudinstancesImagesPostOptionsSource := "root-project"
				pcloudCloudinstancesImagesPostOptionsModel := powervsService.NewPcloudCloudinstancesImagesPostOptions(cloudInstanceID, pcloudCloudinstancesImagesPostOptionsSource)
				pcloudCloudinstancesImagesPostOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudinstancesImagesPostOptionsModel.SetSource("root-project")
				pcloudCloudinstancesImagesPostOptionsModel.SetAccessKey("testString")
				pcloudCloudinstancesImagesPostOptionsModel.SetBucketName("testString")
				pcloudCloudinstancesImagesPostOptionsModel.SetDiskType("testString")
				pcloudCloudinstancesImagesPostOptionsModel.SetImageFilename("testString")
				pcloudCloudinstancesImagesPostOptionsModel.SetImageID("testString")
				pcloudCloudinstancesImagesPostOptionsModel.SetImageName("testString")
				pcloudCloudinstancesImagesPostOptionsModel.SetImagePath("testString")
				pcloudCloudinstancesImagesPostOptionsModel.SetOsType("aix")
				pcloudCloudinstancesImagesPostOptionsModel.SetRegion("testString")
				pcloudCloudinstancesImagesPostOptionsModel.SetSecretKey("testString")
				pcloudCloudinstancesImagesPostOptionsModel.SetStorageAffinity(storageAffinityModel)
				pcloudCloudinstancesImagesPostOptionsModel.SetStoragePool("testString")
				pcloudCloudinstancesImagesPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudinstancesImagesPostOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudinstancesImagesPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesImagesPostOptionsModel.Source).To(Equal(core.StringPtr("root-project")))
				Expect(pcloudCloudinstancesImagesPostOptionsModel.AccessKey).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesImagesPostOptionsModel.BucketName).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesImagesPostOptionsModel.DiskType).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesImagesPostOptionsModel.ImageFilename).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesImagesPostOptionsModel.ImageID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesImagesPostOptionsModel.ImageName).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesImagesPostOptionsModel.ImagePath).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesImagesPostOptionsModel.OsType).To(Equal(core.StringPtr("aix")))
				Expect(pcloudCloudinstancesImagesPostOptionsModel.Region).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesImagesPostOptionsModel.SecretKey).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesImagesPostOptionsModel.StorageAffinity).To(Equal(storageAffinityModel))
				Expect(pcloudCloudinstancesImagesPostOptionsModel.StoragePool).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesImagesPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudinstancesJobsDeleteOptions successfully`, func() {
				// Construct an instance of the PcloudCloudinstancesJobsDeleteOptions model
				cloudInstanceID := "testString"
				jobID := "testString"
				pcloudCloudinstancesJobsDeleteOptionsModel := powervsService.NewPcloudCloudinstancesJobsDeleteOptions(cloudInstanceID, jobID)
				pcloudCloudinstancesJobsDeleteOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudinstancesJobsDeleteOptionsModel.SetJobID("testString")
				pcloudCloudinstancesJobsDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudinstancesJobsDeleteOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudinstancesJobsDeleteOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesJobsDeleteOptionsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesJobsDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudinstancesJobsGetOptions successfully`, func() {
				// Construct an instance of the PcloudCloudinstancesJobsGetOptions model
				cloudInstanceID := "testString"
				jobID := "testString"
				pcloudCloudinstancesJobsGetOptionsModel := powervsService.NewPcloudCloudinstancesJobsGetOptions(cloudInstanceID, jobID)
				pcloudCloudinstancesJobsGetOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudinstancesJobsGetOptionsModel.SetJobID("testString")
				pcloudCloudinstancesJobsGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudinstancesJobsGetOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudinstancesJobsGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesJobsGetOptionsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesJobsGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudinstancesJobsGetallOptions successfully`, func() {
				// Construct an instance of the PcloudCloudinstancesJobsGetallOptions model
				cloudInstanceID := "testString"
				pcloudCloudinstancesJobsGetallOptionsModel := powervsService.NewPcloudCloudinstancesJobsGetallOptions(cloudInstanceID)
				pcloudCloudinstancesJobsGetallOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudinstancesJobsGetallOptionsModel.SetOperationID("testString")
				pcloudCloudinstancesJobsGetallOptionsModel.SetOperationTarget("cloudConnection")
				pcloudCloudinstancesJobsGetallOptionsModel.SetOperationAction("vmCapture")
				pcloudCloudinstancesJobsGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudinstancesJobsGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudinstancesJobsGetallOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesJobsGetallOptionsModel.OperationID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesJobsGetallOptionsModel.OperationTarget).To(Equal(core.StringPtr("cloudConnection")))
				Expect(pcloudCloudinstancesJobsGetallOptionsModel.OperationAction).To(Equal(core.StringPtr("vmCapture")))
				Expect(pcloudCloudinstancesJobsGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudinstancesPutOptions successfully`, func() {
				// Construct an instance of the PcloudCloudinstancesPutOptions model
				cloudInstanceID := "testString"
				pcloudCloudinstancesPutOptionsModel := powervsService.NewPcloudCloudinstancesPutOptions(cloudInstanceID)
				pcloudCloudinstancesPutOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudinstancesPutOptionsModel.SetInstances(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.SetMemory(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.SetProcUnits(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.SetProcessors(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.SetStorage(float64(72.5))
				pcloudCloudinstancesPutOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudinstancesPutOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudinstancesPutOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesPutOptionsModel.Instances).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(pcloudCloudinstancesPutOptionsModel.Memory).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(pcloudCloudinstancesPutOptionsModel.ProcUnits).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(pcloudCloudinstancesPutOptionsModel.Processors).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(pcloudCloudinstancesPutOptionsModel.Storage).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(pcloudCloudinstancesPutOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudinstancesSnapshotsDeleteOptions successfully`, func() {
				// Construct an instance of the PcloudCloudinstancesSnapshotsDeleteOptions model
				cloudInstanceID := "testString"
				snapshotID := "testString"
				pcloudCloudinstancesSnapshotsDeleteOptionsModel := powervsService.NewPcloudCloudinstancesSnapshotsDeleteOptions(cloudInstanceID, snapshotID)
				pcloudCloudinstancesSnapshotsDeleteOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudinstancesSnapshotsDeleteOptionsModel.SetSnapshotID("testString")
				pcloudCloudinstancesSnapshotsDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudinstancesSnapshotsDeleteOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudinstancesSnapshotsDeleteOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesSnapshotsDeleteOptionsModel.SnapshotID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesSnapshotsDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudinstancesSnapshotsGetOptions successfully`, func() {
				// Construct an instance of the PcloudCloudinstancesSnapshotsGetOptions model
				cloudInstanceID := "testString"
				snapshotID := "testString"
				pcloudCloudinstancesSnapshotsGetOptionsModel := powervsService.NewPcloudCloudinstancesSnapshotsGetOptions(cloudInstanceID, snapshotID)
				pcloudCloudinstancesSnapshotsGetOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudinstancesSnapshotsGetOptionsModel.SetSnapshotID("testString")
				pcloudCloudinstancesSnapshotsGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudinstancesSnapshotsGetOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudinstancesSnapshotsGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesSnapshotsGetOptionsModel.SnapshotID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesSnapshotsGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudinstancesSnapshotsGetallOptions successfully`, func() {
				// Construct an instance of the PcloudCloudinstancesSnapshotsGetallOptions model
				cloudInstanceID := "testString"
				pcloudCloudinstancesSnapshotsGetallOptionsModel := powervsService.NewPcloudCloudinstancesSnapshotsGetallOptions(cloudInstanceID)
				pcloudCloudinstancesSnapshotsGetallOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudinstancesSnapshotsGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudinstancesSnapshotsGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudinstancesSnapshotsGetallOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesSnapshotsGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudinstancesSnapshotsPutOptions successfully`, func() {
				// Construct an instance of the PcloudCloudinstancesSnapshotsPutOptions model
				cloudInstanceID := "testString"
				snapshotID := "testString"
				pcloudCloudinstancesSnapshotsPutOptionsModel := powervsService.NewPcloudCloudinstancesSnapshotsPutOptions(cloudInstanceID, snapshotID)
				pcloudCloudinstancesSnapshotsPutOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudinstancesSnapshotsPutOptionsModel.SetSnapshotID("testString")
				pcloudCloudinstancesSnapshotsPutOptionsModel.SetDescription("testString")
				pcloudCloudinstancesSnapshotsPutOptionsModel.SetName("testString")
				pcloudCloudinstancesSnapshotsPutOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudinstancesSnapshotsPutOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudinstancesSnapshotsPutOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesSnapshotsPutOptionsModel.SnapshotID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesSnapshotsPutOptionsModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesSnapshotsPutOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesSnapshotsPutOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudinstancesStockimagesGetOptions successfully`, func() {
				// Construct an instance of the PcloudCloudinstancesStockimagesGetOptions model
				cloudInstanceID := "testString"
				imageID := "testString"
				pcloudCloudinstancesStockimagesGetOptionsModel := powervsService.NewPcloudCloudinstancesStockimagesGetOptions(cloudInstanceID, imageID)
				pcloudCloudinstancesStockimagesGetOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudinstancesStockimagesGetOptionsModel.SetImageID("testString")
				pcloudCloudinstancesStockimagesGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudinstancesStockimagesGetOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudinstancesStockimagesGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesStockimagesGetOptionsModel.ImageID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesStockimagesGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudinstancesStockimagesGetallOptions successfully`, func() {
				// Construct an instance of the PcloudCloudinstancesStockimagesGetallOptions model
				cloudInstanceID := "testString"
				pcloudCloudinstancesStockimagesGetallOptionsModel := powervsService.NewPcloudCloudinstancesStockimagesGetallOptions(cloudInstanceID)
				pcloudCloudinstancesStockimagesGetallOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudinstancesStockimagesGetallOptionsModel.SetSap(true)
				pcloudCloudinstancesStockimagesGetallOptionsModel.SetVtl(true)
				pcloudCloudinstancesStockimagesGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudinstancesStockimagesGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudinstancesStockimagesGetallOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesStockimagesGetallOptionsModel.Sap).To(Equal(core.BoolPtr(true)))
				Expect(pcloudCloudinstancesStockimagesGetallOptionsModel.Vtl).To(Equal(core.BoolPtr(true)))
				Expect(pcloudCloudinstancesStockimagesGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudinstancesStoragetiersGetallOptions successfully`, func() {
				// Construct an instance of the PcloudCloudinstancesStoragetiersGetallOptions model
				cloudInstanceID := "testString"
				pcloudCloudinstancesStoragetiersGetallOptionsModel := powervsService.NewPcloudCloudinstancesStoragetiersGetallOptions(cloudInstanceID)
				pcloudCloudinstancesStoragetiersGetallOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudinstancesStoragetiersGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudinstancesStoragetiersGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudinstancesStoragetiersGetallOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesStoragetiersGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudinstancesVolumesActionPostOptions successfully`, func() {
				// Construct an instance of the PcloudCloudinstancesVolumesActionPostOptions model
				cloudInstanceID := "testString"
				volumeID := "testString"
				pcloudCloudinstancesVolumesActionPostOptionsModel := powervsService.NewPcloudCloudinstancesVolumesActionPostOptions(cloudInstanceID, volumeID)
				pcloudCloudinstancesVolumesActionPostOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudinstancesVolumesActionPostOptionsModel.SetVolumeID("testString")
				pcloudCloudinstancesVolumesActionPostOptionsModel.SetReplicationEnabled(true)
				pcloudCloudinstancesVolumesActionPostOptionsModel.SetTargetStorageTier("testString")
				pcloudCloudinstancesVolumesActionPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudinstancesVolumesActionPostOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudinstancesVolumesActionPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesVolumesActionPostOptionsModel.VolumeID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesVolumesActionPostOptionsModel.ReplicationEnabled).To(Equal(core.BoolPtr(true)))
				Expect(pcloudCloudinstancesVolumesActionPostOptionsModel.TargetStorageTier).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesVolumesActionPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudinstancesVolumesDeleteOptions successfully`, func() {
				// Construct an instance of the PcloudCloudinstancesVolumesDeleteOptions model
				cloudInstanceID := "testString"
				volumeID := "testString"
				pcloudCloudinstancesVolumesDeleteOptionsModel := powervsService.NewPcloudCloudinstancesVolumesDeleteOptions(cloudInstanceID, volumeID)
				pcloudCloudinstancesVolumesDeleteOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudinstancesVolumesDeleteOptionsModel.SetVolumeID("testString")
				pcloudCloudinstancesVolumesDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudinstancesVolumesDeleteOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudinstancesVolumesDeleteOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesVolumesDeleteOptionsModel.VolumeID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesVolumesDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudinstancesVolumesFlashCopyMappingsGetOptions successfully`, func() {
				// Construct an instance of the PcloudCloudinstancesVolumesFlashCopyMappingsGetOptions model
				cloudInstanceID := "testString"
				volumeID := "testString"
				pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel := powervsService.NewPcloudCloudinstancesVolumesFlashCopyMappingsGetOptions(cloudInstanceID, volumeID)
				pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel.SetVolumeID("testString")
				pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel.VolumeID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesVolumesFlashCopyMappingsGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudinstancesVolumesGetOptions successfully`, func() {
				// Construct an instance of the PcloudCloudinstancesVolumesGetOptions model
				cloudInstanceID := "testString"
				volumeID := "testString"
				pcloudCloudinstancesVolumesGetOptionsModel := powervsService.NewPcloudCloudinstancesVolumesGetOptions(cloudInstanceID, volumeID)
				pcloudCloudinstancesVolumesGetOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudinstancesVolumesGetOptionsModel.SetVolumeID("testString")
				pcloudCloudinstancesVolumesGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudinstancesVolumesGetOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudinstancesVolumesGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesVolumesGetOptionsModel.VolumeID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesVolumesGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudinstancesVolumesGetallOptions successfully`, func() {
				// Construct an instance of the PcloudCloudinstancesVolumesGetallOptions model
				cloudInstanceID := "testString"
				pcloudCloudinstancesVolumesGetallOptionsModel := powervsService.NewPcloudCloudinstancesVolumesGetallOptions(cloudInstanceID)
				pcloudCloudinstancesVolumesGetallOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudinstancesVolumesGetallOptionsModel.SetReplicationEnabled(true)
				pcloudCloudinstancesVolumesGetallOptionsModel.SetAffinity("testString")
				pcloudCloudinstancesVolumesGetallOptionsModel.SetAuxiliary(true)
				pcloudCloudinstancesVolumesGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudinstancesVolumesGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudinstancesVolumesGetallOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesVolumesGetallOptionsModel.ReplicationEnabled).To(Equal(core.BoolPtr(true)))
				Expect(pcloudCloudinstancesVolumesGetallOptionsModel.Affinity).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesVolumesGetallOptionsModel.Auxiliary).To(Equal(core.BoolPtr(true)))
				Expect(pcloudCloudinstancesVolumesGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudinstancesVolumesPostOptions successfully`, func() {
				// Construct an instance of the PcloudCloudinstancesVolumesPostOptions model
				cloudInstanceID := "testString"
				pcloudCloudinstancesVolumesPostOptionsName := "testString"
				pcloudCloudinstancesVolumesPostOptionsSize := float64(72.5)
				pcloudCloudinstancesVolumesPostOptionsModel := powervsService.NewPcloudCloudinstancesVolumesPostOptions(cloudInstanceID, pcloudCloudinstancesVolumesPostOptionsName, pcloudCloudinstancesVolumesPostOptionsSize)
				pcloudCloudinstancesVolumesPostOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.SetName("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.SetSize(float64(72.5))
				pcloudCloudinstancesVolumesPostOptionsModel.SetAffinityPvmInstance("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.SetAffinityPolicy("affinity")
				pcloudCloudinstancesVolumesPostOptionsModel.SetAffinityVolume("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.SetAntiAffinityPvmInstances([]string{"testString"})
				pcloudCloudinstancesVolumesPostOptionsModel.SetAntiAffinityVolumes([]string{"testString"})
				pcloudCloudinstancesVolumesPostOptionsModel.SetDiskType("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.SetReplicationEnabled(true)
				pcloudCloudinstancesVolumesPostOptionsModel.SetShareable(true)
				pcloudCloudinstancesVolumesPostOptionsModel.SetVolumePool("testString")
				pcloudCloudinstancesVolumesPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudinstancesVolumesPostOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudinstancesVolumesPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesVolumesPostOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesVolumesPostOptionsModel.Size).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(pcloudCloudinstancesVolumesPostOptionsModel.AffinityPvmInstance).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesVolumesPostOptionsModel.AffinityPolicy).To(Equal(core.StringPtr("affinity")))
				Expect(pcloudCloudinstancesVolumesPostOptionsModel.AffinityVolume).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesVolumesPostOptionsModel.AntiAffinityPvmInstances).To(Equal([]string{"testString"}))
				Expect(pcloudCloudinstancesVolumesPostOptionsModel.AntiAffinityVolumes).To(Equal([]string{"testString"}))
				Expect(pcloudCloudinstancesVolumesPostOptionsModel.DiskType).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesVolumesPostOptionsModel.ReplicationEnabled).To(Equal(core.BoolPtr(true)))
				Expect(pcloudCloudinstancesVolumesPostOptionsModel.Shareable).To(Equal(core.BoolPtr(true)))
				Expect(pcloudCloudinstancesVolumesPostOptionsModel.VolumePool).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesVolumesPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudinstancesVolumesPutOptions successfully`, func() {
				// Construct an instance of the PcloudCloudinstancesVolumesPutOptions model
				cloudInstanceID := "testString"
				volumeID := "testString"
				pcloudCloudinstancesVolumesPutOptionsModel := powervsService.NewPcloudCloudinstancesVolumesPutOptions(cloudInstanceID, volumeID)
				pcloudCloudinstancesVolumesPutOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudinstancesVolumesPutOptionsModel.SetVolumeID("testString")
				pcloudCloudinstancesVolumesPutOptionsModel.SetBootable(true)
				pcloudCloudinstancesVolumesPutOptionsModel.SetName("testString")
				pcloudCloudinstancesVolumesPutOptionsModel.SetShareable(true)
				pcloudCloudinstancesVolumesPutOptionsModel.SetSize(float64(72.5))
				pcloudCloudinstancesVolumesPutOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudinstancesVolumesPutOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudinstancesVolumesPutOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesVolumesPutOptionsModel.VolumeID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesVolumesPutOptionsModel.Bootable).To(Equal(core.BoolPtr(true)))
				Expect(pcloudCloudinstancesVolumesPutOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesVolumesPutOptionsModel.Shareable).To(Equal(core.BoolPtr(true)))
				Expect(pcloudCloudinstancesVolumesPutOptionsModel.Size).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(pcloudCloudinstancesVolumesPutOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptions successfully`, func() {
				// Construct an instance of the PcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptions model
				cloudInstanceID := "testString"
				volumeID := "testString"
				pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel := powervsService.NewPcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptions(cloudInstanceID, volumeID)
				pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel.SetCloudInstanceID("testString")
				pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel.SetVolumeID("testString")
				pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel).ToNot(BeNil())
				Expect(pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel.VolumeID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudCloudinstancesVolumesRemoteCopyRelationshipGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudDhcpDeleteOptions successfully`, func() {
				// Construct an instance of the PcloudDhcpDeleteOptions model
				cloudInstanceID := "testString"
				dhcpID := "testString"
				pcloudDhcpDeleteOptionsModel := powervsService.NewPcloudDhcpDeleteOptions(cloudInstanceID, dhcpID)
				pcloudDhcpDeleteOptionsModel.SetCloudInstanceID("testString")
				pcloudDhcpDeleteOptionsModel.SetDhcpID("testString")
				pcloudDhcpDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudDhcpDeleteOptionsModel).ToNot(BeNil())
				Expect(pcloudDhcpDeleteOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudDhcpDeleteOptionsModel.DhcpID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudDhcpDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudDhcpGetOptions successfully`, func() {
				// Construct an instance of the PcloudDhcpGetOptions model
				cloudInstanceID := "testString"
				dhcpID := "testString"
				pcloudDhcpGetOptionsModel := powervsService.NewPcloudDhcpGetOptions(cloudInstanceID, dhcpID)
				pcloudDhcpGetOptionsModel.SetCloudInstanceID("testString")
				pcloudDhcpGetOptionsModel.SetDhcpID("testString")
				pcloudDhcpGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudDhcpGetOptionsModel).ToNot(BeNil())
				Expect(pcloudDhcpGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudDhcpGetOptionsModel.DhcpID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudDhcpGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudDhcpGetallOptions successfully`, func() {
				// Construct an instance of the PcloudDhcpGetallOptions model
				cloudInstanceID := "testString"
				pcloudDhcpGetallOptionsModel := powervsService.NewPcloudDhcpGetallOptions(cloudInstanceID)
				pcloudDhcpGetallOptionsModel.SetCloudInstanceID("testString")
				pcloudDhcpGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudDhcpGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudDhcpGetallOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudDhcpGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudDhcpPostOptions successfully`, func() {
				// Construct an instance of the PcloudDhcpPostOptions model
				cloudInstanceID := "testString"
				pcloudDhcpPostOptionsModel := powervsService.NewPcloudDhcpPostOptions(cloudInstanceID)
				pcloudDhcpPostOptionsModel.SetCloudInstanceID("testString")
				pcloudDhcpPostOptionsModel.SetCIDR("testString")
				pcloudDhcpPostOptionsModel.SetCloudConnectionID("testString")
				pcloudDhcpPostOptionsModel.SetDnsServer("testString")
				pcloudDhcpPostOptionsModel.SetName("testString")
				pcloudDhcpPostOptionsModel.SetSnatEnabled(true)
				pcloudDhcpPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudDhcpPostOptionsModel).ToNot(BeNil())
				Expect(pcloudDhcpPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudDhcpPostOptionsModel.CIDR).To(Equal(core.StringPtr("testString")))
				Expect(pcloudDhcpPostOptionsModel.CloudConnectionID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudDhcpPostOptionsModel.DnsServer).To(Equal(core.StringPtr("testString")))
				Expect(pcloudDhcpPostOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(pcloudDhcpPostOptionsModel.SnatEnabled).To(Equal(core.BoolPtr(true)))
				Expect(pcloudDhcpPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudEventsGetOptions successfully`, func() {
				// Construct an instance of the PcloudEventsGetOptions model
				cloudInstanceID := "testString"
				eventID := "testString"
				pcloudEventsGetOptionsModel := powervsService.NewPcloudEventsGetOptions(cloudInstanceID, eventID)
				pcloudEventsGetOptionsModel.SetCloudInstanceID("testString")
				pcloudEventsGetOptionsModel.SetEventID("testString")
				pcloudEventsGetOptionsModel.SetAcceptLanguage("testString")
				pcloudEventsGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudEventsGetOptionsModel).ToNot(BeNil())
				Expect(pcloudEventsGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudEventsGetOptionsModel.EventID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudEventsGetOptionsModel.AcceptLanguage).To(Equal(core.StringPtr("testString")))
				Expect(pcloudEventsGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudEventsGetqueryOptions successfully`, func() {
				// Construct an instance of the PcloudEventsGetqueryOptions model
				cloudInstanceID := "testString"
				pcloudEventsGetqueryOptionsModel := powervsService.NewPcloudEventsGetqueryOptions(cloudInstanceID)
				pcloudEventsGetqueryOptionsModel.SetCloudInstanceID("testString")
				pcloudEventsGetqueryOptionsModel.SetTime("testString")
				pcloudEventsGetqueryOptionsModel.SetFromTime("testString")
				pcloudEventsGetqueryOptionsModel.SetToTime("testString")
				pcloudEventsGetqueryOptionsModel.SetAcceptLanguage("testString")
				pcloudEventsGetqueryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudEventsGetqueryOptionsModel).ToNot(BeNil())
				Expect(pcloudEventsGetqueryOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudEventsGetqueryOptionsModel.Time).To(Equal(core.StringPtr("testString")))
				Expect(pcloudEventsGetqueryOptionsModel.FromTime).To(Equal(core.StringPtr("testString")))
				Expect(pcloudEventsGetqueryOptionsModel.ToTime).To(Equal(core.StringPtr("testString")))
				Expect(pcloudEventsGetqueryOptionsModel.AcceptLanguage).To(Equal(core.StringPtr("testString")))
				Expect(pcloudEventsGetqueryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudIkepoliciesDeleteOptions successfully`, func() {
				// Construct an instance of the PcloudIkepoliciesDeleteOptions model
				cloudInstanceID := "testString"
				ikePolicyID := "testString"
				pcloudIkepoliciesDeleteOptionsModel := powervsService.NewPcloudIkepoliciesDeleteOptions(cloudInstanceID, ikePolicyID)
				pcloudIkepoliciesDeleteOptionsModel.SetCloudInstanceID("testString")
				pcloudIkepoliciesDeleteOptionsModel.SetIkePolicyID("testString")
				pcloudIkepoliciesDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudIkepoliciesDeleteOptionsModel).ToNot(BeNil())
				Expect(pcloudIkepoliciesDeleteOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudIkepoliciesDeleteOptionsModel.IkePolicyID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudIkepoliciesDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudIkepoliciesGetOptions successfully`, func() {
				// Construct an instance of the PcloudIkepoliciesGetOptions model
				cloudInstanceID := "testString"
				ikePolicyID := "testString"
				pcloudIkepoliciesGetOptionsModel := powervsService.NewPcloudIkepoliciesGetOptions(cloudInstanceID, ikePolicyID)
				pcloudIkepoliciesGetOptionsModel.SetCloudInstanceID("testString")
				pcloudIkepoliciesGetOptionsModel.SetIkePolicyID("testString")
				pcloudIkepoliciesGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudIkepoliciesGetOptionsModel).ToNot(BeNil())
				Expect(pcloudIkepoliciesGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudIkepoliciesGetOptionsModel.IkePolicyID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudIkepoliciesGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudIkepoliciesGetallOptions successfully`, func() {
				// Construct an instance of the PcloudIkepoliciesGetallOptions model
				cloudInstanceID := "testString"
				pcloudIkepoliciesGetallOptionsModel := powervsService.NewPcloudIkepoliciesGetallOptions(cloudInstanceID)
				pcloudIkepoliciesGetallOptionsModel.SetCloudInstanceID("testString")
				pcloudIkepoliciesGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudIkepoliciesGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudIkepoliciesGetallOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudIkepoliciesGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudIkepoliciesPostOptions successfully`, func() {
				// Construct an instance of the PcloudIkepoliciesPostOptions model
				cloudInstanceID := "testString"
				pcloudIkepoliciesPostOptionsDhGroup := int64(2)
				pcloudIkepoliciesPostOptionsEncryption := "aes-256-cbc"
				pcloudIkepoliciesPostOptionsKeyLifetime := int64(28800)
				pcloudIkepoliciesPostOptionsName := "ikePolicy1"
				pcloudIkepoliciesPostOptionsPresharedKey := "testString"
				pcloudIkepoliciesPostOptionsVersion := int64(2)
				pcloudIkepoliciesPostOptionsModel := powervsService.NewPcloudIkepoliciesPostOptions(cloudInstanceID, pcloudIkepoliciesPostOptionsDhGroup, pcloudIkepoliciesPostOptionsEncryption, pcloudIkepoliciesPostOptionsKeyLifetime, pcloudIkepoliciesPostOptionsName, pcloudIkepoliciesPostOptionsPresharedKey, pcloudIkepoliciesPostOptionsVersion)
				pcloudIkepoliciesPostOptionsModel.SetCloudInstanceID("testString")
				pcloudIkepoliciesPostOptionsModel.SetDhGroup(int64(2))
				pcloudIkepoliciesPostOptionsModel.SetEncryption("aes-256-cbc")
				pcloudIkepoliciesPostOptionsModel.SetKeyLifetime(int64(28800))
				pcloudIkepoliciesPostOptionsModel.SetName("ikePolicy1")
				pcloudIkepoliciesPostOptionsModel.SetPresharedKey("testString")
				pcloudIkepoliciesPostOptionsModel.SetVersion(int64(2))
				pcloudIkepoliciesPostOptionsModel.SetAuthentication("sha-256")
				pcloudIkepoliciesPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudIkepoliciesPostOptionsModel).ToNot(BeNil())
				Expect(pcloudIkepoliciesPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudIkepoliciesPostOptionsModel.DhGroup).To(Equal(core.Int64Ptr(int64(2))))
				Expect(pcloudIkepoliciesPostOptionsModel.Encryption).To(Equal(core.StringPtr("aes-256-cbc")))
				Expect(pcloudIkepoliciesPostOptionsModel.KeyLifetime).To(Equal(core.Int64Ptr(int64(28800))))
				Expect(pcloudIkepoliciesPostOptionsModel.Name).To(Equal(core.StringPtr("ikePolicy1")))
				Expect(pcloudIkepoliciesPostOptionsModel.PresharedKey).To(Equal(core.StringPtr("testString")))
				Expect(pcloudIkepoliciesPostOptionsModel.Version).To(Equal(core.Int64Ptr(int64(2))))
				Expect(pcloudIkepoliciesPostOptionsModel.Authentication).To(Equal(core.StringPtr("sha-256")))
				Expect(pcloudIkepoliciesPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudIkepoliciesPutOptions successfully`, func() {
				// Construct an instance of the IkePolicyUpdate model
				ikePolicyUpdateModel := new(powervsv1.IkePolicyUpdate)
				Expect(ikePolicyUpdateModel).ToNot(BeNil())
				ikePolicyUpdateModel.Authentication = core.StringPtr("sha-256")
				ikePolicyUpdateModel.DhGroup = core.Int64Ptr(int64(2))
				ikePolicyUpdateModel.Encryption = core.StringPtr("aes-256-cbc")
				ikePolicyUpdateModel.KeyLifetime = core.Int64Ptr(int64(28800))
				ikePolicyUpdateModel.Name = core.StringPtr("ikePolicy1")
				ikePolicyUpdateModel.PresharedKey = core.StringPtr("testString")
				ikePolicyUpdateModel.Version = core.Int64Ptr(int64(2))
				ikePolicyUpdateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(ikePolicyUpdateModel.Authentication).To(Equal(core.StringPtr("sha-256")))
				Expect(ikePolicyUpdateModel.DhGroup).To(Equal(core.Int64Ptr(int64(2))))
				Expect(ikePolicyUpdateModel.Encryption).To(Equal(core.StringPtr("aes-256-cbc")))
				Expect(ikePolicyUpdateModel.KeyLifetime).To(Equal(core.Int64Ptr(int64(28800))))
				Expect(ikePolicyUpdateModel.Name).To(Equal(core.StringPtr("ikePolicy1")))
				Expect(ikePolicyUpdateModel.PresharedKey).To(Equal(core.StringPtr("testString")))
				Expect(ikePolicyUpdateModel.Version).To(Equal(core.Int64Ptr(int64(2))))
				Expect(ikePolicyUpdateModel.GetProperties()).ToNot(BeEmpty())
				Expect(ikePolicyUpdateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				ikePolicyUpdateModel.SetProperties(nil)
				Expect(ikePolicyUpdateModel.GetProperties()).To(BeEmpty())

				ikePolicyUpdateModelExpectedMap := make(map[string]interface{})
				ikePolicyUpdateModelExpectedMap["foo"] = core.StringPtr("testString")
				ikePolicyUpdateModel.SetProperties(ikePolicyUpdateModelExpectedMap)
				ikePolicyUpdateModelActualMap := ikePolicyUpdateModel.GetProperties()
				Expect(ikePolicyUpdateModelActualMap).To(Equal(ikePolicyUpdateModelExpectedMap))

				// Construct an instance of the PcloudIkepoliciesPutOptions model
				cloudInstanceID := "testString"
				ikePolicyID := "testString"
				var body *powervsv1.IkePolicyUpdate = nil
				pcloudIkepoliciesPutOptionsModel := powervsService.NewPcloudIkepoliciesPutOptions(cloudInstanceID, ikePolicyID, body)
				pcloudIkepoliciesPutOptionsModel.SetCloudInstanceID("testString")
				pcloudIkepoliciesPutOptionsModel.SetIkePolicyID("testString")
				pcloudIkepoliciesPutOptionsModel.SetBody(ikePolicyUpdateModel)
				pcloudIkepoliciesPutOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudIkepoliciesPutOptionsModel).ToNot(BeNil())
				Expect(pcloudIkepoliciesPutOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudIkepoliciesPutOptionsModel.IkePolicyID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudIkepoliciesPutOptionsModel.Body).To(Equal(ikePolicyUpdateModel))
				Expect(pcloudIkepoliciesPutOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudImagesGetOptions successfully`, func() {
				// Construct an instance of the PcloudImagesGetOptions model
				imageID := "testString"
				pcloudImagesGetOptionsModel := powervsService.NewPcloudImagesGetOptions(imageID)
				pcloudImagesGetOptionsModel.SetImageID("testString")
				pcloudImagesGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudImagesGetOptionsModel).ToNot(BeNil())
				Expect(pcloudImagesGetOptionsModel.ImageID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudImagesGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudImagesGetallOptions successfully`, func() {
				// Construct an instance of the PcloudImagesGetallOptions model
				pcloudImagesGetallOptionsModel := powervsService.NewPcloudImagesGetallOptions()
				pcloudImagesGetallOptionsModel.SetSap(true)
				pcloudImagesGetallOptionsModel.SetVtl(true)
				pcloudImagesGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudImagesGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudImagesGetallOptionsModel.Sap).To(Equal(core.BoolPtr(true)))
				Expect(pcloudImagesGetallOptionsModel.Vtl).To(Equal(core.BoolPtr(true)))
				Expect(pcloudImagesGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudIpsecpoliciesDeleteOptions successfully`, func() {
				// Construct an instance of the PcloudIpsecpoliciesDeleteOptions model
				cloudInstanceID := "testString"
				ipsecPolicyID := "testString"
				pcloudIpsecpoliciesDeleteOptionsModel := powervsService.NewPcloudIpsecpoliciesDeleteOptions(cloudInstanceID, ipsecPolicyID)
				pcloudIpsecpoliciesDeleteOptionsModel.SetCloudInstanceID("testString")
				pcloudIpsecpoliciesDeleteOptionsModel.SetIpsecPolicyID("testString")
				pcloudIpsecpoliciesDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudIpsecpoliciesDeleteOptionsModel).ToNot(BeNil())
				Expect(pcloudIpsecpoliciesDeleteOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudIpsecpoliciesDeleteOptionsModel.IpsecPolicyID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudIpsecpoliciesDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudIpsecpoliciesGetOptions successfully`, func() {
				// Construct an instance of the PcloudIpsecpoliciesGetOptions model
				cloudInstanceID := "testString"
				ipsecPolicyID := "testString"
				pcloudIpsecpoliciesGetOptionsModel := powervsService.NewPcloudIpsecpoliciesGetOptions(cloudInstanceID, ipsecPolicyID)
				pcloudIpsecpoliciesGetOptionsModel.SetCloudInstanceID("testString")
				pcloudIpsecpoliciesGetOptionsModel.SetIpsecPolicyID("testString")
				pcloudIpsecpoliciesGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudIpsecpoliciesGetOptionsModel).ToNot(BeNil())
				Expect(pcloudIpsecpoliciesGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudIpsecpoliciesGetOptionsModel.IpsecPolicyID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudIpsecpoliciesGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudIpsecpoliciesGetallOptions successfully`, func() {
				// Construct an instance of the PcloudIpsecpoliciesGetallOptions model
				cloudInstanceID := "testString"
				pcloudIpsecpoliciesGetallOptionsModel := powervsService.NewPcloudIpsecpoliciesGetallOptions(cloudInstanceID)
				pcloudIpsecpoliciesGetallOptionsModel.SetCloudInstanceID("testString")
				pcloudIpsecpoliciesGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudIpsecpoliciesGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudIpsecpoliciesGetallOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudIpsecpoliciesGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudIpsecpoliciesPostOptions successfully`, func() {
				// Construct an instance of the PcloudIpsecpoliciesPostOptions model
				cloudInstanceID := "testString"
				pcloudIpsecpoliciesPostOptionsDhGroup := int64(2)
				pcloudIpsecpoliciesPostOptionsEncryption := "aes-256-cbc"
				pcloudIpsecpoliciesPostOptionsKeyLifetime := int64(28800)
				pcloudIpsecpoliciesPostOptionsName := "ipSecPolicy2"
				pcloudIpsecpoliciesPostOptionsPfs := true
				pcloudIpsecpoliciesPostOptionsModel := powervsService.NewPcloudIpsecpoliciesPostOptions(cloudInstanceID, pcloudIpsecpoliciesPostOptionsDhGroup, pcloudIpsecpoliciesPostOptionsEncryption, pcloudIpsecpoliciesPostOptionsKeyLifetime, pcloudIpsecpoliciesPostOptionsName, pcloudIpsecpoliciesPostOptionsPfs)
				pcloudIpsecpoliciesPostOptionsModel.SetCloudInstanceID("testString")
				pcloudIpsecpoliciesPostOptionsModel.SetDhGroup(int64(2))
				pcloudIpsecpoliciesPostOptionsModel.SetEncryption("aes-256-cbc")
				pcloudIpsecpoliciesPostOptionsModel.SetKeyLifetime(int64(28800))
				pcloudIpsecpoliciesPostOptionsModel.SetName("ipSecPolicy2")
				pcloudIpsecpoliciesPostOptionsModel.SetPfs(true)
				pcloudIpsecpoliciesPostOptionsModel.SetAuthentication("hmac-sha-256-128")
				pcloudIpsecpoliciesPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudIpsecpoliciesPostOptionsModel).ToNot(BeNil())
				Expect(pcloudIpsecpoliciesPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudIpsecpoliciesPostOptionsModel.DhGroup).To(Equal(core.Int64Ptr(int64(2))))
				Expect(pcloudIpsecpoliciesPostOptionsModel.Encryption).To(Equal(core.StringPtr("aes-256-cbc")))
				Expect(pcloudIpsecpoliciesPostOptionsModel.KeyLifetime).To(Equal(core.Int64Ptr(int64(28800))))
				Expect(pcloudIpsecpoliciesPostOptionsModel.Name).To(Equal(core.StringPtr("ipSecPolicy2")))
				Expect(pcloudIpsecpoliciesPostOptionsModel.Pfs).To(Equal(core.BoolPtr(true)))
				Expect(pcloudIpsecpoliciesPostOptionsModel.Authentication).To(Equal(core.StringPtr("hmac-sha-256-128")))
				Expect(pcloudIpsecpoliciesPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudIpsecpoliciesPutOptions successfully`, func() {
				// Construct an instance of the IPSecPolicyUpdate model
				ipSecPolicyUpdateModel := new(powervsv1.IPSecPolicyUpdate)
				Expect(ipSecPolicyUpdateModel).ToNot(BeNil())
				ipSecPolicyUpdateModel.Authentication = core.StringPtr("hmac-sha-256-128")
				ipSecPolicyUpdateModel.DhGroup = core.Int64Ptr(int64(2))
				ipSecPolicyUpdateModel.Encryption = core.StringPtr("aes-256-cbc")
				ipSecPolicyUpdateModel.KeyLifetime = core.Int64Ptr(int64(28800))
				ipSecPolicyUpdateModel.Name = core.StringPtr("ipSecPolicy2")
				ipSecPolicyUpdateModel.Pfs = core.BoolPtr(true)
				ipSecPolicyUpdateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(ipSecPolicyUpdateModel.Authentication).To(Equal(core.StringPtr("hmac-sha-256-128")))
				Expect(ipSecPolicyUpdateModel.DhGroup).To(Equal(core.Int64Ptr(int64(2))))
				Expect(ipSecPolicyUpdateModel.Encryption).To(Equal(core.StringPtr("aes-256-cbc")))
				Expect(ipSecPolicyUpdateModel.KeyLifetime).To(Equal(core.Int64Ptr(int64(28800))))
				Expect(ipSecPolicyUpdateModel.Name).To(Equal(core.StringPtr("ipSecPolicy2")))
				Expect(ipSecPolicyUpdateModel.Pfs).To(Equal(core.BoolPtr(true)))
				Expect(ipSecPolicyUpdateModel.GetProperties()).ToNot(BeEmpty())
				Expect(ipSecPolicyUpdateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				ipSecPolicyUpdateModel.SetProperties(nil)
				Expect(ipSecPolicyUpdateModel.GetProperties()).To(BeEmpty())

				ipSecPolicyUpdateModelExpectedMap := make(map[string]interface{})
				ipSecPolicyUpdateModelExpectedMap["foo"] = core.StringPtr("testString")
				ipSecPolicyUpdateModel.SetProperties(ipSecPolicyUpdateModelExpectedMap)
				ipSecPolicyUpdateModelActualMap := ipSecPolicyUpdateModel.GetProperties()
				Expect(ipSecPolicyUpdateModelActualMap).To(Equal(ipSecPolicyUpdateModelExpectedMap))

				// Construct an instance of the PcloudIpsecpoliciesPutOptions model
				cloudInstanceID := "testString"
				ipsecPolicyID := "testString"
				var body *powervsv1.IPSecPolicyUpdate = nil
				pcloudIpsecpoliciesPutOptionsModel := powervsService.NewPcloudIpsecpoliciesPutOptions(cloudInstanceID, ipsecPolicyID, body)
				pcloudIpsecpoliciesPutOptionsModel.SetCloudInstanceID("testString")
				pcloudIpsecpoliciesPutOptionsModel.SetIpsecPolicyID("testString")
				pcloudIpsecpoliciesPutOptionsModel.SetBody(ipSecPolicyUpdateModel)
				pcloudIpsecpoliciesPutOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudIpsecpoliciesPutOptionsModel).ToNot(BeNil())
				Expect(pcloudIpsecpoliciesPutOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudIpsecpoliciesPutOptionsModel.IpsecPolicyID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudIpsecpoliciesPutOptionsModel.Body).To(Equal(ipSecPolicyUpdateModel))
				Expect(pcloudIpsecpoliciesPutOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudLocationsDisasterrecoveryGetOptions successfully`, func() {
				// Construct an instance of the PcloudLocationsDisasterrecoveryGetOptions model
				cloudInstanceID := "testString"
				pcloudLocationsDisasterrecoveryGetOptionsModel := powervsService.NewPcloudLocationsDisasterrecoveryGetOptions(cloudInstanceID)
				pcloudLocationsDisasterrecoveryGetOptionsModel.SetCloudInstanceID("testString")
				pcloudLocationsDisasterrecoveryGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudLocationsDisasterrecoveryGetOptionsModel).ToNot(BeNil())
				Expect(pcloudLocationsDisasterrecoveryGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudLocationsDisasterrecoveryGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudLocationsDisasterrecoveryGetallOptions successfully`, func() {
				// Construct an instance of the PcloudLocationsDisasterrecoveryGetallOptions model
				pcloudLocationsDisasterrecoveryGetallOptionsModel := powervsService.NewPcloudLocationsDisasterrecoveryGetallOptions()
				pcloudLocationsDisasterrecoveryGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudLocationsDisasterrecoveryGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudLocationsDisasterrecoveryGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudNetworksDeleteOptions successfully`, func() {
				// Construct an instance of the PcloudNetworksDeleteOptions model
				cloudInstanceID := "testString"
				networkID := "testString"
				pcloudNetworksDeleteOptionsModel := powervsService.NewPcloudNetworksDeleteOptions(cloudInstanceID, networkID)
				pcloudNetworksDeleteOptionsModel.SetCloudInstanceID("testString")
				pcloudNetworksDeleteOptionsModel.SetNetworkID("testString")
				pcloudNetworksDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudNetworksDeleteOptionsModel).ToNot(BeNil())
				Expect(pcloudNetworksDeleteOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksDeleteOptionsModel.NetworkID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudNetworksGetOptions successfully`, func() {
				// Construct an instance of the PcloudNetworksGetOptions model
				cloudInstanceID := "testString"
				networkID := "testString"
				pcloudNetworksGetOptionsModel := powervsService.NewPcloudNetworksGetOptions(cloudInstanceID, networkID)
				pcloudNetworksGetOptionsModel.SetCloudInstanceID("testString")
				pcloudNetworksGetOptionsModel.SetNetworkID("testString")
				pcloudNetworksGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudNetworksGetOptionsModel).ToNot(BeNil())
				Expect(pcloudNetworksGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksGetOptionsModel.NetworkID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudNetworksGetallOptions successfully`, func() {
				// Construct an instance of the PcloudNetworksGetallOptions model
				cloudInstanceID := "testString"
				pcloudNetworksGetallOptionsModel := powervsService.NewPcloudNetworksGetallOptions(cloudInstanceID)
				pcloudNetworksGetallOptionsModel.SetCloudInstanceID("testString")
				pcloudNetworksGetallOptionsModel.SetFilter("testString")
				pcloudNetworksGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudNetworksGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudNetworksGetallOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksGetallOptionsModel.Filter).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudNetworksPortsDeleteOptions successfully`, func() {
				// Construct an instance of the PcloudNetworksPortsDeleteOptions model
				cloudInstanceID := "testString"
				networkID := "testString"
				portID := "testString"
				pcloudNetworksPortsDeleteOptionsModel := powervsService.NewPcloudNetworksPortsDeleteOptions(cloudInstanceID, networkID, portID)
				pcloudNetworksPortsDeleteOptionsModel.SetCloudInstanceID("testString")
				pcloudNetworksPortsDeleteOptionsModel.SetNetworkID("testString")
				pcloudNetworksPortsDeleteOptionsModel.SetPortID("testString")
				pcloudNetworksPortsDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudNetworksPortsDeleteOptionsModel).ToNot(BeNil())
				Expect(pcloudNetworksPortsDeleteOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksPortsDeleteOptionsModel.NetworkID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksPortsDeleteOptionsModel.PortID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksPortsDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudNetworksPortsGetOptions successfully`, func() {
				// Construct an instance of the PcloudNetworksPortsGetOptions model
				cloudInstanceID := "testString"
				networkID := "testString"
				portID := "testString"
				pcloudNetworksPortsGetOptionsModel := powervsService.NewPcloudNetworksPortsGetOptions(cloudInstanceID, networkID, portID)
				pcloudNetworksPortsGetOptionsModel.SetCloudInstanceID("testString")
				pcloudNetworksPortsGetOptionsModel.SetNetworkID("testString")
				pcloudNetworksPortsGetOptionsModel.SetPortID("testString")
				pcloudNetworksPortsGetOptionsModel.SetAccept("application/json")
				pcloudNetworksPortsGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudNetworksPortsGetOptionsModel).ToNot(BeNil())
				Expect(pcloudNetworksPortsGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksPortsGetOptionsModel.NetworkID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksPortsGetOptionsModel.PortID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksPortsGetOptionsModel.Accept).To(Equal(core.StringPtr("application/json")))
				Expect(pcloudNetworksPortsGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudNetworksPortsGetallOptions successfully`, func() {
				// Construct an instance of the PcloudNetworksPortsGetallOptions model
				cloudInstanceID := "testString"
				networkID := "testString"
				pcloudNetworksPortsGetallOptionsModel := powervsService.NewPcloudNetworksPortsGetallOptions(cloudInstanceID, networkID)
				pcloudNetworksPortsGetallOptionsModel.SetCloudInstanceID("testString")
				pcloudNetworksPortsGetallOptionsModel.SetNetworkID("testString")
				pcloudNetworksPortsGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudNetworksPortsGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudNetworksPortsGetallOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksPortsGetallOptionsModel.NetworkID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksPortsGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudNetworksPortsPostOptions successfully`, func() {
				// Construct an instance of the PcloudNetworksPortsPostOptions model
				cloudInstanceID := "testString"
				networkID := "testString"
				pcloudNetworksPortsPostOptionsModel := powervsService.NewPcloudNetworksPortsPostOptions(cloudInstanceID, networkID)
				pcloudNetworksPortsPostOptionsModel.SetCloudInstanceID("testString")
				pcloudNetworksPortsPostOptionsModel.SetNetworkID("testString")
				pcloudNetworksPortsPostOptionsModel.SetDescription("testString")
				pcloudNetworksPortsPostOptionsModel.SetIPAddress("testString")
				pcloudNetworksPortsPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudNetworksPortsPostOptionsModel).ToNot(BeNil())
				Expect(pcloudNetworksPortsPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksPortsPostOptionsModel.NetworkID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksPortsPostOptionsModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksPortsPostOptionsModel.IPAddress).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksPortsPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudNetworksPortsPutOptions successfully`, func() {
				// Construct an instance of the PcloudNetworksPortsPutOptions model
				cloudInstanceID := "testString"
				networkID := "testString"
				portID := "testString"
				pcloudNetworksPortsPutOptionsModel := powervsService.NewPcloudNetworksPortsPutOptions(cloudInstanceID, networkID, portID)
				pcloudNetworksPortsPutOptionsModel.SetCloudInstanceID("testString")
				pcloudNetworksPortsPutOptionsModel.SetNetworkID("testString")
				pcloudNetworksPortsPutOptionsModel.SetPortID("testString")
				pcloudNetworksPortsPutOptionsModel.SetDescription("testString")
				pcloudNetworksPortsPutOptionsModel.SetPvmInstanceID("testString")
				pcloudNetworksPortsPutOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudNetworksPortsPutOptionsModel).ToNot(BeNil())
				Expect(pcloudNetworksPortsPutOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksPortsPutOptionsModel.NetworkID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksPortsPutOptionsModel.PortID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksPortsPutOptionsModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksPortsPutOptionsModel.PvmInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksPortsPutOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudNetworksPostOptions successfully`, func() {
				// Construct an instance of the IPAddressRange model
				ipAddressRangeModel := new(powervsv1.IPAddressRange)
				Expect(ipAddressRangeModel).ToNot(BeNil())
				ipAddressRangeModel.EndingIPAddress = core.StringPtr("testString")
				ipAddressRangeModel.StartingIPAddress = core.StringPtr("testString")
				Expect(ipAddressRangeModel.EndingIPAddress).To(Equal(core.StringPtr("testString")))
				Expect(ipAddressRangeModel.StartingIPAddress).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the PcloudNetworksPostOptions model
				cloudInstanceID := "testString"
				pcloudNetworksPostOptionsType := "vlan"
				pcloudNetworksPostOptionsModel := powervsService.NewPcloudNetworksPostOptions(cloudInstanceID, pcloudNetworksPostOptionsType)
				pcloudNetworksPostOptionsModel.SetCloudInstanceID("testString")
				pcloudNetworksPostOptionsModel.SetType("vlan")
				pcloudNetworksPostOptionsModel.SetAccessConfig("internal-only")
				pcloudNetworksPostOptionsModel.SetCIDR("testString")
				pcloudNetworksPostOptionsModel.SetDnsServers([]string{"testString"})
				pcloudNetworksPostOptionsModel.SetGateway("testString")
				pcloudNetworksPostOptionsModel.SetIPAddressRanges([]powervsv1.IPAddressRange{*ipAddressRangeModel})
				pcloudNetworksPostOptionsModel.SetJumbo(true)
				pcloudNetworksPostOptionsModel.SetMtu(int64(38))
				pcloudNetworksPostOptionsModel.SetName("testString")
				pcloudNetworksPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudNetworksPostOptionsModel).ToNot(BeNil())
				Expect(pcloudNetworksPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksPostOptionsModel.Type).To(Equal(core.StringPtr("vlan")))
				Expect(pcloudNetworksPostOptionsModel.AccessConfig).To(Equal(core.StringPtr("internal-only")))
				Expect(pcloudNetworksPostOptionsModel.CIDR).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksPostOptionsModel.DnsServers).To(Equal([]string{"testString"}))
				Expect(pcloudNetworksPostOptionsModel.Gateway).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksPostOptionsModel.IPAddressRanges).To(Equal([]powervsv1.IPAddressRange{*ipAddressRangeModel}))
				Expect(pcloudNetworksPostOptionsModel.Jumbo).To(Equal(core.BoolPtr(true)))
				Expect(pcloudNetworksPostOptionsModel.Mtu).To(Equal(core.Int64Ptr(int64(38))))
				Expect(pcloudNetworksPostOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudNetworksPutOptions successfully`, func() {
				// Construct an instance of the IPAddressRange model
				ipAddressRangeModel := new(powervsv1.IPAddressRange)
				Expect(ipAddressRangeModel).ToNot(BeNil())
				ipAddressRangeModel.EndingIPAddress = core.StringPtr("testString")
				ipAddressRangeModel.StartingIPAddress = core.StringPtr("testString")
				Expect(ipAddressRangeModel.EndingIPAddress).To(Equal(core.StringPtr("testString")))
				Expect(ipAddressRangeModel.StartingIPAddress).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the PcloudNetworksPutOptions model
				cloudInstanceID := "testString"
				networkID := "testString"
				pcloudNetworksPutOptionsModel := powervsService.NewPcloudNetworksPutOptions(cloudInstanceID, networkID)
				pcloudNetworksPutOptionsModel.SetCloudInstanceID("testString")
				pcloudNetworksPutOptionsModel.SetNetworkID("testString")
				pcloudNetworksPutOptionsModel.SetDnsServers([]string{"testString"})
				pcloudNetworksPutOptionsModel.SetGateway("testString")
				pcloudNetworksPutOptionsModel.SetIPAddressRanges([]powervsv1.IPAddressRange{*ipAddressRangeModel})
				pcloudNetworksPutOptionsModel.SetName("testString")
				pcloudNetworksPutOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudNetworksPutOptionsModel).ToNot(BeNil())
				Expect(pcloudNetworksPutOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksPutOptionsModel.NetworkID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksPutOptionsModel.DnsServers).To(Equal([]string{"testString"}))
				Expect(pcloudNetworksPutOptionsModel.Gateway).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksPutOptionsModel.IPAddressRanges).To(Equal([]powervsv1.IPAddressRange{*ipAddressRangeModel}))
				Expect(pcloudNetworksPutOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(pcloudNetworksPutOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPlacementgroupsDeleteOptions successfully`, func() {
				// Construct an instance of the PcloudPlacementgroupsDeleteOptions model
				cloudInstanceID := "testString"
				placementGroupID := "testString"
				pcloudPlacementgroupsDeleteOptionsModel := powervsService.NewPcloudPlacementgroupsDeleteOptions(cloudInstanceID, placementGroupID)
				pcloudPlacementgroupsDeleteOptionsModel.SetCloudInstanceID("testString")
				pcloudPlacementgroupsDeleteOptionsModel.SetPlacementGroupID("testString")
				pcloudPlacementgroupsDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPlacementgroupsDeleteOptionsModel).ToNot(BeNil())
				Expect(pcloudPlacementgroupsDeleteOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPlacementgroupsDeleteOptionsModel.PlacementGroupID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPlacementgroupsDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPlacementgroupsGetOptions successfully`, func() {
				// Construct an instance of the PcloudPlacementgroupsGetOptions model
				cloudInstanceID := "testString"
				placementGroupID := "testString"
				pcloudPlacementgroupsGetOptionsModel := powervsService.NewPcloudPlacementgroupsGetOptions(cloudInstanceID, placementGroupID)
				pcloudPlacementgroupsGetOptionsModel.SetCloudInstanceID("testString")
				pcloudPlacementgroupsGetOptionsModel.SetPlacementGroupID("testString")
				pcloudPlacementgroupsGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPlacementgroupsGetOptionsModel).ToNot(BeNil())
				Expect(pcloudPlacementgroupsGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPlacementgroupsGetOptionsModel.PlacementGroupID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPlacementgroupsGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPlacementgroupsGetallOptions successfully`, func() {
				// Construct an instance of the PcloudPlacementgroupsGetallOptions model
				cloudInstanceID := "testString"
				pcloudPlacementgroupsGetallOptionsModel := powervsService.NewPcloudPlacementgroupsGetallOptions(cloudInstanceID)
				pcloudPlacementgroupsGetallOptionsModel.SetCloudInstanceID("testString")
				pcloudPlacementgroupsGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPlacementgroupsGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudPlacementgroupsGetallOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPlacementgroupsGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPlacementgroupsMembersDeleteOptions successfully`, func() {
				// Construct an instance of the PcloudPlacementgroupsMembersDeleteOptions model
				cloudInstanceID := "testString"
				placementGroupID := "testString"
				pcloudPlacementgroupsMembersDeleteOptionsID := "testString"
				pcloudPlacementgroupsMembersDeleteOptionsModel := powervsService.NewPcloudPlacementgroupsMembersDeleteOptions(cloudInstanceID, placementGroupID, pcloudPlacementgroupsMembersDeleteOptionsID)
				pcloudPlacementgroupsMembersDeleteOptionsModel.SetCloudInstanceID("testString")
				pcloudPlacementgroupsMembersDeleteOptionsModel.SetPlacementGroupID("testString")
				pcloudPlacementgroupsMembersDeleteOptionsModel.SetID("testString")
				pcloudPlacementgroupsMembersDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPlacementgroupsMembersDeleteOptionsModel).ToNot(BeNil())
				Expect(pcloudPlacementgroupsMembersDeleteOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPlacementgroupsMembersDeleteOptionsModel.PlacementGroupID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPlacementgroupsMembersDeleteOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPlacementgroupsMembersDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPlacementgroupsMembersPostOptions successfully`, func() {
				// Construct an instance of the PcloudPlacementgroupsMembersPostOptions model
				cloudInstanceID := "testString"
				placementGroupID := "testString"
				pcloudPlacementgroupsMembersPostOptionsID := "testString"
				pcloudPlacementgroupsMembersPostOptionsModel := powervsService.NewPcloudPlacementgroupsMembersPostOptions(cloudInstanceID, placementGroupID, pcloudPlacementgroupsMembersPostOptionsID)
				pcloudPlacementgroupsMembersPostOptionsModel.SetCloudInstanceID("testString")
				pcloudPlacementgroupsMembersPostOptionsModel.SetPlacementGroupID("testString")
				pcloudPlacementgroupsMembersPostOptionsModel.SetID("testString")
				pcloudPlacementgroupsMembersPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPlacementgroupsMembersPostOptionsModel).ToNot(BeNil())
				Expect(pcloudPlacementgroupsMembersPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPlacementgroupsMembersPostOptionsModel.PlacementGroupID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPlacementgroupsMembersPostOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPlacementgroupsMembersPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPlacementgroupsPostOptions successfully`, func() {
				// Construct an instance of the PcloudPlacementgroupsPostOptions model
				cloudInstanceID := "testString"
				pcloudPlacementgroupsPostOptionsName := "testString"
				pcloudPlacementgroupsPostOptionsPolicy := "affinity"
				pcloudPlacementgroupsPostOptionsModel := powervsService.NewPcloudPlacementgroupsPostOptions(cloudInstanceID, pcloudPlacementgroupsPostOptionsName, pcloudPlacementgroupsPostOptionsPolicy)
				pcloudPlacementgroupsPostOptionsModel.SetCloudInstanceID("testString")
				pcloudPlacementgroupsPostOptionsModel.SetName("testString")
				pcloudPlacementgroupsPostOptionsModel.SetPolicy("affinity")
				pcloudPlacementgroupsPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPlacementgroupsPostOptionsModel).ToNot(BeNil())
				Expect(pcloudPlacementgroupsPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPlacementgroupsPostOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPlacementgroupsPostOptionsModel.Policy).To(Equal(core.StringPtr("affinity")))
				Expect(pcloudPlacementgroupsPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPodcapacityGetOptions successfully`, func() {
				// Construct an instance of the PcloudPodcapacityGetOptions model
				cloudInstanceID := "testString"
				pcloudPodcapacityGetOptionsModel := powervsService.NewPcloudPodcapacityGetOptions(cloudInstanceID)
				pcloudPodcapacityGetOptionsModel.SetCloudInstanceID("testString")
				pcloudPodcapacityGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPodcapacityGetOptionsModel).ToNot(BeNil())
				Expect(pcloudPodcapacityGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPodcapacityGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPvminstancesActionPostOptions successfully`, func() {
				// Construct an instance of the PcloudPvminstancesActionPostOptions model
				cloudInstanceID := "testString"
				pvmInstanceID := "testString"
				pcloudPvminstancesActionPostOptionsAction := "start"
				pcloudPvminstancesActionPostOptionsModel := powervsService.NewPcloudPvminstancesActionPostOptions(cloudInstanceID, pvmInstanceID, pcloudPvminstancesActionPostOptionsAction)
				pcloudPvminstancesActionPostOptionsModel.SetCloudInstanceID("testString")
				pcloudPvminstancesActionPostOptionsModel.SetPvmInstanceID("testString")
				pcloudPvminstancesActionPostOptionsModel.SetAction("start")
				pcloudPvminstancesActionPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPvminstancesActionPostOptionsModel).ToNot(BeNil())
				Expect(pcloudPvminstancesActionPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesActionPostOptionsModel.PvmInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesActionPostOptionsModel.Action).To(Equal(core.StringPtr("start")))
				Expect(pcloudPvminstancesActionPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPvminstancesCapturePostOptions successfully`, func() {
				// Construct an instance of the PcloudPvminstancesCapturePostOptions model
				cloudInstanceID := "testString"
				pvmInstanceID := "testString"
				pcloudPvminstancesCapturePostOptionsCaptureDestination := "cloud-storage"
				pcloudPvminstancesCapturePostOptionsCaptureName := "testString"
				pcloudPvminstancesCapturePostOptionsModel := powervsService.NewPcloudPvminstancesCapturePostOptions(cloudInstanceID, pvmInstanceID, pcloudPvminstancesCapturePostOptionsCaptureDestination, pcloudPvminstancesCapturePostOptionsCaptureName)
				pcloudPvminstancesCapturePostOptionsModel.SetCloudInstanceID("testString")
				pcloudPvminstancesCapturePostOptionsModel.SetPvmInstanceID("testString")
				pcloudPvminstancesCapturePostOptionsModel.SetCaptureDestination("cloud-storage")
				pcloudPvminstancesCapturePostOptionsModel.SetCaptureName("testString")
				pcloudPvminstancesCapturePostOptionsModel.SetCaptureVolumeIDs([]string{"testString"})
				pcloudPvminstancesCapturePostOptionsModel.SetCloudStorageAccessKey("testString")
				pcloudPvminstancesCapturePostOptionsModel.SetCloudStorageImagePath("testString")
				pcloudPvminstancesCapturePostOptionsModel.SetCloudStorageRegion("testString")
				pcloudPvminstancesCapturePostOptionsModel.SetCloudStorageSecretKey("testString")
				pcloudPvminstancesCapturePostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPvminstancesCapturePostOptionsModel).ToNot(BeNil())
				Expect(pcloudPvminstancesCapturePostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesCapturePostOptionsModel.PvmInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesCapturePostOptionsModel.CaptureDestination).To(Equal(core.StringPtr("cloud-storage")))
				Expect(pcloudPvminstancesCapturePostOptionsModel.CaptureName).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesCapturePostOptionsModel.CaptureVolumeIDs).To(Equal([]string{"testString"}))
				Expect(pcloudPvminstancesCapturePostOptionsModel.CloudStorageAccessKey).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesCapturePostOptionsModel.CloudStorageImagePath).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesCapturePostOptionsModel.CloudStorageRegion).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesCapturePostOptionsModel.CloudStorageSecretKey).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesCapturePostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPvminstancesClonePostOptions successfully`, func() {
				// Construct an instance of the PvmInstanceAddNetwork model
				pvmInstanceAddNetworkModel := new(powervsv1.PvmInstanceAddNetwork)
				Expect(pvmInstanceAddNetworkModel).ToNot(BeNil())
				pvmInstanceAddNetworkModel.IPAddress = core.StringPtr("testString")
				pvmInstanceAddNetworkModel.NetworkID = core.StringPtr("testString")
				Expect(pvmInstanceAddNetworkModel.IPAddress).To(Equal(core.StringPtr("testString")))
				Expect(pvmInstanceAddNetworkModel.NetworkID).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SoftwareLicenses model
				softwareLicensesModel := new(powervsv1.SoftwareLicenses)
				Expect(softwareLicensesModel).ToNot(BeNil())
				softwareLicensesModel.IbmiCss = core.BoolPtr(false)
				softwareLicensesModel.IbmiDbq = core.BoolPtr(false)
				softwareLicensesModel.IbmiPha = core.BoolPtr(false)
				softwareLicensesModel.IbmiRds = core.BoolPtr(false)
				softwareLicensesModel.IbmiRdsUsers = core.Int64Ptr(int64(38))
				Expect(softwareLicensesModel.IbmiCss).To(Equal(core.BoolPtr(false)))
				Expect(softwareLicensesModel.IbmiDbq).To(Equal(core.BoolPtr(false)))
				Expect(softwareLicensesModel.IbmiPha).To(Equal(core.BoolPtr(false)))
				Expect(softwareLicensesModel.IbmiRds).To(Equal(core.BoolPtr(false)))
				Expect(softwareLicensesModel.IbmiRdsUsers).To(Equal(core.Int64Ptr(int64(38))))

				// Construct an instance of the PcloudPvminstancesClonePostOptions model
				cloudInstanceID := "testString"
				pvmInstanceID := "testString"
				pcloudPvminstancesClonePostOptionsName := "testString"
				pcloudPvminstancesClonePostOptionsNetworks := []powervsv1.PvmInstanceAddNetwork{}
				pcloudPvminstancesClonePostOptionsModel := powervsService.NewPcloudPvminstancesClonePostOptions(cloudInstanceID, pvmInstanceID, pcloudPvminstancesClonePostOptionsName, pcloudPvminstancesClonePostOptionsNetworks)
				pcloudPvminstancesClonePostOptionsModel.SetCloudInstanceID("testString")
				pcloudPvminstancesClonePostOptionsModel.SetPvmInstanceID("testString")
				pcloudPvminstancesClonePostOptionsModel.SetName("testString")
				pcloudPvminstancesClonePostOptionsModel.SetNetworks([]powervsv1.PvmInstanceAddNetwork{*pvmInstanceAddNetworkModel})
				pcloudPvminstancesClonePostOptionsModel.SetKeyPairName("testString")
				pcloudPvminstancesClonePostOptionsModel.SetMemory(float64(72.5))
				pcloudPvminstancesClonePostOptionsModel.SetProcType("dedicated")
				pcloudPvminstancesClonePostOptionsModel.SetProcessors(float64(72.5))
				pcloudPvminstancesClonePostOptionsModel.SetSoftwareLicenses(softwareLicensesModel)
				pcloudPvminstancesClonePostOptionsModel.SetVolumeIDs([]string{"testString"})
				pcloudPvminstancesClonePostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPvminstancesClonePostOptionsModel).ToNot(BeNil())
				Expect(pcloudPvminstancesClonePostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesClonePostOptionsModel.PvmInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesClonePostOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesClonePostOptionsModel.Networks).To(Equal([]powervsv1.PvmInstanceAddNetwork{*pvmInstanceAddNetworkModel}))
				Expect(pcloudPvminstancesClonePostOptionsModel.KeyPairName).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesClonePostOptionsModel.Memory).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(pcloudPvminstancesClonePostOptionsModel.ProcType).To(Equal(core.StringPtr("dedicated")))
				Expect(pcloudPvminstancesClonePostOptionsModel.Processors).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(pcloudPvminstancesClonePostOptionsModel.SoftwareLicenses).To(Equal(softwareLicensesModel))
				Expect(pcloudPvminstancesClonePostOptionsModel.VolumeIDs).To(Equal([]string{"testString"}))
				Expect(pcloudPvminstancesClonePostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPvminstancesConsoleGetOptions successfully`, func() {
				// Construct an instance of the PcloudPvminstancesConsoleGetOptions model
				cloudInstanceID := "testString"
				pvmInstanceID := "testString"
				pcloudPvminstancesConsoleGetOptionsModel := powervsService.NewPcloudPvminstancesConsoleGetOptions(cloudInstanceID, pvmInstanceID)
				pcloudPvminstancesConsoleGetOptionsModel.SetCloudInstanceID("testString")
				pcloudPvminstancesConsoleGetOptionsModel.SetPvmInstanceID("testString")
				pcloudPvminstancesConsoleGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPvminstancesConsoleGetOptionsModel).ToNot(BeNil())
				Expect(pcloudPvminstancesConsoleGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesConsoleGetOptionsModel.PvmInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesConsoleGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPvminstancesConsolePostOptions successfully`, func() {
				// Construct an instance of the PcloudPvminstancesConsolePostOptions model
				cloudInstanceID := "testString"
				pvmInstanceID := "testString"
				pcloudPvminstancesConsolePostOptionsModel := powervsService.NewPcloudPvminstancesConsolePostOptions(cloudInstanceID, pvmInstanceID)
				pcloudPvminstancesConsolePostOptionsModel.SetCloudInstanceID("testString")
				pcloudPvminstancesConsolePostOptionsModel.SetPvmInstanceID("testString")
				pcloudPvminstancesConsolePostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPvminstancesConsolePostOptionsModel).ToNot(BeNil())
				Expect(pcloudPvminstancesConsolePostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesConsolePostOptionsModel.PvmInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesConsolePostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPvminstancesConsolePutOptions successfully`, func() {
				// Construct an instance of the PcloudPvminstancesConsolePutOptions model
				cloudInstanceID := "testString"
				pvmInstanceID := "testString"
				pcloudPvminstancesConsolePutOptionsCode := "testString"
				pcloudPvminstancesConsolePutOptionsModel := powervsService.NewPcloudPvminstancesConsolePutOptions(cloudInstanceID, pvmInstanceID, pcloudPvminstancesConsolePutOptionsCode)
				pcloudPvminstancesConsolePutOptionsModel.SetCloudInstanceID("testString")
				pcloudPvminstancesConsolePutOptionsModel.SetPvmInstanceID("testString")
				pcloudPvminstancesConsolePutOptionsModel.SetCode("testString")
				pcloudPvminstancesConsolePutOptionsModel.SetLanguage("testString")
				pcloudPvminstancesConsolePutOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPvminstancesConsolePutOptionsModel).ToNot(BeNil())
				Expect(pcloudPvminstancesConsolePutOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesConsolePutOptionsModel.PvmInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesConsolePutOptionsModel.Code).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesConsolePutOptionsModel.Language).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesConsolePutOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPvminstancesDeleteOptions successfully`, func() {
				// Construct an instance of the PcloudPvminstancesDeleteOptions model
				cloudInstanceID := "testString"
				pvmInstanceID := "testString"
				pcloudPvminstancesDeleteOptionsModel := powervsService.NewPcloudPvminstancesDeleteOptions(cloudInstanceID, pvmInstanceID)
				pcloudPvminstancesDeleteOptionsModel.SetCloudInstanceID("testString")
				pcloudPvminstancesDeleteOptionsModel.SetPvmInstanceID("testString")
				pcloudPvminstancesDeleteOptionsModel.SetDeleteDataVolumes(true)
				pcloudPvminstancesDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPvminstancesDeleteOptionsModel).ToNot(BeNil())
				Expect(pcloudPvminstancesDeleteOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesDeleteOptionsModel.PvmInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesDeleteOptionsModel.DeleteDataVolumes).To(Equal(core.BoolPtr(true)))
				Expect(pcloudPvminstancesDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPvminstancesGetOptions successfully`, func() {
				// Construct an instance of the PcloudPvminstancesGetOptions model
				cloudInstanceID := "testString"
				pvmInstanceID := "testString"
				pcloudPvminstancesGetOptionsModel := powervsService.NewPcloudPvminstancesGetOptions(cloudInstanceID, pvmInstanceID)
				pcloudPvminstancesGetOptionsModel.SetCloudInstanceID("testString")
				pcloudPvminstancesGetOptionsModel.SetPvmInstanceID("testString")
				pcloudPvminstancesGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPvminstancesGetOptionsModel).ToNot(BeNil())
				Expect(pcloudPvminstancesGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesGetOptionsModel.PvmInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPvminstancesGetallOptions successfully`, func() {
				// Construct an instance of the PcloudPvminstancesGetallOptions model
				cloudInstanceID := "testString"
				pcloudPvminstancesGetallOptionsModel := powervsService.NewPcloudPvminstancesGetallOptions(cloudInstanceID)
				pcloudPvminstancesGetallOptionsModel.SetCloudInstanceID("testString")
				pcloudPvminstancesGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPvminstancesGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudPvminstancesGetallOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPvminstancesNetworksDeleteOptions successfully`, func() {
				// Construct an instance of the PcloudPvminstancesNetworksDeleteOptions model
				cloudInstanceID := "testString"
				pvmInstanceID := "testString"
				networkID := "testString"
				pcloudPvminstancesNetworksDeleteOptionsModel := powervsService.NewPcloudPvminstancesNetworksDeleteOptions(cloudInstanceID, pvmInstanceID, networkID)
				pcloudPvminstancesNetworksDeleteOptionsModel.SetCloudInstanceID("testString")
				pcloudPvminstancesNetworksDeleteOptionsModel.SetPvmInstanceID("testString")
				pcloudPvminstancesNetworksDeleteOptionsModel.SetNetworkID("testString")
				pcloudPvminstancesNetworksDeleteOptionsModel.SetMacAddress("testString")
				pcloudPvminstancesNetworksDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPvminstancesNetworksDeleteOptionsModel).ToNot(BeNil())
				Expect(pcloudPvminstancesNetworksDeleteOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesNetworksDeleteOptionsModel.PvmInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesNetworksDeleteOptionsModel.NetworkID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesNetworksDeleteOptionsModel.MacAddress).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesNetworksDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPvminstancesNetworksGetOptions successfully`, func() {
				// Construct an instance of the PcloudPvminstancesNetworksGetOptions model
				cloudInstanceID := "testString"
				pvmInstanceID := "testString"
				networkID := "testString"
				pcloudPvminstancesNetworksGetOptionsModel := powervsService.NewPcloudPvminstancesNetworksGetOptions(cloudInstanceID, pvmInstanceID, networkID)
				pcloudPvminstancesNetworksGetOptionsModel.SetCloudInstanceID("testString")
				pcloudPvminstancesNetworksGetOptionsModel.SetPvmInstanceID("testString")
				pcloudPvminstancesNetworksGetOptionsModel.SetNetworkID("testString")
				pcloudPvminstancesNetworksGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPvminstancesNetworksGetOptionsModel).ToNot(BeNil())
				Expect(pcloudPvminstancesNetworksGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesNetworksGetOptionsModel.PvmInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesNetworksGetOptionsModel.NetworkID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesNetworksGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPvminstancesNetworksGetallOptions successfully`, func() {
				// Construct an instance of the PcloudPvminstancesNetworksGetallOptions model
				cloudInstanceID := "testString"
				pvmInstanceID := "testString"
				pcloudPvminstancesNetworksGetallOptionsModel := powervsService.NewPcloudPvminstancesNetworksGetallOptions(cloudInstanceID, pvmInstanceID)
				pcloudPvminstancesNetworksGetallOptionsModel.SetCloudInstanceID("testString")
				pcloudPvminstancesNetworksGetallOptionsModel.SetPvmInstanceID("testString")
				pcloudPvminstancesNetworksGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPvminstancesNetworksGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudPvminstancesNetworksGetallOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesNetworksGetallOptionsModel.PvmInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesNetworksGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPvminstancesNetworksPostOptions successfully`, func() {
				// Construct an instance of the PcloudPvminstancesNetworksPostOptions model
				cloudInstanceID := "testString"
				pvmInstanceID := "testString"
				pcloudPvminstancesNetworksPostOptionsNetworkID := "testString"
				pcloudPvminstancesNetworksPostOptionsModel := powervsService.NewPcloudPvminstancesNetworksPostOptions(cloudInstanceID, pvmInstanceID, pcloudPvminstancesNetworksPostOptionsNetworkID)
				pcloudPvminstancesNetworksPostOptionsModel.SetCloudInstanceID("testString")
				pcloudPvminstancesNetworksPostOptionsModel.SetPvmInstanceID("testString")
				pcloudPvminstancesNetworksPostOptionsModel.SetNetworkID("testString")
				pcloudPvminstancesNetworksPostOptionsModel.SetIPAddress("testString")
				pcloudPvminstancesNetworksPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPvminstancesNetworksPostOptionsModel).ToNot(BeNil())
				Expect(pcloudPvminstancesNetworksPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesNetworksPostOptionsModel.PvmInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesNetworksPostOptionsModel.NetworkID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesNetworksPostOptionsModel.IPAddress).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesNetworksPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPvminstancesOperationsPostOptions successfully`, func() {
				// Construct an instance of the Operations model
				operationsModel := new(powervsv1.Operations)
				Expect(operationsModel).ToNot(BeNil())
				operationsModel.BootMode = core.StringPtr("a")
				operationsModel.OperatingMode = core.StringPtr("normal")
				operationsModel.Task = core.StringPtr("dston")
				Expect(operationsModel.BootMode).To(Equal(core.StringPtr("a")))
				Expect(operationsModel.OperatingMode).To(Equal(core.StringPtr("normal")))
				Expect(operationsModel.Task).To(Equal(core.StringPtr("dston")))

				// Construct an instance of the PcloudPvminstancesOperationsPostOptions model
				cloudInstanceID := "testString"
				pvmInstanceID := "testString"
				var pcloudPvminstancesOperationsPostOptionsOperation *powervsv1.Operations = nil
				pcloudPvminstancesOperationsPostOptionsOperationType := "job"
				pcloudPvminstancesOperationsPostOptionsModel := powervsService.NewPcloudPvminstancesOperationsPostOptions(cloudInstanceID, pvmInstanceID, pcloudPvminstancesOperationsPostOptionsOperation, pcloudPvminstancesOperationsPostOptionsOperationType)
				pcloudPvminstancesOperationsPostOptionsModel.SetCloudInstanceID("testString")
				pcloudPvminstancesOperationsPostOptionsModel.SetPvmInstanceID("testString")
				pcloudPvminstancesOperationsPostOptionsModel.SetOperation(operationsModel)
				pcloudPvminstancesOperationsPostOptionsModel.SetOperationType("job")
				pcloudPvminstancesOperationsPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPvminstancesOperationsPostOptionsModel).ToNot(BeNil())
				Expect(pcloudPvminstancesOperationsPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesOperationsPostOptionsModel.PvmInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesOperationsPostOptionsModel.Operation).To(Equal(operationsModel))
				Expect(pcloudPvminstancesOperationsPostOptionsModel.OperationType).To(Equal(core.StringPtr("job")))
				Expect(pcloudPvminstancesOperationsPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPvminstancesPostOptions successfully`, func() {
				// Construct an instance of the PvmInstanceAddNetwork model
				pvmInstanceAddNetworkModel := new(powervsv1.PvmInstanceAddNetwork)
				Expect(pvmInstanceAddNetworkModel).ToNot(BeNil())
				pvmInstanceAddNetworkModel.IPAddress = core.StringPtr("testString")
				pvmInstanceAddNetworkModel.NetworkID = core.StringPtr("testString")
				Expect(pvmInstanceAddNetworkModel.IPAddress).To(Equal(core.StringPtr("testString")))
				Expect(pvmInstanceAddNetworkModel.NetworkID).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SoftwareLicenses model
				softwareLicensesModel := new(powervsv1.SoftwareLicenses)
				Expect(softwareLicensesModel).ToNot(BeNil())
				softwareLicensesModel.IbmiCss = core.BoolPtr(false)
				softwareLicensesModel.IbmiDbq = core.BoolPtr(false)
				softwareLicensesModel.IbmiPha = core.BoolPtr(false)
				softwareLicensesModel.IbmiRds = core.BoolPtr(false)
				softwareLicensesModel.IbmiRdsUsers = core.Int64Ptr(int64(38))
				Expect(softwareLicensesModel.IbmiCss).To(Equal(core.BoolPtr(false)))
				Expect(softwareLicensesModel.IbmiDbq).To(Equal(core.BoolPtr(false)))
				Expect(softwareLicensesModel.IbmiPha).To(Equal(core.BoolPtr(false)))
				Expect(softwareLicensesModel.IbmiRds).To(Equal(core.BoolPtr(false)))
				Expect(softwareLicensesModel.IbmiRdsUsers).To(Equal(core.Int64Ptr(int64(38))))

				// Construct an instance of the StorageAffinity model
				storageAffinityModel := new(powervsv1.StorageAffinity)
				Expect(storageAffinityModel).ToNot(BeNil())
				storageAffinityModel.AffinityPvmInstance = core.StringPtr("testString")
				storageAffinityModel.AffinityPolicy = core.StringPtr("affinity")
				storageAffinityModel.AffinityVolume = core.StringPtr("testString")
				storageAffinityModel.AntiAffinityPvmInstances = []string{"testString"}
				storageAffinityModel.AntiAffinityVolumes = []string{"testString"}
				Expect(storageAffinityModel.AffinityPvmInstance).To(Equal(core.StringPtr("testString")))
				Expect(storageAffinityModel.AffinityPolicy).To(Equal(core.StringPtr("affinity")))
				Expect(storageAffinityModel.AffinityVolume).To(Equal(core.StringPtr("testString")))
				Expect(storageAffinityModel.AntiAffinityPvmInstances).To(Equal([]string{"testString"}))
				Expect(storageAffinityModel.AntiAffinityVolumes).To(Equal([]string{"testString"}))

				// Construct an instance of the VirtualCores model
				virtualCoresModel := new(powervsv1.VirtualCores)
				Expect(virtualCoresModel).ToNot(BeNil())
				virtualCoresModel.Assigned = core.Int64Ptr(int64(38))
				virtualCoresModel.Max = core.Int64Ptr(int64(38))
				virtualCoresModel.Min = core.Int64Ptr(int64(38))
				Expect(virtualCoresModel.Assigned).To(Equal(core.Int64Ptr(int64(38))))
				Expect(virtualCoresModel.Max).To(Equal(core.Int64Ptr(int64(38))))
				Expect(virtualCoresModel.Min).To(Equal(core.Int64Ptr(int64(38))))

				// Construct an instance of the PcloudPvminstancesPostOptions model
				cloudInstanceID := "testString"
				pcloudPvminstancesPostOptionsImageID := "testString"
				pcloudPvminstancesPostOptionsMemory := float64(72.5)
				pcloudPvminstancesPostOptionsProcType := "dedicated"
				pcloudPvminstancesPostOptionsProcessors := float64(72.5)
				pcloudPvminstancesPostOptionsServerName := "testString"
				pcloudPvminstancesPostOptionsModel := powervsService.NewPcloudPvminstancesPostOptions(cloudInstanceID, pcloudPvminstancesPostOptionsImageID, pcloudPvminstancesPostOptionsMemory, pcloudPvminstancesPostOptionsProcType, pcloudPvminstancesPostOptionsProcessors, pcloudPvminstancesPostOptionsServerName)
				pcloudPvminstancesPostOptionsModel.SetCloudInstanceID("testString")
				pcloudPvminstancesPostOptionsModel.SetImageID("testString")
				pcloudPvminstancesPostOptionsModel.SetMemory(float64(72.5))
				pcloudPvminstancesPostOptionsModel.SetProcType("dedicated")
				pcloudPvminstancesPostOptionsModel.SetProcessors(float64(72.5))
				pcloudPvminstancesPostOptionsModel.SetServerName("testString")
				pcloudPvminstancesPostOptionsModel.SetDeployTarget("testString")
				pcloudPvminstancesPostOptionsModel.SetDeploymentType("testString")
				pcloudPvminstancesPostOptionsModel.SetKeyPairName("testString")
				pcloudPvminstancesPostOptionsModel.SetLicenseRepositoryCapacity(int64(38))
				pcloudPvminstancesPostOptionsModel.SetMigratable(true)
				pcloudPvminstancesPostOptionsModel.SetNetworkIDs([]string{"testString"})
				pcloudPvminstancesPostOptionsModel.SetNetworks([]powervsv1.PvmInstanceAddNetwork{*pvmInstanceAddNetworkModel})
				pcloudPvminstancesPostOptionsModel.SetPinPolicy("none")
				pcloudPvminstancesPostOptionsModel.SetPlacementGroup("testString")
				pcloudPvminstancesPostOptionsModel.SetReplicantAffinityPolicy("none")
				pcloudPvminstancesPostOptionsModel.SetReplicantNamingScheme("suffix")
				pcloudPvminstancesPostOptionsModel.SetReplicants(float64(72.5))
				pcloudPvminstancesPostOptionsModel.SetSharedProcessorPool("testString")
				pcloudPvminstancesPostOptionsModel.SetSoftwareLicenses(softwareLicensesModel)
				pcloudPvminstancesPostOptionsModel.SetStorageAffinity(storageAffinityModel)
				pcloudPvminstancesPostOptionsModel.SetStorageConnection("vSCSI")
				pcloudPvminstancesPostOptionsModel.SetStorageConnectionV2("vSCSI")
				pcloudPvminstancesPostOptionsModel.SetStoragePool("testString")
				pcloudPvminstancesPostOptionsModel.SetStorageType("testString")
				pcloudPvminstancesPostOptionsModel.SetSysType("testString")
				pcloudPvminstancesPostOptionsModel.SetUserData("testString")
				pcloudPvminstancesPostOptionsModel.SetVirtualCores(virtualCoresModel)
				pcloudPvminstancesPostOptionsModel.SetVolumeIDs([]string{"testString"})
				pcloudPvminstancesPostOptionsModel.SetSkipHostValidation(true)
				pcloudPvminstancesPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPvminstancesPostOptionsModel).ToNot(BeNil())
				Expect(pcloudPvminstancesPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesPostOptionsModel.ImageID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesPostOptionsModel.Memory).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(pcloudPvminstancesPostOptionsModel.ProcType).To(Equal(core.StringPtr("dedicated")))
				Expect(pcloudPvminstancesPostOptionsModel.Processors).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(pcloudPvminstancesPostOptionsModel.ServerName).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesPostOptionsModel.DeployTarget).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesPostOptionsModel.DeploymentType).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesPostOptionsModel.KeyPairName).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesPostOptionsModel.LicenseRepositoryCapacity).To(Equal(core.Int64Ptr(int64(38))))
				Expect(pcloudPvminstancesPostOptionsModel.Migratable).To(Equal(core.BoolPtr(true)))
				Expect(pcloudPvminstancesPostOptionsModel.NetworkIDs).To(Equal([]string{"testString"}))
				Expect(pcloudPvminstancesPostOptionsModel.Networks).To(Equal([]powervsv1.PvmInstanceAddNetwork{*pvmInstanceAddNetworkModel}))
				Expect(pcloudPvminstancesPostOptionsModel.PinPolicy).To(Equal(core.StringPtr("none")))
				Expect(pcloudPvminstancesPostOptionsModel.PlacementGroup).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesPostOptionsModel.ReplicantAffinityPolicy).To(Equal(core.StringPtr("none")))
				Expect(pcloudPvminstancesPostOptionsModel.ReplicantNamingScheme).To(Equal(core.StringPtr("suffix")))
				Expect(pcloudPvminstancesPostOptionsModel.Replicants).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(pcloudPvminstancesPostOptionsModel.SharedProcessorPool).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesPostOptionsModel.SoftwareLicenses).To(Equal(softwareLicensesModel))
				Expect(pcloudPvminstancesPostOptionsModel.StorageAffinity).To(Equal(storageAffinityModel))
				Expect(pcloudPvminstancesPostOptionsModel.StorageConnection).To(Equal(core.StringPtr("vSCSI")))
				Expect(pcloudPvminstancesPostOptionsModel.StorageConnectionV2).To(Equal(core.StringPtr("vSCSI")))
				Expect(pcloudPvminstancesPostOptionsModel.StoragePool).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesPostOptionsModel.StorageType).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesPostOptionsModel.SysType).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesPostOptionsModel.UserData).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesPostOptionsModel.VirtualCores).To(Equal(virtualCoresModel))
				Expect(pcloudPvminstancesPostOptionsModel.VolumeIDs).To(Equal([]string{"testString"}))
				Expect(pcloudPvminstancesPostOptionsModel.SkipHostValidation).To(Equal(core.BoolPtr(true)))
				Expect(pcloudPvminstancesPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPvminstancesPutOptions successfully`, func() {
				// Construct an instance of the CloudInitialization model
				cloudInitializationModel := new(powervsv1.CloudInitialization)
				Expect(cloudInitializationModel).ToNot(BeNil())
				cloudInitializationModel.VirtualOpticalDevice = core.StringPtr("attach")
				Expect(cloudInitializationModel.VirtualOpticalDevice).To(Equal(core.StringPtr("attach")))

				// Construct an instance of the SoftwareLicenses model
				softwareLicensesModel := new(powervsv1.SoftwareLicenses)
				Expect(softwareLicensesModel).ToNot(BeNil())
				softwareLicensesModel.IbmiCss = core.BoolPtr(false)
				softwareLicensesModel.IbmiDbq = core.BoolPtr(false)
				softwareLicensesModel.IbmiPha = core.BoolPtr(false)
				softwareLicensesModel.IbmiRds = core.BoolPtr(false)
				softwareLicensesModel.IbmiRdsUsers = core.Int64Ptr(int64(38))
				Expect(softwareLicensesModel.IbmiCss).To(Equal(core.BoolPtr(false)))
				Expect(softwareLicensesModel.IbmiDbq).To(Equal(core.BoolPtr(false)))
				Expect(softwareLicensesModel.IbmiPha).To(Equal(core.BoolPtr(false)))
				Expect(softwareLicensesModel.IbmiRds).To(Equal(core.BoolPtr(false)))
				Expect(softwareLicensesModel.IbmiRdsUsers).To(Equal(core.Int64Ptr(int64(38))))

				// Construct an instance of the VirtualCores model
				virtualCoresModel := new(powervsv1.VirtualCores)
				Expect(virtualCoresModel).ToNot(BeNil())
				virtualCoresModel.Assigned = core.Int64Ptr(int64(38))
				virtualCoresModel.Max = core.Int64Ptr(int64(38))
				virtualCoresModel.Min = core.Int64Ptr(int64(38))
				Expect(virtualCoresModel.Assigned).To(Equal(core.Int64Ptr(int64(38))))
				Expect(virtualCoresModel.Max).To(Equal(core.Int64Ptr(int64(38))))
				Expect(virtualCoresModel.Min).To(Equal(core.Int64Ptr(int64(38))))

				// Construct an instance of the PcloudPvminstancesPutOptions model
				cloudInstanceID := "testString"
				pvmInstanceID := "testString"
				pcloudPvminstancesPutOptionsModel := powervsService.NewPcloudPvminstancesPutOptions(cloudInstanceID, pvmInstanceID)
				pcloudPvminstancesPutOptionsModel.SetCloudInstanceID("testString")
				pcloudPvminstancesPutOptionsModel.SetPvmInstanceID("testString")
				pcloudPvminstancesPutOptionsModel.SetCloudInitialization(cloudInitializationModel)
				pcloudPvminstancesPutOptionsModel.SetLicenseRepositoryCapacity(int64(38))
				pcloudPvminstancesPutOptionsModel.SetMemory(float64(72.5))
				pcloudPvminstancesPutOptionsModel.SetMigratable(true)
				pcloudPvminstancesPutOptionsModel.SetPinPolicy("none")
				pcloudPvminstancesPutOptionsModel.SetProcType("dedicated")
				pcloudPvminstancesPutOptionsModel.SetProcessors(float64(72.5))
				pcloudPvminstancesPutOptionsModel.SetSapProfileID("testString")
				pcloudPvminstancesPutOptionsModel.SetServerName("testString")
				pcloudPvminstancesPutOptionsModel.SetSoftwareLicenses(softwareLicensesModel)
				pcloudPvminstancesPutOptionsModel.SetStoragePoolAffinity(true)
				pcloudPvminstancesPutOptionsModel.SetVirtualCores(virtualCoresModel)
				pcloudPvminstancesPutOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPvminstancesPutOptionsModel).ToNot(BeNil())
				Expect(pcloudPvminstancesPutOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesPutOptionsModel.PvmInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesPutOptionsModel.CloudInitialization).To(Equal(cloudInitializationModel))
				Expect(pcloudPvminstancesPutOptionsModel.LicenseRepositoryCapacity).To(Equal(core.Int64Ptr(int64(38))))
				Expect(pcloudPvminstancesPutOptionsModel.Memory).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(pcloudPvminstancesPutOptionsModel.Migratable).To(Equal(core.BoolPtr(true)))
				Expect(pcloudPvminstancesPutOptionsModel.PinPolicy).To(Equal(core.StringPtr("none")))
				Expect(pcloudPvminstancesPutOptionsModel.ProcType).To(Equal(core.StringPtr("dedicated")))
				Expect(pcloudPvminstancesPutOptionsModel.Processors).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(pcloudPvminstancesPutOptionsModel.SapProfileID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesPutOptionsModel.ServerName).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesPutOptionsModel.SoftwareLicenses).To(Equal(softwareLicensesModel))
				Expect(pcloudPvminstancesPutOptionsModel.StoragePoolAffinity).To(Equal(core.BoolPtr(true)))
				Expect(pcloudPvminstancesPutOptionsModel.VirtualCores).To(Equal(virtualCoresModel))
				Expect(pcloudPvminstancesPutOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPvminstancesSnapshotsGetallOptions successfully`, func() {
				// Construct an instance of the PcloudPvminstancesSnapshotsGetallOptions model
				cloudInstanceID := "testString"
				pvmInstanceID := "testString"
				pcloudPvminstancesSnapshotsGetallOptionsModel := powervsService.NewPcloudPvminstancesSnapshotsGetallOptions(cloudInstanceID, pvmInstanceID)
				pcloudPvminstancesSnapshotsGetallOptionsModel.SetCloudInstanceID("testString")
				pcloudPvminstancesSnapshotsGetallOptionsModel.SetPvmInstanceID("testString")
				pcloudPvminstancesSnapshotsGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPvminstancesSnapshotsGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudPvminstancesSnapshotsGetallOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesSnapshotsGetallOptionsModel.PvmInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesSnapshotsGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPvminstancesSnapshotsPostOptions successfully`, func() {
				// Construct an instance of the PcloudPvminstancesSnapshotsPostOptions model
				cloudInstanceID := "testString"
				pvmInstanceID := "testString"
				pcloudPvminstancesSnapshotsPostOptionsName := "testString"
				pcloudPvminstancesSnapshotsPostOptionsModel := powervsService.NewPcloudPvminstancesSnapshotsPostOptions(cloudInstanceID, pvmInstanceID, pcloudPvminstancesSnapshotsPostOptionsName)
				pcloudPvminstancesSnapshotsPostOptionsModel.SetCloudInstanceID("testString")
				pcloudPvminstancesSnapshotsPostOptionsModel.SetPvmInstanceID("testString")
				pcloudPvminstancesSnapshotsPostOptionsModel.SetName("testString")
				pcloudPvminstancesSnapshotsPostOptionsModel.SetDescription("testString")
				pcloudPvminstancesSnapshotsPostOptionsModel.SetVolumeIDs([]string{"testString"})
				pcloudPvminstancesSnapshotsPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPvminstancesSnapshotsPostOptionsModel).ToNot(BeNil())
				Expect(pcloudPvminstancesSnapshotsPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesSnapshotsPostOptionsModel.PvmInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesSnapshotsPostOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesSnapshotsPostOptionsModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesSnapshotsPostOptionsModel.VolumeIDs).To(Equal([]string{"testString"}))
				Expect(pcloudPvminstancesSnapshotsPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPvminstancesSnapshotsRestorePostOptions successfully`, func() {
				// Construct an instance of the PcloudPvminstancesSnapshotsRestorePostOptions model
				cloudInstanceID := "testString"
				pvmInstanceID := "testString"
				snapshotID := "testString"
				pcloudPvminstancesSnapshotsRestorePostOptionsModel := powervsService.NewPcloudPvminstancesSnapshotsRestorePostOptions(cloudInstanceID, pvmInstanceID, snapshotID)
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.SetCloudInstanceID("testString")
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.SetPvmInstanceID("testString")
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.SetSnapshotID("testString")
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.SetForce(false)
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.SetRestoreFailAction("retry")
				pcloudPvminstancesSnapshotsRestorePostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPvminstancesSnapshotsRestorePostOptionsModel).ToNot(BeNil())
				Expect(pcloudPvminstancesSnapshotsRestorePostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesSnapshotsRestorePostOptionsModel.PvmInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesSnapshotsRestorePostOptionsModel.SnapshotID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesSnapshotsRestorePostOptionsModel.Force).To(Equal(core.BoolPtr(false)))
				Expect(pcloudPvminstancesSnapshotsRestorePostOptionsModel.RestoreFailAction).To(Equal(core.StringPtr("retry")))
				Expect(pcloudPvminstancesSnapshotsRestorePostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPvminstancesVolumesDeleteOptions successfully`, func() {
				// Construct an instance of the PcloudPvminstancesVolumesDeleteOptions model
				cloudInstanceID := "testString"
				pvmInstanceID := "testString"
				volumeID := "testString"
				pcloudPvminstancesVolumesDeleteOptionsModel := powervsService.NewPcloudPvminstancesVolumesDeleteOptions(cloudInstanceID, pvmInstanceID, volumeID)
				pcloudPvminstancesVolumesDeleteOptionsModel.SetCloudInstanceID("testString")
				pcloudPvminstancesVolumesDeleteOptionsModel.SetPvmInstanceID("testString")
				pcloudPvminstancesVolumesDeleteOptionsModel.SetVolumeID("testString")
				pcloudPvminstancesVolumesDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPvminstancesVolumesDeleteOptionsModel).ToNot(BeNil())
				Expect(pcloudPvminstancesVolumesDeleteOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesVolumesDeleteOptionsModel.PvmInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesVolumesDeleteOptionsModel.VolumeID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesVolumesDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPvminstancesVolumesGetOptions successfully`, func() {
				// Construct an instance of the PcloudPvminstancesVolumesGetOptions model
				cloudInstanceID := "testString"
				pvmInstanceID := "testString"
				volumeID := "testString"
				pcloudPvminstancesVolumesGetOptionsModel := powervsService.NewPcloudPvminstancesVolumesGetOptions(cloudInstanceID, pvmInstanceID, volumeID)
				pcloudPvminstancesVolumesGetOptionsModel.SetCloudInstanceID("testString")
				pcloudPvminstancesVolumesGetOptionsModel.SetPvmInstanceID("testString")
				pcloudPvminstancesVolumesGetOptionsModel.SetVolumeID("testString")
				pcloudPvminstancesVolumesGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPvminstancesVolumesGetOptionsModel).ToNot(BeNil())
				Expect(pcloudPvminstancesVolumesGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesVolumesGetOptionsModel.PvmInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesVolumesGetOptionsModel.VolumeID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesVolumesGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPvminstancesVolumesGetallOptions successfully`, func() {
				// Construct an instance of the PcloudPvminstancesVolumesGetallOptions model
				cloudInstanceID := "testString"
				pvmInstanceID := "testString"
				pcloudPvminstancesVolumesGetallOptionsModel := powervsService.NewPcloudPvminstancesVolumesGetallOptions(cloudInstanceID, pvmInstanceID)
				pcloudPvminstancesVolumesGetallOptionsModel.SetCloudInstanceID("testString")
				pcloudPvminstancesVolumesGetallOptionsModel.SetPvmInstanceID("testString")
				pcloudPvminstancesVolumesGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPvminstancesVolumesGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudPvminstancesVolumesGetallOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesVolumesGetallOptionsModel.PvmInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesVolumesGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPvminstancesVolumesPostOptions successfully`, func() {
				// Construct an instance of the PcloudPvminstancesVolumesPostOptions model
				cloudInstanceID := "testString"
				pvmInstanceID := "testString"
				volumeID := "testString"
				pcloudPvminstancesVolumesPostOptionsModel := powervsService.NewPcloudPvminstancesVolumesPostOptions(cloudInstanceID, pvmInstanceID, volumeID)
				pcloudPvminstancesVolumesPostOptionsModel.SetCloudInstanceID("testString")
				pcloudPvminstancesVolumesPostOptionsModel.SetPvmInstanceID("testString")
				pcloudPvminstancesVolumesPostOptionsModel.SetVolumeID("testString")
				pcloudPvminstancesVolumesPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPvminstancesVolumesPostOptionsModel).ToNot(BeNil())
				Expect(pcloudPvminstancesVolumesPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesVolumesPostOptionsModel.PvmInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesVolumesPostOptionsModel.VolumeID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesVolumesPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPvminstancesVolumesPutOptions successfully`, func() {
				// Construct an instance of the PcloudPvminstancesVolumesPutOptions model
				cloudInstanceID := "testString"
				pvmInstanceID := "testString"
				volumeID := "testString"
				pcloudPvminstancesVolumesPutOptionsDeleteOnTermination := true
				pcloudPvminstancesVolumesPutOptionsModel := powervsService.NewPcloudPvminstancesVolumesPutOptions(cloudInstanceID, pvmInstanceID, volumeID, pcloudPvminstancesVolumesPutOptionsDeleteOnTermination)
				pcloudPvminstancesVolumesPutOptionsModel.SetCloudInstanceID("testString")
				pcloudPvminstancesVolumesPutOptionsModel.SetPvmInstanceID("testString")
				pcloudPvminstancesVolumesPutOptionsModel.SetVolumeID("testString")
				pcloudPvminstancesVolumesPutOptionsModel.SetDeleteOnTermination(true)
				pcloudPvminstancesVolumesPutOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPvminstancesVolumesPutOptionsModel).ToNot(BeNil())
				Expect(pcloudPvminstancesVolumesPutOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesVolumesPutOptionsModel.PvmInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesVolumesPutOptionsModel.VolumeID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesVolumesPutOptionsModel.DeleteOnTermination).To(Equal(core.BoolPtr(true)))
				Expect(pcloudPvminstancesVolumesPutOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudPvminstancesVolumesSetbootPutOptions successfully`, func() {
				// Construct an instance of the PcloudPvminstancesVolumesSetbootPutOptions model
				cloudInstanceID := "testString"
				pvmInstanceID := "testString"
				volumeID := "testString"
				pcloudPvminstancesVolumesSetbootPutOptionsModel := powervsService.NewPcloudPvminstancesVolumesSetbootPutOptions(cloudInstanceID, pvmInstanceID, volumeID)
				pcloudPvminstancesVolumesSetbootPutOptionsModel.SetCloudInstanceID("testString")
				pcloudPvminstancesVolumesSetbootPutOptionsModel.SetPvmInstanceID("testString")
				pcloudPvminstancesVolumesSetbootPutOptionsModel.SetVolumeID("testString")
				pcloudPvminstancesVolumesSetbootPutOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudPvminstancesVolumesSetbootPutOptionsModel).ToNot(BeNil())
				Expect(pcloudPvminstancesVolumesSetbootPutOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesVolumesSetbootPutOptionsModel.PvmInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesVolumesSetbootPutOptionsModel.VolumeID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudPvminstancesVolumesSetbootPutOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudSapGetOptions successfully`, func() {
				// Construct an instance of the PcloudSapGetOptions model
				cloudInstanceID := "testString"
				sapProfileID := "testString"
				pcloudSapGetOptionsModel := powervsService.NewPcloudSapGetOptions(cloudInstanceID, sapProfileID)
				pcloudSapGetOptionsModel.SetCloudInstanceID("testString")
				pcloudSapGetOptionsModel.SetSapProfileID("testString")
				pcloudSapGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudSapGetOptionsModel).ToNot(BeNil())
				Expect(pcloudSapGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSapGetOptionsModel.SapProfileID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSapGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudSapGetallOptions successfully`, func() {
				// Construct an instance of the PcloudSapGetallOptions model
				cloudInstanceID := "testString"
				pcloudSapGetallOptionsModel := powervsService.NewPcloudSapGetallOptions(cloudInstanceID)
				pcloudSapGetallOptionsModel.SetCloudInstanceID("testString")
				pcloudSapGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudSapGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudSapGetallOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSapGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudSapPostOptions successfully`, func() {
				// Construct an instance of the PvmInstanceAddNetwork model
				pvmInstanceAddNetworkModel := new(powervsv1.PvmInstanceAddNetwork)
				Expect(pvmInstanceAddNetworkModel).ToNot(BeNil())
				pvmInstanceAddNetworkModel.IPAddress = core.StringPtr("testString")
				pvmInstanceAddNetworkModel.NetworkID = core.StringPtr("testString")
				Expect(pvmInstanceAddNetworkModel.IPAddress).To(Equal(core.StringPtr("testString")))
				Expect(pvmInstanceAddNetworkModel.NetworkID).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the PvmInstanceMultiCreate model
				pvmInstanceMultiCreateModel := new(powervsv1.PvmInstanceMultiCreate)
				Expect(pvmInstanceMultiCreateModel).ToNot(BeNil())
				pvmInstanceMultiCreateModel.AffinityPolicy = core.StringPtr("none")
				pvmInstanceMultiCreateModel.Count = core.Int64Ptr(int64(38))
				pvmInstanceMultiCreateModel.Numerical = core.StringPtr("suffix")
				Expect(pvmInstanceMultiCreateModel.AffinityPolicy).To(Equal(core.StringPtr("none")))
				Expect(pvmInstanceMultiCreateModel.Count).To(Equal(core.Int64Ptr(int64(38))))
				Expect(pvmInstanceMultiCreateModel.Numerical).To(Equal(core.StringPtr("suffix")))

				// Construct an instance of the StorageAffinity model
				storageAffinityModel := new(powervsv1.StorageAffinity)
				Expect(storageAffinityModel).ToNot(BeNil())
				storageAffinityModel.AffinityPvmInstance = core.StringPtr("testString")
				storageAffinityModel.AffinityPolicy = core.StringPtr("affinity")
				storageAffinityModel.AffinityVolume = core.StringPtr("testString")
				storageAffinityModel.AntiAffinityPvmInstances = []string{"testString"}
				storageAffinityModel.AntiAffinityVolumes = []string{"testString"}
				Expect(storageAffinityModel.AffinityPvmInstance).To(Equal(core.StringPtr("testString")))
				Expect(storageAffinityModel.AffinityPolicy).To(Equal(core.StringPtr("affinity")))
				Expect(storageAffinityModel.AffinityVolume).To(Equal(core.StringPtr("testString")))
				Expect(storageAffinityModel.AntiAffinityPvmInstances).To(Equal([]string{"testString"}))
				Expect(storageAffinityModel.AntiAffinityVolumes).To(Equal([]string{"testString"}))

				// Construct an instance of the PcloudSapPostOptions model
				cloudInstanceID := "testString"
				pcloudSapPostOptionsImageID := "testString"
				pcloudSapPostOptionsName := "testString"
				pcloudSapPostOptionsNetworks := []powervsv1.PvmInstanceAddNetwork{}
				pcloudSapPostOptionsProfileID := "testString"
				pcloudSapPostOptionsModel := powervsService.NewPcloudSapPostOptions(cloudInstanceID, pcloudSapPostOptionsImageID, pcloudSapPostOptionsName, pcloudSapPostOptionsNetworks, pcloudSapPostOptionsProfileID)
				pcloudSapPostOptionsModel.SetCloudInstanceID("testString")
				pcloudSapPostOptionsModel.SetImageID("testString")
				pcloudSapPostOptionsModel.SetName("testString")
				pcloudSapPostOptionsModel.SetNetworks([]powervsv1.PvmInstanceAddNetwork{*pvmInstanceAddNetworkModel})
				pcloudSapPostOptionsModel.SetProfileID("testString")
				pcloudSapPostOptionsModel.SetDeploymentType("testString")
				pcloudSapPostOptionsModel.SetInstances(pvmInstanceMultiCreateModel)
				pcloudSapPostOptionsModel.SetPinPolicy("none")
				pcloudSapPostOptionsModel.SetPlacementGroup("testString")
				pcloudSapPostOptionsModel.SetSshKeyName("testString")
				pcloudSapPostOptionsModel.SetStorageAffinity(storageAffinityModel)
				pcloudSapPostOptionsModel.SetStoragePool("testString")
				pcloudSapPostOptionsModel.SetStorageType("testString")
				pcloudSapPostOptionsModel.SetSysType("testString")
				pcloudSapPostOptionsModel.SetUserData("testString")
				pcloudSapPostOptionsModel.SetVolumeIDs([]string{"testString"})
				pcloudSapPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudSapPostOptionsModel).ToNot(BeNil())
				Expect(pcloudSapPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSapPostOptionsModel.ImageID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSapPostOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSapPostOptionsModel.Networks).To(Equal([]powervsv1.PvmInstanceAddNetwork{*pvmInstanceAddNetworkModel}))
				Expect(pcloudSapPostOptionsModel.ProfileID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSapPostOptionsModel.DeploymentType).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSapPostOptionsModel.Instances).To(Equal(pvmInstanceMultiCreateModel))
				Expect(pcloudSapPostOptionsModel.PinPolicy).To(Equal(core.StringPtr("none")))
				Expect(pcloudSapPostOptionsModel.PlacementGroup).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSapPostOptionsModel.SshKeyName).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSapPostOptionsModel.StorageAffinity).To(Equal(storageAffinityModel))
				Expect(pcloudSapPostOptionsModel.StoragePool).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSapPostOptionsModel.StorageType).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSapPostOptionsModel.SysType).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSapPostOptionsModel.UserData).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSapPostOptionsModel.VolumeIDs).To(Equal([]string{"testString"}))
				Expect(pcloudSapPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudSharedprocessorpoolsDeleteOptions successfully`, func() {
				// Construct an instance of the PcloudSharedprocessorpoolsDeleteOptions model
				cloudInstanceID := "testString"
				sharedProcessorPoolID := "testString"
				pcloudSharedprocessorpoolsDeleteOptionsModel := powervsService.NewPcloudSharedprocessorpoolsDeleteOptions(cloudInstanceID, sharedProcessorPoolID)
				pcloudSharedprocessorpoolsDeleteOptionsModel.SetCloudInstanceID("testString")
				pcloudSharedprocessorpoolsDeleteOptionsModel.SetSharedProcessorPoolID("testString")
				pcloudSharedprocessorpoolsDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudSharedprocessorpoolsDeleteOptionsModel).ToNot(BeNil())
				Expect(pcloudSharedprocessorpoolsDeleteOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSharedprocessorpoolsDeleteOptionsModel.SharedProcessorPoolID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSharedprocessorpoolsDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudSharedprocessorpoolsGetOptions successfully`, func() {
				// Construct an instance of the PcloudSharedprocessorpoolsGetOptions model
				cloudInstanceID := "testString"
				sharedProcessorPoolID := "testString"
				pcloudSharedprocessorpoolsGetOptionsModel := powervsService.NewPcloudSharedprocessorpoolsGetOptions(cloudInstanceID, sharedProcessorPoolID)
				pcloudSharedprocessorpoolsGetOptionsModel.SetCloudInstanceID("testString")
				pcloudSharedprocessorpoolsGetOptionsModel.SetSharedProcessorPoolID("testString")
				pcloudSharedprocessorpoolsGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudSharedprocessorpoolsGetOptionsModel).ToNot(BeNil())
				Expect(pcloudSharedprocessorpoolsGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSharedprocessorpoolsGetOptionsModel.SharedProcessorPoolID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSharedprocessorpoolsGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudSharedprocessorpoolsGetallOptions successfully`, func() {
				// Construct an instance of the PcloudSharedprocessorpoolsGetallOptions model
				cloudInstanceID := "testString"
				pcloudSharedprocessorpoolsGetallOptionsModel := powervsService.NewPcloudSharedprocessorpoolsGetallOptions(cloudInstanceID)
				pcloudSharedprocessorpoolsGetallOptionsModel.SetCloudInstanceID("testString")
				pcloudSharedprocessorpoolsGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudSharedprocessorpoolsGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudSharedprocessorpoolsGetallOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSharedprocessorpoolsGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudSharedprocessorpoolsPostOptions successfully`, func() {
				// Construct an instance of the PcloudSharedprocessorpoolsPostOptions model
				cloudInstanceID := "testString"
				pcloudSharedprocessorpoolsPostOptionsHostGroup := "testString"
				pcloudSharedprocessorpoolsPostOptionsName := "testString"
				pcloudSharedprocessorpoolsPostOptionsReservedCores := int64(38)
				pcloudSharedprocessorpoolsPostOptionsModel := powervsService.NewPcloudSharedprocessorpoolsPostOptions(cloudInstanceID, pcloudSharedprocessorpoolsPostOptionsHostGroup, pcloudSharedprocessorpoolsPostOptionsName, pcloudSharedprocessorpoolsPostOptionsReservedCores)
				pcloudSharedprocessorpoolsPostOptionsModel.SetCloudInstanceID("testString")
				pcloudSharedprocessorpoolsPostOptionsModel.SetHostGroup("testString")
				pcloudSharedprocessorpoolsPostOptionsModel.SetName("testString")
				pcloudSharedprocessorpoolsPostOptionsModel.SetReservedCores(int64(38))
				pcloudSharedprocessorpoolsPostOptionsModel.SetPlacementGroupID("testString")
				pcloudSharedprocessorpoolsPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudSharedprocessorpoolsPostOptionsModel).ToNot(BeNil())
				Expect(pcloudSharedprocessorpoolsPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSharedprocessorpoolsPostOptionsModel.HostGroup).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSharedprocessorpoolsPostOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSharedprocessorpoolsPostOptionsModel.ReservedCores).To(Equal(core.Int64Ptr(int64(38))))
				Expect(pcloudSharedprocessorpoolsPostOptionsModel.PlacementGroupID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSharedprocessorpoolsPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudSharedprocessorpoolsPutOptions successfully`, func() {
				// Construct an instance of the PcloudSharedprocessorpoolsPutOptions model
				cloudInstanceID := "testString"
				sharedProcessorPoolID := "testString"
				pcloudSharedprocessorpoolsPutOptionsModel := powervsService.NewPcloudSharedprocessorpoolsPutOptions(cloudInstanceID, sharedProcessorPoolID)
				pcloudSharedprocessorpoolsPutOptionsModel.SetCloudInstanceID("testString")
				pcloudSharedprocessorpoolsPutOptionsModel.SetSharedProcessorPoolID("testString")
				pcloudSharedprocessorpoolsPutOptionsModel.SetName("testString")
				pcloudSharedprocessorpoolsPutOptionsModel.SetReservedCores(int64(38))
				pcloudSharedprocessorpoolsPutOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudSharedprocessorpoolsPutOptionsModel).ToNot(BeNil())
				Expect(pcloudSharedprocessorpoolsPutOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSharedprocessorpoolsPutOptionsModel.SharedProcessorPoolID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSharedprocessorpoolsPutOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSharedprocessorpoolsPutOptionsModel.ReservedCores).To(Equal(core.Int64Ptr(int64(38))))
				Expect(pcloudSharedprocessorpoolsPutOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudSppplacementgroupsDeleteOptions successfully`, func() {
				// Construct an instance of the PcloudSppplacementgroupsDeleteOptions model
				cloudInstanceID := "testString"
				sppPlacementGroupID := "testString"
				pcloudSppplacementgroupsDeleteOptionsModel := powervsService.NewPcloudSppplacementgroupsDeleteOptions(cloudInstanceID, sppPlacementGroupID)
				pcloudSppplacementgroupsDeleteOptionsModel.SetCloudInstanceID("testString")
				pcloudSppplacementgroupsDeleteOptionsModel.SetSppPlacementGroupID("testString")
				pcloudSppplacementgroupsDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudSppplacementgroupsDeleteOptionsModel).ToNot(BeNil())
				Expect(pcloudSppplacementgroupsDeleteOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSppplacementgroupsDeleteOptionsModel.SppPlacementGroupID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSppplacementgroupsDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudSppplacementgroupsGetOptions successfully`, func() {
				// Construct an instance of the PcloudSppplacementgroupsGetOptions model
				cloudInstanceID := "testString"
				sppPlacementGroupID := "testString"
				pcloudSppplacementgroupsGetOptionsModel := powervsService.NewPcloudSppplacementgroupsGetOptions(cloudInstanceID, sppPlacementGroupID)
				pcloudSppplacementgroupsGetOptionsModel.SetCloudInstanceID("testString")
				pcloudSppplacementgroupsGetOptionsModel.SetSppPlacementGroupID("testString")
				pcloudSppplacementgroupsGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudSppplacementgroupsGetOptionsModel).ToNot(BeNil())
				Expect(pcloudSppplacementgroupsGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSppplacementgroupsGetOptionsModel.SppPlacementGroupID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSppplacementgroupsGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudSppplacementgroupsGetallOptions successfully`, func() {
				// Construct an instance of the PcloudSppplacementgroupsGetallOptions model
				cloudInstanceID := "testString"
				pcloudSppplacementgroupsGetallOptionsModel := powervsService.NewPcloudSppplacementgroupsGetallOptions(cloudInstanceID)
				pcloudSppplacementgroupsGetallOptionsModel.SetCloudInstanceID("testString")
				pcloudSppplacementgroupsGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudSppplacementgroupsGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudSppplacementgroupsGetallOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSppplacementgroupsGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudSppplacementgroupsMembersDeleteOptions successfully`, func() {
				// Construct an instance of the PcloudSppplacementgroupsMembersDeleteOptions model
				cloudInstanceID := "testString"
				sppPlacementGroupID := "testString"
				sharedProcessorPoolID := "testString"
				pcloudSppplacementgroupsMembersDeleteOptionsModel := powervsService.NewPcloudSppplacementgroupsMembersDeleteOptions(cloudInstanceID, sppPlacementGroupID, sharedProcessorPoolID)
				pcloudSppplacementgroupsMembersDeleteOptionsModel.SetCloudInstanceID("testString")
				pcloudSppplacementgroupsMembersDeleteOptionsModel.SetSppPlacementGroupID("testString")
				pcloudSppplacementgroupsMembersDeleteOptionsModel.SetSharedProcessorPoolID("testString")
				pcloudSppplacementgroupsMembersDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudSppplacementgroupsMembersDeleteOptionsModel).ToNot(BeNil())
				Expect(pcloudSppplacementgroupsMembersDeleteOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSppplacementgroupsMembersDeleteOptionsModel.SppPlacementGroupID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSppplacementgroupsMembersDeleteOptionsModel.SharedProcessorPoolID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSppplacementgroupsMembersDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudSppplacementgroupsMembersPostOptions successfully`, func() {
				// Construct an instance of the PcloudSppplacementgroupsMembersPostOptions model
				cloudInstanceID := "testString"
				sppPlacementGroupID := "testString"
				sharedProcessorPoolID := "testString"
				pcloudSppplacementgroupsMembersPostOptionsModel := powervsService.NewPcloudSppplacementgroupsMembersPostOptions(cloudInstanceID, sppPlacementGroupID, sharedProcessorPoolID)
				pcloudSppplacementgroupsMembersPostOptionsModel.SetCloudInstanceID("testString")
				pcloudSppplacementgroupsMembersPostOptionsModel.SetSppPlacementGroupID("testString")
				pcloudSppplacementgroupsMembersPostOptionsModel.SetSharedProcessorPoolID("testString")
				pcloudSppplacementgroupsMembersPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudSppplacementgroupsMembersPostOptionsModel).ToNot(BeNil())
				Expect(pcloudSppplacementgroupsMembersPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSppplacementgroupsMembersPostOptionsModel.SppPlacementGroupID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSppplacementgroupsMembersPostOptionsModel.SharedProcessorPoolID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSppplacementgroupsMembersPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudSppplacementgroupsPostOptions successfully`, func() {
				// Construct an instance of the PcloudSppplacementgroupsPostOptions model
				cloudInstanceID := "testString"
				pcloudSppplacementgroupsPostOptionsName := "testString"
				pcloudSppplacementgroupsPostOptionsPolicy := "affinity"
				pcloudSppplacementgroupsPostOptionsModel := powervsService.NewPcloudSppplacementgroupsPostOptions(cloudInstanceID, pcloudSppplacementgroupsPostOptionsName, pcloudSppplacementgroupsPostOptionsPolicy)
				pcloudSppplacementgroupsPostOptionsModel.SetCloudInstanceID("testString")
				pcloudSppplacementgroupsPostOptionsModel.SetName("testString")
				pcloudSppplacementgroupsPostOptionsModel.SetPolicy("affinity")
				pcloudSppplacementgroupsPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudSppplacementgroupsPostOptionsModel).ToNot(BeNil())
				Expect(pcloudSppplacementgroupsPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSppplacementgroupsPostOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSppplacementgroupsPostOptionsModel.Policy).To(Equal(core.StringPtr("affinity")))
				Expect(pcloudSppplacementgroupsPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudStoragecapacityPoolsGetOptions successfully`, func() {
				// Construct an instance of the PcloudStoragecapacityPoolsGetOptions model
				cloudInstanceID := "testString"
				storagePoolName := "testString"
				pcloudStoragecapacityPoolsGetOptionsModel := powervsService.NewPcloudStoragecapacityPoolsGetOptions(cloudInstanceID, storagePoolName)
				pcloudStoragecapacityPoolsGetOptionsModel.SetCloudInstanceID("testString")
				pcloudStoragecapacityPoolsGetOptionsModel.SetStoragePoolName("testString")
				pcloudStoragecapacityPoolsGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudStoragecapacityPoolsGetOptionsModel).ToNot(BeNil())
				Expect(pcloudStoragecapacityPoolsGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudStoragecapacityPoolsGetOptionsModel.StoragePoolName).To(Equal(core.StringPtr("testString")))
				Expect(pcloudStoragecapacityPoolsGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudStoragecapacityPoolsGetallOptions successfully`, func() {
				// Construct an instance of the PcloudStoragecapacityPoolsGetallOptions model
				cloudInstanceID := "testString"
				pcloudStoragecapacityPoolsGetallOptionsModel := powervsService.NewPcloudStoragecapacityPoolsGetallOptions(cloudInstanceID)
				pcloudStoragecapacityPoolsGetallOptionsModel.SetCloudInstanceID("testString")
				pcloudStoragecapacityPoolsGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudStoragecapacityPoolsGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudStoragecapacityPoolsGetallOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudStoragecapacityPoolsGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudStoragecapacityTypesGetOptions successfully`, func() {
				// Construct an instance of the PcloudStoragecapacityTypesGetOptions model
				cloudInstanceID := "testString"
				storageTypeName := "testString"
				pcloudStoragecapacityTypesGetOptionsModel := powervsService.NewPcloudStoragecapacityTypesGetOptions(cloudInstanceID, storageTypeName)
				pcloudStoragecapacityTypesGetOptionsModel.SetCloudInstanceID("testString")
				pcloudStoragecapacityTypesGetOptionsModel.SetStorageTypeName("testString")
				pcloudStoragecapacityTypesGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudStoragecapacityTypesGetOptionsModel).ToNot(BeNil())
				Expect(pcloudStoragecapacityTypesGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudStoragecapacityTypesGetOptionsModel.StorageTypeName).To(Equal(core.StringPtr("testString")))
				Expect(pcloudStoragecapacityTypesGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudStoragecapacityTypesGetallOptions successfully`, func() {
				// Construct an instance of the PcloudStoragecapacityTypesGetallOptions model
				cloudInstanceID := "testString"
				pcloudStoragecapacityTypesGetallOptionsModel := powervsService.NewPcloudStoragecapacityTypesGetallOptions(cloudInstanceID)
				pcloudStoragecapacityTypesGetallOptionsModel.SetCloudInstanceID("testString")
				pcloudStoragecapacityTypesGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudStoragecapacityTypesGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudStoragecapacityTypesGetallOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudStoragecapacityTypesGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudSystempoolsGetOptions successfully`, func() {
				// Construct an instance of the PcloudSystempoolsGetOptions model
				cloudInstanceID := "testString"
				pcloudSystempoolsGetOptionsModel := powervsService.NewPcloudSystempoolsGetOptions(cloudInstanceID)
				pcloudSystempoolsGetOptionsModel.SetCloudInstanceID("testString")
				pcloudSystempoolsGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudSystempoolsGetOptionsModel).ToNot(BeNil())
				Expect(pcloudSystempoolsGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudSystempoolsGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudTasksDeleteOptions successfully`, func() {
				// Construct an instance of the PcloudTasksDeleteOptions model
				taskID := "testString"
				pcloudTasksDeleteOptionsModel := powervsService.NewPcloudTasksDeleteOptions(taskID)
				pcloudTasksDeleteOptionsModel.SetTaskID("testString")
				pcloudTasksDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudTasksDeleteOptionsModel).ToNot(BeNil())
				Expect(pcloudTasksDeleteOptionsModel.TaskID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudTasksDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudTasksGetOptions successfully`, func() {
				// Construct an instance of the PcloudTasksGetOptions model
				taskID := "testString"
				pcloudTasksGetOptionsModel := powervsService.NewPcloudTasksGetOptions(taskID)
				pcloudTasksGetOptionsModel.SetTaskID("testString")
				pcloudTasksGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudTasksGetOptionsModel).ToNot(BeNil())
				Expect(pcloudTasksGetOptionsModel.TaskID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudTasksGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudTenantsGetOptions successfully`, func() {
				// Construct an instance of the PcloudTenantsGetOptions model
				tenantID := "testString"
				pcloudTenantsGetOptionsModel := powervsService.NewPcloudTenantsGetOptions(tenantID)
				pcloudTenantsGetOptionsModel.SetTenantID("testString")
				pcloudTenantsGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudTenantsGetOptionsModel).ToNot(BeNil())
				Expect(pcloudTenantsGetOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudTenantsGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudTenantsPutOptions successfully`, func() {
				// Construct an instance of the PeeringNetwork model
				peeringNetworkModel := new(powervsv1.PeeringNetwork)
				Expect(peeringNetworkModel).ToNot(BeNil())
				peeringNetworkModel.CIDR = core.StringPtr("testString")
				peeringNetworkModel.DnsServers = []string{"testString"}
				peeringNetworkModel.ProjectName = core.StringPtr("testString")
				Expect(peeringNetworkModel.CIDR).To(Equal(core.StringPtr("testString")))
				Expect(peeringNetworkModel.DnsServers).To(Equal([]string{"testString"}))
				Expect(peeringNetworkModel.ProjectName).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the PcloudTenantsPutOptions model
				tenantID := "testString"
				pcloudTenantsPutOptionsModel := powervsService.NewPcloudTenantsPutOptions(tenantID)
				pcloudTenantsPutOptionsModel.SetTenantID("testString")
				pcloudTenantsPutOptionsModel.SetIcn("testString")
				pcloudTenantsPutOptionsModel.SetPeeringNetworks([]powervsv1.PeeringNetwork{*peeringNetworkModel})
				pcloudTenantsPutOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudTenantsPutOptionsModel).ToNot(BeNil())
				Expect(pcloudTenantsPutOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudTenantsPutOptionsModel.Icn).To(Equal(core.StringPtr("testString")))
				Expect(pcloudTenantsPutOptionsModel.PeeringNetworks).To(Equal([]powervsv1.PeeringNetwork{*peeringNetworkModel}))
				Expect(pcloudTenantsPutOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudTenantsSshkeysDeleteOptions successfully`, func() {
				// Construct an instance of the PcloudTenantsSshkeysDeleteOptions model
				tenantID := "testString"
				sshkeyName := "testString"
				pcloudTenantsSshkeysDeleteOptionsModel := powervsService.NewPcloudTenantsSshkeysDeleteOptions(tenantID, sshkeyName)
				pcloudTenantsSshkeysDeleteOptionsModel.SetTenantID("testString")
				pcloudTenantsSshkeysDeleteOptionsModel.SetSshkeyName("testString")
				pcloudTenantsSshkeysDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudTenantsSshkeysDeleteOptionsModel).ToNot(BeNil())
				Expect(pcloudTenantsSshkeysDeleteOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudTenantsSshkeysDeleteOptionsModel.SshkeyName).To(Equal(core.StringPtr("testString")))
				Expect(pcloudTenantsSshkeysDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudTenantsSshkeysGetOptions successfully`, func() {
				// Construct an instance of the PcloudTenantsSshkeysGetOptions model
				tenantID := "testString"
				sshkeyName := "testString"
				pcloudTenantsSshkeysGetOptionsModel := powervsService.NewPcloudTenantsSshkeysGetOptions(tenantID, sshkeyName)
				pcloudTenantsSshkeysGetOptionsModel.SetTenantID("testString")
				pcloudTenantsSshkeysGetOptionsModel.SetSshkeyName("testString")
				pcloudTenantsSshkeysGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudTenantsSshkeysGetOptionsModel).ToNot(BeNil())
				Expect(pcloudTenantsSshkeysGetOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudTenantsSshkeysGetOptionsModel.SshkeyName).To(Equal(core.StringPtr("testString")))
				Expect(pcloudTenantsSshkeysGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudTenantsSshkeysGetallOptions successfully`, func() {
				// Construct an instance of the PcloudTenantsSshkeysGetallOptions model
				tenantID := "testString"
				pcloudTenantsSshkeysGetallOptionsModel := powervsService.NewPcloudTenantsSshkeysGetallOptions(tenantID)
				pcloudTenantsSshkeysGetallOptionsModel.SetTenantID("testString")
				pcloudTenantsSshkeysGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudTenantsSshkeysGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudTenantsSshkeysGetallOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudTenantsSshkeysGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudTenantsSshkeysPostOptions successfully`, func() {
				// Construct an instance of the PcloudTenantsSshkeysPostOptions model
				tenantID := "testString"
				pcloudTenantsSshkeysPostOptionsName := "testString"
				pcloudTenantsSshkeysPostOptionsSshKey := "testString"
				pcloudTenantsSshkeysPostOptionsModel := powervsService.NewPcloudTenantsSshkeysPostOptions(tenantID, pcloudTenantsSshkeysPostOptionsName, pcloudTenantsSshkeysPostOptionsSshKey)
				pcloudTenantsSshkeysPostOptionsModel.SetTenantID("testString")
				pcloudTenantsSshkeysPostOptionsModel.SetName("testString")
				pcloudTenantsSshkeysPostOptionsModel.SetSshKey("testString")
				pcloudTenantsSshkeysPostOptionsModel.SetCreationDate(CreateMockDateTime("2019-01-01T12:00:00.000Z"))
				pcloudTenantsSshkeysPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudTenantsSshkeysPostOptionsModel).ToNot(BeNil())
				Expect(pcloudTenantsSshkeysPostOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudTenantsSshkeysPostOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(pcloudTenantsSshkeysPostOptionsModel.SshKey).To(Equal(core.StringPtr("testString")))
				Expect(pcloudTenantsSshkeysPostOptionsModel.CreationDate).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))
				Expect(pcloudTenantsSshkeysPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudTenantsSshkeysPutOptions successfully`, func() {
				// Construct an instance of the PcloudTenantsSshkeysPutOptions model
				tenantID := "testString"
				sshkeyName := "testString"
				pcloudTenantsSshkeysPutOptionsName := "testString"
				pcloudTenantsSshkeysPutOptionsSshKey := "testString"
				pcloudTenantsSshkeysPutOptionsModel := powervsService.NewPcloudTenantsSshkeysPutOptions(tenantID, sshkeyName, pcloudTenantsSshkeysPutOptionsName, pcloudTenantsSshkeysPutOptionsSshKey)
				pcloudTenantsSshkeysPutOptionsModel.SetTenantID("testString")
				pcloudTenantsSshkeysPutOptionsModel.SetSshkeyName("testString")
				pcloudTenantsSshkeysPutOptionsModel.SetName("testString")
				pcloudTenantsSshkeysPutOptionsModel.SetSshKey("testString")
				pcloudTenantsSshkeysPutOptionsModel.SetCreationDate(CreateMockDateTime("2019-01-01T12:00:00.000Z"))
				pcloudTenantsSshkeysPutOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudTenantsSshkeysPutOptionsModel).ToNot(BeNil())
				Expect(pcloudTenantsSshkeysPutOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudTenantsSshkeysPutOptionsModel.SshkeyName).To(Equal(core.StringPtr("testString")))
				Expect(pcloudTenantsSshkeysPutOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(pcloudTenantsSshkeysPutOptionsModel.SshKey).To(Equal(core.StringPtr("testString")))
				Expect(pcloudTenantsSshkeysPutOptionsModel.CreationDate).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))
				Expect(pcloudTenantsSshkeysPutOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudV1CloudinstancesCosimagesGetOptions successfully`, func() {
				// Construct an instance of the PcloudV1CloudinstancesCosimagesGetOptions model
				cloudInstanceID := "testString"
				pcloudV1CloudinstancesCosimagesGetOptionsModel := powervsService.NewPcloudV1CloudinstancesCosimagesGetOptions(cloudInstanceID)
				pcloudV1CloudinstancesCosimagesGetOptionsModel.SetCloudInstanceID("testString")
				pcloudV1CloudinstancesCosimagesGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudV1CloudinstancesCosimagesGetOptionsModel).ToNot(BeNil())
				Expect(pcloudV1CloudinstancesCosimagesGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV1CloudinstancesCosimagesGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudV1CloudinstancesCosimagesPostOptions successfully`, func() {
				// Construct an instance of the StorageAffinity model
				storageAffinityModel := new(powervsv1.StorageAffinity)
				Expect(storageAffinityModel).ToNot(BeNil())
				storageAffinityModel.AffinityPvmInstance = core.StringPtr("testString")
				storageAffinityModel.AffinityPolicy = core.StringPtr("affinity")
				storageAffinityModel.AffinityVolume = core.StringPtr("testString")
				storageAffinityModel.AntiAffinityPvmInstances = []string{"testString"}
				storageAffinityModel.AntiAffinityVolumes = []string{"testString"}
				Expect(storageAffinityModel.AffinityPvmInstance).To(Equal(core.StringPtr("testString")))
				Expect(storageAffinityModel.AffinityPolicy).To(Equal(core.StringPtr("affinity")))
				Expect(storageAffinityModel.AffinityVolume).To(Equal(core.StringPtr("testString")))
				Expect(storageAffinityModel.AntiAffinityPvmInstances).To(Equal([]string{"testString"}))
				Expect(storageAffinityModel.AntiAffinityVolumes).To(Equal([]string{"testString"}))

				// Construct an instance of the PcloudV1CloudinstancesCosimagesPostOptions model
				cloudInstanceID := "testString"
				pcloudV1CloudinstancesCosimagesPostOptionsBucketName := "testString"
				pcloudV1CloudinstancesCosimagesPostOptionsImageFilename := "testString"
				pcloudV1CloudinstancesCosimagesPostOptionsImageName := "testString"
				pcloudV1CloudinstancesCosimagesPostOptionsRegion := "testString"
				pcloudV1CloudinstancesCosimagesPostOptionsModel := powervsService.NewPcloudV1CloudinstancesCosimagesPostOptions(cloudInstanceID, pcloudV1CloudinstancesCosimagesPostOptionsBucketName, pcloudV1CloudinstancesCosimagesPostOptionsImageFilename, pcloudV1CloudinstancesCosimagesPostOptionsImageName, pcloudV1CloudinstancesCosimagesPostOptionsRegion)
				pcloudV1CloudinstancesCosimagesPostOptionsModel.SetCloudInstanceID("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.SetBucketName("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.SetImageFilename("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.SetImageName("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.SetRegion("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.SetAccessKey("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.SetBucketAccess("private")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.SetOsType("aix")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.SetSecretKey("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.SetStorageAffinity(storageAffinityModel)
				pcloudV1CloudinstancesCosimagesPostOptionsModel.SetStoragePool("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.SetStorageType("testString")
				pcloudV1CloudinstancesCosimagesPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudV1CloudinstancesCosimagesPostOptionsModel).ToNot(BeNil())
				Expect(pcloudV1CloudinstancesCosimagesPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV1CloudinstancesCosimagesPostOptionsModel.BucketName).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV1CloudinstancesCosimagesPostOptionsModel.ImageFilename).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV1CloudinstancesCosimagesPostOptionsModel.ImageName).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV1CloudinstancesCosimagesPostOptionsModel.Region).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV1CloudinstancesCosimagesPostOptionsModel.AccessKey).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV1CloudinstancesCosimagesPostOptionsModel.BucketAccess).To(Equal(core.StringPtr("private")))
				Expect(pcloudV1CloudinstancesCosimagesPostOptionsModel.OsType).To(Equal(core.StringPtr("aix")))
				Expect(pcloudV1CloudinstancesCosimagesPostOptionsModel.SecretKey).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV1CloudinstancesCosimagesPostOptionsModel.StorageAffinity).To(Equal(storageAffinityModel))
				Expect(pcloudV1CloudinstancesCosimagesPostOptionsModel.StoragePool).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV1CloudinstancesCosimagesPostOptionsModel.StorageType).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV1CloudinstancesCosimagesPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudV2ImagesExportGetOptions successfully`, func() {
				// Construct an instance of the PcloudV2ImagesExportGetOptions model
				cloudInstanceID := "testString"
				imageID := "testString"
				pcloudV2ImagesExportGetOptionsModel := powervsService.NewPcloudV2ImagesExportGetOptions(cloudInstanceID, imageID)
				pcloudV2ImagesExportGetOptionsModel.SetCloudInstanceID("testString")
				pcloudV2ImagesExportGetOptionsModel.SetImageID("testString")
				pcloudV2ImagesExportGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudV2ImagesExportGetOptionsModel).ToNot(BeNil())
				Expect(pcloudV2ImagesExportGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2ImagesExportGetOptionsModel.ImageID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2ImagesExportGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudV2ImagesExportPostOptions successfully`, func() {
				// Construct an instance of the PcloudV2ImagesExportPostOptions model
				cloudInstanceID := "testString"
				imageID := "testString"
				pcloudV2ImagesExportPostOptionsAccessKey := "testString"
				pcloudV2ImagesExportPostOptionsBucketName := "testString"
				pcloudV2ImagesExportPostOptionsModel := powervsService.NewPcloudV2ImagesExportPostOptions(cloudInstanceID, imageID, pcloudV2ImagesExportPostOptionsAccessKey, pcloudV2ImagesExportPostOptionsBucketName)
				pcloudV2ImagesExportPostOptionsModel.SetCloudInstanceID("testString")
				pcloudV2ImagesExportPostOptionsModel.SetImageID("testString")
				pcloudV2ImagesExportPostOptionsModel.SetAccessKey("testString")
				pcloudV2ImagesExportPostOptionsModel.SetBucketName("testString")
				pcloudV2ImagesExportPostOptionsModel.SetRegion("testString")
				pcloudV2ImagesExportPostOptionsModel.SetSecretKey("testString")
				pcloudV2ImagesExportPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudV2ImagesExportPostOptionsModel).ToNot(BeNil())
				Expect(pcloudV2ImagesExportPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2ImagesExportPostOptionsModel.ImageID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2ImagesExportPostOptionsModel.AccessKey).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2ImagesExportPostOptionsModel.BucketName).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2ImagesExportPostOptionsModel.Region).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2ImagesExportPostOptionsModel.SecretKey).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2ImagesExportPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudV2PvminstancesCaptureGetOptions successfully`, func() {
				// Construct an instance of the PcloudV2PvminstancesCaptureGetOptions model
				cloudInstanceID := "testString"
				pvmInstanceID := "testString"
				pcloudV2PvminstancesCaptureGetOptionsModel := powervsService.NewPcloudV2PvminstancesCaptureGetOptions(cloudInstanceID, pvmInstanceID)
				pcloudV2PvminstancesCaptureGetOptionsModel.SetCloudInstanceID("testString")
				pcloudV2PvminstancesCaptureGetOptionsModel.SetPvmInstanceID("testString")
				pcloudV2PvminstancesCaptureGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudV2PvminstancesCaptureGetOptionsModel).ToNot(BeNil())
				Expect(pcloudV2PvminstancesCaptureGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2PvminstancesCaptureGetOptionsModel.PvmInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2PvminstancesCaptureGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudV2PvminstancesCapturePostOptions successfully`, func() {
				// Construct an instance of the PcloudV2PvminstancesCapturePostOptions model
				cloudInstanceID := "testString"
				pvmInstanceID := "testString"
				pcloudV2PvminstancesCapturePostOptionsCaptureDestination := "cloud-storage"
				pcloudV2PvminstancesCapturePostOptionsCaptureName := "testString"
				pcloudV2PvminstancesCapturePostOptionsModel := powervsService.NewPcloudV2PvminstancesCapturePostOptions(cloudInstanceID, pvmInstanceID, pcloudV2PvminstancesCapturePostOptionsCaptureDestination, pcloudV2PvminstancesCapturePostOptionsCaptureName)
				pcloudV2PvminstancesCapturePostOptionsModel.SetCloudInstanceID("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.SetPvmInstanceID("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.SetCaptureDestination("cloud-storage")
				pcloudV2PvminstancesCapturePostOptionsModel.SetCaptureName("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.SetCaptureVolumeIDs([]string{"testString"})
				pcloudV2PvminstancesCapturePostOptionsModel.SetCloudStorageAccessKey("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.SetCloudStorageImagePath("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.SetCloudStorageRegion("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.SetCloudStorageSecretKey("testString")
				pcloudV2PvminstancesCapturePostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudV2PvminstancesCapturePostOptionsModel).ToNot(BeNil())
				Expect(pcloudV2PvminstancesCapturePostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2PvminstancesCapturePostOptionsModel.PvmInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2PvminstancesCapturePostOptionsModel.CaptureDestination).To(Equal(core.StringPtr("cloud-storage")))
				Expect(pcloudV2PvminstancesCapturePostOptionsModel.CaptureName).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2PvminstancesCapturePostOptionsModel.CaptureVolumeIDs).To(Equal([]string{"testString"}))
				Expect(pcloudV2PvminstancesCapturePostOptionsModel.CloudStorageAccessKey).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2PvminstancesCapturePostOptionsModel.CloudStorageImagePath).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2PvminstancesCapturePostOptionsModel.CloudStorageRegion).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2PvminstancesCapturePostOptionsModel.CloudStorageSecretKey).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2PvminstancesCapturePostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudV2PvminstancesGetallOptions successfully`, func() {
				// Construct an instance of the PcloudV2PvminstancesGetallOptions model
				cloudInstanceID := "testString"
				pcloudV2PvminstancesGetallOptionsModel := powervsService.NewPcloudV2PvminstancesGetallOptions(cloudInstanceID)
				pcloudV2PvminstancesGetallOptionsModel.SetCloudInstanceID("testString")
				pcloudV2PvminstancesGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudV2PvminstancesGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudV2PvminstancesGetallOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2PvminstancesGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudV2PvminstancesVolumesDeleteOptions successfully`, func() {
				// Construct an instance of the PcloudV2PvminstancesVolumesDeleteOptions model
				cloudInstanceID := "testString"
				pvmInstanceID := "testString"
				pcloudV2PvminstancesVolumesDeleteOptionsModel := powervsService.NewPcloudV2PvminstancesVolumesDeleteOptions(cloudInstanceID, pvmInstanceID)
				pcloudV2PvminstancesVolumesDeleteOptionsModel.SetCloudInstanceID("testString")
				pcloudV2PvminstancesVolumesDeleteOptionsModel.SetPvmInstanceID("testString")
				pcloudV2PvminstancesVolumesDeleteOptionsModel.SetDetachAllVolumes(false)
				pcloudV2PvminstancesVolumesDeleteOptionsModel.SetDetachPrimaryBootVolume(false)
				pcloudV2PvminstancesVolumesDeleteOptionsModel.SetVolumeIDs([]string{"testString"})
				pcloudV2PvminstancesVolumesDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudV2PvminstancesVolumesDeleteOptionsModel).ToNot(BeNil())
				Expect(pcloudV2PvminstancesVolumesDeleteOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2PvminstancesVolumesDeleteOptionsModel.PvmInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2PvminstancesVolumesDeleteOptionsModel.DetachAllVolumes).To(Equal(core.BoolPtr(false)))
				Expect(pcloudV2PvminstancesVolumesDeleteOptionsModel.DetachPrimaryBootVolume).To(Equal(core.BoolPtr(false)))
				Expect(pcloudV2PvminstancesVolumesDeleteOptionsModel.VolumeIDs).To(Equal([]string{"testString"}))
				Expect(pcloudV2PvminstancesVolumesDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudV2PvminstancesVolumesPostOptions successfully`, func() {
				// Construct an instance of the PcloudV2PvminstancesVolumesPostOptions model
				cloudInstanceID := "testString"
				pvmInstanceID := "testString"
				pcloudV2PvminstancesVolumesPostOptionsVolumeIDs := []string{"testString"}
				pcloudV2PvminstancesVolumesPostOptionsModel := powervsService.NewPcloudV2PvminstancesVolumesPostOptions(cloudInstanceID, pvmInstanceID, pcloudV2PvminstancesVolumesPostOptionsVolumeIDs)
				pcloudV2PvminstancesVolumesPostOptionsModel.SetCloudInstanceID("testString")
				pcloudV2PvminstancesVolumesPostOptionsModel.SetPvmInstanceID("testString")
				pcloudV2PvminstancesVolumesPostOptionsModel.SetVolumeIDs([]string{"testString"})
				pcloudV2PvminstancesVolumesPostOptionsModel.SetBootVolumeID("testString")
				pcloudV2PvminstancesVolumesPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudV2PvminstancesVolumesPostOptionsModel).ToNot(BeNil())
				Expect(pcloudV2PvminstancesVolumesPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2PvminstancesVolumesPostOptionsModel.PvmInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2PvminstancesVolumesPostOptionsModel.VolumeIDs).To(Equal([]string{"testString"}))
				Expect(pcloudV2PvminstancesVolumesPostOptionsModel.BootVolumeID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2PvminstancesVolumesPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudV2VolumesClonePostOptions successfully`, func() {
				// Construct an instance of the PcloudV2VolumesClonePostOptions model
				cloudInstanceID := "testString"
				pcloudV2VolumesClonePostOptionsName := "testString"
				pcloudV2VolumesClonePostOptionsVolumeIDs := []string{"testString"}
				pcloudV2VolumesClonePostOptionsModel := powervsService.NewPcloudV2VolumesClonePostOptions(cloudInstanceID, pcloudV2VolumesClonePostOptionsName, pcloudV2VolumesClonePostOptionsVolumeIDs)
				pcloudV2VolumesClonePostOptionsModel.SetCloudInstanceID("testString")
				pcloudV2VolumesClonePostOptionsModel.SetName("testString")
				pcloudV2VolumesClonePostOptionsModel.SetVolumeIDs([]string{"testString"})
				pcloudV2VolumesClonePostOptionsModel.SetTargetReplicationEnabled(true)
				pcloudV2VolumesClonePostOptionsModel.SetTargetStorageTier("testString")
				pcloudV2VolumesClonePostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudV2VolumesClonePostOptionsModel).ToNot(BeNil())
				Expect(pcloudV2VolumesClonePostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2VolumesClonePostOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2VolumesClonePostOptionsModel.VolumeIDs).To(Equal([]string{"testString"}))
				Expect(pcloudV2VolumesClonePostOptionsModel.TargetReplicationEnabled).To(Equal(core.BoolPtr(true)))
				Expect(pcloudV2VolumesClonePostOptionsModel.TargetStorageTier).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2VolumesClonePostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudV2VolumesClonetasksGetOptions successfully`, func() {
				// Construct an instance of the PcloudV2VolumesClonetasksGetOptions model
				cloudInstanceID := "testString"
				cloneTaskID := "testString"
				pcloudV2VolumesClonetasksGetOptionsModel := powervsService.NewPcloudV2VolumesClonetasksGetOptions(cloudInstanceID, cloneTaskID)
				pcloudV2VolumesClonetasksGetOptionsModel.SetCloudInstanceID("testString")
				pcloudV2VolumesClonetasksGetOptionsModel.SetCloneTaskID("testString")
				pcloudV2VolumesClonetasksGetOptionsModel.SetAccept("application/json")
				pcloudV2VolumesClonetasksGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudV2VolumesClonetasksGetOptionsModel).ToNot(BeNil())
				Expect(pcloudV2VolumesClonetasksGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2VolumesClonetasksGetOptionsModel.CloneTaskID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2VolumesClonetasksGetOptionsModel.Accept).To(Equal(core.StringPtr("application/json")))
				Expect(pcloudV2VolumesClonetasksGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudV2VolumesDeleteOptions successfully`, func() {
				// Construct an instance of the PcloudV2VolumesDeleteOptions model
				cloudInstanceID := "testString"
				pcloudV2VolumesDeleteOptionsVolumeIDs := []string{"testString"}
				pcloudV2VolumesDeleteOptionsModel := powervsService.NewPcloudV2VolumesDeleteOptions(cloudInstanceID, pcloudV2VolumesDeleteOptionsVolumeIDs)
				pcloudV2VolumesDeleteOptionsModel.SetCloudInstanceID("testString")
				pcloudV2VolumesDeleteOptionsModel.SetVolumeIDs([]string{"testString"})
				pcloudV2VolumesDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudV2VolumesDeleteOptionsModel).ToNot(BeNil())
				Expect(pcloudV2VolumesDeleteOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2VolumesDeleteOptionsModel.VolumeIDs).To(Equal([]string{"testString"}))
				Expect(pcloudV2VolumesDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudV2VolumesPostOptions successfully`, func() {
				// Construct an instance of the PcloudV2VolumesPostOptions model
				cloudInstanceID := "testString"
				pcloudV2VolumesPostOptionsName := "testString"
				pcloudV2VolumesPostOptionsSize := int64(38)
				pcloudV2VolumesPostOptionsModel := powervsService.NewPcloudV2VolumesPostOptions(cloudInstanceID, pcloudV2VolumesPostOptionsName, pcloudV2VolumesPostOptionsSize)
				pcloudV2VolumesPostOptionsModel.SetCloudInstanceID("testString")
				pcloudV2VolumesPostOptionsModel.SetName("testString")
				pcloudV2VolumesPostOptionsModel.SetSize(int64(38))
				pcloudV2VolumesPostOptionsModel.SetAffinityPvmInstance("testString")
				pcloudV2VolumesPostOptionsModel.SetAffinityPolicy("affinity")
				pcloudV2VolumesPostOptionsModel.SetAffinityVolume("testString")
				pcloudV2VolumesPostOptionsModel.SetAntiAffinityPvmInstances([]string{"testString"})
				pcloudV2VolumesPostOptionsModel.SetAntiAffinityVolumes([]string{"testString"})
				pcloudV2VolumesPostOptionsModel.SetCount(int64(38))
				pcloudV2VolumesPostOptionsModel.SetDiskType("testString")
				pcloudV2VolumesPostOptionsModel.SetReplicationEnabled(true)
				pcloudV2VolumesPostOptionsModel.SetShareable(true)
				pcloudV2VolumesPostOptionsModel.SetVolumePool("testString")
				pcloudV2VolumesPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudV2VolumesPostOptionsModel).ToNot(BeNil())
				Expect(pcloudV2VolumesPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2VolumesPostOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2VolumesPostOptionsModel.Size).To(Equal(core.Int64Ptr(int64(38))))
				Expect(pcloudV2VolumesPostOptionsModel.AffinityPvmInstance).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2VolumesPostOptionsModel.AffinityPolicy).To(Equal(core.StringPtr("affinity")))
				Expect(pcloudV2VolumesPostOptionsModel.AffinityVolume).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2VolumesPostOptionsModel.AntiAffinityPvmInstances).To(Equal([]string{"testString"}))
				Expect(pcloudV2VolumesPostOptionsModel.AntiAffinityVolumes).To(Equal([]string{"testString"}))
				Expect(pcloudV2VolumesPostOptionsModel.Count).To(Equal(core.Int64Ptr(int64(38))))
				Expect(pcloudV2VolumesPostOptionsModel.DiskType).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2VolumesPostOptionsModel.ReplicationEnabled).To(Equal(core.BoolPtr(true)))
				Expect(pcloudV2VolumesPostOptionsModel.Shareable).To(Equal(core.BoolPtr(true)))
				Expect(pcloudV2VolumesPostOptionsModel.VolumePool).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2VolumesPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudV2VolumescloneCancelPostOptions successfully`, func() {
				// Construct an instance of the PcloudV2VolumescloneCancelPostOptions model
				cloudInstanceID := "testString"
				volumesCloneID := "testString"
				pcloudV2VolumescloneCancelPostOptionsModel := powervsService.NewPcloudV2VolumescloneCancelPostOptions(cloudInstanceID, volumesCloneID)
				pcloudV2VolumescloneCancelPostOptionsModel.SetCloudInstanceID("testString")
				pcloudV2VolumescloneCancelPostOptionsModel.SetVolumesCloneID("testString")
				pcloudV2VolumescloneCancelPostOptionsModel.SetForce(true)
				pcloudV2VolumescloneCancelPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudV2VolumescloneCancelPostOptionsModel).ToNot(BeNil())
				Expect(pcloudV2VolumescloneCancelPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2VolumescloneCancelPostOptionsModel.VolumesCloneID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2VolumescloneCancelPostOptionsModel.Force).To(Equal(core.BoolPtr(true)))
				Expect(pcloudV2VolumescloneCancelPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudV2VolumescloneDeleteOptions successfully`, func() {
				// Construct an instance of the PcloudV2VolumescloneDeleteOptions model
				cloudInstanceID := "testString"
				volumesCloneID := "testString"
				pcloudV2VolumescloneDeleteOptionsModel := powervsService.NewPcloudV2VolumescloneDeleteOptions(cloudInstanceID, volumesCloneID)
				pcloudV2VolumescloneDeleteOptionsModel.SetCloudInstanceID("testString")
				pcloudV2VolumescloneDeleteOptionsModel.SetVolumesCloneID("testString")
				pcloudV2VolumescloneDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudV2VolumescloneDeleteOptionsModel).ToNot(BeNil())
				Expect(pcloudV2VolumescloneDeleteOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2VolumescloneDeleteOptionsModel.VolumesCloneID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2VolumescloneDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudV2VolumescloneExecutePostOptions successfully`, func() {
				// Construct an instance of the PcloudV2VolumescloneExecutePostOptions model
				cloudInstanceID := "testString"
				volumesCloneID := "testString"
				pcloudV2VolumescloneExecutePostOptionsName := "testString"
				pcloudV2VolumescloneExecutePostOptionsModel := powervsService.NewPcloudV2VolumescloneExecutePostOptions(cloudInstanceID, volumesCloneID, pcloudV2VolumescloneExecutePostOptionsName)
				pcloudV2VolumescloneExecutePostOptionsModel.SetCloudInstanceID("testString")
				pcloudV2VolumescloneExecutePostOptionsModel.SetVolumesCloneID("testString")
				pcloudV2VolumescloneExecutePostOptionsModel.SetName("testString")
				pcloudV2VolumescloneExecutePostOptionsModel.SetRollbackPrepare(true)
				pcloudV2VolumescloneExecutePostOptionsModel.SetTargetReplicationEnabled(true)
				pcloudV2VolumescloneExecutePostOptionsModel.SetTargetStorageTier("testString")
				pcloudV2VolumescloneExecutePostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudV2VolumescloneExecutePostOptionsModel).ToNot(BeNil())
				Expect(pcloudV2VolumescloneExecutePostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2VolumescloneExecutePostOptionsModel.VolumesCloneID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2VolumescloneExecutePostOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2VolumescloneExecutePostOptionsModel.RollbackPrepare).To(Equal(core.BoolPtr(true)))
				Expect(pcloudV2VolumescloneExecutePostOptionsModel.TargetReplicationEnabled).To(Equal(core.BoolPtr(true)))
				Expect(pcloudV2VolumescloneExecutePostOptionsModel.TargetStorageTier).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2VolumescloneExecutePostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudV2VolumescloneGetOptions successfully`, func() {
				// Construct an instance of the PcloudV2VolumescloneGetOptions model
				cloudInstanceID := "testString"
				volumesCloneID := "testString"
				pcloudV2VolumescloneGetOptionsModel := powervsService.NewPcloudV2VolumescloneGetOptions(cloudInstanceID, volumesCloneID)
				pcloudV2VolumescloneGetOptionsModel.SetCloudInstanceID("testString")
				pcloudV2VolumescloneGetOptionsModel.SetVolumesCloneID("testString")
				pcloudV2VolumescloneGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudV2VolumescloneGetOptionsModel).ToNot(BeNil())
				Expect(pcloudV2VolumescloneGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2VolumescloneGetOptionsModel.VolumesCloneID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2VolumescloneGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudV2VolumescloneGetallOptions successfully`, func() {
				// Construct an instance of the PcloudV2VolumescloneGetallOptions model
				cloudInstanceID := "testString"
				pcloudV2VolumescloneGetallOptionsModel := powervsService.NewPcloudV2VolumescloneGetallOptions(cloudInstanceID)
				pcloudV2VolumescloneGetallOptionsModel.SetCloudInstanceID("testString")
				pcloudV2VolumescloneGetallOptionsModel.SetFilter("prepare")
				pcloudV2VolumescloneGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudV2VolumescloneGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudV2VolumescloneGetallOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2VolumescloneGetallOptionsModel.Filter).To(Equal(core.StringPtr("prepare")))
				Expect(pcloudV2VolumescloneGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudV2VolumesclonePostOptions successfully`, func() {
				// Construct an instance of the PcloudV2VolumesclonePostOptions model
				cloudInstanceID := "testString"
				pcloudV2VolumesclonePostOptionsName := "testString"
				pcloudV2VolumesclonePostOptionsVolumeIDs := []string{"testString"}
				pcloudV2VolumesclonePostOptionsModel := powervsService.NewPcloudV2VolumesclonePostOptions(cloudInstanceID, pcloudV2VolumesclonePostOptionsName, pcloudV2VolumesclonePostOptionsVolumeIDs)
				pcloudV2VolumesclonePostOptionsModel.SetCloudInstanceID("testString")
				pcloudV2VolumesclonePostOptionsModel.SetName("testString")
				pcloudV2VolumesclonePostOptionsModel.SetVolumeIDs([]string{"testString"})
				pcloudV2VolumesclonePostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudV2VolumesclonePostOptionsModel).ToNot(BeNil())
				Expect(pcloudV2VolumesclonePostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2VolumesclonePostOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2VolumesclonePostOptionsModel.VolumeIDs).To(Equal([]string{"testString"}))
				Expect(pcloudV2VolumesclonePostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudV2VolumescloneStartPostOptions successfully`, func() {
				// Construct an instance of the PcloudV2VolumescloneStartPostOptions model
				cloudInstanceID := "testString"
				volumesCloneID := "testString"
				pcloudV2VolumescloneStartPostOptionsModel := powervsService.NewPcloudV2VolumescloneStartPostOptions(cloudInstanceID, volumesCloneID)
				pcloudV2VolumescloneStartPostOptionsModel.SetCloudInstanceID("testString")
				pcloudV2VolumescloneStartPostOptionsModel.SetVolumesCloneID("testString")
				pcloudV2VolumescloneStartPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudV2VolumescloneStartPostOptionsModel).ToNot(BeNil())
				Expect(pcloudV2VolumescloneStartPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2VolumescloneStartPostOptionsModel.VolumesCloneID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudV2VolumescloneStartPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudVolumeOnboardingGetOptions successfully`, func() {
				// Construct an instance of the PcloudVolumeOnboardingGetOptions model
				cloudInstanceID := "testString"
				volumeOnboardingID := "testString"
				pcloudVolumeOnboardingGetOptionsModel := powervsService.NewPcloudVolumeOnboardingGetOptions(cloudInstanceID, volumeOnboardingID)
				pcloudVolumeOnboardingGetOptionsModel.SetCloudInstanceID("testString")
				pcloudVolumeOnboardingGetOptionsModel.SetVolumeOnboardingID("testString")
				pcloudVolumeOnboardingGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudVolumeOnboardingGetOptionsModel).ToNot(BeNil())
				Expect(pcloudVolumeOnboardingGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVolumeOnboardingGetOptionsModel.VolumeOnboardingID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVolumeOnboardingGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudVolumeOnboardingGetallOptions successfully`, func() {
				// Construct an instance of the PcloudVolumeOnboardingGetallOptions model
				cloudInstanceID := "testString"
				pcloudVolumeOnboardingGetallOptionsModel := powervsService.NewPcloudVolumeOnboardingGetallOptions(cloudInstanceID)
				pcloudVolumeOnboardingGetallOptionsModel.SetCloudInstanceID("testString")
				pcloudVolumeOnboardingGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudVolumeOnboardingGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudVolumeOnboardingGetallOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVolumeOnboardingGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudVolumeOnboardingPostOptions successfully`, func() {
				// Construct an instance of the AuxiliaryVolumeForOnboarding model
				auxiliaryVolumeForOnboardingModel := new(powervsv1.AuxiliaryVolumeForOnboarding)
				Expect(auxiliaryVolumeForOnboardingModel).ToNot(BeNil())
				auxiliaryVolumeForOnboardingModel.AuxVolumeName = core.StringPtr("testString")
				auxiliaryVolumeForOnboardingModel.Name = core.StringPtr("testString")
				Expect(auxiliaryVolumeForOnboardingModel.AuxVolumeName).To(Equal(core.StringPtr("testString")))
				Expect(auxiliaryVolumeForOnboardingModel.Name).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the AuxiliaryVolumesForOnboarding model
				auxiliaryVolumesForOnboardingModel := new(powervsv1.AuxiliaryVolumesForOnboarding)
				Expect(auxiliaryVolumesForOnboardingModel).ToNot(BeNil())
				auxiliaryVolumesForOnboardingModel.AuxiliaryVolumes = []powervsv1.AuxiliaryVolumeForOnboarding{*auxiliaryVolumeForOnboardingModel}
				auxiliaryVolumesForOnboardingModel.SourceCRN = core.StringPtr("testString")
				Expect(auxiliaryVolumesForOnboardingModel.AuxiliaryVolumes).To(Equal([]powervsv1.AuxiliaryVolumeForOnboarding{*auxiliaryVolumeForOnboardingModel}))
				Expect(auxiliaryVolumesForOnboardingModel.SourceCRN).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the PcloudVolumeOnboardingPostOptions model
				cloudInstanceID := "testString"
				pcloudVolumeOnboardingPostOptionsVolumes := []powervsv1.AuxiliaryVolumesForOnboarding{}
				pcloudVolumeOnboardingPostOptionsModel := powervsService.NewPcloudVolumeOnboardingPostOptions(cloudInstanceID, pcloudVolumeOnboardingPostOptionsVolumes)
				pcloudVolumeOnboardingPostOptionsModel.SetCloudInstanceID("testString")
				pcloudVolumeOnboardingPostOptionsModel.SetVolumes([]powervsv1.AuxiliaryVolumesForOnboarding{*auxiliaryVolumesForOnboardingModel})
				pcloudVolumeOnboardingPostOptionsModel.SetDescription("testString")
				pcloudVolumeOnboardingPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudVolumeOnboardingPostOptionsModel).ToNot(BeNil())
				Expect(pcloudVolumeOnboardingPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVolumeOnboardingPostOptionsModel.Volumes).To(Equal([]powervsv1.AuxiliaryVolumesForOnboarding{*auxiliaryVolumesForOnboardingModel}))
				Expect(pcloudVolumeOnboardingPostOptionsModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVolumeOnboardingPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudVolumegroupsActionPostOptions successfully`, func() {
				// Construct an instance of the VolumeGroupActionReset model
				volumeGroupActionResetModel := new(powervsv1.VolumeGroupActionReset)
				Expect(volumeGroupActionResetModel).ToNot(BeNil())
				volumeGroupActionResetModel.Status = core.StringPtr("available")
				Expect(volumeGroupActionResetModel.Status).To(Equal(core.StringPtr("available")))

				// Construct an instance of the VolumeGroupActionStart model
				volumeGroupActionStartModel := new(powervsv1.VolumeGroupActionStart)
				Expect(volumeGroupActionStartModel).ToNot(BeNil())
				volumeGroupActionStartModel.Source = core.StringPtr("master")
				Expect(volumeGroupActionStartModel.Source).To(Equal(core.StringPtr("master")))

				// Construct an instance of the VolumeGroupActionStop model
				volumeGroupActionStopModel := new(powervsv1.VolumeGroupActionStop)
				Expect(volumeGroupActionStopModel).ToNot(BeNil())
				volumeGroupActionStopModel.Access = core.BoolPtr(true)
				Expect(volumeGroupActionStopModel.Access).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the VolumeGroupAction model
				volumeGroupActionModel := new(powervsv1.VolumeGroupAction)
				Expect(volumeGroupActionModel).ToNot(BeNil())
				volumeGroupActionModel.Reset = volumeGroupActionResetModel
				volumeGroupActionModel.Start = volumeGroupActionStartModel
				volumeGroupActionModel.Stop = volumeGroupActionStopModel
				volumeGroupActionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(volumeGroupActionModel.Reset).To(Equal(volumeGroupActionResetModel))
				Expect(volumeGroupActionModel.Start).To(Equal(volumeGroupActionStartModel))
				Expect(volumeGroupActionModel.Stop).To(Equal(volumeGroupActionStopModel))
				Expect(volumeGroupActionModel.GetProperties()).ToNot(BeEmpty())
				Expect(volumeGroupActionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				volumeGroupActionModel.SetProperties(nil)
				Expect(volumeGroupActionModel.GetProperties()).To(BeEmpty())

				volumeGroupActionModelExpectedMap := make(map[string]interface{})
				volumeGroupActionModelExpectedMap["foo"] = core.StringPtr("testString")
				volumeGroupActionModel.SetProperties(volumeGroupActionModelExpectedMap)
				volumeGroupActionModelActualMap := volumeGroupActionModel.GetProperties()
				Expect(volumeGroupActionModelActualMap).To(Equal(volumeGroupActionModelExpectedMap))

				// Construct an instance of the PcloudVolumegroupsActionPostOptions model
				cloudInstanceID := "testString"
				volumeGroupID := "testString"
				var body *powervsv1.VolumeGroupAction = nil
				pcloudVolumegroupsActionPostOptionsModel := powervsService.NewPcloudVolumegroupsActionPostOptions(cloudInstanceID, volumeGroupID, body)
				pcloudVolumegroupsActionPostOptionsModel.SetCloudInstanceID("testString")
				pcloudVolumegroupsActionPostOptionsModel.SetVolumeGroupID("testString")
				pcloudVolumegroupsActionPostOptionsModel.SetBody(volumeGroupActionModel)
				pcloudVolumegroupsActionPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudVolumegroupsActionPostOptionsModel).ToNot(BeNil())
				Expect(pcloudVolumegroupsActionPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVolumegroupsActionPostOptionsModel.VolumeGroupID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVolumegroupsActionPostOptionsModel.Body).To(Equal(volumeGroupActionModel))
				Expect(pcloudVolumegroupsActionPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudVolumegroupsDeleteOptions successfully`, func() {
				// Construct an instance of the PcloudVolumegroupsDeleteOptions model
				cloudInstanceID := "testString"
				volumeGroupID := "testString"
				pcloudVolumegroupsDeleteOptionsModel := powervsService.NewPcloudVolumegroupsDeleteOptions(cloudInstanceID, volumeGroupID)
				pcloudVolumegroupsDeleteOptionsModel.SetCloudInstanceID("testString")
				pcloudVolumegroupsDeleteOptionsModel.SetVolumeGroupID("testString")
				pcloudVolumegroupsDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudVolumegroupsDeleteOptionsModel).ToNot(BeNil())
				Expect(pcloudVolumegroupsDeleteOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVolumegroupsDeleteOptionsModel.VolumeGroupID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVolumegroupsDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudVolumegroupsGetDetailsOptions successfully`, func() {
				// Construct an instance of the PcloudVolumegroupsGetDetailsOptions model
				cloudInstanceID := "testString"
				volumeGroupID := "testString"
				pcloudVolumegroupsGetDetailsOptionsModel := powervsService.NewPcloudVolumegroupsGetDetailsOptions(cloudInstanceID, volumeGroupID)
				pcloudVolumegroupsGetDetailsOptionsModel.SetCloudInstanceID("testString")
				pcloudVolumegroupsGetDetailsOptionsModel.SetVolumeGroupID("testString")
				pcloudVolumegroupsGetDetailsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudVolumegroupsGetDetailsOptionsModel).ToNot(BeNil())
				Expect(pcloudVolumegroupsGetDetailsOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVolumegroupsGetDetailsOptionsModel.VolumeGroupID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVolumegroupsGetDetailsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudVolumegroupsGetOptions successfully`, func() {
				// Construct an instance of the PcloudVolumegroupsGetOptions model
				cloudInstanceID := "testString"
				volumeGroupID := "testString"
				pcloudVolumegroupsGetOptionsModel := powervsService.NewPcloudVolumegroupsGetOptions(cloudInstanceID, volumeGroupID)
				pcloudVolumegroupsGetOptionsModel.SetCloudInstanceID("testString")
				pcloudVolumegroupsGetOptionsModel.SetVolumeGroupID("testString")
				pcloudVolumegroupsGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudVolumegroupsGetOptionsModel).ToNot(BeNil())
				Expect(pcloudVolumegroupsGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVolumegroupsGetOptionsModel.VolumeGroupID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVolumegroupsGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudVolumegroupsGetallDetailsOptions successfully`, func() {
				// Construct an instance of the PcloudVolumegroupsGetallDetailsOptions model
				cloudInstanceID := "testString"
				pcloudVolumegroupsGetallDetailsOptionsModel := powervsService.NewPcloudVolumegroupsGetallDetailsOptions(cloudInstanceID)
				pcloudVolumegroupsGetallDetailsOptionsModel.SetCloudInstanceID("testString")
				pcloudVolumegroupsGetallDetailsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudVolumegroupsGetallDetailsOptionsModel).ToNot(BeNil())
				Expect(pcloudVolumegroupsGetallDetailsOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVolumegroupsGetallDetailsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudVolumegroupsGetallOptions successfully`, func() {
				// Construct an instance of the PcloudVolumegroupsGetallOptions model
				cloudInstanceID := "testString"
				pcloudVolumegroupsGetallOptionsModel := powervsService.NewPcloudVolumegroupsGetallOptions(cloudInstanceID)
				pcloudVolumegroupsGetallOptionsModel.SetCloudInstanceID("testString")
				pcloudVolumegroupsGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudVolumegroupsGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudVolumegroupsGetallOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVolumegroupsGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudVolumegroupsPostOptions successfully`, func() {
				// Construct an instance of the PcloudVolumegroupsPostOptions model
				cloudInstanceID := "testString"
				pcloudVolumegroupsPostOptionsVolumeIDs := []string{"testString"}
				pcloudVolumegroupsPostOptionsModel := powervsService.NewPcloudVolumegroupsPostOptions(cloudInstanceID, pcloudVolumegroupsPostOptionsVolumeIDs)
				pcloudVolumegroupsPostOptionsModel.SetCloudInstanceID("testString")
				pcloudVolumegroupsPostOptionsModel.SetVolumeIDs([]string{"testString"})
				pcloudVolumegroupsPostOptionsModel.SetConsistencyGroupName("testString")
				pcloudVolumegroupsPostOptionsModel.SetName("testString")
				pcloudVolumegroupsPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudVolumegroupsPostOptionsModel).ToNot(BeNil())
				Expect(pcloudVolumegroupsPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVolumegroupsPostOptionsModel.VolumeIDs).To(Equal([]string{"testString"}))
				Expect(pcloudVolumegroupsPostOptionsModel.ConsistencyGroupName).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVolumegroupsPostOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVolumegroupsPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudVolumegroupsPutOptions successfully`, func() {
				// Construct an instance of the PcloudVolumegroupsPutOptions model
				cloudInstanceID := "testString"
				volumeGroupID := "testString"
				pcloudVolumegroupsPutOptionsModel := powervsService.NewPcloudVolumegroupsPutOptions(cloudInstanceID, volumeGroupID)
				pcloudVolumegroupsPutOptionsModel.SetCloudInstanceID("testString")
				pcloudVolumegroupsPutOptionsModel.SetVolumeGroupID("testString")
				pcloudVolumegroupsPutOptionsModel.SetAddVolumes([]string{"testString"})
				pcloudVolumegroupsPutOptionsModel.SetRemoveVolumes([]string{"testString"})
				pcloudVolumegroupsPutOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudVolumegroupsPutOptionsModel).ToNot(BeNil())
				Expect(pcloudVolumegroupsPutOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVolumegroupsPutOptionsModel.VolumeGroupID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVolumegroupsPutOptionsModel.AddVolumes).To(Equal([]string{"testString"}))
				Expect(pcloudVolumegroupsPutOptionsModel.RemoveVolumes).To(Equal([]string{"testString"}))
				Expect(pcloudVolumegroupsPutOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudVolumegroupsRemoteCopyRelationshipsGetOptions successfully`, func() {
				// Construct an instance of the PcloudVolumegroupsRemoteCopyRelationshipsGetOptions model
				cloudInstanceID := "testString"
				volumeGroupID := "testString"
				pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel := powervsService.NewPcloudVolumegroupsRemoteCopyRelationshipsGetOptions(cloudInstanceID, volumeGroupID)
				pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel.SetCloudInstanceID("testString")
				pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel.SetVolumeGroupID("testString")
				pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel).ToNot(BeNil())
				Expect(pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel.VolumeGroupID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVolumegroupsRemoteCopyRelationshipsGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudVolumegroupsStorageDetailsGetOptions successfully`, func() {
				// Construct an instance of the PcloudVolumegroupsStorageDetailsGetOptions model
				cloudInstanceID := "testString"
				volumeGroupID := "testString"
				pcloudVolumegroupsStorageDetailsGetOptionsModel := powervsService.NewPcloudVolumegroupsStorageDetailsGetOptions(cloudInstanceID, volumeGroupID)
				pcloudVolumegroupsStorageDetailsGetOptionsModel.SetCloudInstanceID("testString")
				pcloudVolumegroupsStorageDetailsGetOptionsModel.SetVolumeGroupID("testString")
				pcloudVolumegroupsStorageDetailsGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudVolumegroupsStorageDetailsGetOptionsModel).ToNot(BeNil())
				Expect(pcloudVolumegroupsStorageDetailsGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVolumegroupsStorageDetailsGetOptionsModel.VolumeGroupID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVolumegroupsStorageDetailsGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudVolumesClonePostOptions successfully`, func() {
				// Construct an instance of the PcloudVolumesClonePostOptions model
				cloudInstanceID := "testString"
				pcloudVolumesClonePostOptionsDisplayName := "testString"
				pcloudVolumesClonePostOptionsVolumeIDs := []string{"testString"}
				pcloudVolumesClonePostOptionsModel := powervsService.NewPcloudVolumesClonePostOptions(cloudInstanceID, pcloudVolumesClonePostOptionsDisplayName, pcloudVolumesClonePostOptionsVolumeIDs)
				pcloudVolumesClonePostOptionsModel.SetCloudInstanceID("testString")
				pcloudVolumesClonePostOptionsModel.SetDisplayName("testString")
				pcloudVolumesClonePostOptionsModel.SetVolumeIDs([]string{"testString"})
				pcloudVolumesClonePostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudVolumesClonePostOptionsModel).ToNot(BeNil())
				Expect(pcloudVolumesClonePostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVolumesClonePostOptionsModel.DisplayName).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVolumesClonePostOptionsModel.VolumeIDs).To(Equal([]string{"testString"}))
				Expect(pcloudVolumesClonePostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudVpnconnectionsDeleteOptions successfully`, func() {
				// Construct an instance of the PcloudVpnconnectionsDeleteOptions model
				cloudInstanceID := "testString"
				vpnConnectionID := "testString"
				pcloudVpnconnectionsDeleteOptionsModel := powervsService.NewPcloudVpnconnectionsDeleteOptions(cloudInstanceID, vpnConnectionID)
				pcloudVpnconnectionsDeleteOptionsModel.SetCloudInstanceID("testString")
				pcloudVpnconnectionsDeleteOptionsModel.SetVPNConnectionID("testString")
				pcloudVpnconnectionsDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudVpnconnectionsDeleteOptionsModel).ToNot(BeNil())
				Expect(pcloudVpnconnectionsDeleteOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVpnconnectionsDeleteOptionsModel.VPNConnectionID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVpnconnectionsDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudVpnconnectionsGetOptions successfully`, func() {
				// Construct an instance of the PcloudVpnconnectionsGetOptions model
				cloudInstanceID := "testString"
				vpnConnectionID := "testString"
				pcloudVpnconnectionsGetOptionsModel := powervsService.NewPcloudVpnconnectionsGetOptions(cloudInstanceID, vpnConnectionID)
				pcloudVpnconnectionsGetOptionsModel.SetCloudInstanceID("testString")
				pcloudVpnconnectionsGetOptionsModel.SetVPNConnectionID("testString")
				pcloudVpnconnectionsGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudVpnconnectionsGetOptionsModel).ToNot(BeNil())
				Expect(pcloudVpnconnectionsGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVpnconnectionsGetOptionsModel.VPNConnectionID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVpnconnectionsGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudVpnconnectionsGetallOptions successfully`, func() {
				// Construct an instance of the PcloudVpnconnectionsGetallOptions model
				cloudInstanceID := "testString"
				pcloudVpnconnectionsGetallOptionsModel := powervsService.NewPcloudVpnconnectionsGetallOptions(cloudInstanceID)
				pcloudVpnconnectionsGetallOptionsModel.SetCloudInstanceID("testString")
				pcloudVpnconnectionsGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudVpnconnectionsGetallOptionsModel).ToNot(BeNil())
				Expect(pcloudVpnconnectionsGetallOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVpnconnectionsGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudVpnconnectionsNetworksDeleteOptions successfully`, func() {
				// Construct an instance of the PcloudVpnconnectionsNetworksDeleteOptions model
				cloudInstanceID := "testString"
				vpnConnectionID := "testString"
				pcloudVpnconnectionsNetworksDeleteOptionsNetworkID := "7f950c76-8582-11qeb-8dcd-0242ac172"
				pcloudVpnconnectionsNetworksDeleteOptionsModel := powervsService.NewPcloudVpnconnectionsNetworksDeleteOptions(cloudInstanceID, vpnConnectionID, pcloudVpnconnectionsNetworksDeleteOptionsNetworkID)
				pcloudVpnconnectionsNetworksDeleteOptionsModel.SetCloudInstanceID("testString")
				pcloudVpnconnectionsNetworksDeleteOptionsModel.SetVPNConnectionID("testString")
				pcloudVpnconnectionsNetworksDeleteOptionsModel.SetNetworkID("7f950c76-8582-11qeb-8dcd-0242ac172")
				pcloudVpnconnectionsNetworksDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudVpnconnectionsNetworksDeleteOptionsModel).ToNot(BeNil())
				Expect(pcloudVpnconnectionsNetworksDeleteOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVpnconnectionsNetworksDeleteOptionsModel.VPNConnectionID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVpnconnectionsNetworksDeleteOptionsModel.NetworkID).To(Equal(core.StringPtr("7f950c76-8582-11qeb-8dcd-0242ac172")))
				Expect(pcloudVpnconnectionsNetworksDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudVpnconnectionsNetworksGetOptions successfully`, func() {
				// Construct an instance of the PcloudVpnconnectionsNetworksGetOptions model
				cloudInstanceID := "testString"
				vpnConnectionID := "testString"
				pcloudVpnconnectionsNetworksGetOptionsModel := powervsService.NewPcloudVpnconnectionsNetworksGetOptions(cloudInstanceID, vpnConnectionID)
				pcloudVpnconnectionsNetworksGetOptionsModel.SetCloudInstanceID("testString")
				pcloudVpnconnectionsNetworksGetOptionsModel.SetVPNConnectionID("testString")
				pcloudVpnconnectionsNetworksGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudVpnconnectionsNetworksGetOptionsModel).ToNot(BeNil())
				Expect(pcloudVpnconnectionsNetworksGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVpnconnectionsNetworksGetOptionsModel.VPNConnectionID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVpnconnectionsNetworksGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudVpnconnectionsNetworksPutOptions successfully`, func() {
				// Construct an instance of the PcloudVpnconnectionsNetworksPutOptions model
				cloudInstanceID := "testString"
				vpnConnectionID := "testString"
				pcloudVpnconnectionsNetworksPutOptionsNetworkID := "7f950c76-8582-11qeb-8dcd-0242ac172"
				pcloudVpnconnectionsNetworksPutOptionsModel := powervsService.NewPcloudVpnconnectionsNetworksPutOptions(cloudInstanceID, vpnConnectionID, pcloudVpnconnectionsNetworksPutOptionsNetworkID)
				pcloudVpnconnectionsNetworksPutOptionsModel.SetCloudInstanceID("testString")
				pcloudVpnconnectionsNetworksPutOptionsModel.SetVPNConnectionID("testString")
				pcloudVpnconnectionsNetworksPutOptionsModel.SetNetworkID("7f950c76-8582-11qeb-8dcd-0242ac172")
				pcloudVpnconnectionsNetworksPutOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudVpnconnectionsNetworksPutOptionsModel).ToNot(BeNil())
				Expect(pcloudVpnconnectionsNetworksPutOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVpnconnectionsNetworksPutOptionsModel.VPNConnectionID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVpnconnectionsNetworksPutOptionsModel.NetworkID).To(Equal(core.StringPtr("7f950c76-8582-11qeb-8dcd-0242ac172")))
				Expect(pcloudVpnconnectionsNetworksPutOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudVpnconnectionsPeersubnetsDeleteOptions successfully`, func() {
				// Construct an instance of the PcloudVpnconnectionsPeersubnetsDeleteOptions model
				cloudInstanceID := "testString"
				vpnConnectionID := "testString"
				pcloudVpnconnectionsPeersubnetsDeleteOptionsCIDR := "128.170.1.0/32"
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel := powervsService.NewPcloudVpnconnectionsPeersubnetsDeleteOptions(cloudInstanceID, vpnConnectionID, pcloudVpnconnectionsPeersubnetsDeleteOptionsCIDR)
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel.SetCloudInstanceID("testString")
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel.SetVPNConnectionID("testString")
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel.SetCIDR("128.170.1.0/32")
				pcloudVpnconnectionsPeersubnetsDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudVpnconnectionsPeersubnetsDeleteOptionsModel).ToNot(BeNil())
				Expect(pcloudVpnconnectionsPeersubnetsDeleteOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVpnconnectionsPeersubnetsDeleteOptionsModel.VPNConnectionID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVpnconnectionsPeersubnetsDeleteOptionsModel.CIDR).To(Equal(core.StringPtr("128.170.1.0/32")))
				Expect(pcloudVpnconnectionsPeersubnetsDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudVpnconnectionsPeersubnetsGetOptions successfully`, func() {
				// Construct an instance of the PcloudVpnconnectionsPeersubnetsGetOptions model
				cloudInstanceID := "testString"
				vpnConnectionID := "testString"
				pcloudVpnconnectionsPeersubnetsGetOptionsModel := powervsService.NewPcloudVpnconnectionsPeersubnetsGetOptions(cloudInstanceID, vpnConnectionID)
				pcloudVpnconnectionsPeersubnetsGetOptionsModel.SetCloudInstanceID("testString")
				pcloudVpnconnectionsPeersubnetsGetOptionsModel.SetVPNConnectionID("testString")
				pcloudVpnconnectionsPeersubnetsGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudVpnconnectionsPeersubnetsGetOptionsModel).ToNot(BeNil())
				Expect(pcloudVpnconnectionsPeersubnetsGetOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVpnconnectionsPeersubnetsGetOptionsModel.VPNConnectionID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVpnconnectionsPeersubnetsGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudVpnconnectionsPeersubnetsPutOptions successfully`, func() {
				// Construct an instance of the PcloudVpnconnectionsPeersubnetsPutOptions model
				cloudInstanceID := "testString"
				vpnConnectionID := "testString"
				pcloudVpnconnectionsPeersubnetsPutOptionsCIDR := "128.170.1.0/32"
				pcloudVpnconnectionsPeersubnetsPutOptionsModel := powervsService.NewPcloudVpnconnectionsPeersubnetsPutOptions(cloudInstanceID, vpnConnectionID, pcloudVpnconnectionsPeersubnetsPutOptionsCIDR)
				pcloudVpnconnectionsPeersubnetsPutOptionsModel.SetCloudInstanceID("testString")
				pcloudVpnconnectionsPeersubnetsPutOptionsModel.SetVPNConnectionID("testString")
				pcloudVpnconnectionsPeersubnetsPutOptionsModel.SetCIDR("128.170.1.0/32")
				pcloudVpnconnectionsPeersubnetsPutOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudVpnconnectionsPeersubnetsPutOptionsModel).ToNot(BeNil())
				Expect(pcloudVpnconnectionsPeersubnetsPutOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVpnconnectionsPeersubnetsPutOptionsModel.VPNConnectionID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVpnconnectionsPeersubnetsPutOptionsModel.CIDR).To(Equal(core.StringPtr("128.170.1.0/32")))
				Expect(pcloudVpnconnectionsPeersubnetsPutOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudVpnconnectionsPostOptions successfully`, func() {
				// Construct an instance of the PcloudVpnconnectionsPostOptions model
				cloudInstanceID := "testString"
				pcloudVpnconnectionsPostOptionsIkePolicy := "c36723ec-8593-11eb-8dcd-0242ac133853"
				pcloudVpnconnectionsPostOptionsIPSecPolicy := "c12345d-8593-11eb-8dcd-0242ac134573"
				pcloudVpnconnectionsPostOptionsMode := "policy"
				pcloudVpnconnectionsPostOptionsName := "VPN-Connection-1"
				pcloudVpnconnectionsPostOptionsNetworks := []string{"7f950c76-8582-11veb-8dcd-0242ac153", "7f950c76-8582-11veb-8dcd-0242ac144", "7f950c76-8582-11veb-8dcd-0242ac199"}
				pcloudVpnconnectionsPostOptionsPeerGatewayAddress := "192.168.1.1"
				pcloudVpnconnectionsPostOptionsPeerSubnets := []string{"128.170.1.0/20", "128.169.1.0/24", "128.168.1.0/27", "128.170.1.0/32"}
				pcloudVpnconnectionsPostOptionsModel := powervsService.NewPcloudVpnconnectionsPostOptions(cloudInstanceID, pcloudVpnconnectionsPostOptionsIkePolicy, pcloudVpnconnectionsPostOptionsIPSecPolicy, pcloudVpnconnectionsPostOptionsMode, pcloudVpnconnectionsPostOptionsName, pcloudVpnconnectionsPostOptionsNetworks, pcloudVpnconnectionsPostOptionsPeerGatewayAddress, pcloudVpnconnectionsPostOptionsPeerSubnets)
				pcloudVpnconnectionsPostOptionsModel.SetCloudInstanceID("testString")
				pcloudVpnconnectionsPostOptionsModel.SetIkePolicy("c36723ec-8593-11eb-8dcd-0242ac133853")
				pcloudVpnconnectionsPostOptionsModel.SetIPSecPolicy("c12345d-8593-11eb-8dcd-0242ac134573")
				pcloudVpnconnectionsPostOptionsModel.SetMode("policy")
				pcloudVpnconnectionsPostOptionsModel.SetName("VPN-Connection-1")
				pcloudVpnconnectionsPostOptionsModel.SetNetworks([]string{"7f950c76-8582-11veb-8dcd-0242ac153", "7f950c76-8582-11veb-8dcd-0242ac144", "7f950c76-8582-11veb-8dcd-0242ac199"})
				pcloudVpnconnectionsPostOptionsModel.SetPeerGatewayAddress("192.168.1.1")
				pcloudVpnconnectionsPostOptionsModel.SetPeerSubnets([]string{"128.170.1.0/20", "128.169.1.0/24", "128.168.1.0/27", "128.170.1.0/32"})
				pcloudVpnconnectionsPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudVpnconnectionsPostOptionsModel).ToNot(BeNil())
				Expect(pcloudVpnconnectionsPostOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVpnconnectionsPostOptionsModel.IkePolicy).To(Equal(core.StringPtr("c36723ec-8593-11eb-8dcd-0242ac133853")))
				Expect(pcloudVpnconnectionsPostOptionsModel.IPSecPolicy).To(Equal(core.StringPtr("c12345d-8593-11eb-8dcd-0242ac134573")))
				Expect(pcloudVpnconnectionsPostOptionsModel.Mode).To(Equal(core.StringPtr("policy")))
				Expect(pcloudVpnconnectionsPostOptionsModel.Name).To(Equal(core.StringPtr("VPN-Connection-1")))
				Expect(pcloudVpnconnectionsPostOptionsModel.Networks).To(Equal([]string{"7f950c76-8582-11veb-8dcd-0242ac153", "7f950c76-8582-11veb-8dcd-0242ac144", "7f950c76-8582-11veb-8dcd-0242ac199"}))
				Expect(pcloudVpnconnectionsPostOptionsModel.PeerGatewayAddress).To(Equal(core.StringPtr("192.168.1.1")))
				Expect(pcloudVpnconnectionsPostOptionsModel.PeerSubnets).To(Equal([]string{"128.170.1.0/20", "128.169.1.0/24", "128.168.1.0/27", "128.170.1.0/32"}))
				Expect(pcloudVpnconnectionsPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPcloudVpnconnectionsPutOptions successfully`, func() {
				// Construct an instance of the VPNConnectionUpdate model
				vpnConnectionUpdateModel := new(powervsv1.VPNConnectionUpdate)
				Expect(vpnConnectionUpdateModel).ToNot(BeNil())
				vpnConnectionUpdateModel.IkePolicy = core.StringPtr("c36723ec-8593-11eb-8dcd-0242ac133853")
				vpnConnectionUpdateModel.IPSecPolicy = core.StringPtr("c12345d-8593-11eb-8dcd-0242ac134573")
				vpnConnectionUpdateModel.Name = core.StringPtr("VPN-Connection-1")
				vpnConnectionUpdateModel.PeerGatewayAddress = core.StringPtr("192.168.1.1")
				vpnConnectionUpdateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(vpnConnectionUpdateModel.IkePolicy).To(Equal(core.StringPtr("c36723ec-8593-11eb-8dcd-0242ac133853")))
				Expect(vpnConnectionUpdateModel.IPSecPolicy).To(Equal(core.StringPtr("c12345d-8593-11eb-8dcd-0242ac134573")))
				Expect(vpnConnectionUpdateModel.Name).To(Equal(core.StringPtr("VPN-Connection-1")))
				Expect(vpnConnectionUpdateModel.PeerGatewayAddress).To(Equal(core.StringPtr("192.168.1.1")))
				Expect(vpnConnectionUpdateModel.GetProperties()).ToNot(BeEmpty())
				Expect(vpnConnectionUpdateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				vpnConnectionUpdateModel.SetProperties(nil)
				Expect(vpnConnectionUpdateModel.GetProperties()).To(BeEmpty())

				vpnConnectionUpdateModelExpectedMap := make(map[string]interface{})
				vpnConnectionUpdateModelExpectedMap["foo"] = core.StringPtr("testString")
				vpnConnectionUpdateModel.SetProperties(vpnConnectionUpdateModelExpectedMap)
				vpnConnectionUpdateModelActualMap := vpnConnectionUpdateModel.GetProperties()
				Expect(vpnConnectionUpdateModelActualMap).To(Equal(vpnConnectionUpdateModelExpectedMap))

				// Construct an instance of the PcloudVpnconnectionsPutOptions model
				cloudInstanceID := "testString"
				vpnConnectionID := "testString"
				var body *powervsv1.VPNConnectionUpdate = nil
				pcloudVpnconnectionsPutOptionsModel := powervsService.NewPcloudVpnconnectionsPutOptions(cloudInstanceID, vpnConnectionID, body)
				pcloudVpnconnectionsPutOptionsModel.SetCloudInstanceID("testString")
				pcloudVpnconnectionsPutOptionsModel.SetVPNConnectionID("testString")
				pcloudVpnconnectionsPutOptionsModel.SetBody(vpnConnectionUpdateModel)
				pcloudVpnconnectionsPutOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pcloudVpnconnectionsPutOptionsModel).ToNot(BeNil())
				Expect(pcloudVpnconnectionsPutOptionsModel.CloudInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVpnconnectionsPutOptionsModel.VPNConnectionID).To(Equal(core.StringPtr("testString")))
				Expect(pcloudVpnconnectionsPutOptionsModel.Body).To(Equal(vpnConnectionUpdateModel))
				Expect(pcloudVpnconnectionsPutOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPeeringNetwork successfully`, func() {
				cidr := "testString"
				projectName := "testString"
				_model, err := powervsService.NewPeeringNetwork(cidr, projectName)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSshKey successfully`, func() {
				name := "testString"
				sshKey := "testString"
				_model, err := powervsService.NewSshKey(name, sshKey)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecondary successfully`, func() {
				workspace := "testString"
				_model, err := powervsService.NewSecondary(workspace)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewServiceBindingBindingOptions successfully`, func() {
				// Construct an instance of the ServiceBindingResourceObject model
				serviceBindingResourceObjectModel := new(powervsv1.ServiceBindingResourceObject)
				Expect(serviceBindingResourceObjectModel).ToNot(BeNil())
				serviceBindingResourceObjectModel.AppGuid = core.StringPtr("testString")
				serviceBindingResourceObjectModel.Route = core.StringPtr("testString")
				Expect(serviceBindingResourceObjectModel.AppGuid).To(Equal(core.StringPtr("testString")))
				Expect(serviceBindingResourceObjectModel.Route).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Context model
				contextModel := new(powervsv1.Context)
				Expect(contextModel).ToNot(BeNil())
				contextModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(contextModel.GetProperties()).ToNot(BeEmpty())
				Expect(contextModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				contextModel.SetProperties(nil)
				Expect(contextModel.GetProperties()).To(BeEmpty())

				contextModelExpectedMap := make(map[string]interface{})
				contextModelExpectedMap["foo"] = core.StringPtr("testString")
				contextModel.SetProperties(contextModelExpectedMap)
				contextModelActualMap := contextModel.GetProperties()
				Expect(contextModelActualMap).To(Equal(contextModelExpectedMap))

				// Construct an instance of the Object model
				objectModel := new(powervsv1.Object)
				Expect(objectModel).ToNot(BeNil())
				objectModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(objectModel.GetProperties()).ToNot(BeEmpty())
				Expect(objectModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				objectModel.SetProperties(nil)
				Expect(objectModel.GetProperties()).To(BeEmpty())

				objectModelExpectedMap := make(map[string]interface{})
				objectModelExpectedMap["foo"] = core.StringPtr("testString")
				objectModel.SetProperties(objectModelExpectedMap)
				objectModelActualMap := objectModel.GetProperties()
				Expect(objectModelActualMap).To(Equal(objectModelExpectedMap))

				// Construct an instance of the ServiceBindingBindingOptions model
				xBrokerApiVersion := "testString"
				instanceID := "testString"
				bindingID := "testString"
				serviceBindingBindingOptionsPlanID := "testString"
				serviceBindingBindingOptionsServiceID := "testString"
				serviceBindingBindingOptionsModel := powervsService.NewServiceBindingBindingOptions(xBrokerApiVersion, instanceID, bindingID, serviceBindingBindingOptionsPlanID, serviceBindingBindingOptionsServiceID)
				serviceBindingBindingOptionsModel.SetXBrokerApiVersion("testString")
				serviceBindingBindingOptionsModel.SetInstanceID("testString")
				serviceBindingBindingOptionsModel.SetBindingID("testString")
				serviceBindingBindingOptionsModel.SetPlanID("testString")
				serviceBindingBindingOptionsModel.SetServiceID("testString")
				serviceBindingBindingOptionsModel.SetAppGuid("testString")
				serviceBindingBindingOptionsModel.SetBindResource(serviceBindingResourceObjectModel)
				serviceBindingBindingOptionsModel.SetContext(contextModel)
				serviceBindingBindingOptionsModel.SetParameters(objectModel)
				serviceBindingBindingOptionsModel.SetXBrokerApiOriginatingIdentity("testString")
				serviceBindingBindingOptionsModel.SetAcceptsIncomplete(true)
				serviceBindingBindingOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceBindingBindingOptionsModel).ToNot(BeNil())
				Expect(serviceBindingBindingOptionsModel.XBrokerApiVersion).To(Equal(core.StringPtr("testString")))
				Expect(serviceBindingBindingOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(serviceBindingBindingOptionsModel.BindingID).To(Equal(core.StringPtr("testString")))
				Expect(serviceBindingBindingOptionsModel.PlanID).To(Equal(core.StringPtr("testString")))
				Expect(serviceBindingBindingOptionsModel.ServiceID).To(Equal(core.StringPtr("testString")))
				Expect(serviceBindingBindingOptionsModel.AppGuid).To(Equal(core.StringPtr("testString")))
				Expect(serviceBindingBindingOptionsModel.BindResource).To(Equal(serviceBindingResourceObjectModel))
				Expect(serviceBindingBindingOptionsModel.Context).To(Equal(contextModel))
				Expect(serviceBindingBindingOptionsModel.Parameters).To(Equal(objectModel))
				Expect(serviceBindingBindingOptionsModel.XBrokerApiOriginatingIdentity).To(Equal(core.StringPtr("testString")))
				Expect(serviceBindingBindingOptionsModel.AcceptsIncomplete).To(Equal(core.BoolPtr(true)))
				Expect(serviceBindingBindingOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceBindingGetOptions successfully`, func() {
				// Construct an instance of the ServiceBindingGetOptions model
				xBrokerApiVersion := "testString"
				instanceID := "testString"
				bindingID := "testString"
				serviceBindingGetOptionsModel := powervsService.NewServiceBindingGetOptions(xBrokerApiVersion, instanceID, bindingID)
				serviceBindingGetOptionsModel.SetXBrokerApiVersion("testString")
				serviceBindingGetOptionsModel.SetInstanceID("testString")
				serviceBindingGetOptionsModel.SetBindingID("testString")
				serviceBindingGetOptionsModel.SetXBrokerApiOriginatingIdentity("testString")
				serviceBindingGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceBindingGetOptionsModel).ToNot(BeNil())
				Expect(serviceBindingGetOptionsModel.XBrokerApiVersion).To(Equal(core.StringPtr("testString")))
				Expect(serviceBindingGetOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(serviceBindingGetOptionsModel.BindingID).To(Equal(core.StringPtr("testString")))
				Expect(serviceBindingGetOptionsModel.XBrokerApiOriginatingIdentity).To(Equal(core.StringPtr("testString")))
				Expect(serviceBindingGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceBindingLastOperationGetOptions successfully`, func() {
				// Construct an instance of the ServiceBindingLastOperationGetOptions model
				xBrokerApiVersion := "testString"
				instanceID := "testString"
				bindingID := "testString"
				serviceBindingLastOperationGetOptionsModel := powervsService.NewServiceBindingLastOperationGetOptions(xBrokerApiVersion, instanceID, bindingID)
				serviceBindingLastOperationGetOptionsModel.SetXBrokerApiVersion("testString")
				serviceBindingLastOperationGetOptionsModel.SetInstanceID("testString")
				serviceBindingLastOperationGetOptionsModel.SetBindingID("testString")
				serviceBindingLastOperationGetOptionsModel.SetServiceID("testString")
				serviceBindingLastOperationGetOptionsModel.SetPlanID("testString")
				serviceBindingLastOperationGetOptionsModel.SetOperation("testString")
				serviceBindingLastOperationGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceBindingLastOperationGetOptionsModel).ToNot(BeNil())
				Expect(serviceBindingLastOperationGetOptionsModel.XBrokerApiVersion).To(Equal(core.StringPtr("testString")))
				Expect(serviceBindingLastOperationGetOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(serviceBindingLastOperationGetOptionsModel.BindingID).To(Equal(core.StringPtr("testString")))
				Expect(serviceBindingLastOperationGetOptionsModel.ServiceID).To(Equal(core.StringPtr("testString")))
				Expect(serviceBindingLastOperationGetOptionsModel.PlanID).To(Equal(core.StringPtr("testString")))
				Expect(serviceBindingLastOperationGetOptionsModel.Operation).To(Equal(core.StringPtr("testString")))
				Expect(serviceBindingLastOperationGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceBindingUnbindingOptions successfully`, func() {
				// Construct an instance of the ServiceBindingUnbindingOptions model
				xBrokerApiVersion := "testString"
				instanceID := "testString"
				bindingID := "testString"
				serviceID := "testString"
				planID := "testString"
				serviceBindingUnbindingOptionsModel := powervsService.NewServiceBindingUnbindingOptions(xBrokerApiVersion, instanceID, bindingID, serviceID, planID)
				serviceBindingUnbindingOptionsModel.SetXBrokerApiVersion("testString")
				serviceBindingUnbindingOptionsModel.SetInstanceID("testString")
				serviceBindingUnbindingOptionsModel.SetBindingID("testString")
				serviceBindingUnbindingOptionsModel.SetServiceID("testString")
				serviceBindingUnbindingOptionsModel.SetPlanID("testString")
				serviceBindingUnbindingOptionsModel.SetXBrokerApiOriginatingIdentity("testString")
				serviceBindingUnbindingOptionsModel.SetAcceptsIncomplete(true)
				serviceBindingUnbindingOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceBindingUnbindingOptionsModel).ToNot(BeNil())
				Expect(serviceBindingUnbindingOptionsModel.XBrokerApiVersion).To(Equal(core.StringPtr("testString")))
				Expect(serviceBindingUnbindingOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(serviceBindingUnbindingOptionsModel.BindingID).To(Equal(core.StringPtr("testString")))
				Expect(serviceBindingUnbindingOptionsModel.ServiceID).To(Equal(core.StringPtr("testString")))
				Expect(serviceBindingUnbindingOptionsModel.PlanID).To(Equal(core.StringPtr("testString")))
				Expect(serviceBindingUnbindingOptionsModel.XBrokerApiOriginatingIdentity).To(Equal(core.StringPtr("testString")))
				Expect(serviceBindingUnbindingOptionsModel.AcceptsIncomplete).To(Equal(core.BoolPtr(true)))
				Expect(serviceBindingUnbindingOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceBrokerAuthCallbackOptions successfully`, func() {
				// Construct an instance of the ServiceBrokerAuthCallbackOptions model
				serviceBrokerAuthCallbackOptionsModel := powervsService.NewServiceBrokerAuthCallbackOptions()
				serviceBrokerAuthCallbackOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceBrokerAuthCallbackOptionsModel).ToNot(BeNil())
				Expect(serviceBrokerAuthCallbackOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceBrokerAuthDeviceCodePostOptions successfully`, func() {
				// Construct an instance of the ServiceBrokerAuthDeviceCodePostOptions model
				serviceBrokerAuthDeviceCodePostOptionsModel := powervsService.NewServiceBrokerAuthDeviceCodePostOptions()
				serviceBrokerAuthDeviceCodePostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceBrokerAuthDeviceCodePostOptionsModel).ToNot(BeNil())
				Expect(serviceBrokerAuthDeviceCodePostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceBrokerAuthDeviceTokenPostOptions successfully`, func() {
				// Construct an instance of the ServiceBrokerAuthDeviceTokenPostOptions model
				serviceBrokerAuthDeviceTokenPostOptionsModel := powervsService.NewServiceBrokerAuthDeviceTokenPostOptions()
				serviceBrokerAuthDeviceTokenPostOptionsModel.SetDeviceCode("testString")
				serviceBrokerAuthDeviceTokenPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceBrokerAuthDeviceTokenPostOptionsModel).ToNot(BeNil())
				Expect(serviceBrokerAuthDeviceTokenPostOptionsModel.DeviceCode).To(Equal(core.StringPtr("testString")))
				Expect(serviceBrokerAuthDeviceTokenPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceBrokerAuthInfoTokenOptions successfully`, func() {
				// Construct an instance of the ServiceBrokerAuthInfoTokenOptions model
				serviceBrokerAuthInfoTokenOptionsModel := powervsService.NewServiceBrokerAuthInfoTokenOptions()
				serviceBrokerAuthInfoTokenOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceBrokerAuthInfoTokenOptionsModel).ToNot(BeNil())
				Expect(serviceBrokerAuthInfoTokenOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceBrokerAuthInfoUserOptions successfully`, func() {
				// Construct an instance of the ServiceBrokerAuthInfoUserOptions model
				serviceBrokerAuthInfoUserOptionsModel := powervsService.NewServiceBrokerAuthInfoUserOptions()
				serviceBrokerAuthInfoUserOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceBrokerAuthInfoUserOptionsModel).ToNot(BeNil())
				Expect(serviceBrokerAuthInfoUserOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceBrokerAuthLoginOptions successfully`, func() {
				// Construct an instance of the ServiceBrokerAuthLoginOptions model
				serviceBrokerAuthLoginOptionsModel := powervsService.NewServiceBrokerAuthLoginOptions()
				serviceBrokerAuthLoginOptionsModel.SetUserID("testString")
				serviceBrokerAuthLoginOptionsModel.SetRedirectURL("testString")
				serviceBrokerAuthLoginOptionsModel.SetAccessType("online")
				serviceBrokerAuthLoginOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceBrokerAuthLoginOptionsModel).ToNot(BeNil())
				Expect(serviceBrokerAuthLoginOptionsModel.UserID).To(Equal(core.StringPtr("testString")))
				Expect(serviceBrokerAuthLoginOptionsModel.RedirectURL).To(Equal(core.StringPtr("testString")))
				Expect(serviceBrokerAuthLoginOptionsModel.AccessType).To(Equal(core.StringPtr("online")))
				Expect(serviceBrokerAuthLoginOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceBrokerAuthLogoutOptions successfully`, func() {
				// Construct an instance of the ServiceBrokerAuthLogoutOptions model
				serviceBrokerAuthLogoutOptionsModel := powervsService.NewServiceBrokerAuthLogoutOptions()
				serviceBrokerAuthLogoutOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceBrokerAuthLogoutOptionsModel).ToNot(BeNil())
				Expect(serviceBrokerAuthLogoutOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceBrokerAuthRegistrationCallbackOptions successfully`, func() {
				// Construct an instance of the ServiceBrokerAuthRegistrationCallbackOptions model
				serviceBrokerAuthRegistrationCallbackOptionsModel := powervsService.NewServiceBrokerAuthRegistrationCallbackOptions()
				serviceBrokerAuthRegistrationCallbackOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceBrokerAuthRegistrationCallbackOptionsModel).ToNot(BeNil())
				Expect(serviceBrokerAuthRegistrationCallbackOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceBrokerAuthRegistrationOptions successfully`, func() {
				// Construct an instance of the ServiceBrokerAuthRegistrationOptions model
				tenantID := "testString"
				entitlementID := "testString"
				plan := "testString"
				icn := "testString"
				regions := []string{"testString"}
				serviceBrokerAuthRegistrationOptionsModel := powervsService.NewServiceBrokerAuthRegistrationOptions(tenantID, entitlementID, plan, icn, regions)
				serviceBrokerAuthRegistrationOptionsModel.SetTenantID("testString")
				serviceBrokerAuthRegistrationOptionsModel.SetEntitlementID("testString")
				serviceBrokerAuthRegistrationOptionsModel.SetPlan("testString")
				serviceBrokerAuthRegistrationOptionsModel.SetIcn("testString")
				serviceBrokerAuthRegistrationOptionsModel.SetRegions([]string{"testString"})
				serviceBrokerAuthRegistrationOptionsModel.SetRedirectURL("testString")
				serviceBrokerAuthRegistrationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceBrokerAuthRegistrationOptionsModel).ToNot(BeNil())
				Expect(serviceBrokerAuthRegistrationOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(serviceBrokerAuthRegistrationOptionsModel.EntitlementID).To(Equal(core.StringPtr("testString")))
				Expect(serviceBrokerAuthRegistrationOptionsModel.Plan).To(Equal(core.StringPtr("testString")))
				Expect(serviceBrokerAuthRegistrationOptionsModel.Icn).To(Equal(core.StringPtr("testString")))
				Expect(serviceBrokerAuthRegistrationOptionsModel.Regions).To(Equal([]string{"testString"}))
				Expect(serviceBrokerAuthRegistrationOptionsModel.RedirectURL).To(Equal(core.StringPtr("testString")))
				Expect(serviceBrokerAuthRegistrationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceBrokerAuthTokenPostOptions successfully`, func() {
				// Construct an instance of the ServiceBrokerAuthTokenPostOptions model
				serviceBrokerAuthTokenPostOptionsRefreshToken := "testString"
				serviceBrokerAuthTokenPostOptionsSource := "cli"
				serviceBrokerAuthTokenPostOptionsModel := powervsService.NewServiceBrokerAuthTokenPostOptions(serviceBrokerAuthTokenPostOptionsRefreshToken, serviceBrokerAuthTokenPostOptionsSource)
				serviceBrokerAuthTokenPostOptionsModel.SetRefreshToken("testString")
				serviceBrokerAuthTokenPostOptionsModel.SetSource("cli")
				serviceBrokerAuthTokenPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceBrokerAuthTokenPostOptionsModel).ToNot(BeNil())
				Expect(serviceBrokerAuthTokenPostOptionsModel.RefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(serviceBrokerAuthTokenPostOptionsModel.Source).To(Equal(core.StringPtr("cli")))
				Expect(serviceBrokerAuthTokenPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceBrokerHardwareplatformsGetOptions successfully`, func() {
				// Construct an instance of the ServiceBrokerHardwareplatformsGetOptions model
				serviceBrokerHardwareplatformsGetOptionsModel := powervsService.NewServiceBrokerHardwareplatformsGetOptions()
				serviceBrokerHardwareplatformsGetOptionsModel.SetRegionZone("us-south")
				serviceBrokerHardwareplatformsGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceBrokerHardwareplatformsGetOptionsModel).ToNot(BeNil())
				Expect(serviceBrokerHardwareplatformsGetOptionsModel.RegionZone).To(Equal(core.StringPtr("us-south")))
				Expect(serviceBrokerHardwareplatformsGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceBrokerHealthHeadOptions successfully`, func() {
				// Construct an instance of the ServiceBrokerHealthHeadOptions model
				serviceBrokerHealthHeadOptionsModel := powervsService.NewServiceBrokerHealthHeadOptions()
				serviceBrokerHealthHeadOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceBrokerHealthHeadOptionsModel).ToNot(BeNil())
				Expect(serviceBrokerHealthHeadOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceBrokerHealthOptions successfully`, func() {
				// Construct an instance of the ServiceBrokerHealthOptions model
				serviceBrokerHealthOptionsModel := powervsService.NewServiceBrokerHealthOptions()
				serviceBrokerHealthOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceBrokerHealthOptionsModel).ToNot(BeNil())
				Expect(serviceBrokerHealthOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceBrokerOpenstacksGetOptions successfully`, func() {
				// Construct an instance of the ServiceBrokerOpenstacksGetOptions model
				serviceBrokerOpenstacksGetOptionsModel := powervsService.NewServiceBrokerOpenstacksGetOptions()
				serviceBrokerOpenstacksGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceBrokerOpenstacksGetOptionsModel).ToNot(BeNil())
				Expect(serviceBrokerOpenstacksGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceBrokerOpenstacksHostsGetOptions successfully`, func() {
				// Construct an instance of the ServiceBrokerOpenstacksHostsGetOptions model
				hostname := "testString"
				openstackID := "testString"
				serviceBrokerOpenstacksHostsGetOptionsModel := powervsService.NewServiceBrokerOpenstacksHostsGetOptions(hostname, openstackID)
				serviceBrokerOpenstacksHostsGetOptionsModel.SetHostname("testString")
				serviceBrokerOpenstacksHostsGetOptionsModel.SetOpenstackID("testString")
				serviceBrokerOpenstacksHostsGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceBrokerOpenstacksHostsGetOptionsModel).ToNot(BeNil())
				Expect(serviceBrokerOpenstacksHostsGetOptionsModel.Hostname).To(Equal(core.StringPtr("testString")))
				Expect(serviceBrokerOpenstacksHostsGetOptionsModel.OpenstackID).To(Equal(core.StringPtr("testString")))
				Expect(serviceBrokerOpenstacksHostsGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceBrokerOpenstacksOpenstackGetOptions successfully`, func() {
				// Construct an instance of the ServiceBrokerOpenstacksOpenstackGetOptions model
				openstackID := "testString"
				serviceBrokerOpenstacksOpenstackGetOptionsModel := powervsService.NewServiceBrokerOpenstacksOpenstackGetOptions(openstackID)
				serviceBrokerOpenstacksOpenstackGetOptionsModel.SetOpenstackID("testString")
				serviceBrokerOpenstacksOpenstackGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceBrokerOpenstacksOpenstackGetOptionsModel).ToNot(BeNil())
				Expect(serviceBrokerOpenstacksOpenstackGetOptionsModel.OpenstackID).To(Equal(core.StringPtr("testString")))
				Expect(serviceBrokerOpenstacksOpenstackGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceBrokerOpenstacksPostOptions successfully`, func() {
				// Construct an instance of the ServiceBrokerOpenstacksPostOptions model
				serviceBrokerOpenstacksPostOptionsIPAddress := "testString"
				serviceBrokerOpenstacksPostOptionsName := "testString"
				serviceBrokerOpenstacksPostOptionsRegion := "testString"
				serviceBrokerOpenstacksPostOptionsModel := powervsService.NewServiceBrokerOpenstacksPostOptions(serviceBrokerOpenstacksPostOptionsIPAddress, serviceBrokerOpenstacksPostOptionsName, serviceBrokerOpenstacksPostOptionsRegion)
				serviceBrokerOpenstacksPostOptionsModel.SetIPAddress("testString")
				serviceBrokerOpenstacksPostOptionsModel.SetName("testString")
				serviceBrokerOpenstacksPostOptionsModel.SetRegion("testString")
				serviceBrokerOpenstacksPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceBrokerOpenstacksPostOptionsModel).ToNot(BeNil())
				Expect(serviceBrokerOpenstacksPostOptionsModel.IPAddress).To(Equal(core.StringPtr("testString")))
				Expect(serviceBrokerOpenstacksPostOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(serviceBrokerOpenstacksPostOptionsModel.Region).To(Equal(core.StringPtr("testString")))
				Expect(serviceBrokerOpenstacksPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceBrokerOpenstacksServersGetOptions successfully`, func() {
				// Construct an instance of the ServiceBrokerOpenstacksServersGetOptions model
				openstackID := "testString"
				pvmInstanceID := "testString"
				serviceBrokerOpenstacksServersGetOptionsModel := powervsService.NewServiceBrokerOpenstacksServersGetOptions(openstackID, pvmInstanceID)
				serviceBrokerOpenstacksServersGetOptionsModel.SetOpenstackID("testString")
				serviceBrokerOpenstacksServersGetOptionsModel.SetPvmInstanceID("testString")
				serviceBrokerOpenstacksServersGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceBrokerOpenstacksServersGetOptionsModel).ToNot(BeNil())
				Expect(serviceBrokerOpenstacksServersGetOptionsModel.OpenstackID).To(Equal(core.StringPtr("testString")))
				Expect(serviceBrokerOpenstacksServersGetOptionsModel.PvmInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(serviceBrokerOpenstacksServersGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceBrokerStoragetypesGetOptions successfully`, func() {
				// Construct an instance of the ServiceBrokerStoragetypesGetOptions model
				serviceBrokerStoragetypesGetOptionsModel := powervsService.NewServiceBrokerStoragetypesGetOptions()
				serviceBrokerStoragetypesGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceBrokerStoragetypesGetOptionsModel).ToNot(BeNil())
				Expect(serviceBrokerStoragetypesGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceBrokerSwaggerspecOptions successfully`, func() {
				// Construct an instance of the ServiceBrokerSwaggerspecOptions model
				serviceBrokerSwaggerspecOptionsModel := powervsService.NewServiceBrokerSwaggerspecOptions()
				serviceBrokerSwaggerspecOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceBrokerSwaggerspecOptionsModel).ToNot(BeNil())
				Expect(serviceBrokerSwaggerspecOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceBrokerTestTimeoutOptions successfully`, func() {
				// Construct an instance of the ServiceBrokerTestTimeoutOptions model
				t := int64(38)
				serviceBrokerTestTimeoutOptionsModel := powervsService.NewServiceBrokerTestTimeoutOptions(t)
				serviceBrokerTestTimeoutOptionsModel.SetT(int64(38))
				serviceBrokerTestTimeoutOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceBrokerTestTimeoutOptionsModel).ToNot(BeNil())
				Expect(serviceBrokerTestTimeoutOptionsModel.T).To(Equal(core.Int64Ptr(int64(38))))
				Expect(serviceBrokerTestTimeoutOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceBrokerVersionOptions successfully`, func() {
				// Construct an instance of the ServiceBrokerVersionOptions model
				serviceBrokerVersionOptionsModel := powervsService.NewServiceBrokerVersionOptions()
				serviceBrokerVersionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceBrokerVersionOptionsModel).ToNot(BeNil())
				Expect(serviceBrokerVersionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceInstanceDeprovisionOptions successfully`, func() {
				// Construct an instance of the ServiceInstanceDeprovisionOptions model
				xBrokerApiVersion := "testString"
				instanceID := "testString"
				serviceID := "testString"
				planID := "testString"
				serviceInstanceDeprovisionOptionsModel := powervsService.NewServiceInstanceDeprovisionOptions(xBrokerApiVersion, instanceID, serviceID, planID)
				serviceInstanceDeprovisionOptionsModel.SetXBrokerApiVersion("testString")
				serviceInstanceDeprovisionOptionsModel.SetInstanceID("testString")
				serviceInstanceDeprovisionOptionsModel.SetServiceID("testString")
				serviceInstanceDeprovisionOptionsModel.SetPlanID("testString")
				serviceInstanceDeprovisionOptionsModel.SetXBrokerApiOriginatingIdentity("testString")
				serviceInstanceDeprovisionOptionsModel.SetAcceptsIncomplete(true)
				serviceInstanceDeprovisionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceInstanceDeprovisionOptionsModel).ToNot(BeNil())
				Expect(serviceInstanceDeprovisionOptionsModel.XBrokerApiVersion).To(Equal(core.StringPtr("testString")))
				Expect(serviceInstanceDeprovisionOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(serviceInstanceDeprovisionOptionsModel.ServiceID).To(Equal(core.StringPtr("testString")))
				Expect(serviceInstanceDeprovisionOptionsModel.PlanID).To(Equal(core.StringPtr("testString")))
				Expect(serviceInstanceDeprovisionOptionsModel.XBrokerApiOriginatingIdentity).To(Equal(core.StringPtr("testString")))
				Expect(serviceInstanceDeprovisionOptionsModel.AcceptsIncomplete).To(Equal(core.BoolPtr(true)))
				Expect(serviceInstanceDeprovisionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceInstanceGetOptions successfully`, func() {
				// Construct an instance of the ServiceInstanceGetOptions model
				xBrokerApiVersion := "testString"
				instanceID := "testString"
				serviceInstanceGetOptionsModel := powervsService.NewServiceInstanceGetOptions(xBrokerApiVersion, instanceID)
				serviceInstanceGetOptionsModel.SetXBrokerApiVersion("testString")
				serviceInstanceGetOptionsModel.SetInstanceID("testString")
				serviceInstanceGetOptionsModel.SetXBrokerApiOriginatingIdentity("testString")
				serviceInstanceGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceInstanceGetOptionsModel).ToNot(BeNil())
				Expect(serviceInstanceGetOptionsModel.XBrokerApiVersion).To(Equal(core.StringPtr("testString")))
				Expect(serviceInstanceGetOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(serviceInstanceGetOptionsModel.XBrokerApiOriginatingIdentity).To(Equal(core.StringPtr("testString")))
				Expect(serviceInstanceGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceInstanceLastOperationGetOptions successfully`, func() {
				// Construct an instance of the ServiceInstanceLastOperationGetOptions model
				xBrokerApiVersion := "testString"
				instanceID := "testString"
				serviceInstanceLastOperationGetOptionsModel := powervsService.NewServiceInstanceLastOperationGetOptions(xBrokerApiVersion, instanceID)
				serviceInstanceLastOperationGetOptionsModel.SetXBrokerApiVersion("testString")
				serviceInstanceLastOperationGetOptionsModel.SetInstanceID("testString")
				serviceInstanceLastOperationGetOptionsModel.SetServiceID("testString")
				serviceInstanceLastOperationGetOptionsModel.SetPlanID("testString")
				serviceInstanceLastOperationGetOptionsModel.SetOperation("testString")
				serviceInstanceLastOperationGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceInstanceLastOperationGetOptionsModel).ToNot(BeNil())
				Expect(serviceInstanceLastOperationGetOptionsModel.XBrokerApiVersion).To(Equal(core.StringPtr("testString")))
				Expect(serviceInstanceLastOperationGetOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(serviceInstanceLastOperationGetOptionsModel.ServiceID).To(Equal(core.StringPtr("testString")))
				Expect(serviceInstanceLastOperationGetOptionsModel.PlanID).To(Equal(core.StringPtr("testString")))
				Expect(serviceInstanceLastOperationGetOptionsModel.Operation).To(Equal(core.StringPtr("testString")))
				Expect(serviceInstanceLastOperationGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceInstanceProvisionOptions successfully`, func() {
				// Construct an instance of the Context model
				contextModel := new(powervsv1.Context)
				Expect(contextModel).ToNot(BeNil())
				contextModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(contextModel.GetProperties()).ToNot(BeEmpty())
				Expect(contextModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				contextModel.SetProperties(nil)
				Expect(contextModel.GetProperties()).To(BeEmpty())

				contextModelExpectedMap := make(map[string]interface{})
				contextModelExpectedMap["foo"] = core.StringPtr("testString")
				contextModel.SetProperties(contextModelExpectedMap)
				contextModelActualMap := contextModel.GetProperties()
				Expect(contextModelActualMap).To(Equal(contextModelExpectedMap))

				// Construct an instance of the Object model
				objectModel := new(powervsv1.Object)
				Expect(objectModel).ToNot(BeNil())
				objectModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(objectModel.GetProperties()).ToNot(BeEmpty())
				Expect(objectModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				objectModel.SetProperties(nil)
				Expect(objectModel.GetProperties()).To(BeEmpty())

				objectModelExpectedMap := make(map[string]interface{})
				objectModelExpectedMap["foo"] = core.StringPtr("testString")
				objectModel.SetProperties(objectModelExpectedMap)
				objectModelActualMap := objectModel.GetProperties()
				Expect(objectModelActualMap).To(Equal(objectModelExpectedMap))

				// Construct an instance of the ServiceInstanceProvisionOptions model
				xBrokerApiVersion := "testString"
				instanceID := "testString"
				serviceInstanceProvisionOptionsPlanID := "testString"
				serviceInstanceProvisionOptionsServiceID := "testString"
				serviceInstanceProvisionOptionsModel := powervsService.NewServiceInstanceProvisionOptions(xBrokerApiVersion, instanceID, serviceInstanceProvisionOptionsPlanID, serviceInstanceProvisionOptionsServiceID)
				serviceInstanceProvisionOptionsModel.SetXBrokerApiVersion("testString")
				serviceInstanceProvisionOptionsModel.SetInstanceID("testString")
				serviceInstanceProvisionOptionsModel.SetPlanID("testString")
				serviceInstanceProvisionOptionsModel.SetServiceID("testString")
				serviceInstanceProvisionOptionsModel.SetContext(contextModel)
				serviceInstanceProvisionOptionsModel.SetOrganizationGuid("testString")
				serviceInstanceProvisionOptionsModel.SetParameters(objectModel)
				serviceInstanceProvisionOptionsModel.SetSpaceGuid("testString")
				serviceInstanceProvisionOptionsModel.SetXBrokerApiOriginatingIdentity("testString")
				serviceInstanceProvisionOptionsModel.SetAcceptsIncomplete(true)
				serviceInstanceProvisionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceInstanceProvisionOptionsModel).ToNot(BeNil())
				Expect(serviceInstanceProvisionOptionsModel.XBrokerApiVersion).To(Equal(core.StringPtr("testString")))
				Expect(serviceInstanceProvisionOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(serviceInstanceProvisionOptionsModel.PlanID).To(Equal(core.StringPtr("testString")))
				Expect(serviceInstanceProvisionOptionsModel.ServiceID).To(Equal(core.StringPtr("testString")))
				Expect(serviceInstanceProvisionOptionsModel.Context).To(Equal(contextModel))
				Expect(serviceInstanceProvisionOptionsModel.OrganizationGuid).To(Equal(core.StringPtr("testString")))
				Expect(serviceInstanceProvisionOptionsModel.Parameters).To(Equal(objectModel))
				Expect(serviceInstanceProvisionOptionsModel.SpaceGuid).To(Equal(core.StringPtr("testString")))
				Expect(serviceInstanceProvisionOptionsModel.XBrokerApiOriginatingIdentity).To(Equal(core.StringPtr("testString")))
				Expect(serviceInstanceProvisionOptionsModel.AcceptsIncomplete).To(Equal(core.BoolPtr(true)))
				Expect(serviceInstanceProvisionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewServiceInstanceUpdateOptions successfully`, func() {
				// Construct an instance of the Context model
				contextModel := new(powervsv1.Context)
				Expect(contextModel).ToNot(BeNil())
				contextModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(contextModel.GetProperties()).ToNot(BeEmpty())
				Expect(contextModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				contextModel.SetProperties(nil)
				Expect(contextModel.GetProperties()).To(BeEmpty())

				contextModelExpectedMap := make(map[string]interface{})
				contextModelExpectedMap["foo"] = core.StringPtr("testString")
				contextModel.SetProperties(contextModelExpectedMap)
				contextModelActualMap := contextModel.GetProperties()
				Expect(contextModelActualMap).To(Equal(contextModelExpectedMap))

				// Construct an instance of the Object model
				objectModel := new(powervsv1.Object)
				Expect(objectModel).ToNot(BeNil())
				objectModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(objectModel.GetProperties()).ToNot(BeEmpty())
				Expect(objectModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				objectModel.SetProperties(nil)
				Expect(objectModel.GetProperties()).To(BeEmpty())

				objectModelExpectedMap := make(map[string]interface{})
				objectModelExpectedMap["foo"] = core.StringPtr("testString")
				objectModel.SetProperties(objectModelExpectedMap)
				objectModelActualMap := objectModel.GetProperties()
				Expect(objectModelActualMap).To(Equal(objectModelExpectedMap))

				// Construct an instance of the ServiceInstancePreviousValues model
				serviceInstancePreviousValuesModel := new(powervsv1.ServiceInstancePreviousValues)
				Expect(serviceInstancePreviousValuesModel).ToNot(BeNil())
				serviceInstancePreviousValuesModel.OrganizationID = core.StringPtr("testString")
				serviceInstancePreviousValuesModel.PlanID = core.StringPtr("testString")
				serviceInstancePreviousValuesModel.ServiceID = core.StringPtr("testString")
				serviceInstancePreviousValuesModel.SpaceID = core.StringPtr("testString")
				Expect(serviceInstancePreviousValuesModel.OrganizationID).To(Equal(core.StringPtr("testString")))
				Expect(serviceInstancePreviousValuesModel.PlanID).To(Equal(core.StringPtr("testString")))
				Expect(serviceInstancePreviousValuesModel.ServiceID).To(Equal(core.StringPtr("testString")))
				Expect(serviceInstancePreviousValuesModel.SpaceID).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ServiceInstanceUpdateOptions model
				xBrokerApiVersion := "testString"
				instanceID := "testString"
				serviceInstanceUpdateOptionsServiceID := "testString"
				serviceInstanceUpdateOptionsModel := powervsService.NewServiceInstanceUpdateOptions(xBrokerApiVersion, instanceID, serviceInstanceUpdateOptionsServiceID)
				serviceInstanceUpdateOptionsModel.SetXBrokerApiVersion("testString")
				serviceInstanceUpdateOptionsModel.SetInstanceID("testString")
				serviceInstanceUpdateOptionsModel.SetServiceID("testString")
				serviceInstanceUpdateOptionsModel.SetContext(contextModel)
				serviceInstanceUpdateOptionsModel.SetParameters(objectModel)
				serviceInstanceUpdateOptionsModel.SetPlanID("testString")
				serviceInstanceUpdateOptionsModel.SetPreviousValues(serviceInstancePreviousValuesModel)
				serviceInstanceUpdateOptionsModel.SetXBrokerApiOriginatingIdentity("testString")
				serviceInstanceUpdateOptionsModel.SetAcceptsIncomplete(true)
				serviceInstanceUpdateOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(serviceInstanceUpdateOptionsModel).ToNot(BeNil())
				Expect(serviceInstanceUpdateOptionsModel.XBrokerApiVersion).To(Equal(core.StringPtr("testString")))
				Expect(serviceInstanceUpdateOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(serviceInstanceUpdateOptionsModel.ServiceID).To(Equal(core.StringPtr("testString")))
				Expect(serviceInstanceUpdateOptionsModel.Context).To(Equal(contextModel))
				Expect(serviceInstanceUpdateOptionsModel.Parameters).To(Equal(objectModel))
				Expect(serviceInstanceUpdateOptionsModel.PlanID).To(Equal(core.StringPtr("testString")))
				Expect(serviceInstanceUpdateOptionsModel.PreviousValues).To(Equal(serviceInstancePreviousValuesModel))
				Expect(serviceInstanceUpdateOptionsModel.XBrokerApiOriginatingIdentity).To(Equal(core.StringPtr("testString")))
				Expect(serviceInstanceUpdateOptionsModel.AcceptsIncomplete).To(Equal(core.BoolPtr(true)))
				Expect(serviceInstanceUpdateOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV1AvailableHostsOptions successfully`, func() {
				// Construct an instance of the V1AvailableHostsOptions model
				v1AvailableHostsOptionsModel := powervsService.NewV1AvailableHostsOptions()
				v1AvailableHostsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v1AvailableHostsOptionsModel).ToNot(BeNil())
				Expect(v1AvailableHostsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV1DatacentersGetOptions successfully`, func() {
				// Construct an instance of the V1DatacentersGetOptions model
				datacenterRegion := "testString"
				v1DatacentersGetOptionsModel := powervsService.NewV1DatacentersGetOptions(datacenterRegion)
				v1DatacentersGetOptionsModel.SetDatacenterRegion("testString")
				v1DatacentersGetOptionsModel.SetAccept("application/json")
				v1DatacentersGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v1DatacentersGetOptionsModel).ToNot(BeNil())
				Expect(v1DatacentersGetOptionsModel.DatacenterRegion).To(Equal(core.StringPtr("testString")))
				Expect(v1DatacentersGetOptionsModel.Accept).To(Equal(core.StringPtr("application/json")))
				Expect(v1DatacentersGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV1DatacentersGetallOptions successfully`, func() {
				// Construct an instance of the V1DatacentersGetallOptions model
				v1DatacentersGetallOptionsModel := powervsService.NewV1DatacentersGetallOptions()
				v1DatacentersGetallOptionsModel.SetAccept("application/json")
				v1DatacentersGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v1DatacentersGetallOptionsModel).ToNot(BeNil())
				Expect(v1DatacentersGetallOptionsModel.Accept).To(Equal(core.StringPtr("application/json")))
				Expect(v1DatacentersGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV1HostgroupsGetOptions successfully`, func() {
				// Construct an instance of the V1HostgroupsGetOptions model
				v1HostgroupsGetOptionsModel := powervsService.NewV1HostgroupsGetOptions()
				v1HostgroupsGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v1HostgroupsGetOptionsModel).ToNot(BeNil())
				Expect(v1HostgroupsGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV1HostgroupsIDGetOptions successfully`, func() {
				// Construct an instance of the V1HostgroupsIDGetOptions model
				hostgroupID := "testString"
				v1HostgroupsIDGetOptionsModel := powervsService.NewV1HostgroupsIDGetOptions(hostgroupID)
				v1HostgroupsIDGetOptionsModel.SetHostgroupID("testString")
				v1HostgroupsIDGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v1HostgroupsIDGetOptionsModel).ToNot(BeNil())
				Expect(v1HostgroupsIDGetOptionsModel.HostgroupID).To(Equal(core.StringPtr("testString")))
				Expect(v1HostgroupsIDGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV1HostgroupsIDPutOptions successfully`, func() {
				// Construct an instance of the Secondary model
				secondaryModel := new(powervsv1.Secondary)
				Expect(secondaryModel).ToNot(BeNil())
				secondaryModel.Name = core.StringPtr("testString")
				secondaryModel.Workspace = core.StringPtr("testString")
				Expect(secondaryModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(secondaryModel.Workspace).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the V1HostgroupsIDPutOptions model
				hostgroupID := "testString"
				v1HostgroupsIDPutOptionsModel := powervsService.NewV1HostgroupsIDPutOptions(hostgroupID)
				v1HostgroupsIDPutOptionsModel.SetHostgroupID("testString")
				v1HostgroupsIDPutOptionsModel.SetAdd([]powervsv1.Secondary{*secondaryModel})
				v1HostgroupsIDPutOptionsModel.SetRemove("testString")
				v1HostgroupsIDPutOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v1HostgroupsIDPutOptionsModel).ToNot(BeNil())
				Expect(v1HostgroupsIDPutOptionsModel.HostgroupID).To(Equal(core.StringPtr("testString")))
				Expect(v1HostgroupsIDPutOptionsModel.Add).To(Equal([]powervsv1.Secondary{*secondaryModel}))
				Expect(v1HostgroupsIDPutOptionsModel.Remove).To(Equal(core.StringPtr("testString")))
				Expect(v1HostgroupsIDPutOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV1HostgroupsPostOptions successfully`, func() {
				// Construct an instance of the AddHost model
				addHostModel := new(powervsv1.AddHost)
				Expect(addHostModel).ToNot(BeNil())
				addHostModel.DisplayName = core.StringPtr("testString")
				addHostModel.SysType = core.StringPtr("testString")
				Expect(addHostModel.DisplayName).To(Equal(core.StringPtr("testString")))
				Expect(addHostModel.SysType).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Secondary model
				secondaryModel := new(powervsv1.Secondary)
				Expect(secondaryModel).ToNot(BeNil())
				secondaryModel.Name = core.StringPtr("testString")
				secondaryModel.Workspace = core.StringPtr("testString")
				Expect(secondaryModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(secondaryModel.Workspace).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the V1HostgroupsPostOptions model
				v1HostgroupsPostOptionsHosts := []powervsv1.AddHost{}
				v1HostgroupsPostOptionsName := "testString"
				v1HostgroupsPostOptionsModel := powervsService.NewV1HostgroupsPostOptions(v1HostgroupsPostOptionsHosts, v1HostgroupsPostOptionsName)
				v1HostgroupsPostOptionsModel.SetHosts([]powervsv1.AddHost{*addHostModel})
				v1HostgroupsPostOptionsModel.SetName("testString")
				v1HostgroupsPostOptionsModel.SetSecondaries([]powervsv1.Secondary{*secondaryModel})
				v1HostgroupsPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v1HostgroupsPostOptionsModel).ToNot(BeNil())
				Expect(v1HostgroupsPostOptionsModel.Hosts).To(Equal([]powervsv1.AddHost{*addHostModel}))
				Expect(v1HostgroupsPostOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(v1HostgroupsPostOptionsModel.Secondaries).To(Equal([]powervsv1.Secondary{*secondaryModel}))
				Expect(v1HostgroupsPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV1HostsGetOptions successfully`, func() {
				// Construct an instance of the V1HostsGetOptions model
				v1HostsGetOptionsModel := powervsService.NewV1HostsGetOptions()
				v1HostsGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v1HostsGetOptionsModel).ToNot(BeNil())
				Expect(v1HostsGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV1HostsIDDeleteOptions successfully`, func() {
				// Construct an instance of the V1HostsIDDeleteOptions model
				hostID := "testString"
				v1HostsIDDeleteOptionsModel := powervsService.NewV1HostsIDDeleteOptions(hostID)
				v1HostsIDDeleteOptionsModel.SetHostID("testString")
				v1HostsIDDeleteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v1HostsIDDeleteOptionsModel).ToNot(BeNil())
				Expect(v1HostsIDDeleteOptionsModel.HostID).To(Equal(core.StringPtr("testString")))
				Expect(v1HostsIDDeleteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV1HostsIDGetOptions successfully`, func() {
				// Construct an instance of the V1HostsIDGetOptions model
				hostID := "testString"
				v1HostsIDGetOptionsModel := powervsService.NewV1HostsIDGetOptions(hostID)
				v1HostsIDGetOptionsModel.SetHostID("testString")
				v1HostsIDGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v1HostsIDGetOptionsModel).ToNot(BeNil())
				Expect(v1HostsIDGetOptionsModel.HostID).To(Equal(core.StringPtr("testString")))
				Expect(v1HostsIDGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV1HostsIDPutOptions successfully`, func() {
				// Construct an instance of the V1HostsIDPutOptions model
				hostID := "testString"
				v1HostsIDPutOptionsDisplayName := "testString"
				v1HostsIDPutOptionsModel := powervsService.NewV1HostsIDPutOptions(hostID, v1HostsIDPutOptionsDisplayName)
				v1HostsIDPutOptionsModel.SetHostID("testString")
				v1HostsIDPutOptionsModel.SetDisplayName("testString")
				v1HostsIDPutOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v1HostsIDPutOptionsModel).ToNot(BeNil())
				Expect(v1HostsIDPutOptionsModel.HostID).To(Equal(core.StringPtr("testString")))
				Expect(v1HostsIDPutOptionsModel.DisplayName).To(Equal(core.StringPtr("testString")))
				Expect(v1HostsIDPutOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV1HostsPostOptions successfully`, func() {
				// Construct an instance of the AddHost model
				addHostModel := new(powervsv1.AddHost)
				Expect(addHostModel).ToNot(BeNil())
				addHostModel.DisplayName = core.StringPtr("testString")
				addHostModel.SysType = core.StringPtr("testString")
				Expect(addHostModel.DisplayName).To(Equal(core.StringPtr("testString")))
				Expect(addHostModel.SysType).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the V1HostsPostOptions model
				var v1HostsPostOptionsHost *powervsv1.AddHost = nil
				v1HostsPostOptionsHostgroupID := "testString"
				v1HostsPostOptionsModel := powervsService.NewV1HostsPostOptions(v1HostsPostOptionsHost, v1HostsPostOptionsHostgroupID)
				v1HostsPostOptionsModel.SetHost(addHostModel)
				v1HostsPostOptionsModel.SetHostgroupID("testString")
				v1HostsPostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v1HostsPostOptionsModel).ToNot(BeNil())
				Expect(v1HostsPostOptionsModel.Host).To(Equal(addHostModel))
				Expect(v1HostsPostOptionsModel.HostgroupID).To(Equal(core.StringPtr("testString")))
				Expect(v1HostsPostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV1WorkspacesGetOptions successfully`, func() {
				// Construct an instance of the V1WorkspacesGetOptions model
				workspaceID := "testString"
				v1WorkspacesGetOptionsModel := powervsService.NewV1WorkspacesGetOptions(workspaceID)
				v1WorkspacesGetOptionsModel.SetWorkspaceID("testString")
				v1WorkspacesGetOptionsModel.SetAccept("application/json")
				v1WorkspacesGetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v1WorkspacesGetOptionsModel).ToNot(BeNil())
				Expect(v1WorkspacesGetOptionsModel.WorkspaceID).To(Equal(core.StringPtr("testString")))
				Expect(v1WorkspacesGetOptionsModel.Accept).To(Equal(core.StringPtr("application/json")))
				Expect(v1WorkspacesGetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV1WorkspacesGetallOptions successfully`, func() {
				// Construct an instance of the V1WorkspacesGetallOptions model
				v1WorkspacesGetallOptionsModel := powervsService.NewV1WorkspacesGetallOptions()
				v1WorkspacesGetallOptionsModel.SetAccept("application/json")
				v1WorkspacesGetallOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v1WorkspacesGetallOptionsModel).ToNot(BeNil())
				Expect(v1WorkspacesGetallOptionsModel.Accept).To(Equal(core.StringPtr("application/json")))
				Expect(v1WorkspacesGetallOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewVirtualCores successfully`, func() {
				assigned := int64(38)
				_model, err := powervsService.NewVirtualCores(assigned)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumeGroupActionReset successfully`, func() {
				status := "available"
				_model, err := powervsService.NewVolumeGroupActionReset(status)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumeGroupActionStart successfully`, func() {
				source := "master"
				_model, err := powervsService.NewVolumeGroupActionStart(source)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumeGroupActionStop successfully`, func() {
				access := true
				_model, err := powervsService.NewVolumeGroupActionStop(access)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
		})
	})
	Describe(`Utility function tests`, func() {
		It(`Invoke CreateMockByteArray() successfully`, func() {
			mockByteArray := CreateMockByteArray("This is a test")
			Expect(mockByteArray).ToNot(BeNil())
		})
		It(`Invoke CreateMockUUID() successfully`, func() {
			mockUUID := CreateMockUUID("9fab83da-98cb-4f18-a7ba-b6f0435c9673")
			Expect(mockUUID).ToNot(BeNil())
		})
		It(`Invoke CreateMockReader() successfully`, func() {
			mockReader := CreateMockReader("This is a test.")
			Expect(mockReader).ToNot(BeNil())
		})
		It(`Invoke CreateMockDate() successfully`, func() {
			mockDate := CreateMockDate("2019-01-01")
			Expect(mockDate).ToNot(BeNil())
		})
		It(`Invoke CreateMockDateTime() successfully`, func() {
			mockDateTime := CreateMockDateTime("2019-01-01T12:00:00.000Z")
			Expect(mockDateTime).ToNot(BeNil())
		})
	})
})

//
// Utility functions used by the generated test code
//

func CreateMockByteArray(mockData string) *[]byte {
	ba := make([]byte, 0)
	ba = append(ba, mockData...)
	return &ba
}

func CreateMockUUID(mockData string) *strfmt.UUID {
	uuid := strfmt.UUID(mockData)
	return &uuid
}

func CreateMockReader(mockData string) io.ReadCloser {
	return io.NopCloser(bytes.NewReader([]byte(mockData)))
}

func CreateMockDate(mockData string) *strfmt.Date {
	d, err := core.ParseDate(mockData)
	if err != nil {
		return nil
	}
	return &d
}

func CreateMockDateTime(mockData string) *strfmt.DateTime {
	d, err := core.ParseDateTime(mockData)
	if err != nil {
		return nil
	}
	return &d
}

func SetTestEnvironment(testEnvironment map[string]string) {
	for key, value := range testEnvironment {
		os.Setenv(key, value)
	}
}

func ClearTestEnvironment(testEnvironment map[string]string) {
	for key := range testEnvironment {
		os.Unsetenv(key)
	}
}
